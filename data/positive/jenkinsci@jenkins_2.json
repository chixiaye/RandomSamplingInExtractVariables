{
  "id" : 2,
  "expression" : "4L * 1024 * 1024 * 1024 + 2",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "b629c43c35ed3cf8a64f1513efc44f92ea81e000",
  "filePath" : "core/src/test/java/hudson/util/io/ZipArchiverTest.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "4L * 1024 * 1024* 1024 + 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 55,
      "startColumnNumber" : 32,
      "endLineNumber" : 55,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 59
      },
      "nodeContext" : "largeFile.setLength(4L * 1024 * 1024* 1024 + 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 61
      },
      "nodeContext" : "largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 54,
        "startColumnNumber" : 89,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n  largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n}\n catch (IOException e) {\n  Assume.assumeNoException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 50,
        "startColumnNumber" : 51,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long 4L * 1024 * 1024* 1024 + 2=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1087,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void huge64bitFile() throws IOException {\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long 4L * 1024 * 1024* 1024 + 2=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 10
    } ],
    "tokenLength" : 8,
    "type" : "long"
  }, {
    "nodeContext" : "4L * 1024 * 1024* 1024 + 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 74,
      "startColumnNumber" : 25,
      "endLineNumber" : 74,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 70,
        "startColumnNumber" : 68,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(1,zipFileVerify.size());\n  ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n  assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n  assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n  assertEquals(1,zipFileVerify.size());\n  ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n  assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n  assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n}\n catch (ZipException e) {\n  if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n    Assume.assumeNoException(e);\n  }\n else {\n    throw e;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 50,
        "startColumnNumber" : 51,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long 4L * 1024 * 1024* 1024 + 2=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1087,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void huge64bitFile() throws IOException {\n  Path hugeFile=tmp.newFolder().toPath().resolve(\"huge64bitFileTest.txt\");\n  long 4L * 1024 * 1024* 1024 + 2=4L * 1024 * 1024* 1024 + 2;\n  try (RandomAccessFile largeFile=new RandomAccessFile(hugeFile.toFile(),\"rw\")){\n    largeFile.setLength(4L * 1024 * 1024* 1024 + 2);\n  }\n catch (  IOException e) {\n    Assume.assumeNoException(e);\n  }\n  Path zipFile=Files.createTempFile(tmp.getRoot().toPath(),\"test\",\".zip\");\n  try (ZipArchiver archiver=new ZipArchiver(Files.newOutputStream(zipFile))){\n    archiver.visit(hugeFile.toFile(),\"huge64bitFileTest.txt\");\n  }\n   try (ZipFile zipFileVerify=new ZipFile(zipFile.toFile())){\n    assertEquals(1,zipFileVerify.size());\n    ZipEntry zipEntry=zipFileVerify.entries().nextElement();\n    assertEquals(\"huge64bitFileTest.txt\",zipEntry.getName());\n    assertEquals(4L * 1024 * 1024* 1024 + 2,zipEntry.getSize());\n  }\n catch (  ZipException e) {\n    if (e.getMessage().contains(\"invalid CEN header (bad signature)\")) {\n      Assume.assumeNoException(e);\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 10
    } ],
    "tokenLength" : 8,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 55,
    "startColumnNumber" : 32,
    "endLineNumber" : 55,
    "endColumnNumber" : 58
  }, {
    "charLength" : 26,
    "startLineNumber" : 74,
    "startColumnNumber" : 25,
    "endLineNumber" : 74,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}