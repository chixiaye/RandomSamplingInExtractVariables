{
  "id" : 10,
  "expression" : "packageName + \".\" + InjectionBase.class.getSimpleName() + \"$\" + injectonBaseSuffix",
  "projectName" : "mockito@mockito",
  "commitID" : "74b87089ddc9abc183317e2a9cb75efb48d502fe",
  "filePath" : "src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 80,
      "startLineNumber" : 100,
      "startColumnNumber" : 54,
      "endLineNumber" : 100,
      "endColumnNumber" : 134
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 100,
        "startColumnNumber" : 40,
        "endLineNumber" : 100,
        "endColumnNumber" : 153
      },
      "nodeContext" : "Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 100,
        "startColumnNumber" : 33,
        "endLineNumber" : 100,
        "endColumnNumber" : 151
      },
      "nodeContext" : "type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 100,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 153
      },
      "nodeContext" : "Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 99,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n  if (type.getClassLoader() == classLoader) {\n    return type;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 99,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n  if (type.getClassLoader() == classLoader) {\n    return type;\n  }\n}\n catch (Exception ignored) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 97,
        "startColumnNumber" : 36,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n  try {\n    Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n    if (type.getClassLoader() == classLoader) {\n      return type;\n    }\n  }\n catch (  Exception ignored) {\n  }\n  return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "synchronized (this) {\n  String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n  try {\n    Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n    if (type.getClassLoader() == classLoader) {\n      return type;\n    }\n  }\n catch (  Exception ignored) {\n  }\n  return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 96,
        "startColumnNumber" : 19,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nsynchronized (this) {\n    String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n    try {\n      Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n      if (type.getClassLoader() == classLoader) {\n        return type;\n      }\n    }\n catch (    Exception ignored) {\n    }\n    return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 981,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n  return InjectionBase.class;\n}\n else {\nsynchronized (this) {\n    String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n    try {\n      Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n      if (type.getClassLoader() == classLoader) {\n        return type;\n      }\n    }\n catch (    Exception ignored) {\n    }\n    return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 92,
        "startColumnNumber" : 73,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String packageName=typeName.substring(0,typeName.lastIndexOf('.'));\n  if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n    return InjectionBase.class;\n  }\n else {\nsynchronized (this) {\n      String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n      try {\n        Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n        if (type.getClassLoader() == classLoader) {\n          return type;\n        }\n      }\n catch (      Exception ignored) {\n      }\n      return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override Class<?> injectionBase(ClassLoader classLoader,String typeName){\n  String packageName=typeName.substring(0,typeName.lastIndexOf('.'));\n  if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n    return InjectionBase.class;\n  }\n else {\nsynchronized (this) {\n      String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n      try {\n        Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n        if (type.getClassLoader() == classLoader) {\n          return type;\n        }\n      }\n catch (      Exception ignored) {\n      }\n      return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 16
    } ],
    "tokenLength" : 8,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 80,
      "startLineNumber" : 107,
      "startColumnNumber" : 30,
      "endLineNumber" : 107,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 107,
        "endColumnNumber" : 35
      },
      "nodeContext" : "byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 31
      },
      "nodeContext" : "byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 109,
        "endColumnNumber" : 107
      },
      "nodeContext" : "byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 110,
        "endColumnNumber" : 36
      },
      "nodeContext" : "byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 110,
        "endColumnNumber" : 37
      },
      "nodeContext" : "return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 97,
        "startColumnNumber" : 36,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n  try {\n    Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n    if (type.getClassLoader() == classLoader) {\n      return type;\n    }\n  }\n catch (  Exception ignored) {\n  }\n  return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "synchronized (this) {\n  String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n  try {\n    Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n    if (type.getClassLoader() == classLoader) {\n      return type;\n    }\n  }\n catch (  Exception ignored) {\n  }\n  return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 96,
        "startColumnNumber" : 19,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nsynchronized (this) {\n    String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n    try {\n      Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n      if (type.getClassLoader() == classLoader) {\n        return type;\n      }\n    }\n catch (    Exception ignored) {\n    }\n    return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 981,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n  return InjectionBase.class;\n}\n else {\nsynchronized (this) {\n    String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n    try {\n      Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n      if (type.getClassLoader() == classLoader) {\n        return type;\n      }\n    }\n catch (    Exception ignored) {\n    }\n    return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 92,
        "startColumnNumber" : 73,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String packageName=typeName.substring(0,typeName.lastIndexOf('.'));\n  if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n    return InjectionBase.class;\n  }\n else {\nsynchronized (this) {\n      String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n      try {\n        Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n        if (type.getClassLoader() == classLoader) {\n          return type;\n        }\n      }\n catch (      Exception ignored) {\n      }\n      return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override Class<?> injectionBase(ClassLoader classLoader,String typeName){\n  String packageName=typeName.substring(0,typeName.lastIndexOf('.'));\n  if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {\n    return InjectionBase.class;\n  }\n else {\nsynchronized (this) {\n      String packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix=packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix;\n      try {\n        Class<?> type=Class.forName(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix,false,classLoader);\n        if (type.getClassLoader() == classLoader) {\n          return type;\n        }\n      }\n catch (      Exception ignored) {\n      }\n      return byteBuddy.subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix(packageName + \".\" + InjectionBase.class.getSimpleName()+ \"$\"+ injectonBaseSuffix).make().load(classLoader,loader.resolveStrategy(InjectionBase.class,classLoader,false)).getLoaded();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 16
    } ],
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 80,
    "startLineNumber" : 100,
    "startColumnNumber" : 54,
    "endLineNumber" : 100,
    "endColumnNumber" : 134
  }, {
    "charLength" : 80,
    "startLineNumber" : 107,
    "startColumnNumber" : 30,
    "endLineNumber" : 107,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ ]
}