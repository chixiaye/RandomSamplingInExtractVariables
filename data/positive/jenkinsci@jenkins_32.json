{
  "id" : 32,
  "expression" : "framelen + 1 - actuallyRead",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "5b5040298f5fbf9d5ff7ea7fbfd34f7169e94d75",
  "filePath" : "cli/src/main/java/hudson/cli/PlainCLIProtocol.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "framelen + 1 - actuallyRead",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 146,
      "startColumnNumber" : 28,
      "endLineNumber" : 146,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 146,
        "startColumnNumber" : 28,
        "endLineNumber" : 146,
        "endColumnNumber" : 59
      },
      "nodeContext" : "framelen + 1 - actuallyRead > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (framelen + 1 - actuallyRead > 0) {\n  LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n  IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 143,
        "startColumnNumber" : 30,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  long actuallyRead=cis.getByteCount() - start;\n  long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n  if (framelen + 1 - actuallyRead > 0) {\n    LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n    IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 138,
        "startColumnNumber" : 20,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n}\n catch (ProtocolException x) {\n  LOGGER.log(Level.WARNING,null,x);\n}\n finally {\n  long actuallyRead=cis.getByteCount() - start;\n  long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n  if (framelen + 1 - actuallyRead > 0) {\n    LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n    IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 124,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n    if (framelen + 1 - actuallyRead > 0) {\n      LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n      IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 124,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (true) {\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n    if (framelen + 1 - actuallyRead > 0) {\n      LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n      IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 129,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n      if (framelen + 1 - actuallyRead > 0) {\n        LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n        IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1287,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n      if (framelen + 1 - actuallyRead > 0) {\n        LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n        IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1383,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n        if (framelen + 1 - actuallyRead > 0) {\n          LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n          IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1410,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n        if (framelen + 1 - actuallyRead > 0) {\n          LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n          IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "tokenLength" : 5,
    "type" : "long"
  }, {
    "nodeContext" : "framelen + 1 - actuallyRead",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 147,
      "startColumnNumber" : 67,
      "endLineNumber" : 147,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 147,
        "startColumnNumber" : 49,
        "endLineNumber" : 147,
        "endColumnNumber" : 105
      },
      "nodeContext" : "\"Did not read \" + framelen + 1 - actuallyRead + \" bytes\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 147,
        "startColumnNumber" : 43,
        "endLineNumber" : 147,
        "endColumnNumber" : 105
      },
      "nodeContext" : "() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\"",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    } ],
    "tokenLength" : 5,
    "type" : "long"
  }, {
    "nodeContext" : "framelen + 1 - actuallyRead",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 148,
      "startColumnNumber" : 51,
      "endLineNumber" : 148,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 148,
        "startColumnNumber" : 28,
        "endLineNumber" : 148,
        "endColumnNumber" : 78
      },
      "nodeContext" : "IOUtils.skipFully(dis,framelen + 1 - actuallyRead)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 148,
        "startColumnNumber" : 28,
        "endLineNumber" : 148,
        "endColumnNumber" : 80
      },
      "nodeContext" : "IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 146,
        "startColumnNumber" : 40,
        "endLineNumber" : 149,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n  IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (framelen + 1 - actuallyRead > 0) {\n  LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n  IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 143,
        "startColumnNumber" : 30,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  long actuallyRead=cis.getByteCount() - start;\n  long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n  if (framelen + 1 - actuallyRead > 0) {\n    LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n    IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 138,
        "startColumnNumber" : 20,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n}\n catch (ProtocolException x) {\n  LOGGER.log(Level.WARNING,null,x);\n}\n finally {\n  long actuallyRead=cis.getByteCount() - start;\n  long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n  if (framelen + 1 - actuallyRead > 0) {\n    LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n    IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 124,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n    if (framelen + 1 - actuallyRead > 0) {\n      LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n      IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 124,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (true) {\n  LOGGER.finest(\"reading frame\");\n  int framelen;\n  try {\n    framelen=dis.readInt();\n  }\n catch (  EOFException x) {\n    side.handleClose();\n    break;\n  }\n  if (framelen < 0) {\n    throw new IOException(\"corrupt stream: negative frame length\");\n  }\n  LOGGER.finest(\"read frame length \" + framelen);\n  long start=cis.getByteCount();\n  try {\n    side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n  }\n catch (  ProtocolException x) {\n    LOGGER.log(Level.WARNING,null,x);\n  }\n finally {\n    long actuallyRead=cis.getByteCount() - start;\n    long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n    if (framelen + 1 - actuallyRead > 0) {\n      LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n      IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 129,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n      if (framelen + 1 - actuallyRead > 0) {\n        LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n        IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1287,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    LOGGER.finest(\"reading frame\");\n    int framelen;\n    try {\n      framelen=dis.readInt();\n    }\n catch (    EOFException x) {\n      side.handleClose();\n      break;\n    }\n    if (framelen < 0) {\n      throw new IOException(\"corrupt stream: negative frame length\");\n    }\n    LOGGER.finest(\"read frame length \" + framelen);\n    long start=cis.getByteCount();\n    try {\n      side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n    }\n catch (    ProtocolException x) {\n      LOGGER.log(Level.WARNING,null,x);\n    }\n finally {\n      long actuallyRead=cis.getByteCount() - start;\n      long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n      if (framelen + 1 - actuallyRead > 0) {\n        LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n        IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n      }\n    }\n  }\n}\n catch (ClosedChannelException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (IOException x) {\n  LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n}\ncatch (ReadPendingException x) {\n  LOGGER.log(Level.FINE,null,x);\n  side.handleClose();\n}\ncatch (RuntimeException x) {\n  LOGGER.log(Level.WARNING,null,x);\n  side.handleClose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1383,
        "startLineNumber" : 122,
        "startColumnNumber" : 26,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n        if (framelen + 1 - actuallyRead > 0) {\n          LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n          IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 208,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1410,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  try {\n    while (true) {\n      LOGGER.finest(\"reading frame\");\n      int framelen;\n      try {\n        framelen=dis.readInt();\n      }\n catch (      EOFException x) {\n        side.handleClose();\n        break;\n      }\n      if (framelen < 0) {\n        throw new IOException(\"corrupt stream: negative frame length\");\n      }\n      LOGGER.finest(\"read frame length \" + framelen);\n      long start=cis.getByteCount();\n      try {\n        side.handle(new DataInputStream(new BoundedInputStream(dis,framelen + 1)));\n      }\n catch (      ProtocolException x) {\n        LOGGER.log(Level.WARNING,null,x);\n      }\n finally {\n        long actuallyRead=cis.getByteCount() - start;\n        long framelen + 1 - actuallyRead=framelen + 1 - actuallyRead;\n        if (framelen + 1 - actuallyRead > 0) {\n          LOGGER.warning(() -> \"Did not read \" + framelen + 1 - actuallyRead + \" bytes\");\n          IOUtils.skipFully(dis,framelen + 1 - actuallyRead);\n        }\n      }\n    }\n  }\n catch (  ClosedChannelException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  IOException x) {\n    LOGGER.log(Level.WARNING,null,flightRecorder.analyzeCrash(x,\"broken stream\"));\n  }\ncatch (  ReadPendingException x) {\n    LOGGER.log(Level.FINE,null,x);\n    side.handleClose();\n  }\ncatch (  RuntimeException x) {\n    LOGGER.log(Level.WARNING,null,x);\n    side.handleClose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 15
    } ],
    "tokenLength" : 5,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 146,
    "startColumnNumber" : 28,
    "endLineNumber" : 146,
    "endColumnNumber" : 55
  }, {
    "charLength" : 27,
    "startLineNumber" : 147,
    "startColumnNumber" : 67,
    "endLineNumber" : 147,
    "endColumnNumber" : 94
  }, {
    "charLength" : 27,
    "startLineNumber" : 148,
    "startColumnNumber" : 51,
    "endLineNumber" : 148,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}