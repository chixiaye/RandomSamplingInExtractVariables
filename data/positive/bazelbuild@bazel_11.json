{
  "id" : 11,
  "expression" : "attr.getName()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "14292d176cb85d1cf6e20f79fde0249b0fe6ba24",
  "filePath" : "src/main/java/com/google/devtools/build/lib/packages/StarlarkDefinedAspect.java",
  "occurrences" : 5,
  "expressionList" : [ {
    "nodeContext" : "attr.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 148,
      "startColumnNumber" : 64,
      "endLineNumber" : 148,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 148,
        "startColumnNumber" : 27,
        "endLineNumber" : 148,
        "endColumnNumber" : 79
      },
      "nodeContext" : "aspectParams.getOnlyValueOfAttribute(attr.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 148,
        "startColumnNumber" : 15,
        "endLineNumber" : 148,
        "endColumnNumber" : 77
      },
      "nodeContext" : "attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "attr.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 149,
      "startColumnNumber" : 55,
      "endLineNumber" : 149,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 149,
        "startColumnNumber" : 34,
        "endLineNumber" : 149,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Attribute.isImplicit(attr.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 149,
        "startColumnNumber" : 33,
        "endLineNumber" : 149,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!Attribute.isImplicit(attr.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Preconditions.checkState(!Attribute.isImplicit(attr.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "attr.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 152,
      "startColumnNumber" : 38,
      "endLineNumber" : 152,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 53
      },
      "nodeContext" : "aspectParams.getAttribute(attr.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 60
      },
      "nodeContext" : "aspectParams.getAttribute(attr.getName()).size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 65
      },
      "nodeContext" : "aspectParams.getAttribute(attr.getName()).size() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "attr.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 155,
      "startColumnNumber" : 12,
      "endLineNumber" : 155,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "attr.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 156,
      "startColumnNumber" : 38,
      "endLineNumber" : 156,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 53
      },
      "nodeContext" : "aspectParams.getAttribute(attr.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 60
      },
      "nodeContext" : "aspectParams.getAttribute(attr.getName()).size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 145,
        "startColumnNumber" : 64,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n  Type<?> attrType=attr.getType();\n  String attr.getName()=attr.getName();\n  String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n  Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n  Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n  Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n  attr=addAttrValue(attr,attrValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 143,
        "startColumnNumber" : 43,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Attribute attribute : attributes) {\n  Attribute attr=attribute;\n  if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n    Type<?> attrType=attr.getType();\n    String attr.getName()=attr.getName();\n    String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n    Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n    Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n    Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n    attr=addAttrValue(attr,attrValue);\n  }\n  builder.add(attr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attr.getName()=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attr.getName());\n      Preconditions.checkState(!Attribute.isImplicit(attr.getName()));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attr.getName()).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attr.getName(),aspectParams.getAttribute(attr.getName()).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 148,
    "startColumnNumber" : 64,
    "endLineNumber" : 148,
    "endColumnNumber" : 78
  }, {
    "charLength" : 14,
    "startLineNumber" : 149,
    "startColumnNumber" : 55,
    "endLineNumber" : 149,
    "endColumnNumber" : 69
  }, {
    "charLength" : 14,
    "startLineNumber" : 152,
    "startColumnNumber" : 38,
    "endLineNumber" : 152,
    "endColumnNumber" : 52
  }, {
    "charLength" : 14,
    "startLineNumber" : 155,
    "startColumnNumber" : 12,
    "endLineNumber" : 155,
    "endColumnNumber" : 26
  }, {
    "charLength" : 14,
    "startLineNumber" : 156,
    "startColumnNumber" : 38,
    "endLineNumber" : 156,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}