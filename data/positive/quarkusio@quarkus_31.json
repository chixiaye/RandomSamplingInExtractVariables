{
  "id" : 31,
  "expression" : "expression.getParts().get(0)",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "d596df37371dcf6acc585d631af9a57c59a2279d",
  "filePath" : "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "expression.getParts().get(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 347,
      "startColumnNumber" : 26,
      "endLineNumber" : 347,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 347,
        "startColumnNumber" : 26,
        "endLineNumber" : 347,
        "endColumnNumber" : 64
      },
      "nodeContext" : "expression.getParts().get(0).getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 347,
        "startColumnNumber" : 19,
        "endLineNumber" : 347,
        "endColumnNumber" : 62
      },
      "nodeContext" : "name=expression.getParts().get(0).getName()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String name=expression.getParts().get(0).getName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1256,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 14
    } ],
    "tokenLength" : 4,
    "type" : "io.quarkus.qute.Expression.Part"
  }, {
    "nodeContext" : "expression.getParts().get(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 349,
      "startColumnNumber" : 16,
      "endLineNumber" : 349,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 349,
        "startColumnNumber" : 16,
        "endLineNumber" : 349,
        "endColumnNumber" : 58
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 349,
        "startColumnNumber" : 16,
        "endLineNumber" : 349,
        "endColumnNumber" : 66
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 349,
        "startColumnNumber" : 16,
        "endLineNumber" : 350,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 349,
        "startColumnNumber" : 12,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n else {\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1256,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 14
    } ],
    "tokenLength" : 4,
    "type" : "io.quarkus.qute.Expression.Part"
  }, {
    "nodeContext" : "expression.getParts().get(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 349,
      "startColumnNumber" : 52,
      "endLineNumber" : 349,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 349,
        "startColumnNumber" : 52,
        "endLineNumber" : 349,
        "endColumnNumber" : 94
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 349,
        "startColumnNumber" : 52,
        "endLineNumber" : 349,
        "endColumnNumber" : 143
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 349,
        "startColumnNumber" : 52,
        "endLineNumber" : 350,
        "endColumnNumber" : 49
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 349,
        "startColumnNumber" : 51,
        "endLineNumber" : 350,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 349,
        "startColumnNumber" : 16,
        "endLineNumber" : 350,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 349,
        "startColumnNumber" : 12,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n else {\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n  String name=expression.getParts().get(0).getName();\n  if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1256,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part expression.getParts().get(0)=expression.getParts().get(0);\n    String name=expression.getParts().get(0).getName();\n    if (expression.getParts().get(0).getTypeInfo() == null || (expression.getParts().get(0).getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 14
    } ],
    "tokenLength" : 4,
    "type" : "io.quarkus.qute.Expression.Part"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 347,
    "startColumnNumber" : 26,
    "endLineNumber" : 347,
    "endColumnNumber" : 54
  }, {
    "charLength" : 28,
    "startLineNumber" : 349,
    "startColumnNumber" : 16,
    "endLineNumber" : 349,
    "endColumnNumber" : 44
  }, {
    "charLength" : 28,
    "startLineNumber" : 349,
    "startColumnNumber" : 52,
    "endLineNumber" : 349,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}