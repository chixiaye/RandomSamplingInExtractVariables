{
  "id" : 8,
  "expression" : "corePoolSize.get()",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "643d68089b7ee3ccf6ddca883e4f80362cf16c9d",
  "filePath" : "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.java",
  "occurrences" : 6,
  "expressionList" : [ {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 98,
      "startColumnNumber" : 12,
      "endLineNumber" : 98,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 51
      },
      "nodeContext" : "corePoolSize.get() > dynamicMaximumSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 100,
      "startColumnNumber" : 20,
      "endLineNumber" : 100,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 99,
        "startColumnNumber" : 25,
        "endLineNumber" : 101,
        "endColumnNumber" : 122
      },
      "nodeContext" : "\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 123
      },
      "nodeContext" : "logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 124
      },
      "nodeContext" : "logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 98,
        "startColumnNumber" : 50,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 101,
      "startColumnNumber" : 20,
      "endLineNumber" : 101,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 99,
        "startColumnNumber" : 25,
        "endLineNumber" : 101,
        "endColumnNumber" : 122
      },
      "nodeContext" : "\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 123
      },
      "nodeContext" : "logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 124
      },
      "nodeContext" : "logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 98,
        "startColumnNumber" : 50,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 102,
      "startColumnNumber" : 42,
      "endLineNumber" : 102,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 102,
        "startColumnNumber" : 19,
        "endLineNumber" : 102,
        "endColumnNumber" : 129
      },
      "nodeContext" : "new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 131
      },
      "nodeContext" : "return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 98,
        "startColumnNumber" : 50,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 102,
      "startColumnNumber" : 59,
      "endLineNumber" : 102,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 102,
        "startColumnNumber" : 19,
        "endLineNumber" : 102,
        "endColumnNumber" : 129
      },
      "nodeContext" : "new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 131
      },
      "nodeContext" : "return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 98,
        "startColumnNumber" : 50,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "corePoolSize.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 104,
      "startColumnNumber" : 42,
      "endLineNumber" : 104,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 104,
        "startColumnNumber" : 19,
        "endLineNumber" : 104,
        "endColumnNumber" : 129
      },
      "nodeContext" : "new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 131
      },
      "nodeContext" : "return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (corePoolSize.get() > dynamicMaximumSize) {\n  logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n  return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n else {\n  return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 77,
        "startColumnNumber" : 257,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2723,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  ThreadFactory threadFactory=null;\n  if (!PlatformSpecific.isAppEngineStandardEnvironment()) {\n    threadFactory=new ThreadFactory(){\n      protected final AtomicInteger threadNumber=new AtomicInteger(0);\n      @Override public Thread newThread(      Runnable r){\n        Thread thread=new Thread(r,\"hystrix-\" + threadPoolKey.name() + \"-\"+ threadNumber.incrementAndGet());\n        thread.setDaemon(true);\n        return thread;\n      }\n    }\n;\n  }\n else {\n    threadFactory=PlatformSpecific.getAppEngineThreadFactory();\n  }\n  final int corePoolSize.get()=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (corePoolSize.get() > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ corePoolSize.get()+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ corePoolSize.get()+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(corePoolSize.get(),corePoolSize.get(),keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(corePoolSize.get(),dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 98,
    "startColumnNumber" : 12,
    "endLineNumber" : 98,
    "endColumnNumber" : 30
  }, {
    "charLength" : 18,
    "startLineNumber" : 100,
    "startColumnNumber" : 20,
    "endLineNumber" : 100,
    "endColumnNumber" : 38
  }, {
    "charLength" : 18,
    "startLineNumber" : 101,
    "startColumnNumber" : 20,
    "endLineNumber" : 101,
    "endColumnNumber" : 38
  }, {
    "charLength" : 18,
    "startLineNumber" : 102,
    "startColumnNumber" : 42,
    "endLineNumber" : 102,
    "endColumnNumber" : 60
  }, {
    "charLength" : 18,
    "startLineNumber" : 102,
    "startColumnNumber" : 59,
    "endLineNumber" : 102,
    "endColumnNumber" : 77
  }, {
    "charLength" : 18,
    "startLineNumber" : 104,
    "startColumnNumber" : 42,
    "endLineNumber" : 104,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}