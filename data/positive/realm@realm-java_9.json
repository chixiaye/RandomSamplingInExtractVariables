{
  "id" : 9,
  "expression" : "value.getType()",
  "projectName" : "realm@realm-java",
  "commitID" : "230b72bbfac2e1755e8c2039b0917e6137211778",
  "filePath" : "realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "value.getType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 249,
      "startColumnNumber" : 20,
      "endLineNumber" : 249,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (value.getType()) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 134,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 10
    } ],
    "tokenLength" : 2,
    "type" : "io.realm.MixedType"
  }, {
    "nodeContext" : "value.getType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 282,
      "startColumnNumber" : 80,
      "endLineNumber" : 282,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 282,
        "startColumnNumber" : 55,
        "endLineNumber" : 282,
        "endColumnNumber" : 106
      },
      "nodeContext" : "\"Invalid mixed value.getType(): \" + value.getType()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 282,
        "startColumnNumber" : 26,
        "endLineNumber" : 282,
        "endColumnNumber" : 107
      },
      "nodeContext" : "new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 282,
        "startColumnNumber" : 20,
        "endLineNumber" : 282,
        "endColumnNumber" : 109
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (value.getType()) {\ncase INTEGER:  nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\nbreak;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 134,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1065,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  nativeMixedSetNull(nativePtr,columnKey);\n}\n else {\n  MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:    nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n  break;\ncase BOOLEAN:nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 242,
        "startColumnNumber" : 54,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void setMixed(long columnKey,Mixed value){\n  parent.checkImmutable();\n  if (value == null) {\n    nativeMixedSetNull(nativePtr,columnKey);\n  }\n else {\n    MixedType value.getType()=value.getType();\nswitch (value.getType()) {\ncase INTEGER:      nativeMixedSetLong(nativePtr,columnKey,value.asInteger());\n    break;\ncase BOOLEAN:  nativeMixedSetBoolean(nativePtr,columnKey,value.asBoolean());\nbreak;\ncase FLOAT:nativeMixedSetFloat(nativePtr,columnKey,value.asFloat());\nbreak;\ncase DOUBLE:nativeMixedSetDouble(nativePtr,columnKey,value.asDouble());\nbreak;\ncase STRING:nativeMixedSetString(nativePtr,columnKey,value.asString());\nbreak;\ncase BINARY:nativeMixedSetByteArray(nativePtr,columnKey,value.asBinary());\nbreak;\ncase DATE:nativeMixedSetTimestamp(nativePtr,columnKey,value.asDate().getTime());\nbreak;\ncase OBJECT_ID:nativeMixedSetObjectId(nativePtr,columnKey,value.asObjectId().toString());\nbreak;\ncase DECIMAL128:Decimal128 decimalValue=value.asDecimal128();\nnativeMixedSetDecimal128(nativePtr,columnKey,decimalValue.getLow(),decimalValue.getHigh());\nbreak;\ncase NO_TYPE:nativeMixedSetNull(nativePtr,columnKey);\nbreak;\ndefault:throw new IllegalArgumentException(\"Invalid mixed value.getType(): \" + value.getType());\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 10
    } ],
    "tokenLength" : 2,
    "type" : "io.realm.MixedType"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 249,
    "startColumnNumber" : 20,
    "endLineNumber" : 249,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 282,
    "startColumnNumber" : 80,
    "endLineNumber" : 282,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}