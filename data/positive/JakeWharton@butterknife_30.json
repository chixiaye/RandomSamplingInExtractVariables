{
  "id" : 30,
  "expression" : "activity.getClass()",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "741824df99ef6c2a486f72d18484c61b87447330",
  "filePath" : "butterknife/src/main/java/butterknife/Views.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "activity.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 41,
      "startColumnNumber" : 36,
      "endLineNumber" : 41,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 41,
        "startColumnNumber" : 22,
        "endLineNumber" : 41,
        "endColumnNumber" : 56
      },
      "nodeContext" : "INJECTORS.get(activity.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 41,
        "startColumnNumber" : 13,
        "endLineNumber" : 41,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inject=INJECTORS.get(activity.getClass())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 41,
        "startColumnNumber" : 6,
        "endLineNumber" : 41,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Method inject=INJECTORS.get(activity.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n catch (RuntimeException e) {\n  throw e;\n}\ncatch (Exception e) {\n  throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 38,
        "startColumnNumber" : 47,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Inject the specified  {@link Activity} using the injector generated at compile-time. \n */\npublic static void inject(Activity activity){\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "activity.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 43,
      "startColumnNumber" : 42,
      "endLineNumber" : 43,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 43,
        "startColumnNumber" : 42,
        "endLineNumber" : 43,
        "endColumnNumber" : 71
      },
      "nodeContext" : "activity.getClass().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 43,
        "startColumnNumber" : 42,
        "endLineNumber" : 43,
        "endColumnNumber" : 100
      },
      "nodeContext" : "activity.getClass().getName() + AnnotationProcessor.SUFFIX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 43,
        "startColumnNumber" : 28,
        "endLineNumber" : 43,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 43,
        "startColumnNumber" : 17,
        "endLineNumber" : 43,
        "endColumnNumber" : 99
      },
      "nodeContext" : "injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 42,
        "startColumnNumber" : 26,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n  inject=injector.getMethod(\"inject\",activity.getClass());\n  INJECTORS.put(activity.getClass(),inject);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (inject == null) {\n  Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n  inject=injector.getMethod(\"inject\",activity.getClass());\n  INJECTORS.put(activity.getClass(),inject);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n catch (RuntimeException e) {\n  throw e;\n}\ncatch (Exception e) {\n  throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 38,
        "startColumnNumber" : 47,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Inject the specified  {@link Activity} using the injector generated at compile-time. \n */\npublic static void inject(Activity activity){\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "activity.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 45,
      "startColumnNumber" : 22,
      "endLineNumber" : 45,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 49
      },
      "nodeContext" : "INJECTORS.put(activity.getClass(),inject)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 51
      },
      "nodeContext" : "INJECTORS.put(activity.getClass(),inject);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 42,
        "startColumnNumber" : 26,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n  inject=injector.getMethod(\"inject\",activity.getClass());\n  INJECTORS.put(activity.getClass(),inject);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (inject == null) {\n  Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n  inject=injector.getMethod(\"inject\",activity.getClass());\n  INJECTORS.put(activity.getClass(),inject);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Class<?> activity.getClass()=activity.getClass();\n  Method inject=INJECTORS.get(activity.getClass());\n  if (inject == null) {\n    Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n    inject=injector.getMethod(\"inject\",activity.getClass());\n    INJECTORS.put(activity.getClass(),inject);\n  }\n  inject.invoke(null,activity);\n}\n catch (RuntimeException e) {\n  throw e;\n}\ncatch (Exception e) {\n  throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 563,
        "startLineNumber" : 38,
        "startColumnNumber" : 47,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Inject the specified  {@link Activity} using the injector generated at compile-time. \n */\npublic static void inject(Activity activity){\n  try {\n    Class<?> activity.getClass()=activity.getClass();\n    Method inject=INJECTORS.get(activity.getClass());\n    if (inject == null) {\n      Class<?> injector=Class.forName(activity.getClass().getName() + AnnotationProcessor.SUFFIX);\n      inject=injector.getMethod(\"inject\",activity.getClass());\n      INJECTORS.put(activity.getClass(),inject);\n    }\n    inject.invoke(null,activity);\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Unable to inject views for activity \" + activity,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 12
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 41,
    "startColumnNumber" : 36,
    "endLineNumber" : 41,
    "endColumnNumber" : 55
  }, {
    "charLength" : 19,
    "startLineNumber" : 43,
    "startColumnNumber" : 42,
    "endLineNumber" : 43,
    "endColumnNumber" : 61
  }, {
    "charLength" : 19,
    "startLineNumber" : 45,
    "startColumnNumber" : 22,
    "endLineNumber" : 45,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}