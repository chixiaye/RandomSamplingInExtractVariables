{
  "id" : 39,
  "expression" : "5000",
  "projectName" : "apache@druid",
  "commitID" : "c3cad461bc1745a2f1a87f85299a6754310d1827",
  "filePath" : "server/src/test/java/org/apache/druid/server/coordinator/ReservoirSegmentSamplerTest.java",
  "occurrences" : 5,
  "expressionList" : [ {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 142,
      "startColumnNumber" : 83,
      "endLineNumber" : 142,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getRandomBalancerSegmentHolderTest(){\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 10
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 146,
      "startColumnNumber" : 83,
      "endLineNumber" : 146,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getRandomBalancerSegmentHolderTest(){\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 10
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 150,
      "startColumnNumber" : 83,
      "endLineNumber" : 150,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getRandomBalancerSegmentHolderTest(){\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 10
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 154,
      "startColumnNumber" : 83,
      "endLineNumber" : 154,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getRandomBalancerSegmentHolderTest(){\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 10
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 175,
      "startColumnNumber" : 24,
      "endLineNumber" : 175,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 175,
        "startColumnNumber" : 20,
        "endLineNumber" : 175,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i < 5000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < 5000; i++) {\n  BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n  if (balancerSegmentHolder != null) {\n    segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getRandomBalancerSegmentHolderTest(){\n  int 5000=5000;\n  EasyMock.expect(druidServer1.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer1,segments1);\n  EasyMock.replay(druidServer1);\n  EasyMock.expect(druidServer2.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer2,segments2);\n  EasyMock.replay(druidServer2);\n  EasyMock.expect(druidServer3.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer3,segments3);\n  EasyMock.replay(druidServer3);\n  EasyMock.expect(druidServer4.getType()).andReturn(ServerType.HISTORICAL).times(5000);\n  ImmutableDruidServerTests.expectSegments(druidServer4,segments4);\n  EasyMock.replay(druidServer4);\n  EasyMock.expect(holder1.getServer()).andReturn(druidServer1).anyTimes();\n  EasyMock.replay(holder1);\n  EasyMock.expect(holder2.getServer()).andReturn(druidServer2).anyTimes();\n  EasyMock.replay(holder2);\n  EasyMock.expect(holder3.getServer()).andReturn(druidServer3).anyTimes();\n  EasyMock.replay(holder3);\n  EasyMock.expect(holder4.getServer()).andReturn(druidServer4).anyTimes();\n  EasyMock.replay(holder4);\n  List<ServerHolder> holderList=new ArrayList<>();\n  holderList.add(holder1);\n  holderList.add(holder2);\n  holderList.add(holder3);\n  holderList.add(holder4);\n  Map<DataSegment,Integer> segmentCountMap=new HashMap<>();\n  for (int i=0; i < 5000; i++) {\n    BalancerSegmentHolder balancerSegmentHolder=ReservoirSegmentSampler.getRandomBalancerSegmentHolder(holderList,Collections.emptySet());\n    if (balancerSegmentHolder != null) {\n      segmentCountMap.put(balancerSegmentHolder.getSegment(),1);\n    }\n  }\n  for (  DataSegment segment : segments) {\n    Assert.assertEquals(segmentCountMap.get(segment),new Integer(1));\n  }\n  EasyMock.verify(druidServer1,druidServer2,druidServer3,druidServer4);\n  EasyMock.verify(holder1,holder2,holder3,holder4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 10
    } ],
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 142,
    "startColumnNumber" : 83,
    "endLineNumber" : 142,
    "endColumnNumber" : 87
  }, {
    "charLength" : 4,
    "startLineNumber" : 146,
    "startColumnNumber" : 83,
    "endLineNumber" : 146,
    "endColumnNumber" : 87
  }, {
    "charLength" : 4,
    "startLineNumber" : 150,
    "startColumnNumber" : 83,
    "endLineNumber" : 150,
    "endColumnNumber" : 87
  }, {
    "charLength" : 4,
    "startLineNumber" : 154,
    "startColumnNumber" : 83,
    "endLineNumber" : 154,
    "endColumnNumber" : 87
  }, {
    "charLength" : 4,
    "startLineNumber" : 175,
    "startColumnNumber" : 24,
    "endLineNumber" : 175,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}