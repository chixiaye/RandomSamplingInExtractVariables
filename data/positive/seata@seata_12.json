{
  "id" : 12,
  "expression" : "buildLockKey(selectPKRows)",
  "projectName" : "seata@seata",
  "commitID" : "f35b292094e873c4112423fe51a1102ee4f8f917",
  "filePath" : "rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/exec/SelectForUpdateExecutor.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "buildLockKey(selectPKRows)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 103,
      "startColumnNumber" : 66,
      "endLineNumber" : 103,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 93
      },
      "nodeContext" : "statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 95
      },
      "nodeContext" : "statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (paramAppender.isEmpty()) {\n    stPK=statementProxy.getConnection().createStatement();\n    rsPK=stPK.executeQuery(selectPKSQL);\n  }\n else {\n    pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n    for (int i=0; i < paramAppender.size(); i++) {\n      pstPK.setObject(i + 1,paramAppender.get(i));\n    }\n    rsPK=pstPK.executeQuery();\n  }\n  TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n  String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n  statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (paramAppender.isEmpty()) {\n    stPK=statementProxy.getConnection().createStatement();\n    rsPK=stPK.executeQuery(selectPKSQL);\n  }\n else {\n    pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n    for (int i=0; i < paramAppender.size(); i++) {\n      pstPK.setObject(i + 1,paramAppender.get(i));\n    }\n    rsPK=pstPK.executeQuery();\n  }\n  TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n  String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n  statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n  break;\n}\n catch (LockConflictException lce) {\n  conn.rollback(sp);\n  lockRetryController.sleep(lce);\n}\n finally {\n  if (rsPK != null) {\n    rsPK.close();\n  }\n  if (stPK != null) {\n    stPK.close();\n  }\n  if (pstPK != null) {\n    pstPK.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 977,
        "startLineNumber" : 84,
        "startColumnNumber" : 25,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Statement stPK=null;\n  PreparedStatement pstPK=null;\n  ResultSet rsPK=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      stPK=statementProxy.getConnection().createStatement();\n      rsPK=stPK.executeQuery(selectPKSQL);\n    }\n else {\n      pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        pstPK.setObject(i + 1,paramAppender.get(i));\n      }\n      rsPK=pstPK.executeQuery();\n    }\n    TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n    String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n    statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n    break;\n  }\n catch (  LockConflictException lce) {\n    conn.rollback(sp);\n    lockRetryController.sleep(lce);\n  }\n finally {\n    if (rsPK != null) {\n      rsPK.close();\n    }\n    if (stPK != null) {\n      stPK.close();\n    }\n    if (pstPK != null) {\n      pstPK.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  Statement stPK=null;\n  PreparedStatement pstPK=null;\n  ResultSet rsPK=null;\n  try {\n    if (paramAppender.isEmpty()) {\n      stPK=statementProxy.getConnection().createStatement();\n      rsPK=stPK.executeQuery(selectPKSQL);\n    }\n else {\n      pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n      for (int i=0; i < paramAppender.size(); i++) {\n        pstPK.setObject(i + 1,paramAppender.get(i));\n      }\n      rsPK=pstPK.executeQuery();\n    }\n    TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n    String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n    statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n    break;\n  }\n catch (  LockConflictException lce) {\n    conn.rollback(sp);\n    lockRetryController.sleep(lce);\n  }\n finally {\n    if (rsPK != null) {\n      rsPK.close();\n    }\n    if (stPK != null) {\n      stPK.close();\n    }\n    if (pstPK != null) {\n      pstPK.close();\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 157,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (originalAutoCommit) {\n    conn.setAutoCommit(false);\n  }\n  sp=conn.setSavepoint();\n  rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n  while (true) {\n    Statement stPK=null;\n    PreparedStatement pstPK=null;\n    ResultSet rsPK=null;\n    try {\n      if (paramAppender.isEmpty()) {\n        stPK=statementProxy.getConnection().createStatement();\n        rsPK=stPK.executeQuery(selectPKSQL);\n      }\n else {\n        pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n        for (int i=0; i < paramAppender.size(); i++) {\n          pstPK.setObject(i + 1,paramAppender.get(i));\n        }\n        rsPK=pstPK.executeQuery();\n      }\n      TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n      String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n      statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n      break;\n    }\n catch (    LockConflictException lce) {\n      conn.rollback(sp);\n      lockRetryController.sleep(lce);\n    }\n finally {\n      if (rsPK != null) {\n        rsPK.close();\n      }\n      if (stPK != null) {\n        stPK.close();\n      }\n      if (pstPK != null) {\n        pstPK.close();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (originalAutoCommit) {\n    conn.setAutoCommit(false);\n  }\n  sp=conn.setSavepoint();\n  rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n  while (true) {\n    Statement stPK=null;\n    PreparedStatement pstPK=null;\n    ResultSet rsPK=null;\n    try {\n      if (paramAppender.isEmpty()) {\n        stPK=statementProxy.getConnection().createStatement();\n        rsPK=stPK.executeQuery(selectPKSQL);\n      }\n else {\n        pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n        for (int i=0; i < paramAppender.size(); i++) {\n          pstPK.setObject(i + 1,paramAppender.get(i));\n        }\n        rsPK=pstPK.executeQuery();\n      }\n      TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n      String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n      statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n      break;\n    }\n catch (    LockConflictException lce) {\n      conn.rollback(sp);\n      lockRetryController.sleep(lce);\n    }\n finally {\n      if (rsPK != null) {\n        rsPK.close();\n      }\n      if (stPK != null) {\n        stPK.close();\n      }\n      if (pstPK != null) {\n        pstPK.close();\n      }\n    }\n  }\n}\n  finally {\n  if (sp != null) {\n    conn.releaseSavepoint(sp);\n  }\n  if (originalAutoCommit) {\n    conn.setAutoCommit(true);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 202,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2457,
        "startLineNumber" : 52,
        "startColumnNumber" : 61,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2524,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object doExecute(Object... args) throws Throwable {\n  SQLSelectRecognizer recognizer=(SQLSelectRecognizer)sqlRecognizer;\n  Connection conn=statementProxy.getConnection();\n  ResultSet rs=null;\n  Savepoint sp=null;\n  LockRetryController lockRetryController=new LockRetryController();\n  boolean originalAutoCommit=conn.getAutoCommit();\n  StringBuffer selectSQLAppender=new StringBuffer(\"SELECT \");\n  selectSQLAppender.append(getColumnNameInSQL(getTableMeta().getPkName()));\n  selectSQLAppender.append(\" FROM \" + getFromTableInSQL());\n  String whereCondition=null;\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  if (statementProxy instanceof ParametersHolder) {\n    whereCondition=recognizer.getWhereCondition((ParametersHolder)statementProxy,paramAppender);\n  }\n else {\n    whereCondition=recognizer.getWhereCondition();\n  }\n  if (!StringUtils.isEmpty(whereCondition)) {\n    selectSQLAppender.append(\" WHERE \" + whereCondition);\n  }\n  selectSQLAppender.append(\" FOR UPDATE\");\n  String selectPKSQL=selectSQLAppender.toString();\n  try {\n    if (originalAutoCommit) {\n      conn.setAutoCommit(false);\n    }\n    sp=conn.setSavepoint();\n    rs=statementCallback.execute(statementProxy.getTargetStatement(),args);\n    while (true) {\n      Statement stPK=null;\n      PreparedStatement pstPK=null;\n      ResultSet rsPK=null;\n      try {\n        if (paramAppender.isEmpty()) {\n          stPK=statementProxy.getConnection().createStatement();\n          rsPK=stPK.executeQuery(selectPKSQL);\n        }\n else {\n          pstPK=statementProxy.getConnection().prepareStatement(selectPKSQL);\n          for (int i=0; i < paramAppender.size(); i++) {\n            pstPK.setObject(i + 1,paramAppender.get(i));\n          }\n          rsPK=pstPK.executeQuery();\n        }\n        TableRecords selectPKRows=TableRecords.buildRecords(getTableMeta(),rsPK);\n        String buildLockKey(selectPKRows)=buildLockKey(selectPKRows);\n        statementProxy.getConnectionProxy().checkLock(buildLockKey(selectPKRows));\n        break;\n      }\n catch (      LockConflictException lce) {\n        conn.rollback(sp);\n        lockRetryController.sleep(lce);\n      }\n finally {\n        if (rsPK != null) {\n          rsPK.close();\n        }\n        if (stPK != null) {\n          stPK.close();\n        }\n        if (pstPK != null) {\n          pstPK.close();\n        }\n      }\n    }\n  }\n  finally {\n    if (sp != null) {\n      conn.releaseSavepoint(sp);\n    }\n    if (originalAutoCommit) {\n      conn.setAutoCommit(true);\n    }\n  }\n  return rs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 358,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 103,
    "startColumnNumber" : 66,
    "endLineNumber" : 103,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}