{
  "id" : 9,
  "expression" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "130e2851e5a2a36886cee4c066fc050ec1df530c",
  "filePath" : "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 99,
      "startLineNumber" : 41,
      "startColumnNumber" : 21,
      "endLineNumber" : 41,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 29,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 121
      },
      "nodeContext" : "spanStore.accept(spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 123
      },
      "nodeContext" : "spanStore.accept(spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 35,
        "startColumnNumber" : 59,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Iterator<Span> spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Asynchronously writes spans to storage, subject to sampling policy.\n */\n@Async public void write(SpanStore spanStore,List<Span> spans){\n  Iterator<Span> spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator()=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 13
    } ],
    "tokenLength" : 18,
    "type" : "java.util.Iterator<io.zipkin.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 99,
    "startLineNumber" : 41,
    "startColumnNumber" : 21,
    "endLineNumber" : 41,
    "endColumnNumber" : 120
  } ],
  "layoutRelationDataList" : [ ]
}