{
  "id" : 34,
  "expression" : "\"prop-xyz/ns1\"",
  "projectName" : "apache@pulsar",
  "commitID" : "403b57a8bc56e1715b08d974847c82242729bb34",
  "filePath" : "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest.java",
  "occurrences" : 7,
  "expressionList" : [ {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 885,
      "startColumnNumber" : 64,
      "endLineNumber" : 885,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 885,
        "startColumnNumber" : 44,
        "endLineNumber" : 885,
        "endColumnNumber" : 94
      },
      "nodeContext" : "topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 885,
        "startColumnNumber" : 21,
        "endLineNumber" : 885,
        "endColumnNumber" : 92
      },
      "nodeContext" : "partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 885,
        "startColumnNumber" : 8,
        "endLineNumber" : 885,
        "endColumnNumber" : 94
      },
      "nodeContext" : "final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 886,
      "startColumnNumber" : 56,
      "endLineNumber" : 886,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 886,
        "startColumnNumber" : 36,
        "endLineNumber" : 886,
        "endColumnNumber" : 78
      },
      "nodeContext" : "topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 886,
        "startColumnNumber" : 21,
        "endLineNumber" : 886,
        "endColumnNumber" : 76
      },
      "nodeContext" : "anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 886,
        "startColumnNumber" : 8,
        "endLineNumber" : 886,
        "endColumnNumber" : 78
      },
      "nodeContext" : "final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 891,
      "startColumnNumber" : 60,
      "endLineNumber" : 891,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 891,
        "startColumnNumber" : 21,
        "endLineNumber" : 891,
        "endColumnNumber" : 75
      },
      "nodeContext" : "admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 891,
        "startColumnNumber" : 8,
        "endLineNumber" : 891,
        "endColumnNumber" : 97
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 891,
        "startColumnNumber" : 8,
        "endLineNumber" : 891,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 900,
      "startColumnNumber" : 60,
      "endLineNumber" : 900,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 900,
        "startColumnNumber" : 21,
        "endLineNumber" : 900,
        "endColumnNumber" : 75
      },
      "nodeContext" : "admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 900,
        "startColumnNumber" : 8,
        "endLineNumber" : 901,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 900,
        "startColumnNumber" : 8,
        "endLineNumber" : 901,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 908,
      "startColumnNumber" : 44,
      "endLineNumber" : 908,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 908,
        "startColumnNumber" : 21,
        "endLineNumber" : 908,
        "endColumnNumber" : 59
      },
      "nodeContext" : "admin.topics().getList(\"prop-xyz/ns1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 908,
        "startColumnNumber" : 12,
        "endLineNumber" : 908,
        "endColumnNumber" : 57
      },
      "nodeContext" : "topics=admin.topics().getList(\"prop-xyz/ns1\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 908,
        "startColumnNumber" : 12,
        "endLineNumber" : 908,
        "endColumnNumber" : 59
      },
      "nodeContext" : "topics=admin.topics().getList(\"prop-xyz/ns1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 906,
        "startColumnNumber" : 26,
        "endLineNumber" : 910,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  topics=admin.topics().getList(\"prop-xyz/ns1\");\n  assertEquals(topics.size(),4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 906,
        "startColumnNumber" : 8,
        "endLineNumber" : 910,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isPersistent) {\n  topics=admin.topics().getList(\"prop-xyz/ns1\");\n  assertEquals(topics.size(),4);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 979,
      "startColumnNumber" : 60,
      "endLineNumber" : 979,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 979,
        "startColumnNumber" : 37,
        "endLineNumber" : 979,
        "endColumnNumber" : 75
      },
      "nodeContext" : "admin.topics().getList(\"prop-xyz/ns1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 979,
        "startColumnNumber" : 21,
        "endLineNumber" : 979,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 979,
        "startColumnNumber" : 8,
        "endLineNumber" : 981,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 979,
        "startColumnNumber" : 8,
        "endLineNumber" : 981,
        "endColumnNumber" : 103
      },
      "nodeContext" : "assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"prop-xyz/ns1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1045,
      "startColumnNumber" : 44,
      "endLineNumber" : 1045,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 1045,
        "startColumnNumber" : 21,
        "endLineNumber" : 1045,
        "endColumnNumber" : 59
      },
      "nodeContext" : "admin.topics().getList(\"prop-xyz/ns1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 1045,
        "startColumnNumber" : 12,
        "endLineNumber" : 1045,
        "endColumnNumber" : 57
      },
      "nodeContext" : "topics=admin.topics().getList(\"prop-xyz/ns1\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1045,
        "startColumnNumber" : 12,
        "endLineNumber" : 1045,
        "endColumnNumber" : 59
      },
      "nodeContext" : "topics=admin.topics().getList(\"prop-xyz/ns1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 1043,
        "startColumnNumber" : 26,
        "endLineNumber" : 1047,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  topics=admin.topics().getList(\"prop-xyz/ns1\");\n  assertEquals(topics.size(),4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 1043,
        "startColumnNumber" : 8,
        "endLineNumber" : 1047,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isPersistent) {\n  topics=admin.topics().getList(\"prop-xyz/ns1\");\n  assertEquals(topics.size(),4);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6574,
        "startLineNumber" : 883,
        "startColumnNumber" : 87,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 897,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6700,
        "startLineNumber" : 882,
        "startColumnNumber" : 4,
        "endLineNumber" : 1082,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"topicNamesForAllTypes\") public void partitionedTopics(String topicType,String topicName) throws Exception {\n  final String \"prop-xyz/ns1\"=\"prop-xyz/ns1\";\n  final String partitionedTopicName=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/\"+ topicName;\n  final String anotherTopic=topicType + \"://\" + \"prop-xyz/ns1\"+ \"/ds2\";\n  final boolean isPersistent=topicType.equals(TopicDomain.persistent.value());\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList());\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  assertEquals(admin.topics().getPartitionedTopicList(\"prop-xyz/ns1\"),Lists.newArrayList(partitionedTopicName));\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,4);\n  List<String> topics;\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().getPartitionedTopicMetadata(anotherTopic);\n    fail(\"getPartitionedTopicMetadata of \" + anotherTopic + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,admin.topics().getPartitionedStats(partitionedTopicName,false).metadata.partitions);\n  assertEquals(admin.topics().getPartitionedStats(partitionedTopicName,false).partitions.size(),0);\n  List<String> subscriptions=admin.topics().getSubscriptions(partitionedTopicName);\n  assertEquals(subscriptions.size(),0);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).statsInterval(0,TimeUnit.SECONDS).build();\n  Consumer<byte[]> consumer=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub\").subscriptionType(SubscriptionType.Exclusive).subscribe();\n  assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  try {\n    if (isPersistent) {\n      admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n      fail(\"should have failed\");\n    }\n  }\n catch (  PulsarAdminException.PreconditionFailedException e) {\n  }\ncatch (  Exception e) {\n    fail(e.getMessage());\n  }\n  Consumer<byte[]> consumer1=client.newConsumer().topic(partitionedTopicName).subscriptionName(\"my-sub-1\").subscribe();\n  if (isPersistent) {\n    assertEquals(Sets.newHashSet(admin.topics().getSubscriptions(partitionedTopicName)),Sets.newHashSet(\"my-sub\",\"my-sub-1\"));\n  }\n  consumer1.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub-1\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList(\"my-sub\"));\n  }\n  Producer<byte[]> producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.RoundRobinPartition).create();\n  for (int i=0; i < 10; i++) {\n    String message=\"message-\" + i;\n    producer.send(message.getBytes());\n  }\n  assertEquals(Sets.newHashSet(admin.topics().getList(\"prop-xyz/ns1\")),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  PartitionedTopicStats topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n  if (isPersistent) {\n    assertEquals(topicStats.subscriptions.keySet(),Sets.newTreeSet(Lists.newArrayList(\"my-sub\")));\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,10);\n  }\n  assertEquals(topicStats.publishers.size(),1);\n  assertEquals(topicStats.partitions,Maps.newHashMap());\n  topicStats=admin.topics().getPartitionedStats(partitionedTopicName,true);\n  assertEquals(topicStats.metadata.partitions,4);\n  assertEquals(topicStats.partitions.keySet(),Sets.newHashSet(partitionedTopicName + \"-partition-0\",partitionedTopicName + \"-partition-1\",partitionedTopicName + \"-partition-2\",partitionedTopicName + \"-partition-3\"));\n  TopicStats partitionStats=topicStats.partitions.get(partitionedTopicName + \"-partition-0\");\n  assertEquals(partitionStats.publishers.size(),1);\n  if (isPersistent) {\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").consumers.size(),1);\n    assertEquals(partitionStats.subscriptions.get(\"my-sub\").msgBacklog,3,1);\n  }\n  try {\n    admin.topics().skipMessages(partitionedTopicName,\"my-sub\",5);\n    fail(\"skip messages for partitioned topics should fail\");\n  }\n catch (  Exception e) {\n  }\n  if (isPersistent) {\n    admin.topics().skipAllMessages(partitionedTopicName,\"my-sub\");\n    topicStats=admin.topics().getPartitionedStats(partitionedTopicName,false);\n    assertEquals(topicStats.subscriptions.get(\"my-sub\").msgBacklog,0);\n  }\n  producer.close();\n  consumer.close();\n  if (isPersistent) {\n    admin.topics().deleteSubscription(partitionedTopicName,\"my-sub\");\n    assertEquals(admin.topics().getSubscriptions(partitionedTopicName),Lists.newArrayList());\n  }\n  try {\n    admin.topics().createPartitionedTopic(partitionedTopicName,32);\n    fail(\"Should have failed as the partitioned topic already exists\");\n  }\n catch (  ConflictException ignore) {\n  }\n  producer=client.newProducer(Schema.BYTES).topic(partitionedTopicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  if (isPersistent) {\n    topics=admin.topics().getList(\"prop-xyz/ns1\");\n    assertEquals(topics.size(),4);\n  }\n  try {\n    admin.topics().deletePartitionedTopic(partitionedTopicName);\n    fail(\"The topic is busy\");\n  }\n catch (  PreconditionFailedException pfe) {\n  }\n  producer.close();\n  client.close();\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  try {\n    admin.topics().getPartitionedTopicMetadata(partitionedTopicName);\n    fail(\"getPartitionedTopicMetadata of \" + partitionedTopicName + \" should not succeed\");\n  }\n catch (  NotFoundException expected) {\n  }\n  admin.topics().createPartitionedTopic(partitionedTopicName,32);\n  assertEquals(admin.topics().getPartitionedTopicMetadata(partitionedTopicName).partitions,32);\n  try {\n    admin.topics().deletePartitionedTopic(anotherTopic);\n    fail(\"Should have failed as the partitioned topic was not created\");\n  }\n catch (  NotFoundException nfe) {\n  }\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n  admin.topics().createPartitionedTopic(partitionedTopicName,4);\n  admin.topics().deletePartitionedTopic(partitionedTopicName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 916,
      "astHeight" : 11
    } ],
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 885,
    "startColumnNumber" : 64,
    "endLineNumber" : 885,
    "endColumnNumber" : 78
  }, {
    "charLength" : 14,
    "startLineNumber" : 886,
    "startColumnNumber" : 56,
    "endLineNumber" : 886,
    "endColumnNumber" : 70
  }, {
    "charLength" : 14,
    "startLineNumber" : 891,
    "startColumnNumber" : 60,
    "endLineNumber" : 891,
    "endColumnNumber" : 74
  }, {
    "charLength" : 14,
    "startLineNumber" : 900,
    "startColumnNumber" : 60,
    "endLineNumber" : 900,
    "endColumnNumber" : 74
  }, {
    "charLength" : 14,
    "startLineNumber" : 908,
    "startColumnNumber" : 44,
    "endLineNumber" : 908,
    "endColumnNumber" : 58
  }, {
    "charLength" : 14,
    "startLineNumber" : 979,
    "startColumnNumber" : 60,
    "endLineNumber" : 979,
    "endColumnNumber" : 74
  }, {
    "charLength" : 14,
    "startLineNumber" : 1045,
    "startColumnNumber" : 44,
    "endLineNumber" : 1045,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}