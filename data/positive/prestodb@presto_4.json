{
  "id" : 4,
  "expression" : "getId(positions[offset + i])",
  "projectName" : "prestodb@presto",
  "commitID" : "4871cee5b33d556d18e399bb86ca45b3266dc633",
  "filePath" : "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "getId(positions[offset + i])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 453,
      "startColumnNumber" : 24,
      "endLineNumber" : 453,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 453,
        "startColumnNumber" : 12,
        "endLineNumber" : 453,
        "endColumnNumber" : 50
      },
      "nodeContext" : "newIds[i]=getId(positions[offset + i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 453,
        "startColumnNumber" : 12,
        "endLineNumber" : 453,
        "endColumnNumber" : 52
      },
      "nodeContext" : "newIds[i]=getId(positions[offset + i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 451,
        "startColumnNumber" : 41,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 451,
        "startColumnNumber" : 8,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@OverrgetId(positions[offset + i])e public Block getPositions(int[] positions,int offset,int length){\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 11
    } ],
    "tokenLength" : 5,
    "type" : "int"
  }, {
    "nodeContext" : "getId(positions[offset + i])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 455,
      "startColumnNumber" : 37,
      "endLineNumber" : 455,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 455,
        "startColumnNumber" : 29,
        "endLineNumber" : 455,
        "endColumnNumber" : 66
      },
      "nodeContext" : "usedIds[getId(positions[offset + i])]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 455,
        "startColumnNumber" : 29,
        "endLineNumber" : 455,
        "endColumnNumber" : 74
      },
      "nodeContext" : "usedIds[getId(positions[offset + i])] ? 0 : 1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 455,
        "startColumnNumber" : 16,
        "endLineNumber" : 455,
        "endColumnNumber" : 72
      },
      "nodeContext" : "uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 455,
        "startColumnNumber" : 16,
        "endLineNumber" : 455,
        "endColumnNumber" : 74
      },
      "nodeContext" : "uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 454,
        "startColumnNumber" : 33,
        "endLineNumber" : 457,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n  usedIds[getId(positions[offset + i])]=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 454,
        "startColumnNumber" : 12,
        "endLineNumber" : 457,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (usedIds != null) {\n  uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n  usedIds[getId(positions[offset + i])]=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 451,
        "startColumnNumber" : 41,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 451,
        "startColumnNumber" : 8,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@OverrgetId(positions[offset + i])e public Block getPositions(int[] positions,int offset,int length){\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 14
    } ],
    "tokenLength" : 5,
    "type" : "int"
  }, {
    "nodeContext" : "getId(positions[offset + i])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 456,
      "startColumnNumber" : 24,
      "endLineNumber" : 456,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 53
      },
      "nodeContext" : "usedIds[getId(positions[offset + i])]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 58
      },
      "nodeContext" : "usedIds[getId(positions[offset + i])]=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 60
      },
      "nodeContext" : "usedIds[getId(positions[offset + i])]=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 454,
        "startColumnNumber" : 33,
        "endLineNumber" : 457,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n  usedIds[getId(positions[offset + i])]=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 454,
        "startColumnNumber" : 12,
        "endLineNumber" : 457,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (usedIds != null) {\n  uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n  usedIds[getId(positions[offset + i])]=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 451,
        "startColumnNumber" : 41,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 451,
        "startColumnNumber" : 8,
        "endLineNumber" : 458,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  int getId(positions[offset + i])=getId(positions[offset + i]);\n  newIds[i]=getId(positions[offset + i]);\n  if (usedIds != null) {\n    uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n    usedIds[getId(positions[offset + i])]=true;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 444,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 442,
        "startColumnNumber" : 4,
        "endLineNumber" : 468,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@OverrgetId(positions[offset + i])e public Block getPositions(int[] positions,int offset,int length){\n  checkArrayRange(positions,offset,length);\n  int[] newIds=new int[length];\n  boolean isCompact=length >= dictionary.getPositionCount() && isCompact();\n  boolean[] usedIds=isCompact ? new boolean[dictionary.getPositionCount()] : null;\n  int uniqueIds=0;\n  for (int i=0; i < length; i++) {\n    int getId(positions[offset + i])=getId(positions[offset + i]);\n    newIds[i]=getId(positions[offset + i]);\n    if (usedIds != null) {\n      uniqueIds+=usedIds[getId(positions[offset + i])] ? 0 : 1;\n      usedIds[getId(positions[offset + i])]=true;\n    }\n  }\n  isCompact&=(usedIds != null && usedIds.length == uniqueIds);\n  DictionaryBlock result=new DictionaryBlock(newIds.length,dictionary,newIds,isCompact,dictionarySourceId);\n  if (usedIds != null && !isCompact) {\n    result.uniqueIds=uniqueIds;\n    result.sizeInBytes=dictionary.getPositionsSizeInBytes(usedIds,uniqueIds) + (Integer.BYTES * (long)length);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 13
    } ],
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 453,
    "startColumnNumber" : 24,
    "endLineNumber" : 453,
    "endColumnNumber" : 52
  }, {
    "charLength" : 28,
    "startLineNumber" : 455,
    "startColumnNumber" : 37,
    "endLineNumber" : 455,
    "endColumnNumber" : 65
  }, {
    "charLength" : 28,
    "startLineNumber" : 456,
    "startColumnNumber" : 24,
    "endLineNumber" : 456,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}