{
  "id" : 25,
  "expression" : "im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "48e05ce16283f59ce6889543e3aac47ce1f1a2ad",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 758,
      "startColumnNumber" : 35,
      "endLineNumber" : 758,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 758,
        "startColumnNumber" : 12,
        "endLineNumber" : 758,
        "endColumnNumber" : 96
      },
      "nodeContext" : "existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 758,
        "startColumnNumber" : 12,
        "endLineNumber" : 758,
        "endColumnNumber" : 98
      },
      "nodeContext" : "existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 756,
        "startColumnNumber" : 47,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 756,
        "startColumnNumber" : 8,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map<String,Object> im : imports) {\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1742,
        "startLineNumber" : 749,
        "startColumnNumber" : 83,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1819,
        "startLineNumber" : 749,
        "startColumnNumber" : 4,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addOperationModelImportInfomation(Map<String,Object> operations){\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 15
    } ],
    "tokenLength" : 6,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 759,
      "startColumnNumber" : 41,
      "endLineNumber" : 759,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 759,
        "startColumnNumber" : 41,
        "endLineNumber" : 759,
        "endColumnNumber" : 112
      },
      "nodeContext" : "im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 759,
        "startColumnNumber" : 12,
        "endLineNumber" : 759,
        "endColumnNumber" : 113
      },
      "nodeContext" : "existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 759,
        "startColumnNumber" : 12,
        "endLineNumber" : 759,
        "endColumnNumber" : 115
      },
      "nodeContext" : "existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 756,
        "startColumnNumber" : 47,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 756,
        "startColumnNumber" : 8,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map<String,Object> im : imports) {\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1742,
        "startLineNumber" : 749,
        "startColumnNumber" : 83,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1819,
        "startLineNumber" : 749,
        "startColumnNumber" : 4,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addOperationModelImportInfomation(Map<String,Object> operations){\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 15
    } ],
    "tokenLength" : 6,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 760,
      "startColumnNumber" : 32,
      "endLineNumber" : 760,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 760,
        "startColumnNumber" : 12,
        "endLineNumber" : 760,
        "endColumnNumber" : 143
      },
      "nodeContext" : "im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 760,
        "startColumnNumber" : 12,
        "endLineNumber" : 760,
        "endColumnNumber" : 145
      },
      "nodeContext" : "im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 756,
        "startColumnNumber" : 47,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 756,
        "startColumnNumber" : 8,
        "endLineNumber" : 761,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map<String,Object> im : imports) {\n  String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n  existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n  im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1742,
        "startLineNumber" : 749,
        "startColumnNumber" : 83,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1819,
        "startLineNumber" : 749,
        "startColumnNumber" : 4,
        "endLineNumber" : 779,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addOperationModelImportInfomation(Map<String,Object> operations){\n  List<Map<String,Object>> imports=(List<Map<String,Object>>)operations.get(\"imports\");\n  List<String> existingRecordClassNames=new ArrayList<String>();\n  List<String> existingClassNames=new ArrayList<String>();\n  for (  Map<String,Object> im : imports) {\n    String im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")=im.get(\"import\").toString().replace(modelPackage() + \".\",\"\");\n    existingClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n    existingRecordClassNames.add(im.get(\"import\").toString().replace(modelPackage() + \".\",\"\") + \"Record\");\n    im.put(\"im.get(\"import\").toString().replace(modelPackage() + \".\",\"\")\",im.get(\"import\").toString().replace(modelPackage() + \".\",\"\"));\n  }\n  if (this.getSagasAndRecords()) {\n    Map<String,Object> _operations=(Map<String,Object>)operations.get(\"operations\");\n    List<ExtendedCodegenOperation> operationList=(List<ExtendedCodegenOperation>)_operations.get(\"operation\");\n    Set<String> additionalPassthroughImports=new TreeSet<String>();\n    for (    ExtendedCodegenOperation op : operationList) {\n      if (op.returnPassthrough != null && op.returnBaseTypeAlternate instanceof String) {\n        if (op.returnTypeSupportsEntities && !existingRecordClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n else         if (!op.returnTypeSupportsEntities && !existingClassNames.contains(op.returnBaseTypeAlternate)) {\n          additionalPassthroughImports.add(op.returnBaseTypeAlternate);\n        }\n      }\n    }\n    operations.put(\"passthroughImports\",additionalPassthroughImports);\n    operations.put(\"hasPassthroughImports\",additionalPassthroughImports.size() > 0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 15
    } ],
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 758,
    "startColumnNumber" : 35,
    "endLineNumber" : 758,
    "endColumnNumber" : 95
  }, {
    "charLength" : 60,
    "startLineNumber" : 759,
    "startColumnNumber" : 41,
    "endLineNumber" : 759,
    "endColumnNumber" : 101
  }, {
    "charLength" : 60,
    "startLineNumber" : 760,
    "startColumnNumber" : 32,
    "endLineNumber" : 760,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}