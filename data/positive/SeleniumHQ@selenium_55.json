{
  "id" : 55,
  "expression" : "statement.toString()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "statement.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 175,
      "startColumnNumber" : 46,
      "endLineNumber" : 175,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 66
      },
      "nodeContext" : "span.setAttribute(DATABASE_STATEMENT,statement.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 175,
        "endColumnNumber" : 68
      },
      "nodeContext" : "span.setAttribute(DATABASE_STATEMENT,statement.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statement.toString()=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statement.toString());\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2422,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statement.toString()=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statement.toString());\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 330,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2665,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statement.toString()=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statement.toString());\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2772,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statement.toString()=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statement.toString());\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 363,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statement.toString()=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statement.toString());\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statement.toString()=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statement.toString());\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 415,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "statement.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 178,
      "startColumnNumber" : 69,
      "endLineNumber" : 178,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 178,
        "startColumnNumber" : 45,
        "endLineNumber" : 178,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EventAttribute.setValue(statement.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 90
      },
      "nodeContext" : "attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 92
      },
      "nodeContext" : "attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1971,
        "startLineNumber" : 173,
        "startColumnNumber" : 67,
        "endLineNumber" : 225,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String statement.toString()=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statement.toString());\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2422,
        "startLineNumber" : 173,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (PreparedStatement statement=readSessionStatement(id)){\n  String statement.toString()=statement.toString();\n  span.setAttribute(DATABASE_STATEMENT,statement.toString());\n  span.setAttribute(DATABASE_OPERATION,\"select\");\n  attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n  attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n  try (ResultSet sessions=statement.executeQuery()){\n    if (!sessions.next()) {\n      NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n    rawUri=sessions.getString(SESSION_URI_COL);\n    String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n    caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n  }\n   CAPABILITIES_EVENT.accept(attributeMap,caps);\n  try {\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    uri=new URI(rawUri);\n  }\n catch (  URISyntaxException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.INTERNAL);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n  }\n  span.addEvent(\"Retrieved session from the database\",attributeMap);\n  return new Session(id,uri,caps);\n}\n catch (SQLException e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw new JdbcException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 330,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2665,
        "startLineNumber" : 167,
        "startColumnNumber" : 62,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statement.toString()=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statement.toString());\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2772,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n  SESSION_ID.accept(span,id);\n  SESSION_ID_EVENT.accept(attributeMap,id);\n  setCommonSpanAttributes(span);\n  setCommonEventAttributes(attributeMap);\n  try (PreparedStatement statement=readSessionStatement(id)){\n    String statement.toString()=statement.toString();\n    span.setAttribute(DATABASE_STATEMENT,statement.toString());\n    span.setAttribute(DATABASE_OPERATION,\"select\");\n    attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n    attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n    try (ResultSet sessions=statement.executeQuery()){\n      if (!sessions.next()) {\n        NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.NOT_FOUND);\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n      rawUri=sessions.getString(SESSION_URI_COL);\n      String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n      caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n    }\n     CAPABILITIES_EVENT.accept(attributeMap,caps);\n    try {\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      uri=new URI(rawUri);\n    }\n catch (    URISyntaxException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.INTERNAL);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n    }\n    span.addEvent(\"Retrieved session from the database\",attributeMap);\n    return new Session(id,uri,caps);\n  }\n catch (  SQLException e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw new JdbcException(e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 363,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 158,
        "startColumnNumber" : 65,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statement.toString()=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statement.toString());\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Session get(SessionId id) throws NoSuchSessionException {\n  Require.nonNull(\"Session ID\",id);\n  URI uri=null;\n  Capabilities caps=null;\n  String rawUri=null;\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Span span=tracer.getCurrentContext().createSpan(\"SELECT * from  sessions_map where session_ids = ?\")){\n    SESSION_ID.accept(span,id);\n    SESSION_ID_EVENT.accept(attributeMap,id);\n    setCommonSpanAttributes(span);\n    setCommonEventAttributes(attributeMap);\n    try (PreparedStatement statement=readSessionStatement(id)){\n      String statement.toString()=statement.toString();\n      span.setAttribute(DATABASE_STATEMENT,statement.toString());\n      span.setAttribute(DATABASE_OPERATION,\"select\");\n      attributeMap.put(DATABASE_OPERATION,EventAttribute.setValue(\"select\"));\n      attributeMap.put(DATABASE_STATEMENT,EventAttribute.setValue(statement.toString()));\n      try (ResultSet sessions=statement.executeQuery()){\n        if (!sessions.next()) {\n          NoSuchSessionException exception=new NoSuchSessionException(\"Unable to find session.\");\n          span.setAttribute(\"error\",true);\n          span.setStatus(Status.NOT_FOUND);\n          EXCEPTION.accept(attributeMap,exception);\n          attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Session id does not exist in the database :\" + exception.getMessage()));\n          span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n          throw exception;\n        }\n        rawUri=sessions.getString(SESSION_URI_COL);\n        String rawCapabilities=sessions.getString(SESSION_CAPS_COL);\n        caps=rawCapabilities == null ? new ImmutableCapabilities() : JSON.toType(rawCapabilities,Capabilities.class);\n      }\n       CAPABILITIES_EVENT.accept(attributeMap,caps);\n      try {\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        uri=new URI(rawUri);\n      }\n catch (      URISyntaxException e) {\n        span.setAttribute(\"error\",true);\n        span.setStatus(Status.INTERNAL);\n        EXCEPTION.accept(attributeMap,e);\n        attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(rawUri));\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to convert session id to uri: \" + e.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw new NoSuchSessionException(String.format(\"Unable to convert session id (%s) to uri: %s\",id,rawUri),e);\n      }\n      span.addEvent(\"Retrieved session from the database\",attributeMap);\n      return new Session(id,uri,caps);\n    }\n catch (    SQLException e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to get session information from the database: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw new JdbcException(e);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 415,
      "astHeight" : 16
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 175,
    "startColumnNumber" : 46,
    "endLineNumber" : 175,
    "endColumnNumber" : 66
  }, {
    "charLength" : 20,
    "startLineNumber" : 178,
    "startColumnNumber" : 69,
    "endLineNumber" : 178,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}