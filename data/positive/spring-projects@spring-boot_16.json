{
  "id" : 16,
  "expression" : "getSamples(meters)",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "22a6ee03ebe9326364c3c79318942dc0694189f3",
  "filePath" : "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 1,
  "expressionList" : [ {
    "nodeContext" : "getSamples(meters)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 90,
      "startColumnNumber" : 25,
      "endLineNumber" : 90,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 90,
        "startColumnNumber" : 25,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "samples=getSamples(meters)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Map<Statistic,Double> samples=getSamples(meters);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 81,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@ReadOperation public MetricResponse metric(@Selector String requiredMetricName,@Nullable List<String> tag){\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 146,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Map<Statistic,Double> samples=getSamples(meters);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : null
  }, {
    "nodeContext" : "samples",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 94,
      "startColumnNumber" : 11,
      "endLineNumber" : 94,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "asList(samples,MetricResponse.Sample::new)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 93,
        "startColumnNumber" : 9,
        "endLineNumber" : 95,
        "endColumnNumber" : 60
      },
      "nodeContext" : "new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 61
      },
      "nodeContext" : "return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 81,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 79,
        "startColumnNumber" : 1,
        "endLineNumber" : 96,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@ReadOperation public MetricResponse metric(@Selector String requiredMetricName,@Nullable List<String> tag){\n  Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(\":\")),\"Each tag parameter must be in the form key:value\");\n  List<Tag> tags=parseTags(tag);\n  List<Meter> meters=new ArrayList<>();\n  collectMeters(meters,this.registry,requiredMetricName,tags);\n  if (meters.isEmpty()) {\n    return null;\n  }\n  Map<Statistic,Double> samples=getSamples(meters);\n  Map<String,List<String>> availableTags=getAvailableTags(meters);\n  tags.forEach((t) -> availableTags.remove(t.getKey()));\n  return new MetricResponse(requiredMetricName,asList(samples,MetricResponse.Sample::new),asList(availableTags,MetricResponse.AvailableTag::new));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 146,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "asList(samples,MetricResponse.Sample::new)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<org.springframework.boot.actuate.metrics.Statistic,java.lang.Double>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 90,
    "startColumnNumber" : 25,
    "endLineNumber" : 90,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 94,
    "startColumnNumber" : 11,
    "endLineNumber" : 94,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}