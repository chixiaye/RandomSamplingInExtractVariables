{
  "id" : 13,
  "expression" : "getIntervals()",
  "projectName" : "apache@druid",
  "commitID" : "58294329b77a563c5eb9327e9365c48ad60c0021",
  "filePath" : "processing/src/main/java/org/apache/druid/query/groupby/GroupByQuery.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "getIntervals()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 721,
      "startColumnNumber" : 10,
      "endLineNumber" : 721,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 721,
        "startColumnNumber" : 10,
        "endLineNumber" : 721,
        "endColumnNumber" : 34
      },
      "nodeContext" : "getIntervals().isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 721,
        "startColumnNumber" : 6,
        "endLineNumber" : 724,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (getIntervals().isEmpty()) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 719,
        "startColumnNumber" : 54,
        "endLineNumber" : 727,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 719,
        "startColumnNumber" : 11,
        "endLineNumber" : 729,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Granularities.ALL.equals(granularity)) {\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n else {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 717,
        "startColumnNumber" : 4,
        "endLineNumber" : 729,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!timestampStringFromContext.isEmpty()) {\n  return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n}\n else if (Granularities.ALL.equals(granularity)) {\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n else {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 713,
        "startColumnNumber" : 2,
        "endLineNumber" : 730,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String timestampStringFromContext=getContextValue(CTX_KEY_FUDGE_TIMESTAMP,\"\");\n  final Granularity granularity=getGranularity();\n  if (!timestampStringFromContext.isEmpty()) {\n    return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n  }\n else   if (Granularities.ALL.equals(granularity)) {\n    final List<Interval> getIntervals()=getIntervals();\n    if (getIntervals().isEmpty()) {\n      return null;\n    }\n    final DateTime timeStart=getIntervals().get(0).getStart();\n    return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 785,
        "startLineNumber" : 708,
        "startColumnNumber" : 2,
        "endLineNumber" : 730,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes the timestamp that will be returned by  {@link #getUniversalTimestamp()}.\n */\n@Nullable private DateTime computeUniversalTimestamp(){\n  final String timestampStringFromContext=getContextValue(CTX_KEY_FUDGE_TIMESTAMP,\"\");\n  final Granularity granularity=getGranularity();\n  if (!timestampStringFromContext.isEmpty()) {\n    return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n  }\n else   if (Granularities.ALL.equals(granularity)) {\n    final List<Interval> getIntervals()=getIntervals();\n    if (getIntervals().isEmpty()) {\n      return null;\n    }\n    final DateTime timeStart=getIntervals().get(0).getStart();\n    return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 13
    } ],
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.groupby.Interval>"
  }, {
    "nodeContext" : "getIntervals()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 725,
      "startColumnNumber" : 33,
      "endLineNumber" : 725,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 725,
        "startColumnNumber" : 33,
        "endLineNumber" : 725,
        "endColumnNumber" : 54
      },
      "nodeContext" : "getIntervals().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 725,
        "startColumnNumber" : 33,
        "endLineNumber" : 725,
        "endColumnNumber" : 65
      },
      "nodeContext" : "getIntervals().get(0).getStart()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 725,
        "startColumnNumber" : 21,
        "endLineNumber" : 725,
        "endColumnNumber" : 63
      },
      "nodeContext" : "timeStart=getIntervals().get(0).getStart()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 725,
        "startColumnNumber" : 6,
        "endLineNumber" : 725,
        "endColumnNumber" : 65
      },
      "nodeContext" : "final DateTime timeStart=getIntervals().get(0).getStart();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 719,
        "startColumnNumber" : 54,
        "endLineNumber" : 727,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 719,
        "startColumnNumber" : 11,
        "endLineNumber" : 729,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Granularities.ALL.equals(granularity)) {\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n else {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 717,
        "startColumnNumber" : 4,
        "endLineNumber" : 729,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!timestampStringFromContext.isEmpty()) {\n  return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n}\n else if (Granularities.ALL.equals(granularity)) {\n  final List<Interval> getIntervals()=getIntervals();\n  if (getIntervals().isEmpty()) {\n    return null;\n  }\n  final DateTime timeStart=getIntervals().get(0).getStart();\n  return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n}\n else {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 713,
        "startColumnNumber" : 2,
        "endLineNumber" : 730,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String timestampStringFromContext=getContextValue(CTX_KEY_FUDGE_TIMESTAMP,\"\");\n  final Granularity granularity=getGranularity();\n  if (!timestampStringFromContext.isEmpty()) {\n    return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n  }\n else   if (Granularities.ALL.equals(granularity)) {\n    final List<Interval> getIntervals()=getIntervals();\n    if (getIntervals().isEmpty()) {\n      return null;\n    }\n    final DateTime timeStart=getIntervals().get(0).getStart();\n    return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 785,
        "startLineNumber" : 708,
        "startColumnNumber" : 2,
        "endLineNumber" : 730,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes the timestamp that will be returned by  {@link #getUniversalTimestamp()}.\n */\n@Nullable private DateTime computeUniversalTimestamp(){\n  final String timestampStringFromContext=getContextValue(CTX_KEY_FUDGE_TIMESTAMP,\"\");\n  final Granularity granularity=getGranularity();\n  if (!timestampStringFromContext.isEmpty()) {\n    return DateTimes.utc(Long.parseLong(timestampStringFromContext));\n  }\n else   if (Granularities.ALL.equals(granularity)) {\n    final List<Interval> getIntervals()=getIntervals();\n    if (getIntervals().isEmpty()) {\n      return null;\n    }\n    final DateTime timeStart=getIntervals().get(0).getStart();\n    return granularity.getIterable(new Interval(timeStart,timeStart.plus(1))).iterator().next().getStart();\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 13
    } ],
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.groupby.Interval>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 721,
    "startColumnNumber" : 10,
    "endLineNumber" : 721,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 725,
    "startColumnNumber" : 33,
    "endLineNumber" : 725,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}