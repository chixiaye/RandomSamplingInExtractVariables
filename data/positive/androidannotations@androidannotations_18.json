{
  "id" : 18,
  "expression" : "executableElement.getSimpleName().toString()",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "dba506998f98f35e0178977079d60fe804aa4812",
  "filePath" : "AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/helper/ValidatorHelper.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "executableElement.getSimpleName().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 770,
      "startColumnNumber" : 65,
      "endLineNumber" : 770,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 770,
        "startColumnNumber" : 53,
        "endLineNumber" : 770,
        "endColumnNumber" : 206
      },
      "nodeContext" : "\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 770,
        "startColumnNumber" : 16,
        "endLineNumber" : 770,
        "endColumnNumber" : 206
      },
      "nodeContext" : "annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 770,
        "startColumnNumber" : 16,
        "endLineNumber" : 770,
        "endColumnNumber" : 208
      },
      "nodeContext" : "annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 769,
        "startColumnNumber" : 62,
        "endLineNumber" : 771,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 769,
        "startColumnNumber" : 12,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (executableElement.getParameters().size() > 0) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 766,
        "startColumnNumber" : 15,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 764,
        "startColumnNumber" : 8,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!element.getKind().equals(ElementKind.METHOD)) {\n  annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n}\n else {\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 763,
        "startColumnNumber" : 49,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isPrefMethod(Element element){\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 15
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "executableElement.getSimpleName().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 775,
      "startColumnNumber" : 69,
      "endLineNumber" : 775,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 775,
        "startColumnNumber" : 57,
        "endLineNumber" : 775,
        "endColumnNumber" : 227
      },
      "nodeContext" : "\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 775,
        "startColumnNumber" : 20,
        "endLineNumber" : 775,
        "endColumnNumber" : 227
      },
      "nodeContext" : "annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 775,
        "startColumnNumber" : 20,
        "endLineNumber" : 775,
        "endColumnNumber" : 229
      },
      "nodeContext" : "annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 774,
        "startColumnNumber" : 67,
        "endLineNumber" : 776,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 774,
        "startColumnNumber" : 16,
        "endLineNumber" : 782,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n    annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 771,
        "startColumnNumber" : 19,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 769,
        "startColumnNumber" : 12,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (executableElement.getParameters().size() > 0) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 766,
        "startColumnNumber" : 15,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 764,
        "startColumnNumber" : 8,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!element.getKind().equals(ElementKind.METHOD)) {\n  annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n}\n else {\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 763,
        "startColumnNumber" : 49,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isPrefMethod(Element element){\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 15
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "executableElement.getSimpleName().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 777,
      "startColumnNumber" : 59,
      "endLineNumber" : 777,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 777,
        "startColumnNumber" : 24,
        "endLineNumber" : 777,
        "endColumnNumber" : 104
      },
      "nodeContext" : "INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 777,
        "startColumnNumber" : 20,
        "endLineNumber" : 781,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n  annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 776,
        "startColumnNumber" : 23,
        "endLineNumber" : 782,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n    annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 774,
        "startColumnNumber" : 16,
        "endLineNumber" : 782,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n    annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 771,
        "startColumnNumber" : 19,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 769,
        "startColumnNumber" : 12,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (executableElement.getParameters().size() > 0) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 766,
        "startColumnNumber" : 15,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 764,
        "startColumnNumber" : 8,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!element.getKind().equals(ElementKind.METHOD)) {\n  annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n}\n else {\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 763,
        "startColumnNumber" : 49,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isPrefMethod(Element element){\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 15
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "executableElement.getSimpleName().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 778,
      "startColumnNumber" : 82,
      "endLineNumber" : 778,
      "endColumnNumber" : 126
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 778,
        "startColumnNumber" : 61,
        "endLineNumber" : 778,
        "endColumnNumber" : 210
      },
      "nodeContext" : "\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 778,
        "startColumnNumber" : 24,
        "endLineNumber" : 778,
        "endColumnNumber" : 210
      },
      "nodeContext" : "annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 778,
        "startColumnNumber" : 24,
        "endLineNumber" : 778,
        "endColumnNumber" : 212
      },
      "nodeContext" : "annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 777,
        "startColumnNumber" : 72,
        "endLineNumber" : 779,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 777,
        "startColumnNumber" : 20,
        "endLineNumber" : 781,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n  annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 776,
        "startColumnNumber" : 23,
        "endLineNumber" : 782,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n    annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 774,
        "startColumnNumber" : 16,
        "endLineNumber" : 782,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n    annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 771,
        "startColumnNumber" : 19,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 769,
        "startColumnNumber" : 12,
        "endLineNumber" : 783,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (executableElement.getParameters().size() > 0) {\n  annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n}\n else {\n  String returnType=executableElement.getReturnType().toString();\n  if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n      annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 766,
        "startColumnNumber" : 15,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 764,
        "startColumnNumber" : 8,
        "endLineNumber" : 784,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!element.getKind().equals(ElementKind.METHOD)) {\n  annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n}\n else {\n  ExecutableElement executableElement=(ExecutableElement)element;\n  String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n  if (executableElement.getParameters().size() > 0) {\n    annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n  }\n else {\n    String returnType=executableElement.getReturnType().toString();\n    if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n        annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        return true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 763,
        "startColumnNumber" : 49,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 786,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isPrefMethod(Element element){\n  if (!element.getKind().equals(ElementKind.METHOD)) {\n    annotationHelper.printError(element,\"Only methods are allowed in an \" + annotationHelper.annotationName() + \" annotated interface\");\n  }\n else {\n    ExecutableElement executableElement=(ExecutableElement)element;\n    String executableElement.getSimpleName().toString()=executableElement.getSimpleName().toString();\n    if (executableElement.getParameters().size() > 0) {\n      annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should have no parameters in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n    }\n else {\n      String returnType=executableElement.getReturnType().toString();\n      if (!VALID_PREF_RETURN_TYPES.contains(returnType)) {\n        annotationHelper.printError(element,\"Method \" + executableElement.getSimpleName().toString() + \" should only return preference simple types in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n      }\n else {\n        if (INVALID_PREF_METHOD_NAMES.contains(executableElement.getSimpleName().toString())) {\n          annotationHelper.printError(element,\"The method name \" + executableElement.getSimpleName().toString() + \" is forbidden in an \"+ annotationHelper.annotationName()+ \" annotated interface\");\n        }\n else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 16
    } ],
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 770,
    "startColumnNumber" : 65,
    "endLineNumber" : 770,
    "endColumnNumber" : 109
  }, {
    "charLength" : 44,
    "startLineNumber" : 775,
    "startColumnNumber" : 69,
    "endLineNumber" : 775,
    "endColumnNumber" : 113
  }, {
    "charLength" : 44,
    "startLineNumber" : 777,
    "startColumnNumber" : 59,
    "endLineNumber" : 777,
    "endColumnNumber" : 103
  }, {
    "charLength" : 44,
    "startLineNumber" : 778,
    "startColumnNumber" : 82,
    "endLineNumber" : 778,
    "endColumnNumber" : 126
  } ],
  "layoutRelationDataList" : [ ]
}