{
  "id" : 26,
  "expression" : "tableSize(initialCapacity,loadFactor)",
  "projectName" : "libgdx@libgdx",
  "commitID" : "b80344b69d04bd4c9711f5d50489a0c76e2b0130",
  "filePath" : "gdx/src/com/badlogic/gdx/utils/IntFloatMap.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "tableSize(initialCapacity,loadFactor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 93,
      "startColumnNumber" : 20,
      "endLineNumber" : 93,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 93,
        "endColumnNumber" : 70
      },
      "nodeContext" : "tableSize(initialCapacity,loadFactor) * loadFactor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 93,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(tableSize(initialCapacity,loadFactor) * loadFactor)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 93,
        "startColumnNumber" : 14,
        "endLineNumber" : 93,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(int)(tableSize(initialCapacity,loadFactor) * loadFactor)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 69
      },
      "nodeContext" : "threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 71
      },
      "nodeContext" : "threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 87,
        "startColumnNumber" : 60,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 84,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates a new map with the specified initial capacity and load factor. This map will hold initialCapacity items before growing the backing table.\n * @param initialCapacity If not a power of two, it is increased to the next nearest power of two. \n */\npublic IntFloatMap(int initialCapacity,float loadFactor){\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 9
    } ],
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "tableSize(initialCapacity,loadFactor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 94,
      "startColumnNumber" : 9,
      "endLineNumber" : 94,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 94,
        "startColumnNumber" : 9,
        "endLineNumber" : 94,
        "endColumnNumber" : 50
      },
      "nodeContext" : "tableSize(initialCapacity,loadFactor) - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 48
      },
      "nodeContext" : "mask=tableSize(initialCapacity,loadFactor) - 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 50
      },
      "nodeContext" : "mask=tableSize(initialCapacity,loadFactor) - 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 87,
        "startColumnNumber" : 60,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 84,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates a new map with the specified initial capacity and load factor. This map will hold initialCapacity items before growing the backing table.\n * @param initialCapacity If not a power of two, it is increased to the next nearest power of two. \n */\npublic IntFloatMap(int initialCapacity,float loadFactor){\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "tableSize(initialCapacity,loadFactor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 97,
      "startColumnNumber" : 21,
      "endLineNumber" : 97,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 97,
        "endColumnNumber" : 59
      },
      "nodeContext" : "new int[tableSize(initialCapacity,loadFactor)]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 57
      },
      "nodeContext" : "keyTable=new int[tableSize(initialCapacity,loadFactor)]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 59
      },
      "nodeContext" : "keyTable=new int[tableSize(initialCapacity,loadFactor)];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 87,
        "startColumnNumber" : 60,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 84,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates a new map with the specified initial capacity and load factor. This map will hold initialCapacity items before growing the backing table.\n * @param initialCapacity If not a power of two, it is increased to the next nearest power of two. \n */\npublic IntFloatMap(int initialCapacity,float loadFactor){\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "tableSize(initialCapacity,loadFactor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 98,
      "startColumnNumber" : 25,
      "endLineNumber" : 98,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 98,
        "startColumnNumber" : 15,
        "endLineNumber" : 98,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new float[tableSize(initialCapacity,loadFactor)]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 61
      },
      "nodeContext" : "valueTable=new float[tableSize(initialCapacity,loadFactor)]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 63
      },
      "nodeContext" : "valueTable=new float[tableSize(initialCapacity,loadFactor)];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 87,
        "startColumnNumber" : 60,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 84,
        "startColumnNumber" : 1,
        "endLineNumber" : 99,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates a new map with the specified initial capacity and load factor. This map will hold initialCapacity items before growing the backing table.\n * @param initialCapacity If not a power of two, it is increased to the next nearest power of two. \n */\npublic IntFloatMap(int initialCapacity,float loadFactor){\n  if (loadFactor <= 0f || loadFactor >= 1f)   throw new IllegalArgumentException(\"loadFactor must be > 0 and < 1: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  int tableSize(initialCapacity,loadFactor)=tableSize(initialCapacity,loadFactor)(initialCapacity,loadFactor);\n  threshold=(int)(tableSize(initialCapacity,loadFactor) * loadFactor);\n  mask=tableSize(initialCapacity,loadFactor) - 1;\n  shift=Long.numberOfLeadingZeros(mask);\n  keyTable=new int[tableSize(initialCapacity,loadFactor)];\n  valueTable=new float[tableSize(initialCapacity,loadFactor)];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 93,
    "startColumnNumber" : 20,
    "endLineNumber" : 93,
    "endColumnNumber" : 57
  }, {
    "charLength" : 37,
    "startLineNumber" : 94,
    "startColumnNumber" : 9,
    "endLineNumber" : 94,
    "endColumnNumber" : 46
  }, {
    "charLength" : 37,
    "startLineNumber" : 97,
    "startColumnNumber" : 21,
    "endLineNumber" : 97,
    "endColumnNumber" : 58
  }, {
    "charLength" : 37,
    "startLineNumber" : 98,
    "startColumnNumber" : 25,
    "endLineNumber" : 98,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}