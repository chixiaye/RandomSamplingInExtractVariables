{
  "id" : 15,
  "expression" : "ActivityThread.mInitialApplication.get(mainThread)",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "b1f42ae67f44daf99e89effc9bca8e50fefb5e64",
  "filePath" : "VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "ActivityThread.mInitialApplication.get(mainThread)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 287,
      "startColumnNumber" : 16,
      "endLineNumber" : 287,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 287,
        "startColumnNumber" : 16,
        "endLineNumber" : 287,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ActivityThread.mInitialApplication.get(mainThread) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 287,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n  mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 280,
        "startColumnNumber" : 12,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  mInstrumentation.callApplicationOnCreate(mInitialApplication);\n  PatchManager.getInstance().checkEnv(HCallbackHook.class);\n  if (conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n  if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n    mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 709,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  mInstrumentation.callApplicationOnCreate(mInitialApplication);\n  PatchManager.getInstance().checkEnv(HCallbackHook.class);\n  if (conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n  if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n    mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n  }\n}\n catch (Exception e) {\n  if (!mInstrumentation.onException(mInitialApplication,e)) {\n    throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4389,
        "startLineNumber" : 185,
        "startColumnNumber" : 104,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public synchronized void start(){\n      new Exception().printStackTrace();\n      super.start();\n    }\n  }\n);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  IOHook.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  IOHook.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  List<ProviderInfo> providers=VPackageManager.get().queryContentProviders(data.processName,vuid,PackageManager.GET_META_DATA);\n  if (providers != null) {\n    installContentProviders(mInitialApplication,providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    PatchManager.getInstance().checkEnv(HCallbackHook.class);\n    if (conflict) {\n      PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n    if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n      mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 659,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4486,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void bindApplicationNoCheck(String packageName,String processName,ConditionVariable lock){\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public synchronized void start(){\n      new Exception().printStackTrace();\n      super.start();\n    }\n  }\n);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  IOHook.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  IOHook.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  List<ProviderInfo> providers=VPackageManager.get().queryContentProviders(data.processName,vuid,PackageManager.GET_META_DATA);\n  if (providers != null) {\n    installContentProviders(mInitialApplication,providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    PatchManager.getInstance().checkEnv(HCallbackHook.class);\n    if (conflict) {\n      PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n    if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n      mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 675,
      "astHeight" : 13
    } ],
    "tokenLength" : 4,
    "type" : "com.lody.virtual.client.Application"
  }, {
    "nodeContext" : "ActivityThread.mInitialApplication.get(mainThread)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 288,
      "startColumnNumber" : 38,
      "endLineNumber" : 288,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 288,
        "startColumnNumber" : 16,
        "endLineNumber" : 288,
        "endColumnNumber" : 86
      },
      "nodeContext" : "mInitialApplication=ActivityThread.mInitialApplication.get(mainThread)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 288,
        "startColumnNumber" : 16,
        "endLineNumber" : 288,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 287,
        "startColumnNumber" : 36,
        "endLineNumber" : 289,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 287,
        "startColumnNumber" : 12,
        "endLineNumber" : 289,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n  mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 280,
        "startColumnNumber" : 12,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  mInstrumentation.callApplicationOnCreate(mInitialApplication);\n  PatchManager.getInstance().checkEnv(HCallbackHook.class);\n  if (conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n  if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n    mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 709,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  mInstrumentation.callApplicationOnCreate(mInitialApplication);\n  PatchManager.getInstance().checkEnv(HCallbackHook.class);\n  if (conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n  if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n    mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n  }\n}\n catch (Exception e) {\n  if (!mInstrumentation.onException(mInitialApplication,e)) {\n    throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4389,
        "startLineNumber" : 185,
        "startColumnNumber" : 104,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public synchronized void start(){\n      new Exception().printStackTrace();\n      super.start();\n    }\n  }\n);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  IOHook.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  IOHook.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  List<ProviderInfo> providers=VPackageManager.get().queryContentProviders(data.processName,vuid,PackageManager.GET_META_DATA);\n  if (providers != null) {\n    installContentProviders(mInitialApplication,providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    PatchManager.getInstance().checkEnv(HCallbackHook.class);\n    if (conflict) {\n      PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n    if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n      mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 659,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4486,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void bindApplicationNoCheck(String packageName,String processName,ConditionVariable lock){\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  Runtime.getRuntime().addShutdownHook(new Thread(){\n    @Override public synchronized void start(){\n      new Exception().printStackTrace();\n      super.start();\n    }\n  }\n);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  IOHook.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  IOHook.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  List<ProviderInfo> providers=VPackageManager.get().queryContentProviders(data.processName,vuid,PackageManager.GET_META_DATA);\n  if (providers != null) {\n    installContentProviders(mInitialApplication,providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    PatchManager.getInstance().checkEnv(HCallbackHook.class);\n    if (conflict) {\n      PatchManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application ActivityThread.mInitialApplication.get(mainThread)=ActivityThread.mInitialApplication.get(mainThread);\n    if (ActivityThread.mInitialApplication.get(mainThread) != null) {\n      mInitialApplication=ActivityThread.mInitialApplication.get(mainThread);\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 675,
      "astHeight" : 13
    } ],
    "tokenLength" : 4,
    "type" : "com.lody.virtual.client.Application"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 287,
    "startColumnNumber" : 16,
    "endLineNumber" : 287,
    "endColumnNumber" : 66
  }, {
    "charLength" : 50,
    "startLineNumber" : 288,
    "startColumnNumber" : 38,
    "endLineNumber" : 288,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}