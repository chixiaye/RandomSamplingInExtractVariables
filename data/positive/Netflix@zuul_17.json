{
  "id" : 17,
  "expression" : "HttpHeaderNames.get(name)",
  "projectName" : "Netflix@zuul",
  "commitID" : "4dd944db59b0a82e7432c25822231e4a83296e77",
  "filePath" : "zuul-servletapi/src/main/java/com/netflix/zuul/context/ServletSessionContextFactory.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "HttpHeaderNames.get(name)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 62,
      "startColumnNumber" : 31,
      "endLineNumber" : 62,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 63
      },
      "nodeContext" : "reqHeaders.add(HttpHeaderNames.get(name),value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 65
      },
      "nodeContext" : "reqHeaders.add(HttpHeaderNames.get(name),value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String value=(String)values.nextElement();\n  reqHeaders.add(HttpHeaderNames.get(name),value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (values.hasMoreElements()) {\n  String value=(String)values.nextElement();\n  reqHeaders.add(HttpHeaderNames.get(name),value);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 314,
        "startLineNumber" : 56,
        "startColumnNumber" : 46,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=(String)headerNames.nextElement();\n  Enumeration values=servletRequest.getHeaders(name);\n  HeaderName HttpHeaderNames.get(name)=HttpHeaderNames.get(name);\n  while (values.hasMoreElements()) {\n    String value=(String)values.nextElement();\n    reqHeaders.add(HttpHeaderNames.get(name),value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (headerNames.hasMoreElements()) {\n  String name=(String)headerNames.nextElement();\n  Enumeration values=servletRequest.getHeaders(name);\n  HeaderName HttpHeaderNames.get(name)=HttpHeaderNames.get(name);\n  while (values.hasMoreElements()) {\n    String value=(String)values.nextElement();\n    reqHeaders.add(HttpHeaderNames.get(name),value);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2075,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Headers reqHeaders=new Headers();\n  Enumeration headerNames=servletRequest.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    String name=(String)headerNames.nextElement();\n    Enumeration values=servletRequest.getHeaders(name);\n    HeaderName HttpHeaderNames.get(name)=HttpHeaderNames.get(name);\n    while (values.hasMoreElements()) {\n      String value=(String)values.nextElement();\n      reqHeaders.add(HttpHeaderNames.get(name),value);\n    }\n  }\n  HttpQueryParams queryParams=HttpQueryParams.parse(servletRequest.getQueryString());\n  copyServletRequestAttributes(context,servletRequest);\n  HttpRequestMessage request=new HttpRequestMessageImpl(context,servletRequest.getProtocol(),servletRequest.getMethod(),servletRequest.getRequestURI(),queryParams,reqHeaders,servletRequest.getRemoteAddr(),servletRequest.getScheme(),servletRequest.getServerPort(),servletRequest.getServerName());\n  request.storeInboundRequest();\n  InputStream bodyInput;\n  try {\n    bodyInput=servletRequest.getInputStream();\n  }\n catch (  IOException e) {\n    String errorMsg=\"Error reading ServletInputStream.\";\n    LOG.error(errorMsg,e);\n    throw new RuntimeException(errorMsg,e);\n  }\n  if (bodyInput != null) {\n    Observable<ByteBuf> bodyObs=ByteBufUtils.fromInputStream(bodyInput);\n    bodyObs=bodyObs.onErrorReturn((e) -> {\n      if (SocketTimeoutException.class.isAssignableFrom(e.getClass())) {\n        LOG.error(\"SocketTimeoutException reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n else {\n        LOG.error(\"Error reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n      ZuulException ze=new ZuulException(e.getMessage(),e,\"TIMEOUT_READING_REQ_BODY\");\n      ze.setStatusCode(400);\n      request.getContext().setError(ze);\n      request.getContext().setShouldSendErrorResponse(true);\n      return Unpooled.EMPTY_BUFFER;\n    }\n);\n    request.setBodyStream(bodyObs);\n  }\n  return request;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ZuulMessage create(SessionContext context,HttpServletRequest servletRequest){\n  Headers reqHeaders=new Headers();\n  Enumeration headerNames=servletRequest.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    String name=(String)headerNames.nextElement();\n    Enumeration values=servletRequest.getHeaders(name);\n    HeaderName HttpHeaderNames.get(name)=HttpHeaderNames.get(name);\n    while (values.hasMoreElements()) {\n      String value=(String)values.nextElement();\n      reqHeaders.add(HttpHeaderNames.get(name),value);\n    }\n  }\n  HttpQueryParams queryParams=HttpQueryParams.parse(servletRequest.getQueryString());\n  copyServletRequestAttributes(context,servletRequest);\n  HttpRequestMessage request=new HttpRequestMessageImpl(context,servletRequest.getProtocol(),servletRequest.getMethod(),servletRequest.getRequestURI(),queryParams,reqHeaders,servletRequest.getRemoteAddr(),servletRequest.getScheme(),servletRequest.getServerPort(),servletRequest.getServerName());\n  request.storeInboundRequest();\n  InputStream bodyInput;\n  try {\n    bodyInput=servletRequest.getInputStream();\n  }\n catch (  IOException e) {\n    String errorMsg=\"Error reading ServletInputStream.\";\n    LOG.error(errorMsg,e);\n    throw new RuntimeException(errorMsg,e);\n  }\n  if (bodyInput != null) {\n    Observable<ByteBuf> bodyObs=ByteBufUtils.fromInputStream(bodyInput);\n    bodyObs=bodyObs.onErrorReturn((e) -> {\n      if (SocketTimeoutException.class.isAssignableFrom(e.getClass())) {\n        LOG.error(\"SocketTimeoutException reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n else {\n        LOG.error(\"Error reading request body from inputstream. error=\" + String.valueOf(e.getMessage()) + \", request-info: \"+ request.getInfoForLogging());\n      }\n      ZuulException ze=new ZuulException(e.getMessage(),e,\"TIMEOUT_READING_REQ_BODY\");\n      ze.setStatusCode(400);\n      request.getContext().setError(ze);\n      request.getContext().setShouldSendErrorResponse(true);\n      return Unpooled.EMPTY_BUFFER;\n    }\n);\n    request.setBodyStream(bodyObs);\n  }\n  return request;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 17
    } ],
    "tokenLength" : 3,
    "type" : "com.netflix.zuul.message.HeaderName"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 62,
    "startColumnNumber" : 31,
    "endLineNumber" : 62,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}