{
  "id" : 14,
  "expression" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
  "projectName" : "apache@flink",
  "commitID" : "33e3b75bb74dad5f75ad0bea788906e24c3df4e8",
  "filePath" : "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointFailureManager.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 109,
      "startColumnNumber" : 16,
      "endLineNumber" : 109,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 128
      },
      "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 244
      },
      "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 26
      },
      "nodeContext" : "LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 27
      },
      "nodeContext" : "LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 100,
        "startColumnNumber" : 49,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2320,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Failures on JM: <ul> <li>all checkpoints - go against failure counter. <li>any savepoints - donâ€™t do anything, manual action, the failover will not help anyway. </ul> <p>Failures on TM: <ul> <li>all checkpoints - go against failure counter (failover might help and we want to notify users). <li>sync savepoints - we must always fail, otherwise we risk deadlock when the job cancelation waiting for finishing savepoint which never happens. <li>non sync savepoints - go against failure counter (failover might help solve the problem). </ul>\n * @param pendingCheckpoint the failed checkpoint if it was initialized already.\n * @param checkpointProperties the checkpoint properties in order to determinate which handlestrategy can be used.\n * @param exception the checkpoint exception.\n * @param executionAttemptID the execution attempt id, as a safe guard.\n * @param job the JobID.\n * @param pendingCheckpointStats the pending checkpoint statistics.\n * @param statsTracker the tracker for checkpoint statistics.\n */\npublic void handleCheckpointException(@Nullable PendingCheckpoint pendingCheckpoint,CheckpointProperties checkpointProperties,CheckpointException exception,@Nullable ExecutionAttemptID executionAttemptID,JobID job,@Nullable PendingCheckpointStats pendingCheckpointStats,CheckpointStatsTracker statsTracker){\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "tokenLength" : 8,
    "type" : "long"
  }, {
    "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 109,
      "startColumnNumber" : 82,
      "endLineNumber" : 109,
      "endColumnNumber" : 169
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 244
      },
      "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 26
      },
      "nodeContext" : "LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 27
      },
      "nodeContext" : "LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 100,
        "startColumnNumber" : 49,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2320,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Failures on JM: <ul> <li>all checkpoints - go against failure counter. <li>any savepoints - donâ€™t do anything, manual action, the failover will not help anyway. </ul> <p>Failures on TM: <ul> <li>all checkpoints - go against failure counter (failover might help and we want to notify users). <li>sync savepoints - we must always fail, otherwise we risk deadlock when the job cancelation waiting for finishing savepoint which never happens. <li>non sync savepoints - go against failure counter (failover might help solve the problem). </ul>\n * @param pendingCheckpoint the failed checkpoint if it was initialized already.\n * @param checkpointProperties the checkpoint properties in order to determinate which handlestrategy can be used.\n * @param exception the checkpoint exception.\n * @param executionAttemptID the execution attempt id, as a safe guard.\n * @param job the JobID.\n * @param pendingCheckpointStats the pending checkpoint statistics.\n * @param statsTracker the tracker for checkpoint statistics.\n */\npublic void handleCheckpointException(@Nullable PendingCheckpoint pendingCheckpoint,CheckpointProperties checkpointProperties,CheckpointException exception,@Nullable ExecutionAttemptID executionAttemptID,JobID job,@Nullable PendingCheckpointStats pendingCheckpointStats,CheckpointStatsTracker statsTracker){\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 8
    } ],
    "tokenLength" : 8,
    "type" : "long"
  }, {
    "nodeContext" : "pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 114,
      "startColumnNumber" : 79,
      "endLineNumber" : 114,
      "endColumnNumber" : 166
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 165
      },
      "nodeContext" : "handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 167
      },
      "nodeContext" : "handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 113,
        "startColumnNumber" : 64,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isJobManagerFailure(exception,executionAttemptID)) {\n  handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n}\n else {\n  handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 100,
        "startColumnNumber" : 49,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2320,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Failures on JM: <ul> <li>all checkpoints - go against failure counter. <li>any savepoints - donâ€™t do anything, manual action, the failover will not help anyway. </ul> <p>Failures on TM: <ul> <li>all checkpoints - go against failure counter (failover might help and we want to notify users). <li>sync savepoints - we must always fail, otherwise we risk deadlock when the job cancelation waiting for finishing savepoint which never happens. <li>non sync savepoints - go against failure counter (failover might help solve the problem). </ul>\n * @param pendingCheckpoint the failed checkpoint if it was initialized already.\n * @param checkpointProperties the checkpoint properties in order to determinate which handlestrategy can be used.\n * @param exception the checkpoint exception.\n * @param executionAttemptID the execution attempt id, as a safe guard.\n * @param job the JobID.\n * @param pendingCheckpointStats the pending checkpoint statistics.\n * @param statsTracker the tracker for checkpoint statistics.\n */\npublic void handleCheckpointException(@Nullable PendingCheckpoint pendingCheckpoint,CheckpointProperties checkpointProperties,CheckpointException exception,@Nullable ExecutionAttemptID executionAttemptID,JobID job,@Nullable PendingCheckpointStats pendingCheckpointStats,CheckpointStatsTracker statsTracker){\n  long pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID()=pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID();\n  updateStatsAfterCheckpointFailed(pendingCheckpointStats,statsTracker,exception);\n  LOG.warn(\"Failed to trigger checkpoint {} for job {}. ({} consecutive failed attempts so far)\",pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID() == UNKNOWN_CHECKPOINT_ID ? \"UNKNOWN_CHECKPOINT_ID\" : pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID(),job,continuousFailureCounter.get(),exception);\n  if (isJobManagerFailure(exception,executionAttemptID)) {\n    handleJobLevelCheckpointException(checkpointProperties,exception,pendingCheckpoint == null ? UNKNOWN_CHECKPOINT_ID : pendingCheckpoint.getCheckpointID());\n  }\n else {\n    handleTaskLevelCheckpointException(checkNotNull(pendingCheckpoint),exception,checkNotNull(executionAttemptID));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "tokenLength" : 8,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 87,
    "startLineNumber" : 109,
    "startColumnNumber" : 16,
    "endLineNumber" : 109,
    "endColumnNumber" : 103
  }, {
    "charLength" : 87,
    "startLineNumber" : 109,
    "startColumnNumber" : 82,
    "endLineNumber" : 109,
    "endColumnNumber" : 169
  }, {
    "charLength" : 87,
    "startLineNumber" : 114,
    "startColumnNumber" : 79,
    "endLineNumber" : 114,
    "endColumnNumber" : 166
  } ],
  "layoutRelationDataList" : [ ]
}