{
  "id" : 22,
  "expression" : "typeUtils.erasure(enclosingElement.asType())",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "cdc587f9c9e62f5f7e7c8f821cb5c6362fa8a386",
  "filePath" : "butterknife/src/main/java/butterknife/Views.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "typeUtils.erasure(enclosingElement.asType())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 231,
      "startColumnNumber" : 29,
      "endLineNumber" : 231,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 74
      },
      "nodeContext" : "injectionTargets.add(typeUtils.erasure(enclosingElement.asType()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 76
      },
      "nodeContext" : "injectionTargets.add(typeUtils.erasure(enclosingElement.asType()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror typeUtils.erasure(enclosingElement.asType())=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(typeUtils.erasure(enclosingElement.asType()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1778,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror typeUtils.erasure(enclosingElement.asType())=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(typeUtils.erasure(enclosingElement.asType()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 240,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3705,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror typeUtils.erasure(enclosingElement.asType())=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(typeUtils.erasure(enclosingElement.asType()));\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror typeUtils.erasure(enclosingElement.asType())=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(typeUtils.erasure(enclosingElement.asType()));\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 13
    } ],
    "tokenLength" : 4,
    "type" : "javax.lang.model.type.TypeMirror"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 231,
    "startColumnNumber" : 29,
    "endLineNumber" : 231,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}