{
  "id" : 49,
  "expression" : "service.getUrl()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/node/config/DriverServiceSessionFactory.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "service.getUrl()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 102,
      "startColumnNumber" : 83,
      "endLineNumber" : 102,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 102,
        "startColumnNumber" : 83,
        "endLineNumber" : 102,
        "endColumnNumber" : 110
      },
      "nodeContext" : "service.getUrl().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 102,
        "endColumnNumber" : 111
      },
      "nodeContext" : "EventAttribute.setValue(service.getUrl().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 111
      },
      "nodeContext" : "attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 113
      },
      "nodeContext" : "attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 152,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  service.start();\n  URL service.getUrl()=service.getUrl();\n  attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n  HttpClient client=clientFactory.createClient(service.getUrl());\n  Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n  ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n  Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n  Dialect upstream=result.getDialect();\n  Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n  Response response=result.createResponse();\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n  attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n  Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n  Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n  if (reportedUri.isPresent()) {\n    caps=addCdpCapability(caps,reportedUri.get());\n  }\n else {\n    reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n  }\n  span.addEvent(\"Driver service created session\",attributeMap);\n  return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n    @Override public void stop(){\n      service.stop();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  service.start();\n  URL service.getUrl()=service.getUrl();\n  attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n  HttpClient client=clientFactory.createClient(service.getUrl());\n  Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n  ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n  Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n  Dialect upstream=result.getDialect();\n  Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n  Response response=result.createResponse();\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n  attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n  Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n  Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n  if (reportedUri.isPresent()) {\n    caps=addCdpCapability(caps,reportedUri.get());\n  }\n else {\n    reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n  }\n  span.addEvent(\"Driver service created session\",attributeMap);\n  return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n    @Override public void stop(){\n      service.stop();\n    }\n  }\n);\n}\n catch (Exception e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  service.stop();\n  return Optional.empty();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 327,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 90,
        "startColumnNumber" : 92,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  Capabilities capabilities=sessionRequest.getCapabilities();\n  CAPABILITIES.accept(span,capabilities);\n  CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n  DriverService service=builder.build();\n  try {\n    service.start();\n    URL service.getUrl()=service.getUrl();\n    attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n    HttpClient client=clientFactory.createClient(service.getUrl());\n    Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n    ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n    Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n    Dialect upstream=result.getDialect();\n    Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n    Response response=result.createResponse();\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n    attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n    Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n    Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n else {\n      reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n    }\n    span.addEvent(\"Driver service created session\",attributeMap);\n    return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n      @Override public void stop(){\n        service.stop();\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    service.stop();\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 387,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2787,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  Capabilities capabilities=sessionRequest.getCapabilities();\n  CAPABILITIES.accept(span,capabilities);\n  CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n  DriverService service=builder.build();\n  try {\n    service.start();\n    URL service.getUrl()=service.getUrl();\n    attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n    HttpClient client=clientFactory.createClient(service.getUrl());\n    Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n    ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n    Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n    Dialect upstream=result.getDialect();\n    Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n    Response response=result.createResponse();\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n    attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n    Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n    Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n else {\n      reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n    }\n    span.addEvent(\"Driver service created session\",attributeMap);\n    return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n      @Override public void stop(){\n        service.stop();\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    service.stop();\n    return Optional.empty();\n  }\n}\n catch (Exception e) {\n  return Optional.empty();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 409,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3066,
        "startLineNumber" : 81,
        "startColumnNumber" : 76,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (sessionRequest.getDownstreamDialects().isEmpty()) {\n    return Optional.empty();\n  }\n  if (!test(sessionRequest.getCapabilities())) {\n    return Optional.empty();\n  }\n  try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    Capabilities capabilities=sessionRequest.getCapabilities();\n    CAPABILITIES.accept(span,capabilities);\n    CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n    DriverService service=builder.build();\n    try {\n      service.start();\n      URL service.getUrl()=service.getUrl();\n      attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n      HttpClient client=clientFactory.createClient(service.getUrl());\n      Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n      ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n      Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n      Dialect upstream=result.getDialect();\n      Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n      Response response=result.createResponse();\n      attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n      attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n      attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n      Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n      Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n else {\n        reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n        if (reportedUri.isPresent()) {\n          caps=addCdpCapability(caps,reportedUri.get());\n        }\n      }\n      span.addEvent(\"Driver service created session\",attributeMap);\n      return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n        @Override public void stop(){\n          service.stop();\n        }\n      }\n);\n    }\n catch (    Exception e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      service.stop();\n      return Optional.empty();\n    }\n  }\n catch (  Exception e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 433,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3149,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest){\n  if (sessionRequest.getDownstreamDialects().isEmpty()) {\n    return Optional.empty();\n  }\n  if (!test(sessionRequest.getCapabilities())) {\n    return Optional.empty();\n  }\n  try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    Capabilities capabilities=sessionRequest.getCapabilities();\n    CAPABILITIES.accept(span,capabilities);\n    CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n    DriverService service=builder.build();\n    try {\n      service.start();\n      URL service.getUrl()=service.getUrl();\n      attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n      HttpClient client=clientFactory.createClient(service.getUrl());\n      Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n      ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n      Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n      Dialect upstream=result.getDialect();\n      Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n      Response response=result.createResponse();\n      attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n      attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n      attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n      Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n      Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n else {\n        reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n        if (reportedUri.isPresent()) {\n          caps=addCdpCapability(caps,reportedUri.get());\n        }\n      }\n      span.addEvent(\"Driver service created session\",attributeMap);\n      return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n        @Override public void stop(){\n          service.stop();\n        }\n      }\n);\n    }\n catch (    Exception e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      service.stop();\n      return Optional.empty();\n    }\n  }\n catch (  Exception e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 447,
      "astHeight" : 15
    } ],
    "tokenLength" : 2,
    "type" : "java.net.URL"
  }, {
    "nodeContext" : "service.getUrl()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 103,
      "startColumnNumber" : 55,
      "endLineNumber" : 103,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 103,
        "startColumnNumber" : 28,
        "endLineNumber" : 103,
        "endColumnNumber" : 72
      },
      "nodeContext" : "clientFactory.createClient(service.getUrl())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 103,
        "startColumnNumber" : 19,
        "endLineNumber" : 103,
        "endColumnNumber" : 70
      },
      "nodeContext" : "client=clientFactory.createClient(service.getUrl())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 72
      },
      "nodeContext" : "HttpClient client=clientFactory.createClient(service.getUrl());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 98,
        "startColumnNumber" : 10,
        "endLineNumber" : 152,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  service.start();\n  URL service.getUrl()=service.getUrl();\n  attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n  HttpClient client=clientFactory.createClient(service.getUrl());\n  Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n  ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n  Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n  Dialect upstream=result.getDialect();\n  Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n  Response response=result.createResponse();\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n  attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n  Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n  Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n  if (reportedUri.isPresent()) {\n    caps=addCdpCapability(caps,reportedUri.get());\n  }\n else {\n    reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n  }\n  span.addEvent(\"Driver service created session\",attributeMap);\n  return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n    @Override public void stop(){\n      service.stop();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 98,
        "startColumnNumber" : 6,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  service.start();\n  URL service.getUrl()=service.getUrl();\n  attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n  HttpClient client=clientFactory.createClient(service.getUrl());\n  Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n  ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n  Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n  Dialect upstream=result.getDialect();\n  Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n  Response response=result.createResponse();\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n  attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n  Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n  Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n  if (reportedUri.isPresent()) {\n    caps=addCdpCapability(caps,reportedUri.get());\n  }\n else {\n    reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n  }\n  span.addEvent(\"Driver service created session\",attributeMap);\n  return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n    @Override public void stop(){\n      service.stop();\n    }\n  }\n);\n}\n catch (Exception e) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.CANCELLED);\n  EXCEPTION.accept(attributeMap,e);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  service.stop();\n  return Optional.empty();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 327,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 90,
        "startColumnNumber" : 92,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  Capabilities capabilities=sessionRequest.getCapabilities();\n  CAPABILITIES.accept(span,capabilities);\n  CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n  DriverService service=builder.build();\n  try {\n    service.start();\n    URL service.getUrl()=service.getUrl();\n    attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n    HttpClient client=clientFactory.createClient(service.getUrl());\n    Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n    ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n    Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n    Dialect upstream=result.getDialect();\n    Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n    Response response=result.createResponse();\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n    attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n    Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n    Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n else {\n      reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n    }\n    span.addEvent(\"Driver service created session\",attributeMap);\n    return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n      @Override public void stop(){\n        service.stop();\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    service.stop();\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 387,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2787,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  Capabilities capabilities=sessionRequest.getCapabilities();\n  CAPABILITIES.accept(span,capabilities);\n  CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n  DriverService service=builder.build();\n  try {\n    service.start();\n    URL service.getUrl()=service.getUrl();\n    attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n    HttpClient client=clientFactory.createClient(service.getUrl());\n    Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n    ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n    Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n    Dialect upstream=result.getDialect();\n    Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n    Response response=result.createResponse();\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n    attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n    Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n    Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n    if (reportedUri.isPresent()) {\n      caps=addCdpCapability(caps,reportedUri.get());\n    }\n else {\n      reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n    }\n    span.addEvent(\"Driver service created session\",attributeMap);\n    return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n      @Override public void stop(){\n        service.stop();\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.CANCELLED);\n    EXCEPTION.accept(attributeMap,e);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    service.stop();\n    return Optional.empty();\n  }\n}\n catch (Exception e) {\n  return Optional.empty();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 409,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3066,
        "startLineNumber" : 81,
        "startColumnNumber" : 76,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (sessionRequest.getDownstreamDialects().isEmpty()) {\n    return Optional.empty();\n  }\n  if (!test(sessionRequest.getCapabilities())) {\n    return Optional.empty();\n  }\n  try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    Capabilities capabilities=sessionRequest.getCapabilities();\n    CAPABILITIES.accept(span,capabilities);\n    CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n    DriverService service=builder.build();\n    try {\n      service.start();\n      URL service.getUrl()=service.getUrl();\n      attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n      HttpClient client=clientFactory.createClient(service.getUrl());\n      Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n      ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n      Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n      Dialect upstream=result.getDialect();\n      Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n      Response response=result.createResponse();\n      attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n      attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n      attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n      Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n      Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n else {\n        reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n        if (reportedUri.isPresent()) {\n          caps=addCdpCapability(caps,reportedUri.get());\n        }\n      }\n      span.addEvent(\"Driver service created session\",attributeMap);\n      return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n        @Override public void stop(){\n          service.stop();\n        }\n      }\n);\n    }\n catch (    Exception e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      service.stop();\n      return Optional.empty();\n    }\n  }\n catch (  Exception e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 433,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3149,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest){\n  if (sessionRequest.getDownstreamDialects().isEmpty()) {\n    return Optional.empty();\n  }\n  if (!test(sessionRequest.getCapabilities())) {\n    return Optional.empty();\n  }\n  try (Span span=tracer.getCurrentContext().createSpan(\"driver_service_factory.apply\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    Capabilities capabilities=sessionRequest.getCapabilities();\n    CAPABILITIES.accept(span,capabilities);\n    CAPABILITIES_EVENT.accept(attributeMap,capabilities);\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(this.getClass().getName()));\n    DriverService service=builder.build();\n    try {\n      service.start();\n      URL service.getUrl()=service.getUrl();\n      attributeMap.put(AttributeKey.DRIVER_URL.getKey(),EventAttribute.setValue(service.getUrl().toString()));\n      HttpClient client=clientFactory.createClient(service.getUrl());\n      Command command=new Command(null,DriverCommand.NEW_SESSION(sessionRequest.getCapabilities()));\n      ProtocolHandshake.Result result=new ProtocolHandshake().createSession(client,command);\n      Set<Dialect> downstreamDialects=sessionRequest.getDownstreamDialects();\n      Dialect upstream=result.getDialect();\n      Dialect downstream=downstreamDialects.contains(result.getDialect()) ? result.getDialect() : downstreamDialects.iterator().next();\n      Response response=result.createResponse();\n      attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream.toString()));\n      attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream.toString()));\n      attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),EventAttribute.setValue(response.toString()));\n      Capabilities caps=new ImmutableCapabilities((Map<?,?>)response.getValue());\n      Optional<URI> reportedUri=ChromiumDevToolsLocator.getReportedUri(\"goog:chromeOptions\",caps);\n      if (reportedUri.isPresent()) {\n        caps=addCdpCapability(caps,reportedUri.get());\n      }\n else {\n        reportedUri=ChromiumDevToolsLocator.getReportedUri(\"ms:edgeOptions\",caps);\n        if (reportedUri.isPresent()) {\n          caps=addCdpCapability(caps,reportedUri.get());\n        }\n      }\n      span.addEvent(\"Driver service created session\",attributeMap);\n      return Optional.of(new ProtocolConvertingSession(tracer,client,new SessionId(response.getSessionId()),service.getUrl(),downstream,upstream,caps){\n        @Override public void stop(){\n          service.stop();\n        }\n      }\n);\n    }\n catch (    Exception e) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.CANCELLED);\n      EXCEPTION.accept(attributeMap,e);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Error while creating session with the driver service. Stopping driver service: \" + e.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      service.stop();\n      return Optional.empty();\n    }\n  }\n catch (  Exception e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 447,
      "astHeight" : 15
    } ],
    "tokenLength" : 2,
    "type" : "java.net.URL"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 102,
    "startColumnNumber" : 83,
    "endLineNumber" : 102,
    "endColumnNumber" : 99
  }, {
    "charLength" : 16,
    "startLineNumber" : 103,
    "startColumnNumber" : 55,
    "endLineNumber" : 103,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}