{
  "id" : 12,
  "expression" : "this.context.getBean(LettuceConnectionFactory.class)",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "3035df59cc8dfc9d74b4ca62a35dec95e0d64fdb",
  "filePath" : "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "this.context.getBean(LettuceConnectionFactory.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 163,
      "startColumnNumber" : 13,
      "endLineNumber" : 163,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 163,
        "startColumnNumber" : 13,
        "endLineNumber" : 163,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.context.getBean(LettuceConnectionFactory.class).getPassword()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 102
      },
      "nodeContext" : "assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 104
      },
      "nodeContext" : "assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 158,
        "startColumnNumber" : 78,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  load(\"spring.redis.password=password\",\"spring.redis.sentinel.master:mymaster\",\"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380\");\n  LettuceConnectionFactory this.context.getBean(LettuceConnectionFactory.class)=this.context.getBean(LettuceConnectionFactory.class);\n  assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\");\n  Set<RedisNode> sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels();\n  assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())).contains(\"127.0.0.1:26379\",\"127.0.0.1:26380\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 157,
        "startColumnNumber" : 1,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRedisConfigurationWithSentinelAndPassword() throws Exception {\n  load(\"spring.redis.password=password\",\"spring.redis.sentinel.master:mymaster\",\"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380\");\n  LettuceConnectionFactory this.context.getBean(LettuceConnectionFactory.class)=this.context.getBean(LettuceConnectionFactory.class);\n  assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\");\n  Set<RedisNode> sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels();\n  assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())).contains(\"127.0.0.1:26379\",\"127.0.0.1:26380\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 77,
      "astHeight" : 10
    } ],
    "tokenLength" : 3,
    "type" : "org.springframework.boot.autoconfigure.data.redis.LettuceConnectionFactory"
  }, {
    "nodeContext" : "this.context.getBean(LettuceConnectionFactory.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 164,
      "startColumnNumber" : 29,
      "endLineNumber" : 164,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 164,
        "startColumnNumber" : 29,
        "endLineNumber" : 164,
        "endColumnNumber" : 108
      },
      "nodeContext" : "this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 164,
        "startColumnNumber" : 29,
        "endLineNumber" : 165,
        "endColumnNumber" : 19
      },
      "nodeContext" : "this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 164,
        "startColumnNumber" : 17,
        "endLineNumber" : 165,
        "endColumnNumber" : 19
      },
      "nodeContext" : "sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 20
      },
      "nodeContext" : "Set<RedisNode> sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 158,
        "startColumnNumber" : 78,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  load(\"spring.redis.password=password\",\"spring.redis.sentinel.master:mymaster\",\"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380\");\n  LettuceConnectionFactory this.context.getBean(LettuceConnectionFactory.class)=this.context.getBean(LettuceConnectionFactory.class);\n  assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\");\n  Set<RedisNode> sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels();\n  assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())).contains(\"127.0.0.1:26379\",\"127.0.0.1:26380\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 157,
        "startColumnNumber" : 1,
        "endLineNumber" : 168,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRedisConfigurationWithSentinelAndPassword() throws Exception {\n  load(\"spring.redis.password=password\",\"spring.redis.sentinel.master:mymaster\",\"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380\");\n  LettuceConnectionFactory this.context.getBean(LettuceConnectionFactory.class)=this.context.getBean(LettuceConnectionFactory.class);\n  assertThat(this.context.getBean(LettuceConnectionFactory.class).getPassword()).isEqualTo(\"password\");\n  Set<RedisNode> sentinels=this.context.getBean(LettuceConnectionFactory.class).getSentinelConfiguration().getSentinels();\n  assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())).contains(\"127.0.0.1:26379\",\"127.0.0.1:26380\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 77,
      "astHeight" : 10
    } ],
    "tokenLength" : 3,
    "type" : "org.springframework.boot.autoconfigure.data.redis.LettuceConnectionFactory"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 163,
    "startColumnNumber" : 13,
    "endLineNumber" : 163,
    "endColumnNumber" : 65
  }, {
    "charLength" : 52,
    "startLineNumber" : 164,
    "startColumnNumber" : 29,
    "endLineNumber" : 164,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}