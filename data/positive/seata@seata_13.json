{
  "id" : 13,
  "expression" : "branchSession.getLockKey()",
  "projectName" : "seata@seata",
  "commitID" : "eb96fbe11f007662f891c7fc3d3de627179b2189",
  "filePath" : "server/src/main/java/com/alibaba/fescar/server/lock/DefaultLockManagerImpl.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 1,
  "expressionList" : [ {
    "nodeContext" : "branchSession.getLockKey()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 52,
      "startColumnNumber" : 15,
      "endLineNumber" : 52,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 52,
        "startColumnNumber" : 15,
        "endLineNumber" : 52,
        "endColumnNumber" : 51
      },
      "nodeContext" : "lockKey=branchSession.getLockKey()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String lockKey=branchSession.getLockKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String lockKey=branchSession.getLockKey();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "lockKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 53,
      "startColumnNumber" : 31,
      "endLineNumber" : 53,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 53,
        "startColumnNumber" : 11,
        "endLineNumber" : 53,
        "endColumnNumber" : 39
      },
      "nodeContext" : "StringUtils.isEmpty(lockKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isEmpty(lockKey)) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 53,
        "startColumnNumber" : 11,
        "endLineNumber" : 53,
        "endColumnNumber" : 39
      },
      "nodeContext" : "StringUtils.isEmpty(lockKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "lockKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 57,
      "startColumnNumber" : 44,
      "endLineNumber" : 57,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 57,
        "endColumnNumber" : 62
      },
      "nodeContext" : "lockKey.split(\";\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 57,
        "startColumnNumber" : 21,
        "endLineNumber" : 57,
        "endColumnNumber" : 62
      },
      "nodeContext" : "tableGroupedLockKeys=lockKey.split(\";\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String[] tableGroupedLockKeys=lockKey.split(\";\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3171,
        "startLineNumber" : 42,
        "startColumnNumber" : 88,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<Integer,Map<String,Long>>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<String,Long>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId.longValue() == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String[] tableGroupedLockKeys=lockKey.split(\";\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 52,
    "startColumnNumber" : 15,
    "endLineNumber" : 52,
    "endColumnNumber" : 22
  }, {
    "charLength" : 7,
    "startLineNumber" : 53,
    "startColumnNumber" : 31,
    "endLineNumber" : 53,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 57,
    "startColumnNumber" : 44,
    "endLineNumber" : 57,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}