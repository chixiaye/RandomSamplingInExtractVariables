{
  "id" : 9,
  "expression" : "pass.getClass()",
  "projectName" : "skylot@jadx",
  "commitID" : "cf79a519d3f7fbd6d260eeaead449b473ce76698",
  "filePath" : "jadx-core/src/test/java/jadx/tests/functional/JadxVisitorsOrderTest.java",
  "occurrences" : 5,
  "expressionList" : [ {
    "nodeContext" : "pass.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 47,
      "startColumnNumber" : 22,
      "endLineNumber" : 47,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 47,
        "startColumnNumber" : 22,
        "endLineNumber" : 47,
        "endColumnNumber" : 70
      },
      "nodeContext" : "pass.getClass().getAnnotation(JadxVisitor.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 47,
        "endColumnNumber" : 68
      },
      "nodeContext" : "info=pass.getClass().getAnnotation(JadxVisitor.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 47,
        "startColumnNumber" : 3,
        "endLineNumber" : 47,
        "endColumnNumber" : 70
      },
      "nodeContext" : "JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "pass.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 49,
      "startColumnNumber" : 58,
      "endLineNumber" : 49,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 49,
        "startColumnNumber" : 58,
        "endLineNumber" : 49,
        "endColumnNumber" : 83
      },
      "nodeContext" : "pass.getClass().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 83
      },
      "nodeContext" : "LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 85
      },
      "nodeContext" : "LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 48,
        "startColumnNumber" : 21,
        "endLineNumber" : 51,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 48,
        "startColumnNumber" : 3,
        "endLineNumber" : 51,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (info == null) {\n  LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "pass.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 52,
      "startColumnNumber" : 44,
      "endLineNumber" : 52,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 52,
        "startColumnNumber" : 29,
        "endLineNumber" : 52,
        "endColumnNumber" : 60
      },
      "nodeContext" : "passClsSet.add(pass.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 52,
        "startColumnNumber" : 11,
        "endLineNumber" : 52,
        "endColumnNumber" : 58
      },
      "nodeContext" : "firstOccurrence=passClsSet.add(pass.getClass())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 52,
        "startColumnNumber" : 3,
        "endLineNumber" : 52,
        "endColumnNumber" : 60
      },
      "nodeContext" : "boolean firstOccurrence=passClsSet.add(pass.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "pass.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 53,
      "startColumnNumber" : 21,
      "endLineNumber" : 53,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 53,
        "startColumnNumber" : 21,
        "endLineNumber" : 53,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pass.getClass().getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 53,
        "startColumnNumber" : 10,
        "endLineNumber" : 53,
        "endColumnNumber" : 50
      },
      "nodeContext" : "passName=pass.getClass().getSimpleName()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 53,
        "startColumnNumber" : 3,
        "endLineNumber" : 53,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String passName=pass.getClass().getSimpleName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "pass.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 55,
      "startColumnNumber" : 68,
      "endLineNumber" : 55,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 55,
        "startColumnNumber" : 68,
        "endLineNumber" : 55,
        "endColumnNumber" : 93
      },
      "nodeContext" : "pass.getClass().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 55,
        "startColumnNumber" : 15,
        "endLineNumber" : 55,
        "endColumnNumber" : 92
      },
      "nodeContext" : "\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 93
      },
      "nodeContext" : "errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 95
      },
      "nodeContext" : "errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 54,
        "startColumnNumber" : 48,
        "endLineNumber" : 56,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 54,
        "startColumnNumber" : 3,
        "endLineNumber" : 56,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (firstOccurrence && !names.add(passName)) {\n  errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n  JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(pass.getClass());\n  String passName=pass.getClass().getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> pass.getClass()=pass.getClass();\n    JadxVisitor info=pass.getClass().getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",pass.getClass().getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(pass.getClass());\n    String passName=pass.getClass().getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ pass.getClass().getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 13
    } ],
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 47,
    "startColumnNumber" : 22,
    "endLineNumber" : 47,
    "endColumnNumber" : 37
  }, {
    "charLength" : 15,
    "startLineNumber" : 49,
    "startColumnNumber" : 58,
    "endLineNumber" : 49,
    "endColumnNumber" : 73
  }, {
    "charLength" : 15,
    "startLineNumber" : 52,
    "startColumnNumber" : 44,
    "endLineNumber" : 52,
    "endColumnNumber" : 59
  }, {
    "charLength" : 15,
    "startLineNumber" : 53,
    "startColumnNumber" : 21,
    "endLineNumber" : 53,
    "endColumnNumber" : 36
  }, {
    "charLength" : 15,
    "startLineNumber" : 55,
    "startColumnNumber" : 68,
    "endLineNumber" : 55,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}