{
  "id" : 38,
  "expression" : "status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "55273655c3d71590e7590a5c7e3f210b3576f617",
  "filePath" : "java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 112,
      "startLineNumber" : 163,
      "startColumnNumber" : 8,
      "endLineNumber" : 163,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 19,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 157,
        "startColumnNumber" : 30,
        "endLineNumber" : 163,
        "endColumnNumber" : 21
      },
      "nodeContext" : "new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 157,
        "startColumnNumber" : 17,
        "endLineNumber" : 163,
        "endColumnNumber" : 21
      },
      "nodeContext" : "remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 157,
        "startColumnNumber" : 6,
        "endLineNumber" : 163,
        "endColumnNumber" : 22
      },
      "nodeContext" : "RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (nodes.containsKey(status.getId())) {\n    return;\n  }\n  Set<Capabilities> status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n  RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()));\n  add(remoteNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (nodes.containsKey(status.getId())) {\n    return;\n  }\n  Set<Capabilities> status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n  RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()));\n  add(remoteNode);\n}\n  finally {\n  writeLock.unlock();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1071,
        "startLineNumber" : 134,
        "startColumnNumber" : 70,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()));\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void register(Secret registrationSecret,NodeStatus status){\n  Require.nonNull(\"Node\",status);\n  Secret nodeSecret=status.getRegistrationSecret() == null ? null : new Secret(status.getRegistrationSecret());\n  if (!Objects.equals(registrationSecret,nodeSecret)) {\n    LOG.severe(String.format(\"Node at %s failed to send correct registration secret. Node NOT registered.\",status.getUri()));\n    bus.fire(new NodeRejectedEvent(status.getUri()));\n    return;\n  }\n  Lock writeLock=lock.writeLock();\n  writeLock.lock();\n  try {\n    if (nodes.containsKey(status.getId())) {\n      return;\n    }\n    Set<Capabilities> status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet())=status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet());\n    RemoteNode remoteNode=new RemoteNode(tracer,clientFactory,status.getId(),status.getUri(),registrationSecret,status.getSlots().stream().map(Slot::getStereotype).map(ImmutableCapabilities::copyOf).collect(toImmutableSet()));\n    add(remoteNode);\n  }\n  finally {\n    writeLock.unlock();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 13
    } ],
    "tokenLength" : 11,
    "type" : "java.util.Set<org.openqa.selenium.Capabilities>"
  } ],
  "positionList" : [ {
    "charLength" : 112,
    "startLineNumber" : 163,
    "startColumnNumber" : 8,
    "endLineNumber" : 163,
    "endColumnNumber" : 120
  } ],
  "layoutRelationDataList" : [ ]
}