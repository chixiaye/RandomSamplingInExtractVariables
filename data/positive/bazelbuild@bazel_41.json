{
  "id" : 41,
  "expression" : "BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "463e8c80cd11d36777ddf80543aea7c53293f298",
  "filePath" : "src/main/java/com/google/devtools/build/lib/analysis/starlark/StarlarkToolchainContext.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 82,
      "startLineNumber" : 96,
      "startColumnNumber" : 16,
      "endLineNumber" : 96,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 106
      },
      "nodeContext" : "BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 94,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 67
      },
      "nodeContext" : "context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 68
      },
      "nodeContext" : "LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n  BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n  LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n  return context.convert((String)key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 90,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n  BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n  LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n  return context.convert((String)key);\n}\n catch (LabelSyntaxException e) {\n  throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 89,
        "startColumnNumber" : 38,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1016,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof ToolchainTypeInfo) {\n  return ((ToolchainTypeInfo)key).typeLabel();\n}\n else if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof Label) {\n  return (Label)key;\n}\n else if (key instanceof ToolchainTypeInfo) {\n  return ((ToolchainTypeInfo)key).typeLabel();\n}\n else if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 84,
        "startColumnNumber" : 93,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (key instanceof Label) {\n    return (Label)key;\n  }\n else   if (key instanceof ToolchainTypeInfo) {\n    return ((ToolchainTypeInfo)key).typeLabel();\n  }\n else   if (key instanceof String) {\n    try {\n      BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n      BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n      LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n      return context.convert((String)key);\n    }\n catch (    LabelSyntaxException e) {\n      throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n    }\n  }\n else {\n    throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1205,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Label transformKey(StarlarkThread starlarkThread,Object key) throws EvalException {\n  if (key instanceof Label) {\n    return (Label)key;\n  }\n else   if (key instanceof ToolchainTypeInfo) {\n    return ((ToolchainTypeInfo)key).typeLabel();\n  }\n else   if (key instanceof String) {\n    try {\n      BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n      BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n      LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n      return context.convert((String)key);\n    }\n catch (    LabelSyntaxException e) {\n      throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n    }\n  }\n else {\n    throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 15
    } ],
    "tokenLength" : 5,
    "type" : "com.google.devtools.build.lib.packages.BazelModuleContext"
  }, {
    "nodeContext" : "BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 82,
      "startLineNumber" : 97,
      "startColumnNumber" : 16,
      "endLineNumber" : 97,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 112
      },
      "nodeContext" : "BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 94,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 67
      },
      "nodeContext" : "context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 68
      },
      "nodeContext" : "LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n  BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n  LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n  return context.convert((String)key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 90,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n  BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n  LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n  return context.convert((String)key);\n}\n catch (LabelSyntaxException e) {\n  throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 89,
        "startColumnNumber" : 38,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 89,
        "startColumnNumber" : 11,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1016,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof ToolchainTypeInfo) {\n  return ((ToolchainTypeInfo)key).typeLabel();\n}\n else if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key instanceof Label) {\n  return (Label)key;\n}\n else if (key instanceof ToolchainTypeInfo) {\n  return ((ToolchainTypeInfo)key).typeLabel();\n}\n else if (key instanceof String) {\n  try {\n    BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n    BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n    LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n    return context.convert((String)key);\n  }\n catch (  LabelSyntaxException e) {\n    throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n  }\n}\n else {\n  throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 84,
        "startColumnNumber" : 93,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (key instanceof Label) {\n    return (Label)key;\n  }\n else   if (key instanceof ToolchainTypeInfo) {\n    return ((ToolchainTypeInfo)key).typeLabel();\n  }\n else   if (key instanceof String) {\n    try {\n      BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n      BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n      LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n      return context.convert((String)key);\n    }\n catch (    LabelSyntaxException e) {\n      throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n    }\n  }\n else {\n    throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1205,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Label transformKey(StarlarkThread starlarkThread,Object key) throws EvalException {\n  if (key instanceof Label) {\n    return (Label)key;\n  }\n else   if (key instanceof ToolchainTypeInfo) {\n    return ((ToolchainTypeInfo)key).typeLabel();\n  }\n else   if (key instanceof String) {\n    try {\n      BazelStarlarkContext bazelStarlarkContext=BazelStarlarkContext.from(starlarkThread);\n      BazelModuleContext BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread))=BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread));\n      LabelConversionContext context=new LabelConversionContext(BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).label(),BazelModuleContext.of(Module.ofInnermostEnclosingStarlarkFunction(starlarkThread)).repoMapping(),bazelStarlarkContext.getConvertedLabelsInPackage());\n      return context.convert((String)key);\n    }\n catch (    LabelSyntaxException e) {\n      throw Starlark.errorf(\"Unable to parse toolchain label '%s': %s\",key,e.getMessage());\n    }\n  }\n else {\n    throw Starlark.errorf(\"Toolchains only supports indexing by toolchain type, got %s instead\",Starlark.type(key));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 15
    } ],
    "tokenLength" : 5,
    "type" : "com.google.devtools.build.lib.packages.BazelModuleContext"
  } ],
  "positionList" : [ {
    "charLength" : 82,
    "startLineNumber" : 96,
    "startColumnNumber" : 16,
    "endLineNumber" : 96,
    "endColumnNumber" : 98
  }, {
    "charLength" : 82,
    "startLineNumber" : 97,
    "startColumnNumber" : 16,
    "endLineNumber" : 97,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ ]
}