{
  "id" : 44,
  "expression" : "5",
  "projectName" : "apache@druid",
  "commitID" : "d057c5149fe5a20c98f3e60af9189e4a1f7ad9ce",
  "filePath" : "extensions-core/google-extensions/src/test/java/org/apache/druid/storage/google/GoogleTaskLogsTest.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 138,
      "startColumnNumber" : 49,
      "endLineNumber" : 138,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 138,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 51
      },
      "nodeContext" : "testLog.substring(5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 138,
        "startColumnNumber" : 17,
        "endLineNumber" : 138,
        "endColumnNumber" : 49
      },
      "nodeContext" : "expectedLog=testLog.substring(5)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 51
      },
      "nodeContext" : "final String expectedLog=testLog.substring(5);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testStreamTaskLogWithPositiveOffset() throws Exception {\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 7
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 142,
      "startColumnNumber" : 49,
      "endLineNumber" : 142,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 142,
        "startColumnNumber" : 20,
        "endLineNumber" : 142,
        "endColumnNumber" : 49
      },
      "nodeContext" : "storage.get(BUCKET,logPath,5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 50
      },
      "nodeContext" : "EasyMock.expect(storage.get(BUCKET,logPath,5))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 81
      },
      "nodeContext" : "EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 82
      },
      "nodeContext" : "EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testStreamTaskLogWithPositiveOffset() throws Exception {\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 7
    } ],
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 147,
      "startColumnNumber" : 81,
      "endLineNumber" : 147,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 147,
        "startColumnNumber" : 44,
        "endLineNumber" : 147,
        "endColumnNumber" : 82
      },
      "nodeContext" : "googleTaskLogs.streamTaskLog(TASKID,5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 147,
        "startColumnNumber" : 31,
        "endLineNumber" : 147,
        "endColumnNumber" : 80
      },
      "nodeContext" : "byteSource=googleTaskLogs.streamTaskLog(TASKID,5)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 82
      },
      "nodeContext" : "final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testStreamTaskLogWithPositiveOffset() throws Exception {\n  final String testLog=\"hello this is a log\";\n  final int 5=5;\n  final String expectedLog=testLog.substring(5);\n  final String logPath=PREFIX + \"/\" + TASKID;\n  EasyMock.expect(storage.exists(BUCKET,logPath)).andReturn(true);\n  EasyMock.expect(storage.size(BUCKET,logPath)).andReturn((long)testLog.length());\n  EasyMock.expect(storage.get(BUCKET,logPath,5)).andReturn(new ByteArrayInputStream(StringUtils.toUtf8(expectedLog)));\n  replayAll();\n  final Optional<ByteSource> byteSource=googleTaskLogs.streamTaskLog(TASKID,5);\n  final StringWriter writer=new StringWriter();\n  IOUtils.copy(byteSource.get().openStream(),writer,\"UTF-8\");\n  Assert.assertEquals(writer.toString(),expectedLog);\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 7
    } ],
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 138,
    "startColumnNumber" : 49,
    "endLineNumber" : 138,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 142,
    "startColumnNumber" : 49,
    "endLineNumber" : 142,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 147,
    "startColumnNumber" : 81,
    "endLineNumber" : 147,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}