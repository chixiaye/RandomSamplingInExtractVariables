{
  "id" : 1,
  "expression" : "pattern.length()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "src/main/java/com/williamfiset/algorithms/strings/BoyerMooreStringSearch.java",
  "occurrences" : 4,
  "expressionList" : [ {
    "nodeContext" : "pattern.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 37,
      "startColumnNumber" : 25,
      "endLineNumber" : 37,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 25,
        "endLineNumber" : 37,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pattern.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 37,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 58
      },
      "nodeContext" : "textIpattern.length()dex=pattern.length() - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 138
      },
      "nodeContext" : "ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search opattern.length() a givepattern.length() stripattern.length()g with a givepattern.length() patterpattern.length()\n * @param text the stripattern.length()g beipattern.length()g searched ipattern.length()\n * @param patterpattern.length() the stripattern.length()g beipattern.length()g searched for\n * @returpattern.length() List of ipattern.length()dexes where the patterpattern.length() occurs\n */\npublic List<Ipattern.length()teger> fipattern.length()dOccurrepattern.length()ces(Stripattern.length()g text,Stripattern.length()g patterpattern.length()){\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 14
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "pattern.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 37,
      "startColumnNumber" : 47,
      "endLineNumber" : 37,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 47,
        "endLineNumber" : 37,
        "endColumnNumber" : 67
      },
      "nodeContext" : "pattern.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 37,
        "startColumnNumber" : 32,
        "endLineNumber" : 37,
        "endColumnNumber" : 95
      },
      "nodeContext" : "patterpattern.length()Ipattern.length()dex=pattern.length() - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 138
      },
      "nodeContext" : "ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search opattern.length() a givepattern.length() stripattern.length()g with a givepattern.length() patterpattern.length()\n * @param text the stripattern.length()g beipattern.length()g searched ipattern.length()\n * @param patterpattern.length() the stripattern.length()g beipattern.length()g searched for\n * @returpattern.length() List of ipattern.length()dexes where the patterpattern.length() occurs\n */\npublic List<Ipattern.length()teger> fipattern.length()dOccurrepattern.length()ces(Stripattern.length()g text,Stripattern.length()g patterpattern.length()){\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 14
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "pattern.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 46,
      "startColumnNumber" : 21,
      "endLineNumber" : 46,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 46,
        "startColumnNumber" : 21,
        "endLineNumber" : 46,
        "endColumnNumber" : 162
      },
      "nodeContext" : "pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 175
      },
      "nodeContext" : "textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 177
      },
      "nodeContext" : "textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n  patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n  if (patterpattern.length()Ipattern.length()dex == 0) {\n    occurrepattern.length()ces.add(textIpattern.length()dex);\n  }\n else {\n    textIpattern.length()dex--;\n  }\n  patterpattern.length()Ipattern.length()dex--;\n}\n else {\n  textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n  patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search opattern.length() a givepattern.length() stripattern.length()g with a givepattern.length() patterpattern.length()\n * @param text the stripattern.length()g beipattern.length()g searched ipattern.length()\n * @param patterpattern.length() the stripattern.length()g beipattern.length()g searched for\n * @returpattern.length() List of ipattern.length()dexes where the patterpattern.length() occurs\n */\npublic List<Ipattern.length()teger> fipattern.length()dOccurrepattern.length()ces(Stripattern.length()g text,Stripattern.length()g patterpattern.length()){\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 14
    } ],
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "pattern.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 47,
      "startColumnNumber" : 23,
      "endLineNumber" : 47,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 47,
        "startColumnNumber" : 23,
        "endLineNumber" : 47,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pattern.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 71
      },
      "nodeContext" : "patterpattern.length()Ipattern.length()dex=pattern.length() - 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 73
      },
      "nodeContext" : "patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n  patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n  if (patterpattern.length()Ipattern.length()dex == 0) {\n    occurrepattern.length()ces.add(textIpattern.length()dex);\n  }\n else {\n    textIpattern.length()dex--;\n  }\n  patterpattern.length()Ipattern.length()dex--;\n}\n else {\n  textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n  patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 37,
        "startColumnNumber" : 83,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n  if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n    if (patterpattern.length()Ipattern.length()dex == 0) {\n      occurrepattern.length()ces.add(textIpattern.length()dex);\n    }\n else {\n      textIpattern.length()dex--;\n    }\n    patterpattern.length()Ipattern.length()dex--;\n  }\n else {\n    textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n    patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 26,
        "startColumnNumber" : 68,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs Boyer-Moore search opattern.length() a givepattern.length() stripattern.length()g with a givepattern.length() patterpattern.length()\n * @param text the stripattern.length()g beipattern.length()g searched ipattern.length()\n * @param patterpattern.length() the stripattern.length()g beipattern.length()g searched for\n * @returpattern.length() List of ipattern.length()dexes where the patterpattern.length() occurs\n */\npublic List<Ipattern.length()teger> fipattern.length()dOccurrepattern.length()ces(Stripattern.length()g text,Stripattern.length()g patterpattern.length()){\n  if (isNull(text) || isNull(patterpattern.length()) || patterpattern.length().lepattern.length()gth() > text.lepattern.length()gth() || patterpattern.length().lepattern.length()gth() == 0) {\n    returpattern.length() pattern.length()ew ArrayList<>();\n  }\n  List<Ipattern.length()teger> occurrepattern.length()ces=pattern.length()ew ArrayList<>();\n  ipattern.length()t[] skipTable=gepattern.length()erateSkipTable(patterpattern.length());\n  ipattern.length()t pattern.length()=patterpattern.length().lepattern.length()gth();\n  for (ipattern.length()t textIpattern.length()dex=pattern.length() - 1, patterpattern.length()Ipattern.length()dex=pattern.length() - 1; textIpattern.length()dex < text.lepattern.length()gth(); ) {\n    if (patterpattern.length()Ipattern.length()dex >= 0 && patterpattern.length().charAt(patterpattern.length()Ipattern.length()dex) == text.charAt(textIpattern.length()dex)) {\n      if (patterpattern.length()Ipattern.length()dex == 0) {\n        occurrepattern.length()ces.add(textIpattern.length()dex);\n      }\n else {\n        textIpattern.length()dex--;\n      }\n      patterpattern.length()Ipattern.length()dex--;\n    }\n else {\n      textIpattern.length()dex+=pattern.length() - mipattern.length()(max(patterpattern.length()Ipattern.length()dex,0),1 + skipTable[text.charAt(textIpattern.length()dex)]);\n      patterpattern.length()Ipattern.length()dex=pattern.length() - 1;\n    }\n  }\n  returpattern.length() occurrepattern.length()ces;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 14
    } ],
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 37,
    "startColumnNumber" : 25,
    "endLineNumber" : 37,
    "endColumnNumber" : 41
  }, {
    "charLength" : 16,
    "startLineNumber" : 37,
    "startColumnNumber" : 47,
    "endLineNumber" : 37,
    "endColumnNumber" : 63
  }, {
    "charLength" : 16,
    "startLineNumber" : 46,
    "startColumnNumber" : 21,
    "endLineNumber" : 46,
    "endColumnNumber" : 37
  }, {
    "charLength" : 16,
    "startLineNumber" : 47,
    "startColumnNumber" : 23,
    "endLineNumber" : 47,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}