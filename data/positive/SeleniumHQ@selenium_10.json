{
  "id" : 10,
  "expression" : "\"IOException while reading the request payload. \" + exception.getMessage()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "a2a60d7cfea954b4fa7c8d09f6b92ee526f37536",
  "filePath" : "java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueuer.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "\"IOException while reading the request payload. \" + exception.getMessage()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 110,
      "startColumnNumber" : 75,
      "endLineNumber" : 110,
      "endColumnNumber" : 149
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 110,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 150
      },
      "nodeContext" : "EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 89
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 90
      },
      "nodeContext" : "attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 104,
        "startColumnNumber" : 30,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n  Objects.requireNonNull(payload,\"Requests to process must be set.\");\n  attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n  Iterator<Capabilities> iterator=payload.stream().iterator();\n  if (!iterator.hasNext()) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n    EXCEPTION.accept(attributeMap,exception);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n catch (IOException e) {\n  SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n  EXCEPTION.accept(attributeMap,exception);\n  String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  throw exception;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1371,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1455,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n    Objects.requireNonNull(payload,\"Requests to process must be set.\");\n    attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n    Iterator<Capabilities> iterator=payload.stream().iterator();\n    if (!iterator.hasNext()) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n      EXCEPTION.accept(attributeMap,exception);\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n catch (  IOException e) {\n    SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n    EXCEPTION.accept(attributeMap,exception);\n    String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    throw exception;\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 187,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1560,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void validateSessionRequest(HttpRequest request){\n  try (Span span=tracer.getCurrentContext().createSpan(\"newsession_queuer.validate\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    try (Reader reader=reader(request);NewSessionPayload payload=NewSessionPayload.create(reader)){\n      Objects.requireNonNull(payload,\"Requests to process must be set.\");\n      attributeMap.put(\"request.payload\",EventAttribute.setValue(payload.toString()));\n      Iterator<Capabilities> iterator=payload.stream().iterator();\n      if (!iterator.hasNext()) {\n        SessionNotCreatedException exception=new SessionNotCreatedException(\"No capabilities found\");\n        EXCEPTION.accept(attributeMap,exception);\n        attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(exception.getMessage()));\n        span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n        throw exception;\n      }\n    }\n catch (    IOException e) {\n      SessionNotCreatedException exception=new SessionNotCreatedException(e.getMessage(),e);\n      EXCEPTION.accept(attributeMap,exception);\n      String \"IOException while reading the request payload. \" + exception.getMessage()=\"IOException while reading the request payload. \" + exception.getMessage();\n      attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"IOException while reading the request payload. \" + exception.getMessage()));\n      span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n      throw exception;\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 13
    } ],
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 110,
    "startColumnNumber" : 75,
    "endLineNumber" : 110,
    "endColumnNumber" : 149
  } ],
  "layoutRelationDataList" : [ ]
}