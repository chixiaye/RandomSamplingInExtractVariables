{
  "id" : 47,
  "expression" : "requestKeySelector.call(cr.getArgument())",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "26fd11dd77690df0cee6b8ba4274e8db887db616",
  "filePath" : "hystrix-core/src/main/java/com/netflix/hystrix/HystrixObservableCollapser.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "requestKeySelector.call(cr.getArgument())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 178,
      "startColumnNumber" : 38,
      "endLineNumber" : 178,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 178,
        "startColumnNumber" : 20,
        "endLineNumber" : 178,
        "endColumnNumber" : 83
      },
      "nodeContext" : "requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 178,
        "startColumnNumber" : 20,
        "endLineNumber" : 178,
        "endColumnNumber" : 85
      },
      "nodeContext" : "requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 176,
        "startColumnNumber" : 88,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  K requestKeySelector.call(cr.getArgument())=requestKeySelector.call(cr.getArgument());\n  requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (CollapsedRequest<ResponseType,RequestArgumentType> cr : requests) {\n  K requestKeySelector.call(cr.getArgument())=requestKeySelector.call(cr.getArgument());\n  requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2119,
        "startLineNumber" : 169,
        "startColumnNumber" : 175,
        "endLineNumber" : 217,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Func1<RequestArgumentType,K> requestKeySelector=self.getRequestArgumentKeySelector();\n  final Func1<BatchReturnType,K> batchResponseKeySelector=self.getBatchReturnTypeKeySelector();\n  final Func1<BatchReturnType,ResponseType> mapBatchTypeToResponseType=self.getBatchReturnTypeToResponseTypeMapper();\n  final Map<K,CollapsedRequest<ResponseType,RequestArgumentType>> requestsByKey=new HashMap<K,CollapsedRequest<ResponseType,RequestArgumentType>>(requests.size());\n  for (  CollapsedRequest<ResponseType,RequestArgumentType> cr : requests) {\n    K requestKeySelector.call(cr.getArgument())=requestKeySelector.call(cr.getArgument());\n    requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr);\n  }\n  final Set<K> seenKeys=new HashSet<K>();\n  return batchResponse.doOnNext(new Action1<BatchReturnType>(){\n    @Override public void call(    BatchReturnType batchReturnType){\n      try {\n        K responseKey=batchResponseKeySelector.call(batchReturnType);\n        CollapsedRequest<ResponseType,RequestArgumentType> requestForResponse=requestsByKey.get(responseKey);\n        if (requestForResponse != null) {\n          requestForResponse.emitResponse(mapBatchTypeToResponseType.call(batchReturnType));\n          seenKeys.add(responseKey);\n        }\n else {\n          logger.warn(\"Batch Response contained a response key not in request batch : \" + responseKey);\n        }\n      }\n catch (      Throwable ex) {\n        logger.warn(\"Uncaught error during demultiplexing of BatchResponse\",ex);\n      }\n    }\n  }\n).doOnTerminate(new Action0(){\n    @Override public void call(){\n      for (      K key : requestsByKey.keySet()) {\n        CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq=requestsByKey.get(key);\n        if (!seenKeys.contains(key)) {\n          try {\n            onMissingResponse(collapsedReq);\n          }\n catch (          Throwable ex) {\n            collapsedReq.setException(new RuntimeException(\"Error in HystrixObservableCollapser.onMissingResponse handler\",ex));\n          }\n        }\n        collapsedReq.setComplete();\n      }\n    }\n  }\n).ignoreElements().cast(Void.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 283,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2289,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public Observable<Void> mapResponseToRequests(Observable<BatchReturnType> batchResponse,Collection<CollapsedRequest<ResponseType,RequestArgumentType>> requests){\n  Func1<RequestArgumentType,K> requestKeySelector=self.getRequestArgumentKeySelector();\n  final Func1<BatchReturnType,K> batchResponseKeySelector=self.getBatchReturnTypeKeySelector();\n  final Func1<BatchReturnType,ResponseType> mapBatchTypeToResponseType=self.getBatchReturnTypeToResponseTypeMapper();\n  final Map<K,CollapsedRequest<ResponseType,RequestArgumentType>> requestsByKey=new HashMap<K,CollapsedRequest<ResponseType,RequestArgumentType>>(requests.size());\n  for (  CollapsedRequest<ResponseType,RequestArgumentType> cr : requests) {\n    K requestKeySelector.call(cr.getArgument())=requestKeySelector.call(cr.getArgument());\n    requestsByKey.put(requestKeySelector.call(cr.getArgument()),cr);\n  }\n  final Set<K> seenKeys=new HashSet<K>();\n  return batchResponse.doOnNext(new Action1<BatchReturnType>(){\n    @Override public void call(    BatchReturnType batchReturnType){\n      try {\n        K responseKey=batchResponseKeySelector.call(batchReturnType);\n        CollapsedRequest<ResponseType,RequestArgumentType> requestForResponse=requestsByKey.get(responseKey);\n        if (requestForResponse != null) {\n          requestForResponse.emitResponse(mapBatchTypeToResponseType.call(batchReturnType));\n          seenKeys.add(responseKey);\n        }\n else {\n          logger.warn(\"Batch Response contained a response key not in request batch : \" + responseKey);\n        }\n      }\n catch (      Throwable ex) {\n        logger.warn(\"Uncaught error during demultiplexing of BatchResponse\",ex);\n      }\n    }\n  }\n).doOnTerminate(new Action0(){\n    @Override public void call(){\n      for (      K key : requestsByKey.keySet()) {\n        CollapsedRequest<ResponseType,RequestArgumentType> collapsedReq=requestsByKey.get(key);\n        if (!seenKeys.contains(key)) {\n          try {\n            onMissingResponse(collapsedReq);\n          }\n catch (          Throwable ex) {\n            collapsedReq.setException(new RuntimeException(\"Error in HystrixObservableCollapser.onMissingResponse handler\",ex));\n          }\n        }\n        collapsedReq.setComplete();\n      }\n    }\n  }\n).ignoreElements().cast(Void.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 312,
      "astHeight" : 22
    } ],
    "tokenLength" : 4,
    "type" : "K"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 178,
    "startColumnNumber" : 38,
    "endLineNumber" : 178,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}