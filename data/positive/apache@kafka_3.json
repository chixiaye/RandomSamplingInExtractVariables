{
  "id" : 3,
  "expression" : "topologyMetadata.offsetResetStrategy(partition.topic())",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java",
  "occurrences" : 2,
  "expressionList" : [ {
    "nodeContext" : "topologyMetadata.offsetResetStrategy(partition.topic())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 986,
      "startColumnNumber" : 16,
      "endLineNumber" : 986,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 986,
        "startColumnNumber" : 16,
        "endLineNumber" : 986,
        "endColumnNumber" : 79
      },
      "nodeContext" : "topologyMetadata.offsetResetStrategy(partition.topic()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 986,
        "startColumnNumber" : 12,
        "endLineNumber" : 1006,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:    addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n  break;\ncase LATEST:addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 981,
        "startColumnNumber" : 58,
        "endLineNumber" : 1007,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n  if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:      addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n    break;\ncase LATEST:  addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 981,
        "startColumnNumber" : 8,
        "endLineNumber" : 1007,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final TopicPartition partition : partitions) {\n  final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n  if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:      addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n    break;\ncase LATEST:  addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 975,
        "startColumnNumber" : 91,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n    if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 975,
        "startColumnNumber" : 4,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void resetOffsets(final Set<TopicPartition> partitions,final Exception cause){\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n    if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 13
    } ],
    "tokenLength" : 4,
    "type" : "org.apache.kafka.clients.consumer.OffsetResetStrategy"
  }, {
    "nodeContext" : "topologyMetadata.offsetResetStrategy(partition.topic())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 987,
      "startColumnNumber" : 24,
      "endLineNumber" : 987,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 987,
        "startColumnNumber" : 16,
        "endLineNumber" : 1005,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:  addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\nbreak;\ncase LATEST:addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 77,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 986,
        "startColumnNumber" : 45,
        "endLineNumber" : 1006,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:    addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n  break;\ncase LATEST:addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 986,
        "startColumnNumber" : 12,
        "endLineNumber" : 1006,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:    addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n  break;\ncase LATEST:addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 981,
        "startColumnNumber" : 58,
        "endLineNumber" : 1007,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n  if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:      addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n    break;\ncase LATEST:  addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 981,
        "startColumnNumber" : 8,
        "endLineNumber" : 1007,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final TopicPartition partition : partitions) {\n  final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n  if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:      addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n    break;\ncase LATEST:  addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\nbreak;\ncase NONE:if (\"earliest\".equals(originalReset)) {\naddToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\naddToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\nnotReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 975,
        "startColumnNumber" : 91,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n    if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 975,
        "startColumnNumber" : 4,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void resetOffsets(final Set<TopicPartition> partitions,final Exception cause){\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy topologyMetadata.offsetResetStrategy(partition.topic())=topologyMetadata.topologyMetadata.offsetResetStrategy(partition.topic())(partition.topic());\n    if (topologyMetadata.offsetResetStrategy(partition.topic()) != null) {\nswitch (topologyMetadata.offsetResetStrategy(partition.topic())) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 13
    } ],
    "tokenLength" : 4,
    "type" : "org.apache.kafka.clients.consumer.OffsetResetStrategy"
  } ],
  "positionList" : [ {
    "charLength" : 55,
    "startLineNumber" : 986,
    "startColumnNumber" : 16,
    "endLineNumber" : 986,
    "endColumnNumber" : 71
  }, {
    "charLength" : 55,
    "startLineNumber" : 987,
    "startColumnNumber" : 24,
    "endLineNumber" : 987,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}