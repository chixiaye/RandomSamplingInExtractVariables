{
  "id" : 20,
  "expression" : "readTimeout / 2 - idleSend",
  "projectName" : "apache@zookeeper",
  "commitID" : "1a85483357106cf0993080a56ddd5c1e2644100c",
  "filePath" : "zookeeper/java/src/com/yahoo/zookeeper/ClientCnxn.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "readTimeout / 2 - idleSend",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 670,
      "startColumnNumber" : 28,
      "endLineNumber" : 670,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 670,
        "startColumnNumber" : 28,
        "endLineNumber" : 670,
        "endColumnNumber" : 59
      },
      "nodeContext" : "readTimeout / 2 - idleSend <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 670,
        "startColumnNumber" : 24,
        "endLineNumber" : 678,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (readTimeout / 2 - idleSend <= 0) {\n  sendPing();\n  lastSend=now;\n  enableWrite();\n}\n else {\n  if (readTimeout / 2 - idleSend < to) {\n    to=readTimeout / 2 - idleSend;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 668,
        "startColumnNumber" : 61,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state == States.CONNECTED) {\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 314,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1925,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2308,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 17
    } ],
    "tokenLength" : 5,
    "type" : "int"
  }, {
    "nodeContext" : "readTimeout / 2 - idleSend",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 675,
      "startColumnNumber" : 32,
      "endLineNumber" : 675,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 675,
        "startColumnNumber" : 32,
        "endLineNumber" : 675,
        "endColumnNumber" : 63
      },
      "nodeContext" : "readTimeout / 2 - idleSend < to",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 675,
        "startColumnNumber" : 28,
        "endLineNumber" : 677,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (readTimeout / 2 - idleSend < to) {\n  to=readTimeout / 2 - idleSend;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 674,
        "startColumnNumber" : 31,
        "endLineNumber" : 678,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (readTimeout / 2 - idleSend < to) {\n    to=readTimeout / 2 - idleSend;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 670,
        "startColumnNumber" : 24,
        "endLineNumber" : 678,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (readTimeout / 2 - idleSend <= 0) {\n  sendPing();\n  lastSend=now;\n  enableWrite();\n}\n else {\n  if (readTimeout / 2 - idleSend < to) {\n    to=readTimeout / 2 - idleSend;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 668,
        "startColumnNumber" : 61,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state == States.CONNECTED) {\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 314,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1925,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2308,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 17
    } ],
    "tokenLength" : 5,
    "type" : "int"
  }, {
    "nodeContext" : "readTimeout / 2 - idleSend",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 676,
      "startColumnNumber" : 37,
      "endLineNumber" : 676,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 676,
        "startColumnNumber" : 32,
        "endLineNumber" : 676,
        "endColumnNumber" : 61
      },
      "nodeContext" : "to=readTimeout / 2 - idleSend",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 676,
        "startColumnNumber" : 32,
        "endLineNumber" : 676,
        "endColumnNumber" : 63
      },
      "nodeContext" : "to=readTimeout / 2 - idleSend;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 675,
        "startColumnNumber" : 53,
        "endLineNumber" : 677,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  to=readTimeout / 2 - idleSend;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 675,
        "startColumnNumber" : 28,
        "endLineNumber" : 677,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (readTimeout / 2 - idleSend < to) {\n  to=readTimeout / 2 - idleSend;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 674,
        "startColumnNumber" : 31,
        "endLineNumber" : 678,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (readTimeout / 2 - idleSend < to) {\n    to=readTimeout / 2 - idleSend;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 670,
        "startColumnNumber" : 24,
        "endLineNumber" : 678,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (readTimeout / 2 - idleSend <= 0) {\n  sendPing();\n  lastSend=now;\n  enableWrite();\n}\n else {\n  if (readTimeout / 2 - idleSend < to) {\n    to=readTimeout / 2 - idleSend;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 668,
        "startColumnNumber" : 61,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (zooKeeper.state == States.CONNECTED) {\n  int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n  if (readTimeout / 2 - idleSend <= 0) {\n    sendPing();\n    lastSend=now;\n    enableWrite();\n  }\n else {\n    if (readTimeout / 2 - idleSend < to) {\n      to=readTimeout / 2 - idleSend;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 653,
        "startColumnNumber" : 20,
        "endLineNumber" : 718,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 653,
        "startColumnNumber" : 16,
        "endLineNumber" : 729,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n    if (readTimeout / 2 - idleSend <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (readTimeout / 2 - idleSend < to) {\n        to=readTimeout / 2 - idleSend;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        zooKeeper.state=States.CONNECTED;\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  LOG.warn(\"Closing: \",e);\n  cleanup();\n  if (zooKeeper.state.isAlive()) {\n    waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n  }\n  now=System.currentTimeMillis();\n  lastHeard=now;\n  lastSend=now;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 314,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1925,
        "startLineNumber" : 652,
        "startColumnNumber" : 46,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 652,
        "startColumnNumber" : 12,
        "endLineNumber" : 730,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n      if (readTimeout / 2 - idleSend <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (readTimeout / 2 - idleSend < to) {\n          to=readTimeout / 2 - idleSend;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          zooKeeper.state=States.CONNECTED;\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    LOG.warn(\"Closing: \",e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 648,
        "startColumnNumber" : 26,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2308,
        "startLineNumber" : 647,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int readTimeout / 2 - idleSend=readTimeout / 2 - idleSend;\n        if (readTimeout / 2 - idleSend <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (readTimeout / 2 - idleSend < to) {\n            to=readTimeout / 2 - idleSend;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            zooKeeper.state=States.CONNECTED;\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      LOG.warn(\"Closing: \",e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        waitingEvents.add(new WatcherEvent(Event.EventNone,Event.KeeperStateDisconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n  cleanup();\n  ZooLog.logTextTraceMessage(\"SendThread exitedloop.\",ZooLog.textTraceMask);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 17
    } ],
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 670,
    "startColumnNumber" : 28,
    "endLineNumber" : 670,
    "endColumnNumber" : 54
  }, {
    "charLength" : 26,
    "startLineNumber" : 675,
    "startColumnNumber" : 32,
    "endLineNumber" : 675,
    "endColumnNumber" : 58
  }, {
    "charLength" : 26,
    "startLineNumber" : 676,
    "startColumnNumber" : 37,
    "endLineNumber" : 676,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}