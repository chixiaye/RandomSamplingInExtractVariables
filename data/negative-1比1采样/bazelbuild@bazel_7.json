{
  "id" : 7,
  "expression" : "\"Can't process class [\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/third_party/java/proguard/proguard6.2.2/src/proguard/io/ClassReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Can't process class [\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 114,
      "startColumnNumber" : 47,
      "endLineNumber" : 114,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 114,
        "startColumnNumber" : 47,
        "endLineNumber" : 114,
        "endColumnNumber" : 116
      },
      "nodeContext" : "\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 114,
        "startColumnNumber" : 31,
        "endLineNumber" : 114,
        "endColumnNumber" : 117
      },
      "nodeContext" : "new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 114,
        "startColumnNumber" : 31,
        "endLineNumber" : 114,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 114,
        "startColumnNumber" : 18,
        "endLineNumber" : 114,
        "endColumnNumber" : 131
      },
      "nodeContext" : "(IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception ex) {\n  throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  InputStream inputStream=dataEntry.getInputStream();\n  DataInputStream dataInputStream=new DataInputStream(inputStream);\n  Clazz clazz;\n  if (isLibrary) {\n    clazz=new LibraryClass();\n    clazz.accept(new LibraryClassReader(dataInputStream,skipNonPublicLibraryClasses,skipNonPublicLibraryClassMembers));\n  }\n else {\n    clazz=new ProgramClass();\n    clazz.accept(new ProgramClassReader(dataInputStream));\n  }\n  String className=clazz.getName();\n  if (className != null) {\n    String dataEntryName=dataEntry.getName();\n    if (!dataEntryName.equals(\"module-info.class\") && !dataEntryName.replace(File.pathSeparatorChar,ClassConstants.PACKAGE_SEPARATOR).equals(className + ClassConstants.CLASS_FILE_EXTENSION) && warningPrinter != null) {\n      warningPrinter.print(className,\"Warning: class [\" + dataEntry.getName() + \"] unexpectedly contains class [\"+ ClassUtil.externalClassName(className)+ \"]\");\n    }\n    clazz.accept(classVisitor);\n  }\n  dataEntry.closeInputStream();\n}\n catch (Exception ex) {\n  throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 158,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1763,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    InputStream inputStream=dataEntry.getInputStream();\n    DataInputStream dataInputStream=new DataInputStream(inputStream);\n    Clazz clazz;\n    if (isLibrary) {\n      clazz=new LibraryClass();\n      clazz.accept(new LibraryClassReader(dataInputStream,skipNonPublicLibraryClasses,skipNonPublicLibraryClassMembers));\n    }\n else {\n      clazz=new ProgramClass();\n      clazz.accept(new ProgramClassReader(dataInputStream));\n    }\n    String className=clazz.getName();\n    if (className != null) {\n      String dataEntryName=dataEntry.getName();\n      if (!dataEntryName.equals(\"module-info.class\") && !dataEntryName.replace(File.pathSeparatorChar,ClassConstants.PACKAGE_SEPARATOR).equals(className + ClassConstants.CLASS_FILE_EXTENSION) && warningPrinter != null) {\n        warningPrinter.print(className,\"Warning: class [\" + dataEntry.getName() + \"] unexpectedly contains class [\"+ ClassUtil.externalClassName(className)+ \"]\");\n      }\n      clazz.accept(classVisitor);\n    }\n    dataEntry.closeInputStream();\n  }\n catch (  Exception ex) {\n    throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1824,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void read(DataEntry dataEntry) throws IOException {\n  try {\n    InputStream inputStream=dataEntry.getInputStream();\n    DataInputStream dataInputStream=new DataInputStream(inputStream);\n    Clazz clazz;\n    if (isLibrary) {\n      clazz=new LibraryClass();\n      clazz.accept(new LibraryClassReader(dataInputStream,skipNonPublicLibraryClasses,skipNonPublicLibraryClassMembers));\n    }\n else {\n      clazz=new ProgramClass();\n      clazz.accept(new ProgramClassReader(dataInputStream));\n    }\n    String className=clazz.getName();\n    if (className != null) {\n      String dataEntryName=dataEntry.getName();\n      if (!dataEntryName.equals(\"module-info.class\") && !dataEntryName.replace(File.pathSeparatorChar,ClassConstants.PACKAGE_SEPARATOR).equals(className + ClassConstants.CLASS_FILE_EXTENSION) && warningPrinter != null) {\n        warningPrinter.print(className,\"Warning: class [\" + dataEntry.getName() + \"] unexpectedly contains class [\"+ ClassUtil.externalClassName(className)+ \"]\");\n      }\n      clazz.accept(classVisitor);\n    }\n    dataEntry.closeInputStream();\n  }\n catch (  Exception ex) {\n    throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 132
      },
      "nodeContext" : "throw (IOException)new IOException(\"Can't process class [\" + dataEntry.getName() + \"] (\"+ ex.getMessage()+ \")\").initCause(ex);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 114,
    "startColumnNumber" : 47,
    "endLineNumber" : 114,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}