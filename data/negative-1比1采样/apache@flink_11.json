{
  "id" : 11,
  "expression" : "reduceNode",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-optimizer/src/test/java/org/apache/flink/optimizer/dataexchange/DataExchangeModeForwardTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reduceNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 138,
      "startColumnNumber" : 68,
      "endLineNumber" : 138,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 138,
        "startColumnNumber" : 68,
        "endLineNumber" : 138,
        "endColumnNumber" : 95
      },
      "nodeContext" : "reduceNode.getPredecessor()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 138,
        "startColumnNumber" : 46,
        "endLineNumber" : 138,
        "endColumnNumber" : 95
      },
      "nodeContext" : "(SingleInputPlanNode)reduceNode.getPredecessor()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 138,
        "startColumnNumber" : 32,
        "endLineNumber" : 138,
        "endColumnNumber" : 95
      },
      "nodeContext" : "combineNode=(SingleInputPlanNode)reduceNode.getPredecessor()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 96
      },
      "nodeContext" : "SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().setExecutionMode(execMode);\n  DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n  dataSet.map(new MapFunction<String,Integer>(){\n    @Override public Integer map(    String value){\n      return 0;\n    }\n  }\n).filter(new FilterFunction<Integer>(){\n    @Override public boolean filter(    Integer value){\n      return false;\n    }\n  }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n  OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n  SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n  SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n  SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n  SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n  SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n  assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n  assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n  assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n  assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n  assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n  assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().setExecutionMode(execMode);\n  DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n  dataSet.map(new MapFunction<String,Integer>(){\n    @Override public Integer map(    String value){\n      return 0;\n    }\n  }\n).filter(new FilterFunction<Integer>(){\n    @Override public boolean filter(    Integer value){\n      return false;\n    }\n  }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n  OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n  SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n  SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n  SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n  SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n  SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n  assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n  assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n  assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n  assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n  assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n  assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n}\n catch (Exception e) {\n  e.printStackTrace();\n  fail(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 110,
        "startColumnNumber" : 37,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.getConfig().setExecutionMode(execMode);\n    DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n    dataSet.map(new MapFunction<String,Integer>(){\n      @Override public Integer map(      String value){\n        return 0;\n      }\n    }\n).filter(new FilterFunction<Integer>(){\n      @Override public boolean filter(      Integer value){\n        return false;\n      }\n    }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n    OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n    SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n    SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n    SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n    SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n    SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n    assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n    assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n    assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n    assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n    assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n    assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2666,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verifySimpleForwardPlan(ExecutionMode execMode,DataExchangeMode toMap,DataExchangeMode toFilter,DataExchangeMode toKeyExtractor,DataExchangeMode toCombiner,DataExchangeMode toReduce,DataExchangeMode toSink){\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.getConfig().setExecutionMode(execMode);\n    DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n    dataSet.map(new MapFunction<String,Integer>(){\n      @Override public Integer map(      String value){\n        return 0;\n      }\n    }\n).filter(new FilterFunction<Integer>(){\n      @Override public boolean filter(      Integer value){\n        return false;\n      }\n    }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n    OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n    SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n    SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n    SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n    SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n    SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n    assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n    assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n    assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n    assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n    assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n    assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 96
      },
      "nodeContext" : "SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.optimizer.plan.SingleInputPlanNode"
  }, {
    "nodeContext" : "reduceNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 150,
      "startColumnNumber" : 35,
      "endLineNumber" : 150,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 150,
        "startColumnNumber" : 35,
        "endLineNumber" : 150,
        "endColumnNumber" : 56
      },
      "nodeContext" : "reduceNode.getInput()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 150,
        "startColumnNumber" : 35,
        "endLineNumber" : 150,
        "endColumnNumber" : 78
      },
      "nodeContext" : "reduceNode.getInput().getDataExchangeMode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().setExecutionMode(execMode);\n  DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n  dataSet.map(new MapFunction<String,Integer>(){\n    @Override public Integer map(    String value){\n      return 0;\n    }\n  }\n).filter(new FilterFunction<Integer>(){\n    @Override public boolean filter(    Integer value){\n      return false;\n    }\n  }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n  OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n  SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n  SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n  SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n  SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n  SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n  assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n  assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n  assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n  assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n  assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n  assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().setExecutionMode(execMode);\n  DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n  dataSet.map(new MapFunction<String,Integer>(){\n    @Override public Integer map(    String value){\n      return 0;\n    }\n  }\n).filter(new FilterFunction<Integer>(){\n    @Override public boolean filter(    Integer value){\n      return false;\n    }\n  }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n  OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n  SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n  SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n  SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n  SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n  SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n  assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n  assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n  assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n  assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n  assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n  assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n}\n catch (Exception e) {\n  e.printStackTrace();\n  fail(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 110,
        "startColumnNumber" : 37,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.getConfig().setExecutionMode(execMode);\n    DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n    dataSet.map(new MapFunction<String,Integer>(){\n      @Override public Integer map(      String value){\n        return 0;\n      }\n    }\n).filter(new FilterFunction<Integer>(){\n      @Override public boolean filter(      Integer value){\n        return false;\n      }\n    }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n    OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n    SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n    SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n    SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n    SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n    SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n    assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n    assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n    assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n    assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n    assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n    assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2666,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verifySimpleForwardPlan(ExecutionMode execMode,DataExchangeMode toMap,DataExchangeMode toFilter,DataExchangeMode toKeyExtractor,DataExchangeMode toCombiner,DataExchangeMode toReduce,DataExchangeMode toSink){\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.getConfig().setExecutionMode(execMode);\n    DataSet<String> dataSet=env.readTextFile(\"/never/accessed\");\n    dataSet.map(new MapFunction<String,Integer>(){\n      @Override public Integer map(      String value){\n        return 0;\n      }\n    }\n).filter(new FilterFunction<Integer>(){\n      @Override public boolean filter(      Integer value){\n        return false;\n      }\n    }\n).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());\n    OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());\n    SinkPlanNode sinkNode=optPlan.getDataSinks().iterator().next();\n    SingleInputPlanNode reduceNode=(SingleInputPlanNode)sinkNode.getPredecessor();\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getPredecessor();\n    SingleInputPlanNode keyExtractorNode=(SingleInputPlanNode)combineNode.getPredecessor();\n    SingleInputPlanNode filterNode=(SingleInputPlanNode)keyExtractorNode.getPredecessor();\n    SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();\n    assertEquals(toMap,mapNode.getInput().getDataExchangeMode());\n    assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());\n    assertEquals(toKeyExtractor,keyExtractorNode.getInput().getDataExchangeMode());\n    assertEquals(toCombiner,combineNode.getInput().getDataExchangeMode());\n    assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n    assertEquals(toSink,sinkNode.getInput().getDataExchangeMode());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 150,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(toReduce,reduceNode.getInput().getDataExchangeMode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.optimizer.plan.SingleInputPlanNode"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 138,
    "startColumnNumber" : 68,
    "endLineNumber" : 138,
    "endColumnNumber" : 78
  }, {
    "charLength" : 10,
    "startLineNumber" : 150,
    "startColumnNumber" : 35,
    "endLineNumber" : 150,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}