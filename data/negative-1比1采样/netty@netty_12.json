{
  "id" : 12,
  "expression" : "this.offset",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/stream/ChunkedFile.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.offset",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 149,
      "startColumnNumber" : 22,
      "endLineNumber" : 149,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 149,
        "startColumnNumber" : 13,
        "endLineNumber" : 149,
        "endColumnNumber" : 33
      },
      "nodeContext" : "offset=this.offset",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 34
      },
      "nodeContext" : "long offset=this.offset;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 730,
        "startLineNumber" : 148,
        "startColumnNumber" : 74,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long offset=this.offset;\n  if (offset >= endOffset) {\n    return null;\n  }\n  int chunkSize=(int)Math.min(this.chunkSize,endOffset - offset);\n  ByteBuf buf=allocator.heapBuffer(chunkSize);\n  boolean release=true;\n  try {\n    file.readFully(buf.array(),buf.arrayOffset(),chunkSize);\n    buf.writerIndex(chunkSize);\n    this.offset=offset + chunkSize;\n    release=false;\n    return buf;\n  }\n  finally {\n    if (release) {\n      buf.release();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf readChunk(ByteBufAllocator allocator) throws Exception {\n  long offset=this.offset;\n  if (offset >= endOffset) {\n    return null;\n  }\n  int chunkSize=(int)Math.min(this.chunkSize,endOffset - offset);\n  ByteBuf buf=allocator.heapBuffer(chunkSize);\n  boolean release=true;\n  try {\n    file.readFully(buf.array(),buf.arrayOffset(),chunkSize);\n    buf.writerIndex(chunkSize);\n    this.offset=offset + chunkSize;\n    release=false;\n    return buf;\n  }\n  finally {\n    if (release) {\n      buf.release();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 34
      },
      "nodeContext" : "long offset=this.offset;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 149,
    "startColumnNumber" : 22,
    "endLineNumber" : 149,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}