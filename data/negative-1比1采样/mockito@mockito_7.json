{
  "id" : 7,
  "expression" : "arguments",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 74,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 32
      },
      "nodeContext" : "arguments.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 37
      },
      "nodeContext" : "arguments.length == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (arguments.length == 1) {\n  if (arguments[0] instanceof Class<?>) {\n    return (Class<?>)arguments[0];\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 71,
        "startColumnNumber" : 47,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 70,
        "startColumnNumber" : 80,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Class<?> inferParameterizedType(Type type,String name,String sort){\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 37
      },
      "nodeContext" : "arguments.length == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Type[]"
  }, {
    "nodeContext" : "arguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 75,
      "startColumnNumber" : 20,
      "endLineNumber" : 75,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 75,
        "startColumnNumber" : 20,
        "endLineNumber" : 75,
        "endColumnNumber" : 32
      },
      "nodeContext" : "arguments[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 20,
        "endLineNumber" : 75,
        "endColumnNumber" : 52
      },
      "nodeContext" : "arguments[0] instanceof Class<?>",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (arguments[0] instanceof Class<?>) {\n  return (Class<?>)arguments[0];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 74,
        "startColumnNumber" : 39,
        "endLineNumber" : 78,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (arguments[0] instanceof Class<?>) {\n    return (Class<?>)arguments[0];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (arguments.length == 1) {\n  if (arguments[0] instanceof Class<?>) {\n    return (Class<?>)arguments[0];\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 71,
        "startColumnNumber" : 47,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 70,
        "startColumnNumber" : 80,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Class<?> inferParameterizedType(Type type,String name,String sort){\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 20,
        "endLineNumber" : 75,
        "endColumnNumber" : 52
      },
      "nodeContext" : "arguments[0] instanceof Class<?>",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Type[]"
  }, {
    "nodeContext" : "arguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 76,
      "startColumnNumber" : 38,
      "endLineNumber" : 76,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 76,
        "startColumnNumber" : 38,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "arguments[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 76,
        "startColumnNumber" : 27,
        "endLineNumber" : 76,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(Class<?>)arguments[0]",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 76,
        "endColumnNumber" : 51
      },
      "nodeContext" : "return (Class<?>)arguments[0];\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 75,
        "startColumnNumber" : 54,
        "endLineNumber" : 77,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return (Class<?>)arguments[0];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (arguments[0] instanceof Class<?>) {\n  return (Class<?>)arguments[0];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 74,
        "startColumnNumber" : 39,
        "endLineNumber" : 78,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (arguments[0] instanceof Class<?>) {\n    return (Class<?>)arguments[0];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (arguments.length == 1) {\n  if (arguments[0] instanceof Class<?>) {\n    return (Class<?>)arguments[0];\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 71,
        "startColumnNumber" : 47,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] arguments=parameterizedType.getActualTypeArguments();\n  if (arguments.length == 1) {\n    if (arguments[0] instanceof Class<?>) {\n      return (Class<?>)arguments[0];\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 70,
        "startColumnNumber" : 80,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static Class<?> inferParameterizedType(Type type,String name,String sort){\n  if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type[] arguments=parameterizedType.getActualTypeArguments();\n    if (arguments.length == 1) {\n      if (arguments[0] instanceof Class<?>) {\n        return (Class<?>)arguments[0];\n      }\n    }\n  }\n  throw new MockitoException(join(\"Mockito cannot infer a static mock from a raw type for \" + name,\"\",\"Instead of @Mock \" + sort + \" you need to specify a parameterized type\",\"For example, if you would like to mock Sample.class, specify\",\"\",\"@Mock \" + sort + \"<Sample>\",\"\",\"as the type parameter. If the type is itself parameterized, it should be specified as raw type.\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 76,
        "endColumnNumber" : 51
      },
      "nodeContext" : "return (Class<?>)arguments[0];\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.reflect.Type[]"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 74,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 75,
    "startColumnNumber" : 20,
    "endLineNumber" : 75,
    "endColumnNumber" : 29
  }, {
    "charLength" : 9,
    "startLineNumber" : 76,
    "startColumnNumber" : 38,
    "endLineNumber" : 76,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}