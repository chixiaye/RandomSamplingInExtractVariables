{
  "id" : 5,
  "expression" : "consumerProperties",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/inbound/RocketMQConsumerFactory.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 55,
      "startColumnNumber" : 17,
      "endLineNumber" : 55,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 55,
        "startColumnNumber" : 17,
        "endLineNumber" : 55,
        "endColumnNumber" : 46
      },
      "nodeContext" : "consumerProperties.getGroup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 55,
        "startColumnNumber" : 17,
        "endLineNumber" : 55,
        "endColumnNumber" : 46
      },
      "nodeContext" : "consumerProperties.getGroup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 57,
      "startColumnNumber" : 17,
      "endLineNumber" : 57,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 57,
        "startColumnNumber" : 17,
        "endLineNumber" : 57,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumerProperties.getNameServer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 57,
        "startColumnNumber" : 17,
        "endLineNumber" : 57,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumerProperties.getNameServer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 60,
      "startColumnNumber" : 13,
      "endLineNumber" : 60,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 60,
        "startColumnNumber" : 13,
        "endLineNumber" : 60,
        "endColumnNumber" : 65
      },
      "nodeContext" : "consumerProperties.getAllocateMessageQueueStrategy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 59,
        "startColumnNumber" : 62,
        "endLineNumber" : 62,
        "endColumnNumber" : 42
      },
      "nodeContext" : "RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 59,
        "startColumnNumber" : 31,
        "endLineNumber" : 62,
        "endColumnNumber" : 42
      },
      "nodeContext" : "allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 43
      },
      "nodeContext" : "AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 60,
        "startColumnNumber" : 13,
        "endLineNumber" : 60,
        "endColumnNumber" : 65
      },
      "nodeContext" : "consumerProperties.getAllocateMessageQueueStrategy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 64,
      "startColumnNumber" : 28,
      "endLineNumber" : 64,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 64,
        "startColumnNumber" : 28,
        "endLineNumber" : 64,
        "endColumnNumber" : 61
      },
      "nodeContext" : "consumerProperties.getAccessKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 64,
        "endColumnNumber" : 62
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getAccessKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 65,
        "endColumnNumber" : 63
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 64,
        "endColumnNumber" : 62
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getAccessKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 65,
      "startColumnNumber" : 29,
      "endLineNumber" : 65,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 65,
        "startColumnNumber" : 29,
        "endLineNumber" : 65,
        "endColumnNumber" : 62
      },
      "nodeContext" : "consumerProperties.getSecretKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 65,
        "startColumnNumber" : 7,
        "endLineNumber" : 65,
        "endColumnNumber" : 63
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getSecretKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 65,
        "endColumnNumber" : 63
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 65,
        "startColumnNumber" : 7,
        "endLineNumber" : 65,
        "endColumnNumber" : 63
      },
      "nodeContext" : "StringUtils.hasLength(consumerProperties.getSecretKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 67,
      "startColumnNumber" : 28,
      "endLineNumber" : 67,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 67,
        "startColumnNumber" : 28,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "consumerProperties.getAccessKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 67,
        "startColumnNumber" : 5,
        "endLineNumber" : 68,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 66,
        "startColumnNumber" : 13,
        "endLineNumber" : 68,
        "endColumnNumber" : 42
      },
      "nodeContext" : "new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 42
      },
      "nodeContext" : "rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 43
      },
      "nodeContext" : "rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 65,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 67,
        "startColumnNumber" : 28,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "consumerProperties.getAccessKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 68,
      "startColumnNumber" : 7,
      "endLineNumber" : 68,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 68,
        "startColumnNumber" : 7,
        "endLineNumber" : 68,
        "endColumnNumber" : 40
      },
      "nodeContext" : "consumerProperties.getSecretKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 67,
        "startColumnNumber" : 5,
        "endLineNumber" : 68,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 66,
        "startColumnNumber" : 13,
        "endLineNumber" : 68,
        "endColumnNumber" : 42
      },
      "nodeContext" : "new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 42
      },
      "nodeContext" : "rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 66,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 43
      },
      "nodeContext" : "rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 65,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n  rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 68,
        "startColumnNumber" : 7,
        "endLineNumber" : 68,
        "endColumnNumber" : 40
      },
      "nodeContext" : "consumerProperties.getSecretKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 71,
      "startColumnNumber" : 4,
      "endLineNumber" : 71,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 33
      },
      "nodeContext" : "consumerProperties.getGroup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 70,
        "startColumnNumber" : 24,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 50
      },
      "nodeContext" : "DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 33
      },
      "nodeContext" : "consumerProperties.getGroup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 72,
      "startColumnNumber" : 4,
      "endLineNumber" : 72,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 42
      },
      "nodeContext" : "consumerProperties.getEnableMsgTrace()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 70,
        "startColumnNumber" : 24,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 50
      },
      "nodeContext" : "DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 42
      },
      "nodeContext" : "consumerProperties.getEnableMsgTrace()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 73,
      "startColumnNumber" : 4,
      "endLineNumber" : 73,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "consumerProperties.getCustomizedTraceTopic()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 70,
        "startColumnNumber" : 24,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 50
      },
      "nodeContext" : "DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "consumerProperties.getCustomizedTraceTopic()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 75,
      "startColumnNumber" : 23,
      "endLineNumber" : 75,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 75,
        "startColumnNumber" : 23,
        "endLineNumber" : 75,
        "endColumnNumber" : 64
      },
      "nodeContext" : "consumerProperties.getVipChannelEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 64
      },
      "nodeContext" : "null == rpcHook && consumerProperties.getVipChannelEnabled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 65
      },
      "nodeContext" : "consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 64
      },
      "nodeContext" : "null == rpcHook && consumerProperties.getVipChannelEnabled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 77,
      "startColumnNumber" : 43,
      "endLineNumber" : 77,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 77,
        "startColumnNumber" : 43,
        "endLineNumber" : 77,
        "endColumnNumber" : 72
      },
      "nodeContext" : "consumerProperties.getGroup()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 73
      },
      "nodeContext" : "RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 74
      },
      "nodeContext" : "consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 75
      },
      "nodeContext" : "consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 73
      },
      "nodeContext" : "RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 78,
      "startColumnNumber" : 24,
      "endLineNumber" : 78,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 24,
        "endLineNumber" : 78,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumerProperties.getNamespace()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 58
      },
      "nodeContext" : "consumer.setNamespace(consumerProperties.getNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumer.setNamespace(consumerProperties.getNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 78,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumer.setNamespace(consumerProperties.getNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 79,
      "startColumnNumber" : 26,
      "endLineNumber" : 79,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 79,
        "startColumnNumber" : 26,
        "endLineNumber" : 79,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumerProperties.getNameServer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 61
      },
      "nodeContext" : "consumer.setNamesrvAddr(consumerProperties.getNameServer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "consumer.setNamesrvAddr(consumerProperties.getNameServer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "consumer.setNamesrvAddr(consumerProperties.getNameServer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 80,
      "startColumnNumber" : 43,
      "endLineNumber" : 80,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 80,
        "startColumnNumber" : 43,
        "endLineNumber" : 80,
        "endColumnNumber" : 79
      },
      "nodeContext" : "consumerProperties.getMessageModel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 80,
        "startColumnNumber" : 27,
        "endLineNumber" : 80,
        "endColumnNumber" : 80
      },
      "nodeContext" : "getMessageModel(consumerProperties.getMessageModel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 81
      },
      "nodeContext" : "consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 81,
      "startColumnNumber" : 21,
      "endLineNumber" : 81,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 81,
        "startColumnNumber" : 21,
        "endLineNumber" : 81,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumerProperties.getUseTLS()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "consumer.setUseTLS(consumerProperties.getUseTLS())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer.setUseTLS(consumerProperties.getUseTLS());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer.setUseTLS(consumerProperties.getUseTLS());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 83,
      "startColumnNumber" : 4,
      "endLineNumber" : 83,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumerProperties.getPullTimeDelayMillsWhenException()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 61
      },
      "nodeContext" : "consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumerProperties.getPullTimeDelayMillsWhenException()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 84,
      "startColumnNumber" : 28,
      "endLineNumber" : 84,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 84,
        "startColumnNumber" : 28,
        "endLineNumber" : 84,
        "endColumnNumber" : 65
      },
      "nodeContext" : "consumerProperties.getPullBatchSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumer.setPullBatchSize(consumerProperties.getPullBatchSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 67
      },
      "nodeContext" : "consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 67
      },
      "nodeContext" : "consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 85,
      "startColumnNumber" : 31,
      "endLineNumber" : 85,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 85,
        "startColumnNumber" : 31,
        "endLineNumber" : 85,
        "endColumnNumber" : 71
      },
      "nodeContext" : "consumerProperties.getConsumeFromWhere()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 72
      },
      "nodeContext" : "consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 73
      },
      "nodeContext" : "consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 73
      },
      "nodeContext" : "consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 87,
      "startColumnNumber" : 4,
      "endLineNumber" : 87,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumerProperties.getHeartbeatBrokerInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumerProperties.getHeartbeatBrokerInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 89,
      "startColumnNumber" : 4,
      "endLineNumber" : 89,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumerProperties.getPersistConsumerOffsetInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 58
      },
      "nodeContext" : "consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumerProperties.getPersistConsumerOffsetInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 90,
      "startColumnNumber" : 27,
      "endLineNumber" : 90,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 90,
        "startColumnNumber" : 27,
        "endLineNumber" : 90,
        "endColumnNumber" : 55
      },
      "nodeContext" : "consumerProperties.getPush()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 90,
        "startColumnNumber" : 27,
        "endLineNumber" : 90,
        "endColumnNumber" : 73
      },
      "nodeContext" : "consumerProperties.getPush().getPullInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "consumer.setPullInterval(consumerProperties.getPush().getPullInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 75
      },
      "nodeContext" : "consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 75
      },
      "nodeContext" : "consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  }, {
    "nodeContext" : "consumerProperties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 93,
      "startColumnNumber" : 23,
      "endLineNumber" : 93,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 93,
        "startColumnNumber" : 23,
        "endLineNumber" : 93,
        "endColumnNumber" : 55
      },
      "nodeContext" : "consumerProperties.getUnitName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 56
      },
      "nodeContext" : "consumer.setUnitName(consumerProperties.getUnitName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumer.setUnitName(consumerProperties.getUnitName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 95,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static DefaultMQPushConsumer initPushConsumer(ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties){\n  RocketMQConsumerProperties consumerProperties=extendedConsumerProperties.getExtension();\n  Assert.notNull(consumerProperties.getGroup(),\"Property 'group' is required - consumerGroup\");\n  Assert.notNull(consumerProperties.getNameServer(),\"Property 'nameServer' is required\");\n  AllocateMessageQueueStrategy allocateMessageQueueStrategy=RocketMQBeanContainerCache.getBean(consumerProperties.getAllocateMessageQueueStrategy(),AllocateMessageQueueStrategy.class,new AllocateMessageQueueAveragely());\n  RPCHook rpcHook=null;\n  if (StringUtils.hasLength(consumerProperties.getAccessKey()) && StringUtils.hasLength(consumerProperties.getSecretKey())) {\n    rpcHook=new AclClientRPCHook(new SessionCredentials(consumerProperties.getAccessKey(),consumerProperties.getSecretKey()));\n  }\n  DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(consumerProperties.getGroup(),rpcHook,allocateMessageQueueStrategy,consumerProperties.getEnableMsgTrace(),consumerProperties.getCustomizedTraceTopic());\n  consumer.setVipChannelEnabled(null == rpcHook && consumerProperties.getVipChannelEnabled());\n  consumer.setInstanceName(RocketMQUtils.getInstanceName(rpcHook,consumerProperties.getGroup()));\n  consumer.setNamespace(consumerProperties.getNamespace());\n  consumer.setNamesrvAddr(consumerProperties.getNameServer());\n  consumer.setMessageModel(getMessageModel(consumerProperties.getMessageModel()));\n  consumer.setUseTLS(consumerProperties.getUseTLS());\n  consumer.setPullTimeDelayMillsWhenException(consumerProperties.getPullTimeDelayMillsWhenException());\n  consumer.setPullBatchSize(consumerProperties.getPullBatchSize());\n  consumer.setConsumeFromWhere(consumerProperties.getConsumeFromWhere());\n  consumer.setHeartbeatBrokerInterval(consumerProperties.getHeartbeatBrokerInterval());\n  consumer.setPersistConsumerOffsetInterval(consumerProperties.getPersistConsumerOffsetInterval());\n  consumer.setPullInterval(consumerProperties.getPush().getPullInterval());\n  consumer.setConsumeThreadMin(extendedConsumerProperties.getConcurrency());\n  consumer.setConsumeThreadMax(extendedConsumerProperties.getConcurrency());\n  consumer.setUnitName(consumerProperties.getUnitName());\n  return consumer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumer.setUnitName(consumerProperties.getUnitName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 55,
    "startColumnNumber" : 17,
    "endLineNumber" : 55,
    "endColumnNumber" : 35
  }, {
    "charLength" : 18,
    "startLineNumber" : 57,
    "startColumnNumber" : 17,
    "endLineNumber" : 57,
    "endColumnNumber" : 35
  }, {
    "charLength" : 18,
    "startLineNumber" : 60,
    "startColumnNumber" : 13,
    "endLineNumber" : 60,
    "endColumnNumber" : 31
  }, {
    "charLength" : 18,
    "startLineNumber" : 64,
    "startColumnNumber" : 28,
    "endLineNumber" : 64,
    "endColumnNumber" : 46
  }, {
    "charLength" : 18,
    "startLineNumber" : 65,
    "startColumnNumber" : 29,
    "endLineNumber" : 65,
    "endColumnNumber" : 47
  }, {
    "charLength" : 18,
    "startLineNumber" : 67,
    "startColumnNumber" : 28,
    "endLineNumber" : 67,
    "endColumnNumber" : 46
  }, {
    "charLength" : 18,
    "startLineNumber" : 68,
    "startColumnNumber" : 7,
    "endLineNumber" : 68,
    "endColumnNumber" : 25
  }, {
    "charLength" : 18,
    "startLineNumber" : 71,
    "startColumnNumber" : 4,
    "endLineNumber" : 71,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 72,
    "startColumnNumber" : 4,
    "endLineNumber" : 72,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 73,
    "startColumnNumber" : 4,
    "endLineNumber" : 73,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 75,
    "startColumnNumber" : 23,
    "endLineNumber" : 75,
    "endColumnNumber" : 41
  }, {
    "charLength" : 18,
    "startLineNumber" : 77,
    "startColumnNumber" : 43,
    "endLineNumber" : 77,
    "endColumnNumber" : 61
  }, {
    "charLength" : 18,
    "startLineNumber" : 78,
    "startColumnNumber" : 24,
    "endLineNumber" : 78,
    "endColumnNumber" : 42
  }, {
    "charLength" : 18,
    "startLineNumber" : 79,
    "startColumnNumber" : 26,
    "endLineNumber" : 79,
    "endColumnNumber" : 44
  }, {
    "charLength" : 18,
    "startLineNumber" : 80,
    "startColumnNumber" : 43,
    "endLineNumber" : 80,
    "endColumnNumber" : 61
  }, {
    "charLength" : 18,
    "startLineNumber" : 81,
    "startColumnNumber" : 21,
    "endLineNumber" : 81,
    "endColumnNumber" : 39
  }, {
    "charLength" : 18,
    "startLineNumber" : 83,
    "startColumnNumber" : 4,
    "endLineNumber" : 83,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 84,
    "startColumnNumber" : 28,
    "endLineNumber" : 84,
    "endColumnNumber" : 46
  }, {
    "charLength" : 18,
    "startLineNumber" : 85,
    "startColumnNumber" : 31,
    "endLineNumber" : 85,
    "endColumnNumber" : 49
  }, {
    "charLength" : 18,
    "startLineNumber" : 87,
    "startColumnNumber" : 4,
    "endLineNumber" : 87,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 89,
    "startColumnNumber" : 4,
    "endLineNumber" : 89,
    "endColumnNumber" : 22
  }, {
    "charLength" : 18,
    "startLineNumber" : 90,
    "startColumnNumber" : 27,
    "endLineNumber" : 90,
    "endColumnNumber" : 45
  }, {
    "charLength" : 18,
    "startLineNumber" : 93,
    "startColumnNumber" : 23,
    "endLineNumber" : 93,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  } ]
}