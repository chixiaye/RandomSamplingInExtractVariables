{
  "id" : 3,
  "expression" : "\"'<portNum>/udp').\"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/main/java/com/google/cloud/tools/jib/frontend/ExposedPortsParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"'<portNum>/udp').\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 60,
      "startColumnNumber" : 18,
      "endLineNumber" : 60,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 55,
        "startColumnNumber" : 14,
        "endLineNumber" : 60,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 39
      },
      "nodeContext" : "throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 54,
        "startColumnNumber" : 30,
        "endLineNumber" : 61,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 61,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!matcher.matches()) {\n  throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 51,
        "startColumnNumber" : 30,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  Protocol protocol=Protocol.getFromString(matcher.group(3));\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    throw new NumberFormatException(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  for (int portNumber=min; portNumber <= max; portNumber++) {\n    result.add(new Port(portNumber,protocol));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1300,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String port : ports) {\n  Matcher matcher=portPattern.matcher(port);\n  if (!matcher.matches()) {\n    throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n  }\n  int min=Integer.parseInt(matcher.group(1));\n  int max=min;\n  if (!Strings.isNullOrEmpty(matcher.group(2))) {\n    max=Integer.parseInt(matcher.group(2));\n  }\n  Protocol protocol=Protocol.getFromString(matcher.group(3));\n  if (min > max) {\n    throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n  }\n  if (min < 1 || max > 65535) {\n    throw new NumberFormatException(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n  }\n  for (int portNumber=min; portNumber <= max; portNumber++) {\n    result.add(new Port(portNumber,protocol));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 131,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 48,
        "startColumnNumber" : 91,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList.Builder<Port> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    Protocol protocol=Protocol.getFromString(matcher.group(3));\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      throw new NumberFormatException(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    for (int portNumber=min; portNumber <= max; portNumber++) {\n      result.add(new Port(portNumber,protocol));\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts/validates a list of strings representing port ranges to an expanded list of  {@link Port}s. <p>For example: [\"1000\", \"2000-2002\"] will expand to a list of  {@link Port}s with the port numbers [1000, 2000, 2001, 2002]\n * @param ports the list of port numbers/ranges\n * @return the ports as a list of {@link Port}\n * @throws NumberFormatException if any of the ports are in an invalid format or out of range\n */\npublic static ImmutableList<Port> parse(List<String> ports) throws NumberFormatException {\n  ImmutableList.Builder<Port> result=new ImmutableList.Builder<>();\n  for (  String port : ports) {\n    Matcher matcher=portPattern.matcher(port);\n    if (!matcher.matches()) {\n      throw new NumberFormatException(\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\");\n    }\n    int min=Integer.parseInt(matcher.group(1));\n    int max=min;\n    if (!Strings.isNullOrEmpty(matcher.group(2))) {\n      max=Integer.parseInt(matcher.group(2));\n    }\n    Protocol protocol=Protocol.getFromString(matcher.group(3));\n    if (min > max) {\n      throw new NumberFormatException(\"Invalid port range '\" + port + \"'; smaller number must come first.\");\n    }\n    if (min < 1 || max > 65535) {\n      throw new NumberFormatException(\"Port number '\" + port + \"' is out of usual range (1-65535).\");\n    }\n    for (int portNumber=min; portNumber <= max; portNumber++) {\n      result.add(new Port(portNumber,protocol));\n    }\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"Invalid port configuration: '\" + port + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 60,
    "startColumnNumber" : 18,
    "endLineNumber" : 60,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}