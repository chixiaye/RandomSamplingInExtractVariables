{
  "id" : 11,
  "expression" : "0",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/test/java/com/alibaba/nacos/client/BeatReactorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 58,
      "startColumnNumber" : 28,
      "endLineNumber" : 58,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Assert.assertEquals(0,getActiveThread(beatReactor))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assert.assertEquals(0,getActiveThread(beatReactor));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 40,
        "startColumnNumber" : 113,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BeatInfo beatInfo=new BeatInfo();\n  beatInfo.setServiceName(\"test\");\n  beatInfo.setIp(\"11.11.11.11\");\n  beatInfo.setPort(1234);\n  beatInfo.setCluster(\"clusterName\");\n  beatInfo.setWeight(1);\n  beatInfo.setMetadata(new HashMap<String,String>());\n  beatInfo.setScheduled(false);\n  beatInfo.setPeriod(1000L);\n  BeatReactor beatReactor=new BeatReactor(namingHttpClientProxy);\n  beatReactor.addBeatInfo(\"testService\",beatInfo);\n  Assert.assertEquals(1,getActiveThread(beatReactor));\n  Thread.sleep(1100L);\n  beatReactor.removeBeatInfo(\"testService\",beatInfo.getIp(),beatInfo.getPort());\n  Thread.sleep(3100L);\n  Assert.assertEquals(0,getActiveThread(beatReactor));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test() throws NoSuchFieldException, IllegalAccessException, InterruptedException, NacosException {\n  BeatInfo beatInfo=new BeatInfo();\n  beatInfo.setServiceName(\"test\");\n  beatInfo.setIp(\"11.11.11.11\");\n  beatInfo.setPort(1234);\n  beatInfo.setCluster(\"clusterName\");\n  beatInfo.setWeight(1);\n  beatInfo.setMetadata(new HashMap<String,String>());\n  beatInfo.setScheduled(false);\n  beatInfo.setPeriod(1000L);\n  BeatReactor beatReactor=new BeatReactor(namingHttpClientProxy);\n  beatReactor.addBeatInfo(\"testService\",beatInfo);\n  Assert.assertEquals(1,getActiveThread(beatReactor));\n  Thread.sleep(1100L);\n  beatReactor.removeBeatInfo(\"testService\",beatInfo.getIp(),beatInfo.getPort());\n  Thread.sleep(3100L);\n  Assert.assertEquals(0,getActiveThread(beatReactor));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 122,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assert.assertEquals(0,getActiveThread(beatReactor));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 58,
    "startColumnNumber" : 28,
    "endLineNumber" : 58,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}