{
  "id" : 1,
  "expression" : "mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/test/java/com/facebook/presto/orc/TestMapFlatBatchStreamReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 75,
      "startLineNumber" : 486,
      "startColumnNumber" : 37,
      "endLineNumber" : 486,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 486,
        "startColumnNumber" : 24,
        "endLineNumber" : 486,
        "endColumnNumber" : 234
      },
      "nodeContext" : "assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 486,
        "startColumnNumber" : 24,
        "endLineNumber" : 486,
        "endColumnNumber" : 235
      },
      "nodeContext" : "assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 485,
        "startColumnNumber" : 92,
        "endLineNumber" : 487,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 485,
        "startColumnNumber" : 20,
        "endLineNumber" : 487,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int position=0; position < block.getPositionCount(); position++) {\n  assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 482,
        "startColumnNumber" : 21,
        "endLineNumber" : 488,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Block block=recordReader.readBlock(0);\n  for (int position=0; position < block.getPositionCount(); position++) {\n    assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 478,
        "startColumnNumber" : 21,
        "endLineNumber" : 488,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (skipFirstBatch && isFirst) {\n  assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n  isFirst=false;\n}\n else {\n  Block block=recordReader.readBlock(0);\n  for (int position=0; position < block.getPositionCount(); position++) {\n    assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 475,
        "startColumnNumber" : 16,
        "endLineNumber" : 488,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (skipFirstStripe && rowsProcessed < 10_000) {\n  assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n}\n else if (skipFirstBatch && isFirst) {\n  assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n  isFirst=false;\n}\n else {\n  Block block=recordReader.readBlock(0);\n  for (int position=0; position < block.getPositionCount(); position++) {\n    assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 474,
        "startColumnNumber" : 137,
        "endLineNumber" : 493,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (skipFirstStripe && rowsProcessed < 10_000) {\n    assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n  }\n else   if (skipFirstBatch && isFirst) {\n    assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n    isFirst=false;\n  }\n else {\n    Block block=recordReader.readBlock(0);\n    for (int position=0; position < block.getPositionCount(); position++) {\n      assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n    }\n  }\n  assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n  assertEquals(recordReader.getFilePosition(),rowsProcessed);\n  rowsProcessed+=batchSize;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 474,
        "startColumnNumber" : 12,
        "endLineNumber" : 493,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int batchSize=toIntExact(recordReader.nextBatch()); batchSize >= 0; batchSize=toIntExact(recordReader.nextBatch())) {\n  if (skipFirstStripe && rowsProcessed < 10_000) {\n    assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n  }\n else   if (skipFirstBatch && isFirst) {\n    assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n    isFirst=false;\n  }\n else {\n    Block block=recordReader.readBlock(0);\n    for (int position=0; position < block.getPositionCount(); position++) {\n      assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n    }\n  }\n  assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n  assertEquals(recordReader.getFilePosition(),rowsProcessed);\n  rowsProcessed+=batchSize;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 115,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1546,
        "startLineNumber" : 469,
        "startColumnNumber" : 23,
        "endLineNumber" : 498,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Iterator<?> expectedValuesIterator=expectedValues.iterator();\n  boolean isFirst=true;\n  int rowsProcessed=0;\n  for (int batchSize=toIntExact(recordReader.nextBatch()); batchSize >= 0; batchSize=toIntExact(recordReader.nextBatch())) {\n    if (skipFirstStripe && rowsProcessed < 10_000) {\n      assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n    }\n else     if (skipFirstBatch && isFirst) {\n      assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n      isFirst=false;\n    }\n else {\n      Block block=recordReader.readBlock(0);\n      for (int position=0; position < block.getPositionCount(); position++) {\n        assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n      }\n    }\n    assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n    assertEquals(recordReader.getFilePosition(),rowsProcessed);\n    rowsProcessed+=batchSize;\n  }\n  assertFalse(expectedValuesIterator.hasNext());\n  assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n  assertEquals(recordReader.getFilePosition(),rowsProcessed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1884,
        "startLineNumber" : 464,
        "startColumnNumber" : 8,
        "endLineNumber" : 498,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (OrcBatchRecordReader recordReader=orcReader.createBatchRecordReader(ImmutableMap.of(0,mapType),createOrcPredicate(0,mapType,expectedValues,OrcTester.Format.DWRF,true),HIVE_STORAGE_TIME_ZONE,new TestingHiveOrcAggregatedMemoryContext(),1024)){\n  Iterator<?> expectedValuesIterator=expectedValues.iterator();\n  boolean isFirst=true;\n  int rowsProcessed=0;\n  for (int batchSize=toIntExact(recordReader.nextBatch()); batchSize >= 0; batchSize=toIntExact(recordReader.nextBatch())) {\n    if (skipFirstStripe && rowsProcessed < 10_000) {\n      assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n    }\n else     if (skipFirstBatch && isFirst) {\n      assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n      isFirst=false;\n    }\n else {\n      Block block=recordReader.readBlock(0);\n      for (int position=0; position < block.getPositionCount(); position++) {\n        assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n      }\n    }\n    assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n    assertEquals(recordReader.getFilePosition(),rowsProcessed);\n    rowsProcessed+=batchSize;\n  }\n  assertFalse(expectedValuesIterator.hasNext());\n  assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n  assertEquals(recordReader.getFilePosition(),rowsProcessed);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2938,
        "startLineNumber" : 440,
        "startColumnNumber" : 4,
        "endLineNumber" : 499,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OrcDataSource orcDataSource=new FileOrcDataSource(new File(getResource(testOrcFileName).getFile()),new DataSize(1,MEGABYTE),new DataSize(1,MEGABYTE),new DataSize(1,MEGABYTE),true);\n  OrcReader orcReader=new OrcReader(orcDataSource,OrcEncoding.DWRF,new StorageOrcFileTailSource(),new StorageStripeMetadataSource(),NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,OrcReaderTestingUtils.createDefaultTestConfig(),false,NO_ENCRYPTION,DwrfKeyProvider.EMPTY,new RuntimeStats());\n  Type mapType=FUNCTION_AND_TYPE_MANAGER.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(keyType.getTypeSignature()),TypeSignatureParameter.of(valueType.getTypeSignature())));\n  try (OrcBatchRecordReader recordReader=orcReader.createBatchRecordReader(ImmutableMap.of(0,mapType),createOrcPredicate(0,mapType,expectedValues,OrcTester.Format.DWRF,true),HIVE_STORAGE_TIME_ZONE,new TestingHiveOrcAggregatedMemoryContext(),1024)){\n    Iterator<?> expectedValuesIterator=expectedValues.iterator();\n    boolean isFirst=true;\n    int rowsProcessed=0;\n    for (int batchSize=toIntExact(recordReader.nextBatch()); batchSize >= 0; batchSize=toIntExact(recordReader.nextBatch())) {\n      if (skipFirstStripe && rowsProcessed < 10_000) {\n        assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n      }\n else       if (skipFirstBatch && isFirst) {\n        assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n        isFirst=false;\n      }\n else {\n        Block block=recordReader.readBlock(0);\n        for (int position=0; position < block.getPositionCount(); position++) {\n          assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n        }\n      }\n      assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n      assertEquals(recordReader.getFilePosition(),rowsProcessed);\n      rowsProcessed+=batchSize;\n    }\n    assertFalse(expectedValuesIterator.hasNext());\n    assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n    assertEquals(recordReader.getFilePosition(),rowsProcessed);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3134,
        "startLineNumber" : 438,
        "startColumnNumber" : 4,
        "endLineNumber" : 499,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private <K,V>void runTest(String testOrcFileName,Type keyType,Type valueType,List<Map<K,V>> expectedValues,boolean skipFirstBatch,boolean skipFirstStripe) throws Exception {\n  OrcDataSource orcDataSource=new FileOrcDataSource(new File(getResource(testOrcFileName).getFile()),new DataSize(1,MEGABYTE),new DataSize(1,MEGABYTE),new DataSize(1,MEGABYTE),true);\n  OrcReader orcReader=new OrcReader(orcDataSource,OrcEncoding.DWRF,new StorageOrcFileTailSource(),new StorageStripeMetadataSource(),NOOP_ORC_AGGREGATED_MEMORY_CONTEXT,OrcReaderTestingUtils.createDefaultTestConfig(),false,NO_ENCRYPTION,DwrfKeyProvider.EMPTY,new RuntimeStats());\n  Type mapType=FUNCTION_AND_TYPE_MANAGER.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(keyType.getTypeSignature()),TypeSignatureParameter.of(valueType.getTypeSignature())));\n  try (OrcBatchRecordReader recordReader=orcReader.createBatchRecordReader(ImmutableMap.of(0,mapType),createOrcPredicate(0,mapType,expectedValues,OrcTester.Format.DWRF,true),HIVE_STORAGE_TIME_ZONE,new TestingHiveOrcAggregatedMemoryContext(),1024)){\n    Iterator<?> expectedValuesIterator=expectedValues.iterator();\n    boolean isFirst=true;\n    int rowsProcessed=0;\n    for (int batchSize=toIntExact(recordReader.nextBatch()); batchSize >= 0; batchSize=toIntExact(recordReader.nextBatch())) {\n      if (skipFirstStripe && rowsProcessed < 10_000) {\n        assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n      }\n else       if (skipFirstBatch && isFirst) {\n        assertEquals(advance(expectedValuesIterator,batchSize),batchSize);\n        isFirst=false;\n      }\n else {\n        Block block=recordReader.readBlock(0);\n        for (int position=0; position < block.getPositionCount(); position++) {\n          assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n        }\n      }\n      assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n      assertEquals(recordReader.getFilePosition(),rowsProcessed);\n      rowsProcessed+=batchSize;\n    }\n    assertFalse(expectedValuesIterator.hasNext());\n    assertEquals(recordReader.getReaderPosition(),rowsProcessed);\n    assertEquals(recordReader.getFilePosition(),rowsProcessed);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 486,
        "startColumnNumber" : 24,
        "endLineNumber" : 486,
        "endColumnNumber" : 235
      },
      "nodeContext" : "assertEquals(mapType.getObjectValue(SESSION.getSqlFunctionProperties(),block,position),expectedValuesIterator.next(),String.format(\"row mismatch at processed rows %d, position %d\",rowsProcessed,position));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 75,
    "startLineNumber" : 486,
    "startColumnNumber" : 37,
    "endLineNumber" : 486,
    "endColumnNumber" : 112
  } ],
  "layoutRelationDataList" : [ ]
}