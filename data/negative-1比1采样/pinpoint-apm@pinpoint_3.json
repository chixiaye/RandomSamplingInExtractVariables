{
  "id" : 3,
  "expression" : "spanBo.getTransactionId()",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/commons-server/src/test/java/com/navercorp/pinpoint/common/server/bo/SpanFactoryAssert.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanBo.getTransactionId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 27,
      "startColumnNumber" : 38,
      "endLineNumber" : 27,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 27,
        "startColumnNumber" : 22,
        "endLineNumber" : 27,
        "endColumnNumber" : 63
      },
      "nodeContext" : "transactionId=spanBo.getTransactionId()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TransactionId transactionId=spanBo.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2559,
        "startLineNumber" : 22,
        "startColumnNumber" : 55,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(tSpan.getAgentId(),spanBo.getAgentId());\n  Assert.assertEquals(tSpan.getApplicationName(),spanBo.getApplicationId());\n  Assert.assertEquals(tSpan.getAgentStartTime(),spanBo.getAgentStartTime());\n  TransactionId transactionId=spanBo.getTransactionId();\n  ByteBuffer byteBuffer=TransactionIdUtils.formatByteBuffer(transactionId.getAgentId(),transactionId.getAgentStartTime(),transactionId.getTransactionSequence());\n  Assert.assertEquals(ByteBuffer.wrap(tSpan.getTransactionId()),byteBuffer);\n  Assert.assertEquals(tSpan.getSpanId(),spanBo.getSpanId());\n  Assert.assertEquals(tSpan.getParentSpanId(),spanBo.getParentSpanId());\n  Assert.assertEquals(tSpan.getStartTime(),spanBo.getStartTime());\n  Assert.assertEquals(tSpan.getElapsed(),spanBo.getElapsed());\n  Assert.assertEquals(tSpan.getElapsed(),spanBo.getElapsed());\n  Assert.assertEquals(tSpan.getRpc(),spanBo.getRpc());\n  Assert.assertEquals(tSpan.getServiceType(),spanBo.getServiceType());\n  Assert.assertEquals(tSpan.getEndPoint(),spanBo.getEndPoint());\n  Assert.assertEquals(tSpan.getRemoteAddr(),spanBo.getRemoteAddr());\n  assertAnnotation(tSpan.getAnnotations(),spanBo.getAnnotationBoList());\n  Assert.assertEquals(tSpan.getFlag(),spanBo.getFlag());\n  Assert.assertEquals(tSpan.getErr(),spanBo.getErrCode());\n  Assert.assertEquals(tSpan.getParentApplicationName(),spanBo.getParentApplicationId());\n  Assert.assertEquals(tSpan.getParentApplicationType(),spanBo.getParentApplicationServiceType());\n  Assert.assertEquals(tSpan.getAcceptorHost(),spanBo.getAcceptorHost());\n  Assert.assertEquals(tSpan.getApiId(),spanBo.getApiId());\n  Assert.assertEquals(tSpan.getApplicationServiceType(),spanBo.getApplicationServiceType());\n  List<SpanEventBo> spanEventBoList=spanBo.getSpanEventBoList();\n  List<TSpanEvent> spanEventList=tSpan.getSpanEventList();\n  assertSpanEventList(spanEventBoList,spanEventList);\n  boolean hasException=tSpan.getExceptionInfo() != null;\n  Assert.assertEquals(hasException,spanBo.hasException());\n  if (hasException) {\n    Assert.assertEquals(tSpan.getExceptionInfo().getIntValue(),spanBo.getExceptionId());\n    Assert.assertEquals(tSpan.getExceptionInfo().getStringValue(),spanBo.getExceptionMessage());\n  }\n  Assert.assertEquals(tSpan.getLoggingTransactionInfo(),spanBo.getLoggingTransactionInfo());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 317,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 22,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void assertSpan(TSpan tSpan,SpanBo spanBo){\n  Assert.assertEquals(tSpan.getAgentId(),spanBo.getAgentId());\n  Assert.assertEquals(tSpan.getApplicationName(),spanBo.getApplicationId());\n  Assert.assertEquals(tSpan.getAgentStartTime(),spanBo.getAgentStartTime());\n  TransactionId transactionId=spanBo.getTransactionId();\n  ByteBuffer byteBuffer=TransactionIdUtils.formatByteBuffer(transactionId.getAgentId(),transactionId.getAgentStartTime(),transactionId.getTransactionSequence());\n  Assert.assertEquals(ByteBuffer.wrap(tSpan.getTransactionId()),byteBuffer);\n  Assert.assertEquals(tSpan.getSpanId(),spanBo.getSpanId());\n  Assert.assertEquals(tSpan.getParentSpanId(),spanBo.getParentSpanId());\n  Assert.assertEquals(tSpan.getStartTime(),spanBo.getStartTime());\n  Assert.assertEquals(tSpan.getElapsed(),spanBo.getElapsed());\n  Assert.assertEquals(tSpan.getElapsed(),spanBo.getElapsed());\n  Assert.assertEquals(tSpan.getRpc(),spanBo.getRpc());\n  Assert.assertEquals(tSpan.getServiceType(),spanBo.getServiceType());\n  Assert.assertEquals(tSpan.getEndPoint(),spanBo.getEndPoint());\n  Assert.assertEquals(tSpan.getRemoteAddr(),spanBo.getRemoteAddr());\n  assertAnnotation(tSpan.getAnnotations(),spanBo.getAnnotationBoList());\n  Assert.assertEquals(tSpan.getFlag(),spanBo.getFlag());\n  Assert.assertEquals(tSpan.getErr(),spanBo.getErrCode());\n  Assert.assertEquals(tSpan.getParentApplicationName(),spanBo.getParentApplicationId());\n  Assert.assertEquals(tSpan.getParentApplicationType(),spanBo.getParentApplicationServiceType());\n  Assert.assertEquals(tSpan.getAcceptorHost(),spanBo.getAcceptorHost());\n  Assert.assertEquals(tSpan.getApiId(),spanBo.getApiId());\n  Assert.assertEquals(tSpan.getApplicationServiceType(),spanBo.getApplicationServiceType());\n  List<SpanEventBo> spanEventBoList=spanBo.getSpanEventBoList();\n  List<TSpanEvent> spanEventList=tSpan.getSpanEventList();\n  assertSpanEventList(spanEventBoList,spanEventList);\n  boolean hasException=tSpan.getExceptionInfo() != null;\n  Assert.assertEquals(hasException,spanBo.hasException());\n  if (hasException) {\n    Assert.assertEquals(tSpan.getExceptionInfo().getIntValue(),spanBo.getExceptionId());\n    Assert.assertEquals(tSpan.getExceptionInfo().getStringValue(),spanBo.getExceptionMessage());\n  }\n  Assert.assertEquals(tSpan.getLoggingTransactionInfo(),spanBo.getLoggingTransactionInfo());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TransactionId transactionId=spanBo.getTransactionId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.navercorp.pinpoint.common.util.TransactionId"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 27,
    "startColumnNumber" : 38,
    "endLineNumber" : 27,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}