{
  "id" : 12,
  "expression" : "new DynamicPartitionsSpec(5,null)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/HashPartitionMultiPhaseParallelIndexingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DynamicPartitionsSpec(5,null)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 236,
      "startColumnNumber" : 12,
      "endLineNumber" : 236,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 239,
        "endColumnNumber" : 9
      },
      "nodeContext" : "runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 6
      },
      "nodeContext" : "publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2193,
        "startLineNumber" : 224,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Set<DataSegment> publishedSegments=new HashSet<>();\n  publishedSegments.addAll(runTestTask(new HashedPartitionsSpec(null,numShards,ImmutableList.of(\"dim1\",\"dim2\")),TaskState.SUCCESS,false));\n  publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true));\n  publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(10,null),TaskState.SUCCESS,true));\n  final Map<Interval,List<DataSegment>> intervalToSegments=new HashMap<>();\n  publishedSegments.forEach(segment -> intervalToSegments.computeIfAbsent(segment.getInterval(),k -> new ArrayList<>()).add(segment));\n  for (  Entry<Interval,List<DataSegment>> entry : intervalToSegments.entrySet()) {\n    final List<DataSegment> segments=entry.getValue();\n    final List<DataSegment> hashedSegments=segments.stream().filter(segment -> segment.getShardSpec().getClass() == HashBasedNumberedShardSpec.class).collect(Collectors.toList());\n    final List<DataSegment> linearSegments=segments.stream().filter(segment -> segment.getShardSpec().getClass() == NumberedShardSpec.class).collect(Collectors.toList());\n    for (    DataSegment hashedSegment : hashedSegments) {\n      final HashBasedNumberedShardSpec hashShardSpec=(HashBasedNumberedShardSpec)hashedSegment.getShardSpec();\n      for (      DataSegment linearSegment : linearSegments) {\n        Assert.assertEquals(hashedSegment.getInterval(),linearSegment.getInterval());\n        Assert.assertEquals(hashedSegment.getVersion(),linearSegment.getVersion());\n        final NumberedShardSpec numberedShardSpec=(NumberedShardSpec)linearSegment.getShardSpec();\n        Assert.assertEquals(hashShardSpec.getNumCorePartitions(),numberedShardSpec.getNumCorePartitions());\n        Assert.assertTrue(hashShardSpec.getPartitionNum() < numberedShardSpec.getPartitionNum());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2299,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAppendLinearlyPartitionedSegmensToHashPartitionedDatasourceSuccessfullyAppend(){\n  final Set<DataSegment> publishedSegments=new HashSet<>();\n  publishedSegments.addAll(runTestTask(new HashedPartitionsSpec(null,numShards,ImmutableList.of(\"dim1\",\"dim2\")),TaskState.SUCCESS,false));\n  publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true));\n  publishedSegments.addAll(runTestTask(new DynamicPartitionsSpec(10,null),TaskState.SUCCESS,true));\n  final Map<Interval,List<DataSegment>> intervalToSegments=new HashMap<>();\n  publishedSegments.forEach(segment -> intervalToSegments.computeIfAbsent(segment.getInterval(),k -> new ArrayList<>()).add(segment));\n  for (  Entry<Interval,List<DataSegment>> entry : intervalToSegments.entrySet()) {\n    final List<DataSegment> segments=entry.getValue();\n    final List<DataSegment> hashedSegments=segments.stream().filter(segment -> segment.getShardSpec().getClass() == HashBasedNumberedShardSpec.class).collect(Collectors.toList());\n    final List<DataSegment> linearSegments=segments.stream().filter(segment -> segment.getShardSpec().getClass() == NumberedShardSpec.class).collect(Collectors.toList());\n    for (    DataSegment hashedSegment : hashedSegments) {\n      final HashBasedNumberedShardSpec hashShardSpec=(HashBasedNumberedShardSpec)hashedSegment.getShardSpec();\n      for (      DataSegment linearSegment : linearSegments) {\n        Assert.assertEquals(hashedSegment.getInterval(),linearSegment.getInterval());\n        Assert.assertEquals(hashedSegment.getVersion(),linearSegment.getVersion());\n        final NumberedShardSpec numberedShardSpec=(NumberedShardSpec)linearSegment.getShardSpec();\n        Assert.assertEquals(hashShardSpec.getNumCorePartitions(),numberedShardSpec.getNumCorePartitions());\n        Assert.assertTrue(hashShardSpec.getPartitionNum() < numberedShardSpec.getPartitionNum());\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 281,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 239,
        "endColumnNumber" : 9
      },
      "nodeContext" : "runTestTask(new DynamicPartitionsSpec(5,null),TaskState.SUCCESS,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.apache.druid.indexer.partitions.DynamicPartitionsSpec"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 236,
    "startColumnNumber" : 12,
    "endLineNumber" : 236,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}