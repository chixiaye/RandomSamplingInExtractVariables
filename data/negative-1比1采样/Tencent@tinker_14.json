{
  "id" : 14,
  "expression" : "\"store patch entry is null. path:\" + name",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ResDiffPatchInternal.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"store patch entry is null. path:\" + name",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 276,
      "startColumnNumber" : 42,
      "endLineNumber" : 276,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 276,
        "startColumnNumber" : 20,
        "endLineNumber" : 276,
        "endColumnNumber" : 84
      },
      "nodeContext" : "ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 276,
        "startColumnNumber" : 20,
        "endLineNumber" : 276,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 275,
        "startColumnNumber" : 40,
        "endLineNumber" : 279,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n  manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 275,
        "startColumnNumber" : 16,
        "endLineNumber" : 279,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (patchEntry == null) {\n  ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n  manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1385,
        "startLineNumber" : 269,
        "startColumnNumber" : 63,
        "endLineNumber" : 290,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  long storeStart=System.currentTimeMillis();\n  File destCopy=new File(tempFileDirtory,name);\n  SharePatchFileUtil.ensureFileDirectory(destCopy);\n  ZipEntry patchEntry=patchZipFile.getEntry(name);\n  if (patchEntry == null) {\n    ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n    return false;\n  }\n  extract(patchZipFile,patchEntry,destCopy,null,false);\n  if (patchEntry.getSize() != destCopy.length()) {\n    ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n    return false;\n  }\n  resPatchInfo.storeRes.put(name,destCopy);\n  ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 269,
        "startColumnNumber" : 12,
        "endLineNumber" : 290,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String name : resPatchInfo.storeRes.keySet()) {\n  long storeStart=System.currentTimeMillis();\n  File destCopy=new File(tempFileDirtory,name);\n  SharePatchFileUtil.ensureFileDirectory(destCopy);\n  ZipEntry patchEntry=patchZipFile.getEntry(name);\n  if (patchEntry == null) {\n    ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n    return false;\n  }\n  extract(patchZipFile,patchEntry,destCopy,null,false);\n  if (patchEntry.getSize() != destCopy.length()) {\n    ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n    return false;\n  }\n  resPatchInfo.storeRes.put(name,destCopy);\n  ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 140,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6194,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 343,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  apkFile=new ZipFile(apkPath);\n  ZipEntry arscEntry=apkFile.getEntry(ShareConstants.RES_ARSC);\n  File arscFile=new File(directory,ShareConstants.RES_ARSC);\n  if (arscEntry == null) {\n    ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + ShareConstants.RES_ARSC);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n    return false;\n  }\n  String baseArscCrc=String.valueOf(arscEntry.getCrc());\n  if (!baseArscCrc.equals(resPatchInfo.arscBaseCrc)) {\n    ShareTinkerLog.e(TAG,\"resources.arsc's crc is not equal, expect crc: %s, got crc: %s\",resPatchInfo.arscBaseCrc,baseArscCrc);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n    return false;\n  }\n  if (resPatchInfo.largeModRes.isEmpty() && resPatchInfo.storeRes.isEmpty()) {\n    ShareTinkerLog.i(TAG,\"no large modify or store resources, just return\");\n    return true;\n  }\n  patchZipFile=new ZipFile(patchFile);\n  for (  String name : resPatchInfo.storeRes.keySet()) {\n    long storeStart=System.currentTimeMillis();\n    File destCopy=new File(tempFileDirtory,name);\n    SharePatchFileUtil.ensureFileDirectory(destCopy);\n    ZipEntry patchEntry=patchZipFile.getEntry(name);\n    if (patchEntry == null) {\n      ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n      return false;\n    }\n    extract(patchZipFile,patchEntry,destCopy,null,false);\n    if (patchEntry.getSize() != destCopy.length()) {\n      ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    resPatchInfo.storeRes.put(name,destCopy);\n    ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n  }\n  for (  String name : resPatchInfo.largeModRes) {\n    long largeStart=System.currentTimeMillis();\n    ShareResPatchInfo.LargeModeInfo largeModeInfo=resPatchInfo.largeModMap.get(name);\n    if (largeModeInfo == null) {\n      ShareTinkerLog.w(TAG,\"resource not found largeModeInfo, type:%s, name: %s\",ShareTinkerInternals.getTypeString(type),name);\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    largeModeInfo.file=new File(tempFileDirtory,name);\n    SharePatchFileUtil.ensureFileDirectory(largeModeInfo.file);\n    if (!SharePatchFileUtil.checkIfMd5Valid(largeModeInfo.md5)) {\n      ShareTinkerLog.w(TAG,\"resource meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),name,largeModeInfo.md5);\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    ZipEntry patchEntry=patchZipFile.getEntry(name);\n    if (patchEntry == null) {\n      ShareTinkerLog.w(TAG,\"large mod patch entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    ZipEntry baseEntry=apkFile.getEntry(name);\n    if (baseEntry == null) {\n      ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    InputStream oldStream=null;\n    InputStream newStream=null;\n    try {\n      oldStream=apkFile.getInputStream(baseEntry);\n      newStream=patchZipFile.getInputStream(patchEntry);\n      BSPatch.patchFast(oldStream,newStream,largeModeInfo.file);\n    }\n  finally {\n      IOHelper.closeQuietly(oldStream);\n      IOHelper.closeQuietly(newStream);\n    }\n    if (!SharePatchFileUtil.verifyFileMd5(largeModeInfo.file,largeModeInfo.md5)) {\n      ShareTinkerLog.w(TAG,\"Failed to recover large modify file:%s\",largeModeInfo.file.getPath());\n      SharePatchFileUtil.safeDeleteFile(largeModeInfo.file);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    ShareTinkerLog.w(TAG,\"success recover large modify file:%s, file size:%d, use time:%d\",largeModeInfo.file.getPath(),largeModeInfo.file.length(),(System.currentTimeMillis() - largeStart));\n  }\n  ShareTinkerLog.w(TAG,\"success recover all large modify and store resources use time:%d\",(System.currentTimeMillis() - start));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 581,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6504,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  apkFile=new ZipFile(apkPath);\n  ZipEntry arscEntry=apkFile.getEntry(ShareConstants.RES_ARSC);\n  File arscFile=new File(directory,ShareConstants.RES_ARSC);\n  if (arscEntry == null) {\n    ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + ShareConstants.RES_ARSC);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n    return false;\n  }\n  String baseArscCrc=String.valueOf(arscEntry.getCrc());\n  if (!baseArscCrc.equals(resPatchInfo.arscBaseCrc)) {\n    ShareTinkerLog.e(TAG,\"resources.arsc's crc is not equal, expect crc: %s, got crc: %s\",resPatchInfo.arscBaseCrc,baseArscCrc);\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n    return false;\n  }\n  if (resPatchInfo.largeModRes.isEmpty() && resPatchInfo.storeRes.isEmpty()) {\n    ShareTinkerLog.i(TAG,\"no large modify or store resources, just return\");\n    return true;\n  }\n  patchZipFile=new ZipFile(patchFile);\n  for (  String name : resPatchInfo.storeRes.keySet()) {\n    long storeStart=System.currentTimeMillis();\n    File destCopy=new File(tempFileDirtory,name);\n    SharePatchFileUtil.ensureFileDirectory(destCopy);\n    ZipEntry patchEntry=patchZipFile.getEntry(name);\n    if (patchEntry == null) {\n      ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n      return false;\n    }\n    extract(patchZipFile,patchEntry,destCopy,null,false);\n    if (patchEntry.getSize() != destCopy.length()) {\n      ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    resPatchInfo.storeRes.put(name,destCopy);\n    ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n  }\n  for (  String name : resPatchInfo.largeModRes) {\n    long largeStart=System.currentTimeMillis();\n    ShareResPatchInfo.LargeModeInfo largeModeInfo=resPatchInfo.largeModMap.get(name);\n    if (largeModeInfo == null) {\n      ShareTinkerLog.w(TAG,\"resource not found largeModeInfo, type:%s, name: %s\",ShareTinkerInternals.getTypeString(type),name);\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    largeModeInfo.file=new File(tempFileDirtory,name);\n    SharePatchFileUtil.ensureFileDirectory(largeModeInfo.file);\n    if (!SharePatchFileUtil.checkIfMd5Valid(largeModeInfo.md5)) {\n      ShareTinkerLog.w(TAG,\"resource meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),name,largeModeInfo.md5);\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    ZipEntry patchEntry=patchZipFile.getEntry(name);\n    if (patchEntry == null) {\n      ShareTinkerLog.w(TAG,\"large mod patch entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    ZipEntry baseEntry=apkFile.getEntry(name);\n    if (baseEntry == null) {\n      ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + name);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    InputStream oldStream=null;\n    InputStream newStream=null;\n    try {\n      oldStream=apkFile.getInputStream(baseEntry);\n      newStream=patchZipFile.getInputStream(patchEntry);\n      BSPatch.patchFast(oldStream,newStream,largeModeInfo.file);\n    }\n  finally {\n      IOHelper.closeQuietly(oldStream);\n      IOHelper.closeQuietly(newStream);\n    }\n    if (!SharePatchFileUtil.verifyFileMd5(largeModeInfo.file,largeModeInfo.md5)) {\n      ShareTinkerLog.w(TAG,\"Failed to recover large modify file:%s\",largeModeInfo.file.getPath());\n      SharePatchFileUtil.safeDeleteFile(largeModeInfo.file);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n      return false;\n    }\n    ShareTinkerLog.w(TAG,\"success recover large modify file:%s, file size:%d, use time:%d\",largeModeInfo.file.getPath(),largeModeInfo.file.length(),(System.currentTimeMillis() - largeStart));\n  }\n  ShareTinkerLog.w(TAG,\"success recover all large modify and store resources use time:%d\",(System.currentTimeMillis() - start));\n}\n catch (Throwable e) {\n  throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n}\n finally {\n  SharePatchFileUtil.closeZip(apkFile);\n  SharePatchFileUtil.closeZip(patchZipFile);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 615,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6706,
        "startLineNumber" : 239,
        "startColumnNumber" : 118,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long start=System.currentTimeMillis();\n  Tinker manager=Tinker.with(context);\n  ZipFile apkFile=null;\n  ZipFile patchZipFile=null;\n  try {\n    apkFile=new ZipFile(apkPath);\n    ZipEntry arscEntry=apkFile.getEntry(ShareConstants.RES_ARSC);\n    File arscFile=new File(directory,ShareConstants.RES_ARSC);\n    if (arscEntry == null) {\n      ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + ShareConstants.RES_ARSC);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n      return false;\n    }\n    String baseArscCrc=String.valueOf(arscEntry.getCrc());\n    if (!baseArscCrc.equals(resPatchInfo.arscBaseCrc)) {\n      ShareTinkerLog.e(TAG,\"resources.arsc's crc is not equal, expect crc: %s, got crc: %s\",resPatchInfo.arscBaseCrc,baseArscCrc);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n      return false;\n    }\n    if (resPatchInfo.largeModRes.isEmpty() && resPatchInfo.storeRes.isEmpty()) {\n      ShareTinkerLog.i(TAG,\"no large modify or store resources, just return\");\n      return true;\n    }\n    patchZipFile=new ZipFile(patchFile);\n    for (    String name : resPatchInfo.storeRes.keySet()) {\n      long storeStart=System.currentTimeMillis();\n      File destCopy=new File(tempFileDirtory,name);\n      SharePatchFileUtil.ensureFileDirectory(destCopy);\n      ZipEntry patchEntry=patchZipFile.getEntry(name);\n      if (patchEntry == null) {\n        ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n        return false;\n      }\n      extract(patchZipFile,patchEntry,destCopy,null,false);\n      if (patchEntry.getSize() != destCopy.length()) {\n        ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      resPatchInfo.storeRes.put(name,destCopy);\n      ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n    }\n    for (    String name : resPatchInfo.largeModRes) {\n      long largeStart=System.currentTimeMillis();\n      ShareResPatchInfo.LargeModeInfo largeModeInfo=resPatchInfo.largeModMap.get(name);\n      if (largeModeInfo == null) {\n        ShareTinkerLog.w(TAG,\"resource not found largeModeInfo, type:%s, name: %s\",ShareTinkerInternals.getTypeString(type),name);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      largeModeInfo.file=new File(tempFileDirtory,name);\n      SharePatchFileUtil.ensureFileDirectory(largeModeInfo.file);\n      if (!SharePatchFileUtil.checkIfMd5Valid(largeModeInfo.md5)) {\n        ShareTinkerLog.w(TAG,\"resource meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),name,largeModeInfo.md5);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      ZipEntry patchEntry=patchZipFile.getEntry(name);\n      if (patchEntry == null) {\n        ShareTinkerLog.w(TAG,\"large mod patch entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      ZipEntry baseEntry=apkFile.getEntry(name);\n      if (baseEntry == null) {\n        ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      InputStream oldStream=null;\n      InputStream newStream=null;\n      try {\n        oldStream=apkFile.getInputStream(baseEntry);\n        newStream=patchZipFile.getInputStream(patchEntry);\n        BSPatch.patchFast(oldStream,newStream,largeModeInfo.file);\n      }\n  finally {\n        IOHelper.closeQuietly(oldStream);\n        IOHelper.closeQuietly(newStream);\n      }\n      if (!SharePatchFileUtil.verifyFileMd5(largeModeInfo.file,largeModeInfo.md5)) {\n        ShareTinkerLog.w(TAG,\"Failed to recover large modify file:%s\",largeModeInfo.file.getPath());\n        SharePatchFileUtil.safeDeleteFile(largeModeInfo.file);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      ShareTinkerLog.w(TAG,\"success recover large modify file:%s, file size:%d, use time:%d\",largeModeInfo.file.getPath(),largeModeInfo.file.length(),(System.currentTimeMillis() - largeStart));\n    }\n    ShareTinkerLog.w(TAG,\"success recover all large modify and store resources use time:%d\",(System.currentTimeMillis() - start));\n  }\n catch (  Throwable e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(apkFile);\n    SharePatchFileUtil.closeZip(patchZipFile);\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 646,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6951,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static boolean checkAndExtractResourceLargeFile(Context context,String apkPath,File directory,File tempFileDirtory,File patchFile,ShareResPatchInfo resPatchInfo,int type){\n  long start=System.currentTimeMillis();\n  Tinker manager=Tinker.with(context);\n  ZipFile apkFile=null;\n  ZipFile patchZipFile=null;\n  try {\n    apkFile=new ZipFile(apkPath);\n    ZipEntry arscEntry=apkFile.getEntry(ShareConstants.RES_ARSC);\n    File arscFile=new File(directory,ShareConstants.RES_ARSC);\n    if (arscEntry == null) {\n      ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + ShareConstants.RES_ARSC);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n      return false;\n    }\n    String baseArscCrc=String.valueOf(arscEntry.getCrc());\n    if (!baseArscCrc.equals(resPatchInfo.arscBaseCrc)) {\n      ShareTinkerLog.e(TAG,\"resources.arsc's crc is not equal, expect crc: %s, got crc: %s\",resPatchInfo.arscBaseCrc,baseArscCrc);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,arscFile,ShareConstants.RES_ARSC,type);\n      return false;\n    }\n    if (resPatchInfo.largeModRes.isEmpty() && resPatchInfo.storeRes.isEmpty()) {\n      ShareTinkerLog.i(TAG,\"no large modify or store resources, just return\");\n      return true;\n    }\n    patchZipFile=new ZipFile(patchFile);\n    for (    String name : resPatchInfo.storeRes.keySet()) {\n      long storeStart=System.currentTimeMillis();\n      File destCopy=new File(tempFileDirtory,name);\n      SharePatchFileUtil.ensureFileDirectory(destCopy);\n      ZipEntry patchEntry=patchZipFile.getEntry(name);\n      if (patchEntry == null) {\n        ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destCopy,name,type);\n        return false;\n      }\n      extract(patchZipFile,patchEntry,destCopy,null,false);\n      if (patchEntry.getSize() != destCopy.length()) {\n        ShareTinkerLog.w(TAG,\"resource meta file size mismatch, type:%s, name: %s, patch size: %d, file size; %d\",ShareTinkerInternals.getTypeString(type),name,patchEntry.getSize(),destCopy.length());\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      resPatchInfo.storeRes.put(name,destCopy);\n      ShareTinkerLog.w(TAG,\"success recover store file:%s, file size:%d, use time:%d\",destCopy.getPath(),destCopy.length(),(System.currentTimeMillis() - storeStart));\n    }\n    for (    String name : resPatchInfo.largeModRes) {\n      long largeStart=System.currentTimeMillis();\n      ShareResPatchInfo.LargeModeInfo largeModeInfo=resPatchInfo.largeModMap.get(name);\n      if (largeModeInfo == null) {\n        ShareTinkerLog.w(TAG,\"resource not found largeModeInfo, type:%s, name: %s\",ShareTinkerInternals.getTypeString(type),name);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      largeModeInfo.file=new File(tempFileDirtory,name);\n      SharePatchFileUtil.ensureFileDirectory(largeModeInfo.file);\n      if (!SharePatchFileUtil.checkIfMd5Valid(largeModeInfo.md5)) {\n        ShareTinkerLog.w(TAG,\"resource meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),name,largeModeInfo.md5);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      ZipEntry patchEntry=patchZipFile.getEntry(name);\n      if (patchEntry == null) {\n        ShareTinkerLog.w(TAG,\"large mod patch entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      ZipEntry baseEntry=apkFile.getEntry(name);\n      if (baseEntry == null) {\n        ShareTinkerLog.w(TAG,\"resources apk entry is null. path:\" + name);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      InputStream oldStream=null;\n      InputStream newStream=null;\n      try {\n        oldStream=apkFile.getInputStream(baseEntry);\n        newStream=patchZipFile.getInputStream(patchEntry);\n        BSPatch.patchFast(oldStream,newStream,largeModeInfo.file);\n      }\n  finally {\n        IOHelper.closeQuietly(oldStream);\n        IOHelper.closeQuietly(newStream);\n      }\n      if (!SharePatchFileUtil.verifyFileMd5(largeModeInfo.file,largeModeInfo.md5)) {\n        ShareTinkerLog.w(TAG,\"Failed to recover large modify file:%s\",largeModeInfo.file.getPath());\n        SharePatchFileUtil.safeDeleteFile(largeModeInfo.file);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,largeModeInfo.file,name,type);\n        return false;\n      }\n      ShareTinkerLog.w(TAG,\"success recover large modify file:%s, file size:%d, use time:%d\",largeModeInfo.file.getPath(),largeModeInfo.file.length(),(System.currentTimeMillis() - largeStart));\n    }\n    ShareTinkerLog.w(TAG,\"success recover all large modify and store resources use time:%d\",(System.currentTimeMillis() - start));\n  }\n catch (  Throwable e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(apkFile);\n    SharePatchFileUtil.closeZip(patchZipFile);\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 678,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 276,
        "startColumnNumber" : 20,
        "endLineNumber" : 276,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerLog.w(TAG,\"store patch entry is null. path:\" + name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 276,
    "startColumnNumber" : 42,
    "endLineNumber" : 276,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}