{
  "id" : 2,
  "expression" : "HttpHeaderValues",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/http/HttpClient.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HttpHeaderValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 75,
      "startColumnNumber" : 62,
      "endLineNumber" : 75,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 75,
        "startColumnNumber" : 62,
        "endLineNumber" : 75,
        "endColumnNumber" : 84
      },
      "nodeContext" : "HttpHeaderValues.CLOSE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 85
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 86
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 934,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n  Channel ch=b.connect(host,port).sync().channel();\n  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n  request.headers().set(HttpHeaderNames.HOST,host);\n  request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n  request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n  ch.writeAndFlush(request);\n  return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n  Channel ch=b.connect(host,port).sync().channel();\n  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n  request.headers().set(HttpHeaderNames.HOST,host);\n  request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n  request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n  ch.writeAndFlush(request);\n  return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n}\n  finally {\n  group.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 117,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1651,
        "startLineNumber" : 49,
        "startColumnNumber" : 76,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URI uri=new URI(url);\n  String scheme=uri.getScheme() == null ? \"http\" : uri.getScheme();\n  String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  int port=uri.getPort();\n  final boolean ssl=\"https\".equalsIgnoreCase(scheme);\n  final HttpDynamicSslContext sslCtx=ssl ? HttpDynamicSslContext.forClient(caFilePath) : null;\n  EventLoopGroup group=new NioEventLoopGroup();\n  BlockingQueue<String> channel=new SynchronousQueue<>();\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n    Channel ch=b.connect(host,port).sync().channel();\n    HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n    request.headers().set(HttpHeaderNames.HOST,host);\n    request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n    request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n    ch.writeAndFlush(request);\n    return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1723,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public String request() throws URISyntaxException, InterruptedException {\n  URI uri=new URI(url);\n  String scheme=uri.getScheme() == null ? \"http\" : uri.getScheme();\n  String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  int port=uri.getPort();\n  final boolean ssl=\"https\".equalsIgnoreCase(scheme);\n  final HttpDynamicSslContext sslCtx=ssl ? HttpDynamicSslContext.forClient(caFilePath) : null;\n  EventLoopGroup group=new NioEventLoopGroup();\n  BlockingQueue<String> channel=new SynchronousQueue<>();\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n    Channel ch=b.connect(host,port).sync().channel();\n    HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n    request.headers().set(HttpHeaderNames.HOST,host);\n    request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n    request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n    ch.writeAndFlush(request);\n    return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 86
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "HttpHeaderValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 76,
      "startColumnNumber" : 67,
      "endLineNumber" : 76,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 67,
        "endLineNumber" : 76,
        "endColumnNumber" : 94
      },
      "nodeContext" : "HttpHeaderValues.TEXT_PLAIN",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 95
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 96
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 934,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n  Channel ch=b.connect(host,port).sync().channel();\n  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n  request.headers().set(HttpHeaderNames.HOST,host);\n  request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n  request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n  ch.writeAndFlush(request);\n  return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n  Channel ch=b.connect(host,port).sync().channel();\n  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n  request.headers().set(HttpHeaderNames.HOST,host);\n  request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n  request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n  ch.writeAndFlush(request);\n  return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n}\n  finally {\n  group.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 117,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1651,
        "startLineNumber" : 49,
        "startColumnNumber" : 76,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URI uri=new URI(url);\n  String scheme=uri.getScheme() == null ? \"http\" : uri.getScheme();\n  String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  int port=uri.getPort();\n  final boolean ssl=\"https\".equalsIgnoreCase(scheme);\n  final HttpDynamicSslContext sslCtx=ssl ? HttpDynamicSslContext.forClient(caFilePath) : null;\n  EventLoopGroup group=new NioEventLoopGroup();\n  BlockingQueue<String> channel=new SynchronousQueue<>();\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n    Channel ch=b.connect(host,port).sync().channel();\n    HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n    request.headers().set(HttpHeaderNames.HOST,host);\n    request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n    request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n    ch.writeAndFlush(request);\n    return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1723,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public String request() throws URISyntaxException, InterruptedException {\n  URI uri=new URI(url);\n  String scheme=uri.getScheme() == null ? \"http\" : uri.getScheme();\n  String host=uri.getHost() == null ? \"127.0.0.1\" : uri.getHost();\n  int port=uri.getPort();\n  final boolean ssl=\"https\".equalsIgnoreCase(scheme);\n  final HttpDynamicSslContext sslCtx=ssl ? HttpDynamicSslContext.forClient(caFilePath) : null;\n  EventLoopGroup group=new NioEventLoopGroup();\n  BlockingQueue<String> channel=new SynchronousQueue<>();\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSocketChannel.class).handler(new HttpClientInitializer(sslCtx,channel));\n    Channel ch=b.connect(host,port).sync().channel();\n    HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uri.getRawPath(),Unpooled.EMPTY_BUFFER);\n    request.headers().set(HttpHeaderNames.HOST,host);\n    request.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.CLOSE);\n    request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n    ch.writeAndFlush(request);\n    return Objects.requireNonNull(channel.poll(10,TimeUnit.SECONDS),\"Request timeout\");\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 96
      },
      "nodeContext" : "request.headers().set(HttpHeaderNames.ACCEPT_ENCODING,HttpHeaderValues.TEXT_PLAIN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 75,
    "startColumnNumber" : 62,
    "endLineNumber" : 75,
    "endColumnNumber" : 78
  }, {
    "charLength" : 16,
    "startLineNumber" : 76,
    "startColumnNumber" : 67,
    "endLineNumber" : 76,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}