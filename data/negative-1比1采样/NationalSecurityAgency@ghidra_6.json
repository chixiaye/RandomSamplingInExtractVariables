{
  "id" : 6,
  "expression" : "parent",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Debug/Debugger/src/main/java/ghidra/app/plugin/core/debug/gui/model/ModelQuery.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 159,
      "startColumnNumber" : 6,
      "endLineNumber" : 159,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 20
      },
      "nodeContext" : "parent == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (parent == null) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 147,
        "startColumnNumber" : 67,
        "endLineNumber" : 164,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<String> path=predicates.getSingletonPattern().asPath();\n  if (path.isEmpty()) {\n    return value.getParent() == null;\n  }\n  if (!PathPredicates.keyMatches(PathUtils.getKey(path),value.getEntryKey())) {\n    return false;\n  }\n  if (!DBTraceUtils.intersect(span,value.getLifespan())) {\n    return false;\n  }\n  TraceObject parent=value.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1070,
        "startLineNumber" : 135,
        "startColumnNumber" : 1,
        "endLineNumber" : 164,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine whether this query would include the given value in its result <p> More precisely, determine whether it would traverse the given value, accept it, and include its child in the result. It's possible the child could be included via another value, but this only considers the given value.\n * @param span the span to consider\n * @param value the value to examine\n * @return true if the value would be accepted\n */\npublic boolean includes(Range<Long> span,TraceObjectValue value){\n  List<String> path=predicates.getSingletonPattern().asPath();\n  if (path.isEmpty()) {\n    return value.getParent() == null;\n  }\n  if (!PathPredicates.keyMatches(PathUtils.getKey(path),value.getEntryKey())) {\n    return false;\n  }\n  if (!DBTraceUtils.intersect(span,value.getLifespan())) {\n    return false;\n  }\n  TraceObject parent=value.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 20
      },
      "nodeContext" : "parent == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "ghidra.trace.model.target.TraceObject"
  }, {
    "nodeContext" : "parent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 162,
      "startColumnNumber" : 9,
      "endLineNumber" : 162,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 162,
        "startColumnNumber" : 9,
        "endLineNumber" : 162,
        "endColumnNumber" : 61
      },
      "nodeContext" : "parent.getAncestors(span,predicates.removeRight(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 162,
        "startColumnNumber" : 9,
        "endLineNumber" : 163,
        "endColumnNumber" : 48
      },
      "nodeContext" : "parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 162,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 49
      },
      "nodeContext" : "return parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 147,
        "startColumnNumber" : 67,
        "endLineNumber" : 164,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<String> path=predicates.getSingletonPattern().asPath();\n  if (path.isEmpty()) {\n    return value.getParent() == null;\n  }\n  if (!PathPredicates.keyMatches(PathUtils.getKey(path),value.getEntryKey())) {\n    return false;\n  }\n  if (!DBTraceUtils.intersect(span,value.getLifespan())) {\n    return false;\n  }\n  TraceObject parent=value.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1070,
        "startLineNumber" : 135,
        "startColumnNumber" : 1,
        "endLineNumber" : 164,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine whether this query would include the given value in its result <p> More precisely, determine whether it would traverse the given value, accept it, and include its child in the result. It's possible the child could be included via another value, but this only considers the given value.\n * @param span the span to consider\n * @param value the value to examine\n * @return true if the value would be accepted\n */\npublic boolean includes(Range<Long> span,TraceObjectValue value){\n  List<String> path=predicates.getSingletonPattern().asPath();\n  if (path.isEmpty()) {\n    return value.getParent() == null;\n  }\n  if (!PathPredicates.keyMatches(PathUtils.getKey(path),value.getEntryKey())) {\n    return false;\n  }\n  if (!DBTraceUtils.intersect(span,value.getLifespan())) {\n    return false;\n  }\n  TraceObject parent=value.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent.getAncestors(span,predicates.removeRight(1)).anyMatch(v -> v.getSource(parent).isRoot());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 162,
        "startColumnNumber" : 9,
        "endLineNumber" : 162,
        "endColumnNumber" : 61
      },
      "nodeContext" : "parent.getAncestors(span,predicates.removeRight(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "ghidra.trace.model.target.TraceObject"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 159,
    "startColumnNumber" : 6,
    "endLineNumber" : 159,
    "endColumnNumber" : 12
  }, {
    "charLength" : 6,
    "startLineNumber" : 162,
    "startColumnNumber" : 9,
    "endLineNumber" : 162,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}