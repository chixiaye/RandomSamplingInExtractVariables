{
  "id" : 13,
  "expression" : "ServerResolvers",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-client/src/main/java/com/netflix/eureka2/client/Eureka.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServerResolvers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 80,
      "startColumnNumber" : 38,
      "endLineNumber" : 80,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 80,
        "startColumnNumber" : 38,
        "endLineNumber" : 80,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 80,
        "startColumnNumber" : 23,
        "endLineNumber" : 80,
        "endColumnNumber" : 117
      },
      "nodeContext" : "readResolver=ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ServerResolver readResolver=ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 79,
        "startColumnNumber" : 118,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServerResolver readResolver=ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip);\n  return newClientBuilder(readResolver,writeResolverSet.forRegistration());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 720,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a new  {@link EurekaClientBuilder} using the passed resolver instance for write, and constructthe read resolver from reading write server data.\n * @param writeResolverSet {@link WriteServerResolverSet} for the write servers.\n * @param readServerVip the vip address for the read cluster\n * @return A new {@link EurekaClientBuilder}.\n */\npublic static EurekaClientBuilder newClientBuilder(WriteServerResolverSet writeResolverSet,String readServerVip){\n  ServerResolver readResolver=ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip);\n  return newClientBuilder(readResolver,writeResolverSet.forRegistration());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ServerResolver readResolver=ServerResolvers.fromWriteServer(writeResolverSet.forDiscovery(),readServerVip);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolvers"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 80,
    "startColumnNumber" : 38,
    "endLineNumber" : 80,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}