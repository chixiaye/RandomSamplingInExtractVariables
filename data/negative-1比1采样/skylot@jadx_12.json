{
  "id" : 12,
  "expression" : "condition",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "condition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 172,
      "startColumnNumber" : 6,
      "endLineNumber" : 172,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 172,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 23
      },
      "nodeContext" : "condition == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 172,
        "startColumnNumber" : 2,
        "endLineNumber" : 178,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (condition == null) {\n  code.startLine(\"while (true) {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n  return code;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2252,
        "startLineNumber" : 153,
        "startColumnNumber" : 89,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2340,
        "startLineNumber" : 153,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private CodeWriter makeLoop(LoopRegion region,CodeWriter code) throws CodegenException {\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 172,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 23
      },
      "nodeContext" : "condition == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.regions.conditions.IfCondition"
  }, {
    "nodeContext" : "condition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 187,
      "startColumnNumber" : 27,
      "endLineNumber" : 187,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 37
      },
      "nodeContext" : "conditionGen.add(code,condition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 38
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 182,
        "startColumnNumber" : 32,
        "endLineNumber" : 194,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ForLoop forLoop=(ForLoop)type;\n  code.startLine(\"for (\");\n  makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n  code.add(\"; \");\n  conditionGen.add(code,condition);\n  code.add(\"; \");\n  makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n  code.add(\") {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n  return code;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 404,
        "startLineNumber" : 182,
        "startColumnNumber" : 3,
        "endLineNumber" : 194,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (type instanceof ForLoop) {\n  ForLoop forLoop=(ForLoop)type;\n  code.startLine(\"for (\");\n  makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n  code.add(\"; \");\n  conditionGen.add(code,condition);\n  code.add(\"; \");\n  makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n  code.add(\") {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n  return code;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 181,
        "startColumnNumber" : 20,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type instanceof ForLoop) {\n    ForLoop forLoop=(ForLoop)type;\n    code.startLine(\"for (\");\n    makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n    code.add(\"; \");\n    conditionGen.add(code,condition);\n    code.add(\"; \");\n    makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  if (type instanceof ForEachLoop) {\n    ForEachLoop forEachLoop=(ForEachLoop)type;\n    code.startLine(\"for (\");\n    declareVar(code,forEachLoop.getVarArg());\n    code.add(\" : \");\n    addArg(code,forEachLoop.getIterableArg(),false);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 861,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (type != null) {\n  if (type instanceof ForLoop) {\n    ForLoop forLoop=(ForLoop)type;\n    code.startLine(\"for (\");\n    makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n    code.add(\"; \");\n    conditionGen.add(code,condition);\n    code.add(\"; \");\n    makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  if (type instanceof ForEachLoop) {\n    ForEachLoop forEachLoop=(ForEachLoop)type;\n    code.startLine(\"for (\");\n    declareVar(code,forEachLoop.getVarArg());\n    code.add(\" : \");\n    addArg(code,forEachLoop.getIterableArg(),false);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2252,
        "startLineNumber" : 153,
        "startColumnNumber" : 89,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2340,
        "startLineNumber" : 153,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private CodeWriter makeLoop(LoopRegion region,CodeWriter code) throws CodegenException {\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 187,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 38
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.regions.conditions.IfCondition"
  }, {
    "nodeContext" : "condition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 213,
      "startColumnNumber" : 26,
      "endLineNumber" : 213,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 213,
        "startColumnNumber" : 3,
        "endLineNumber" : 213,
        "endColumnNumber" : 36
      },
      "nodeContext" : "conditionGen.add(code,condition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 213,
        "startColumnNumber" : 3,
        "endLineNumber" : 213,
        "endColumnNumber" : 37
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 208,
        "startColumnNumber" : 33,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  code.startLine(\"do {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"} while (\");\n  conditionGen.add(code,condition);\n  code.add(\");\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (region.isConditionAtEnd()) {\n  code.startLine(\"do {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"} while (\");\n  conditionGen.add(code,condition);\n  code.add(\");\");\n}\n else {\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"while (\");\n  conditionGen.add(code,condition);\n  code.add(\") {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2252,
        "startLineNumber" : 153,
        "startColumnNumber" : 89,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2340,
        "startLineNumber" : 153,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private CodeWriter makeLoop(LoopRegion region,CodeWriter code) throws CodegenException {\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 213,
        "startColumnNumber" : 3,
        "endLineNumber" : 213,
        "endColumnNumber" : 37
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.regions.conditions.IfCondition"
  }, {
    "nodeContext" : "condition",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 218,
      "startColumnNumber" : 26,
      "endLineNumber" : 218,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 218,
        "startColumnNumber" : 3,
        "endLineNumber" : 218,
        "endColumnNumber" : 36
      },
      "nodeContext" : "conditionGen.add(code,condition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 218,
        "startColumnNumber" : 3,
        "endLineNumber" : 218,
        "endColumnNumber" : 37
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 215,
        "startColumnNumber" : 9,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"while (\");\n  conditionGen.add(code,condition);\n  code.add(\") {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (region.isConditionAtEnd()) {\n  code.startLine(\"do {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"} while (\");\n  conditionGen.add(code,condition);\n  code.add(\");\");\n}\n else {\n  code.startLineWithNum(region.getConditionSourceLine());\n  code.add(\"while (\");\n  conditionGen.add(code,condition);\n  code.add(\") {\");\n  makeRegionIndent(code,region.getBody());\n  code.startLine('}');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2252,
        "startLineNumber" : 153,
        "startColumnNumber" : 89,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2340,
        "startLineNumber" : 153,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private CodeWriter makeLoop(LoopRegion region,CodeWriter code) throws CodegenException {\n  BlockNode header=region.getHeader();\n  if (header != null) {\n    List<InsnNode> headerInsns=header.getInstructions();\n    if (headerInsns.size() > 1) {\n      ErrorsCounter.methodWarn(mth,\"Found not inlined instructions from loop header\");\n      int last=headerInsns.size() - 1;\n      for (int i=0; i < last; i++) {\n        InsnNode insn=headerInsns.get(i);\n        makeInsn(insn,code);\n      }\n    }\n  }\n  LoopLabelAttr labelAttr=region.getInfo().getStart().get(AType.LOOP_LABEL);\n  if (labelAttr != null) {\n    code.startLine(mgen.getNameGen().getLoopLabel(labelAttr)).add(':');\n  }\n  IfCondition condition=region.getCondition();\n  if (condition == null) {\n    code.startLine(\"while (true) {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n    return code;\n  }\n  ConditionGen conditionGen=new ConditionGen(this);\n  LoopType type=region.getType();\n  if (type != null) {\n    if (type instanceof ForLoop) {\n      ForLoop forLoop=(ForLoop)type;\n      code.startLine(\"for (\");\n      makeInsn(forLoop.getInitInsn(),code,Flags.INLINE);\n      code.add(\"; \");\n      conditionGen.add(code,condition);\n      code.add(\"; \");\n      makeInsn(forLoop.getIncrInsn(),code,Flags.INLINE);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    if (type instanceof ForEachLoop) {\n      ForEachLoop forEachLoop=(ForEachLoop)type;\n      code.startLine(\"for (\");\n      declareVar(code,forEachLoop.getVarArg());\n      code.add(\" : \");\n      addArg(code,forEachLoop.getIterableArg(),false);\n      code.add(\") {\");\n      makeRegionIndent(code,region.getBody());\n      code.startLine('}');\n      return code;\n    }\n    throw new JadxRuntimeException(\"Unknown loop type: \" + type.getClass());\n  }\n  if (region.isConditionAtEnd()) {\n    code.startLine(\"do {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"} while (\");\n    conditionGen.add(code,condition);\n    code.add(\");\");\n  }\n else {\n    code.startLineWithNum(region.getConditionSourceLine());\n    code.add(\"while (\");\n    conditionGen.add(code,condition);\n    code.add(\") {\");\n    makeRegionIndent(code,region.getBody());\n    code.startLine('}');\n  }\n  return code;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 218,
        "startColumnNumber" : 3,
        "endLineNumber" : 218,
        "endColumnNumber" : 37
      },
      "nodeContext" : "conditionGen.add(code,condition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.regions.conditions.IfCondition"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 172,
    "startColumnNumber" : 6,
    "endLineNumber" : 172,
    "endColumnNumber" : 15
  }, {
    "charLength" : 9,
    "startLineNumber" : 187,
    "startColumnNumber" : 27,
    "endLineNumber" : 187,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 213,
    "startColumnNumber" : 26,
    "endLineNumber" : 213,
    "endColumnNumber" : 35
  }, {
    "charLength" : 9,
    "startLineNumber" : 218,
    "startColumnNumber" : 26,
    "endLineNumber" : 218,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}