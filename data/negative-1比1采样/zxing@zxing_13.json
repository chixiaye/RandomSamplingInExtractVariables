{
  "id" : 13,
  "expression" : "height < 0",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/qrcode/QRCodeWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "height < 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 62,
      "startColumnNumber" : 21,
      "endLineNumber" : 62,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 31
      },
      "nodeContext" : "width < 0 || height < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (width < 0 || height < 0) {\n  throw new IllegalArgumentException(\"Requested dimensions are too small: \" + width + 'x'+ height);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 52,
        "startColumnNumber" : 78,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (contents.isEmpty()) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  if (format != BarcodeFormat.QR_CODE) {\n    throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format);\n  }\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Requested dimensions are too small: \" + width + 'x'+ height);\n  }\n  ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L;\n  int quietZone=QUIET_ZONE_SIZE;\n  if (hints != null) {\n    if (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) {\n      errorCorrectionLevel=ErrorCorrectionLevel.valueOf(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\n    }\n    if (hints.containsKey(EncodeHintType.MARGIN)) {\n      quietZone=Integer.parseInt(hints.get(EncodeHintType.MARGIN).toString());\n    }\n  }\n  QRCode code=Encoder.encode(contents,errorCorrectionLevel,hints);\n  return renderResult(code,width,height,quietZone);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1295,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BitMatrix encode(String contents,BarcodeFormat format,int width,int height,Map<EncodeHintType,?> hints) throws WriterException {\n  if (contents.isEmpty()) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  if (format != BarcodeFormat.QR_CODE) {\n    throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format);\n  }\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Requested dimensions are too small: \" + width + 'x'+ height);\n  }\n  ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L;\n  int quietZone=QUIET_ZONE_SIZE;\n  if (hints != null) {\n    if (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) {\n      errorCorrectionLevel=ErrorCorrectionLevel.valueOf(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\n    }\n    if (hints.containsKey(EncodeHintType.MARGIN)) {\n      quietZone=Integer.parseInt(hints.get(EncodeHintType.MARGIN).toString());\n    }\n  }\n  QRCode code=Encoder.encode(contents,errorCorrectionLevel,hints);\n  return renderResult(code,width,height,quietZone);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 31
      },
      "nodeContext" : "width < 0 || height < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 62,
    "startColumnNumber" : 21,
    "endLineNumber" : 62,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}