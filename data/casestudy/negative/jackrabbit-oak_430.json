{
  "id" : 430,
  "expression" : "pr",
  "projectName" : "jackrabbit-oak",
  "commitID" : "709a2719ed5108b9972cdd0ce55d2e53ad705884",
  "filePath" : "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
  "occurrences" : 123,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1094,
      "startColumnNumber" : 51,
      "endLineNumber" : 1094,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1094,
        "startColumnNumber" : 23,
        "endLineNumber" : 1094,
        "endColumnNumber" : 54
      },
      "nodeContext" : "determinePropertyType(defn,pr)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 1094,
        "startColumnNumber" : 12,
        "endLineNumber" : 1094,
        "endColumnNumber" : 54
      },
      "nodeContext" : "propType=determinePropertyType(defn,pr)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1094,
        "startColumnNumber" : 8,
        "endLineNumber" : 1094,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int propType=determinePropertyType(defn,pr);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1094,
        "startColumnNumber" : 8,
        "endLineNumber" : 1094,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int propType=determinePropertyType(defn,pr);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1096,
      "startColumnNumber" : 12,
      "endLineNumber" : 1096,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1096,
        "startColumnNumber" : 12,
        "endLineNumber" : 1096,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.isNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 1096,
        "startColumnNumber" : 8,
        "endLineNumber" : 1098,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pr.isNullRestriction()) {\n  return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1096,
        "startColumnNumber" : 12,
        "endLineNumber" : 1096,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.isNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1102,
      "startColumnNumber" : 12,
      "endLineNumber" : 1102,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1102,
        "startColumnNumber" : 12,
        "endLineNumber" : 1102,
        "endColumnNumber" : 37
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1102,
        "startColumnNumber" : 12,
        "endLineNumber" : 1102,
        "endColumnNumber" : 65
      },
      "nodeContext" : "pr.isNotNullRestriction() && defn.notNullCheckEnabled",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 1102,
        "startColumnNumber" : 8,
        "endLineNumber" : 1104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n  return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1102,
        "startColumnNumber" : 12,
        "endLineNumber" : 1102,
        "endColumnNumber" : 65
      },
      "nodeContext" : "pr.isNotNullRestriction() && defn.notNullCheckEnabled",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1108,
      "startColumnNumber" : 29,
      "endLineNumber" : 1108,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1108,
        "startColumnNumber" : 29,
        "endLineNumber" : 1108,
        "endColumnNumber" : 37
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1108,
        "startColumnNumber" : 29,
        "endLineNumber" : 1108,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 1108,
        "startColumnNumber" : 29,
        "endLineNumber" : 1108,
        "endColumnNumber" : 108
      },
      "nodeContext" : "pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1108,
        "startColumnNumber" : 21,
        "endLineNumber" : 1108,
        "endColumnNumber" : 108
      },
      "nodeContext" : "first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1108,
      "startColumnNumber" : 72,
      "endLineNumber" : 1108,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1108,
        "startColumnNumber" : 72,
        "endLineNumber" : 1108,
        "endColumnNumber" : 80
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 1108,
        "startColumnNumber" : 72,
        "endLineNumber" : 1108,
        "endColumnNumber" : 100
      },
      "nodeContext" : "pr.first.getValue(Type.DATE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 1108,
        "startColumnNumber" : 48,
        "endLineNumber" : 1108,
        "endColumnNumber" : 101
      },
      "nodeContext" : "FieldFactory.dateToLong(pr.first.getValue(Type.DATE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 1108,
        "startColumnNumber" : 29,
        "endLineNumber" : 1108,
        "endColumnNumber" : 108
      },
      "nodeContext" : "pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1108,
        "startColumnNumber" : 21,
        "endLineNumber" : 1108,
        "endColumnNumber" : 108
      },
      "nodeContext" : "first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1108,
        "startColumnNumber" : 16,
        "endLineNumber" : 1108,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1109,
      "startColumnNumber" : 28,
      "endLineNumber" : 1109,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1109,
        "startColumnNumber" : 28,
        "endLineNumber" : 1109,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1109,
        "startColumnNumber" : 28,
        "endLineNumber" : 1109,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1109,
        "startColumnNumber" : 28,
        "endLineNumber" : 1109,
        "endColumnNumber" : 105
      },
      "nodeContext" : "pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1109,
        "startColumnNumber" : 21,
        "endLineNumber" : 1109,
        "endColumnNumber" : 105
      },
      "nodeContext" : "last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1109,
        "startColumnNumber" : 16,
        "endLineNumber" : 1109,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1109,
        "startColumnNumber" : 16,
        "endLineNumber" : 1109,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1109,
      "startColumnNumber" : 70,
      "endLineNumber" : 1109,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1109,
        "startColumnNumber" : 70,
        "endLineNumber" : 1109,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 1109,
        "startColumnNumber" : 70,
        "endLineNumber" : 1109,
        "endColumnNumber" : 97
      },
      "nodeContext" : "pr.last.getValue(Type.DATE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 1109,
        "startColumnNumber" : 46,
        "endLineNumber" : 1109,
        "endColumnNumber" : 98
      },
      "nodeContext" : "FieldFactory.dateToLong(pr.last.getValue(Type.DATE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1109,
        "startColumnNumber" : 28,
        "endLineNumber" : 1109,
        "endColumnNumber" : 105
      },
      "nodeContext" : "pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1109,
        "startColumnNumber" : 21,
        "endLineNumber" : 1109,
        "endColumnNumber" : 105
      },
      "nodeContext" : "last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1109,
        "startColumnNumber" : 16,
        "endLineNumber" : 1109,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1109,
        "startColumnNumber" : 16,
        "endLineNumber" : 1109,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1110,
      "startColumnNumber" : 20,
      "endLineNumber" : 1110,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 36
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1110,
      "startColumnNumber" : 40,
      "endLineNumber" : 1110,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1110,
        "startColumnNumber" : 40,
        "endLineNumber" : 1110,
        "endColumnNumber" : 48
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1110,
        "startColumnNumber" : 40,
        "endLineNumber" : 1110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1110,
      "startColumnNumber" : 56,
      "endLineNumber" : 1110,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1110,
        "startColumnNumber" : 56,
        "endLineNumber" : 1110,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1110,
        "startColumnNumber" : 40,
        "endLineNumber" : 1110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1110,
      "startColumnNumber" : 68,
      "endLineNumber" : 1110,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1110,
        "startColumnNumber" : 68,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1110,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1111,
      "startColumnNumber" : 27,
      "endLineNumber" : 1111,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1111,
        "startColumnNumber" : 27,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1110,
        "startColumnNumber" : 20,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1111,
        "startColumnNumber" : 27,
        "endLineNumber" : 1111,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1113,
      "startColumnNumber" : 58,
      "endLineNumber" : 1113,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1113,
        "startColumnNumber" : 58,
        "endLineNumber" : 1113,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 1113,
        "startColumnNumber" : 27,
        "endLineNumber" : 1113,
        "endColumnNumber" : 100
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1113,
        "startColumnNumber" : 20,
        "endLineNumber" : 1113,
        "endColumnNumber" : 101
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 1111,
        "startColumnNumber" : 45,
        "endLineNumber" : 1114,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1113,
        "startColumnNumber" : 20,
        "endLineNumber" : 1113,
        "endColumnNumber" : 101
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1114,
      "startColumnNumber" : 27,
      "endLineNumber" : 1114,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1114,
      "startColumnNumber" : 47,
      "endLineNumber" : 1114,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1114,
        "startColumnNumber" : 47,
        "endLineNumber" : 1114,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1114,
        "startColumnNumber" : 47,
        "endLineNumber" : 1114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1114,
        "startColumnNumber" : 27,
        "endLineNumber" : 1114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1115,
      "startColumnNumber" : 58,
      "endLineNumber" : 1115,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1115,
        "startColumnNumber" : 58,
        "endLineNumber" : 1115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1115,
        "startColumnNumber" : 27,
        "endLineNumber" : 1116,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1115,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1114,
        "startColumnNumber" : 64,
        "endLineNumber" : 1117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1115,
        "startColumnNumber" : 58,
        "endLineNumber" : 1115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1116,
      "startColumnNumber" : 28,
      "endLineNumber" : 1116,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1116,
        "startColumnNumber" : 28,
        "endLineNumber" : 1116,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1115,
        "startColumnNumber" : 27,
        "endLineNumber" : 1116,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1115,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1114,
        "startColumnNumber" : 64,
        "endLineNumber" : 1117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1116,
        "startColumnNumber" : 28,
        "endLineNumber" : 1116,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1116,
      "startColumnNumber" : 47,
      "endLineNumber" : 1116,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1116,
        "startColumnNumber" : 47,
        "endLineNumber" : 1116,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1115,
        "startColumnNumber" : 27,
        "endLineNumber" : 1116,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1115,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1114,
        "startColumnNumber" : 64,
        "endLineNumber" : 1117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1116,
        "startColumnNumber" : 47,
        "endLineNumber" : 1116,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1117,
      "startColumnNumber" : 27,
      "endLineNumber" : 1117,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1117,
      "startColumnNumber" : 47,
      "endLineNumber" : 1117,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1117,
        "startColumnNumber" : 47,
        "endLineNumber" : 1117,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1117,
        "startColumnNumber" : 47,
        "endLineNumber" : 1117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1117,
        "startColumnNumber" : 27,
        "endLineNumber" : 1117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1119,
      "startColumnNumber" : 58,
      "endLineNumber" : 1119,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1119,
        "startColumnNumber" : 58,
        "endLineNumber" : 1119,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1119,
        "startColumnNumber" : 27,
        "endLineNumber" : 1119,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1119,
        "startColumnNumber" : 20,
        "endLineNumber" : 1119,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 1117,
        "startColumnNumber" : 64,
        "endLineNumber" : 1120,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1119,
        "startColumnNumber" : 20,
        "endLineNumber" : 1119,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1119,
      "startColumnNumber" : 88,
      "endLineNumber" : 1119,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1119,
        "startColumnNumber" : 88,
        "endLineNumber" : 1119,
        "endColumnNumber" : 105
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1119,
        "startColumnNumber" : 27,
        "endLineNumber" : 1119,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1119,
        "startColumnNumber" : 20,
        "endLineNumber" : 1119,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 1117,
        "startColumnNumber" : 64,
        "endLineNumber" : 1120,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1119,
        "startColumnNumber" : 20,
        "endLineNumber" : 1119,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1120,
      "startColumnNumber" : 27,
      "endLineNumber" : 1120,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1120,
      "startColumnNumber" : 47,
      "endLineNumber" : 1120,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1120,
        "startColumnNumber" : 47,
        "endLineNumber" : 1120,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1120,
        "startColumnNumber" : 47,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1120,
        "startColumnNumber" : 46,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1120,
      "startColumnNumber" : 62,
      "endLineNumber" : 1120,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1120,
        "startColumnNumber" : 62,
        "endLineNumber" : 1120,
        "endColumnNumber" : 70
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1120,
        "startColumnNumber" : 47,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1120,
        "startColumnNumber" : 46,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1120,
        "startColumnNumber" : 27,
        "endLineNumber" : 1120,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1122,
      "startColumnNumber" : 58,
      "endLineNumber" : 1122,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1122,
        "startColumnNumber" : 58,
        "endLineNumber" : 1122,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1122,
        "startColumnNumber" : 27,
        "endLineNumber" : 1122,
        "endColumnNumber" : 110
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1122,
        "startColumnNumber" : 20,
        "endLineNumber" : 1122,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1120,
        "startColumnNumber" : 73,
        "endLineNumber" : 1123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1122,
        "startColumnNumber" : 20,
        "endLineNumber" : 1122,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1122,
      "startColumnNumber" : 93,
      "endLineNumber" : 1122,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1122,
        "startColumnNumber" : 93,
        "endLineNumber" : 1122,
        "endColumnNumber" : 109
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1122,
        "startColumnNumber" : 27,
        "endLineNumber" : 1122,
        "endColumnNumber" : 110
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1122,
        "startColumnNumber" : 20,
        "endLineNumber" : 1122,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1120,
        "startColumnNumber" : 73,
        "endLineNumber" : 1123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1122,
        "startColumnNumber" : 20,
        "endLineNumber" : 1122,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1123,
      "startColumnNumber" : 27,
      "endLineNumber" : 1123,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1123,
        "startColumnNumber" : 27,
        "endLineNumber" : 1123,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1123,
        "startColumnNumber" : 27,
        "endLineNumber" : 1123,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 1123,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1123,
        "startColumnNumber" : 27,
        "endLineNumber" : 1123,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1125,
      "startColumnNumber" : 47,
      "endLineNumber" : 1125,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1125,
        "startColumnNumber" : 47,
        "endLineNumber" : 1125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 1125,
        "startColumnNumber" : 20,
        "endLineNumber" : 1128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 1123,
        "startColumnNumber" : 44,
        "endLineNumber" : 1130,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 1123,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1125,
        "startColumnNumber" : 47,
        "endLineNumber" : 1125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1127,
      "startColumnNumber" : 62,
      "endLineNumber" : 1127,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1127,
        "startColumnNumber" : 62,
        "endLineNumber" : 1127,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1127,
        "startColumnNumber" : 31,
        "endLineNumber" : 1127,
        "endColumnNumber" : 108
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 1127,
        "startColumnNumber" : 24,
        "endLineNumber" : 1127,
        "endColumnNumber" : 137
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 1127,
        "startColumnNumber" : 24,
        "endLineNumber" : 1127,
        "endColumnNumber" : 138
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 1125,
        "startColumnNumber" : 56,
        "endLineNumber" : 1128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 1125,
        "startColumnNumber" : 20,
        "endLineNumber" : 1128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 1123,
        "startColumnNumber" : 44,
        "endLineNumber" : 1130,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 1123,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 1127,
        "startColumnNumber" : 24,
        "endLineNumber" : 1127,
        "endColumnNumber" : 138
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1130,
      "startColumnNumber" : 27,
      "endLineNumber" : 1130,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1130,
        "startColumnNumber" : 27,
        "endLineNumber" : 1130,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 1130,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 1123,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1130,
        "startColumnNumber" : 27,
        "endLineNumber" : 1130,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1132,
      "startColumnNumber" : 58,
      "endLineNumber" : 1132,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1132,
        "startColumnNumber" : 58,
        "endLineNumber" : 1132,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 1132,
        "startColumnNumber" : 27,
        "endLineNumber" : 1132,
        "endColumnNumber" : 106
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1132,
        "startColumnNumber" : 20,
        "endLineNumber" : 1132,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 1130,
        "startColumnNumber" : 54,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 1130,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 677,
        "startLineNumber" : 1123,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 1120,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 1117,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 1114,
        "startColumnNumber" : 23,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1626,
        "startLineNumber" : 1110,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 1107,
        "startColumnNumber" : 36,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n  Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1132,
        "startColumnNumber" : 20,
        "endLineNumber" : 1132,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1138,
      "startColumnNumber" : 31,
      "endLineNumber" : 1138,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1138,
        "startColumnNumber" : 31,
        "endLineNumber" : 1138,
        "endColumnNumber" : 39
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1138,
        "startColumnNumber" : 31,
        "endLineNumber" : 1138,
        "endColumnNumber" : 47
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1138,
        "startColumnNumber" : 31,
        "endLineNumber" : 1138,
        "endColumnNumber" : 87
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(Type.DOUBLE) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1138,
        "startColumnNumber" : 23,
        "endLineNumber" : 1138,
        "endColumnNumber" : 87
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1138,
        "startColumnNumber" : 16,
        "endLineNumber" : 1138,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1138,
        "startColumnNumber" : 16,
        "endLineNumber" : 1138,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1138,
      "startColumnNumber" : 50,
      "endLineNumber" : 1138,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1138,
        "startColumnNumber" : 50,
        "endLineNumber" : 1138,
        "endColumnNumber" : 58
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 1138,
        "startColumnNumber" : 50,
        "endLineNumber" : 1138,
        "endColumnNumber" : 80
      },
      "nodeContext" : "pr.first.getValue(Type.DOUBLE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1138,
        "startColumnNumber" : 31,
        "endLineNumber" : 1138,
        "endColumnNumber" : 87
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(Type.DOUBLE) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1138,
        "startColumnNumber" : 23,
        "endLineNumber" : 1138,
        "endColumnNumber" : 87
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1138,
        "startColumnNumber" : 16,
        "endLineNumber" : 1138,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1138,
        "startColumnNumber" : 16,
        "endLineNumber" : 1138,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1139,
      "startColumnNumber" : 30,
      "endLineNumber" : 1139,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1139,
        "startColumnNumber" : 30,
        "endLineNumber" : 1139,
        "endColumnNumber" : 37
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1139,
        "startColumnNumber" : 30,
        "endLineNumber" : 1139,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1139,
        "startColumnNumber" : 30,
        "endLineNumber" : 1139,
        "endColumnNumber" : 84
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(Type.DOUBLE) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1139,
        "startColumnNumber" : 23,
        "endLineNumber" : 1139,
        "endColumnNumber" : 84
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1139,
        "startColumnNumber" : 16,
        "endLineNumber" : 1139,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1139,
        "startColumnNumber" : 16,
        "endLineNumber" : 1139,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1139,
      "startColumnNumber" : 48,
      "endLineNumber" : 1139,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1139,
        "startColumnNumber" : 48,
        "endLineNumber" : 1139,
        "endColumnNumber" : 55
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 1139,
        "startColumnNumber" : 48,
        "endLineNumber" : 1139,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pr.last.getValue(Type.DOUBLE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1139,
        "startColumnNumber" : 30,
        "endLineNumber" : 1139,
        "endColumnNumber" : 84
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(Type.DOUBLE) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 1139,
        "startColumnNumber" : 23,
        "endLineNumber" : 1139,
        "endColumnNumber" : 84
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1139,
        "startColumnNumber" : 16,
        "endLineNumber" : 1139,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 1139,
        "startColumnNumber" : 16,
        "endLineNumber" : 1139,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1140,
      "startColumnNumber" : 20,
      "endLineNumber" : 1140,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 36
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1140,
      "startColumnNumber" : 40,
      "endLineNumber" : 1140,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1140,
        "startColumnNumber" : 40,
        "endLineNumber" : 1140,
        "endColumnNumber" : 48
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1140,
        "startColumnNumber" : 40,
        "endLineNumber" : 1140,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1140,
      "startColumnNumber" : 56,
      "endLineNumber" : 1140,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1140,
        "startColumnNumber" : 56,
        "endLineNumber" : 1140,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1140,
        "startColumnNumber" : 40,
        "endLineNumber" : 1140,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1140,
      "startColumnNumber" : 68,
      "endLineNumber" : 1140,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1140,
        "startColumnNumber" : 68,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1140,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1141,
      "startColumnNumber" : 27,
      "endLineNumber" : 1141,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1141,
        "startColumnNumber" : 27,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1140,
        "startColumnNumber" : 20,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1141,
        "startColumnNumber" : 27,
        "endLineNumber" : 1141,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1143,
      "startColumnNumber" : 60,
      "endLineNumber" : 1143,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1143,
        "startColumnNumber" : 60,
        "endLineNumber" : 1143,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 1143,
        "startColumnNumber" : 27,
        "endLineNumber" : 1143,
        "endColumnNumber" : 102
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1143,
        "startColumnNumber" : 20,
        "endLineNumber" : 1143,
        "endColumnNumber" : 103
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1141,
        "startColumnNumber" : 45,
        "endLineNumber" : 1144,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1143,
        "startColumnNumber" : 20,
        "endLineNumber" : 1143,
        "endColumnNumber" : 103
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1144,
      "startColumnNumber" : 27,
      "endLineNumber" : 1144,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1144,
      "startColumnNumber" : 47,
      "endLineNumber" : 1144,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1144,
        "startColumnNumber" : 47,
        "endLineNumber" : 1144,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1144,
        "startColumnNumber" : 47,
        "endLineNumber" : 1144,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1144,
        "startColumnNumber" : 27,
        "endLineNumber" : 1144,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1145,
      "startColumnNumber" : 60,
      "endLineNumber" : 1145,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1145,
        "startColumnNumber" : 60,
        "endLineNumber" : 1145,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1145,
        "startColumnNumber" : 27,
        "endLineNumber" : 1146,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 1145,
        "startColumnNumber" : 20,
        "endLineNumber" : 1146,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 1144,
        "startColumnNumber" : 64,
        "endLineNumber" : 1147,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1145,
        "startColumnNumber" : 60,
        "endLineNumber" : 1145,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1146,
      "startColumnNumber" : 28,
      "endLineNumber" : 1146,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1146,
        "startColumnNumber" : 28,
        "endLineNumber" : 1146,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1145,
        "startColumnNumber" : 27,
        "endLineNumber" : 1146,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 1145,
        "startColumnNumber" : 20,
        "endLineNumber" : 1146,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 1144,
        "startColumnNumber" : 64,
        "endLineNumber" : 1147,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1146,
        "startColumnNumber" : 28,
        "endLineNumber" : 1146,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1146,
      "startColumnNumber" : 47,
      "endLineNumber" : 1146,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1146,
        "startColumnNumber" : 47,
        "endLineNumber" : 1146,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 1145,
        "startColumnNumber" : 27,
        "endLineNumber" : 1146,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 1145,
        "startColumnNumber" : 20,
        "endLineNumber" : 1146,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 1144,
        "startColumnNumber" : 64,
        "endLineNumber" : 1147,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1146,
        "startColumnNumber" : 47,
        "endLineNumber" : 1146,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1147,
      "startColumnNumber" : 27,
      "endLineNumber" : 1147,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1147,
      "startColumnNumber" : 47,
      "endLineNumber" : 1147,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1147,
        "startColumnNumber" : 47,
        "endLineNumber" : 1147,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1147,
        "startColumnNumber" : 47,
        "endLineNumber" : 1147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1147,
        "startColumnNumber" : 27,
        "endLineNumber" : 1147,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1149,
      "startColumnNumber" : 60,
      "endLineNumber" : 1149,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1149,
        "startColumnNumber" : 60,
        "endLineNumber" : 1149,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1149,
        "startColumnNumber" : 27,
        "endLineNumber" : 1149,
        "endColumnNumber" : 114
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1149,
        "startColumnNumber" : 20,
        "endLineNumber" : 1149,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 1147,
        "startColumnNumber" : 64,
        "endLineNumber" : 1150,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1149,
        "startColumnNumber" : 20,
        "endLineNumber" : 1149,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1149,
      "startColumnNumber" : 90,
      "endLineNumber" : 1149,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1149,
        "startColumnNumber" : 90,
        "endLineNumber" : 1149,
        "endColumnNumber" : 107
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1149,
        "startColumnNumber" : 27,
        "endLineNumber" : 1149,
        "endColumnNumber" : 114
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1149,
        "startColumnNumber" : 20,
        "endLineNumber" : 1149,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 1147,
        "startColumnNumber" : 64,
        "endLineNumber" : 1150,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 1149,
        "startColumnNumber" : 20,
        "endLineNumber" : 1149,
        "endColumnNumber" : 115
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1150,
      "startColumnNumber" : 27,
      "endLineNumber" : 1150,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1150,
      "startColumnNumber" : 47,
      "endLineNumber" : 1150,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1150,
        "startColumnNumber" : 47,
        "endLineNumber" : 1150,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1150,
        "startColumnNumber" : 47,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1150,
        "startColumnNumber" : 46,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1150,
      "startColumnNumber" : 62,
      "endLineNumber" : 1150,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1150,
        "startColumnNumber" : 62,
        "endLineNumber" : 1150,
        "endColumnNumber" : 70
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1150,
        "startColumnNumber" : 47,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1150,
        "startColumnNumber" : 46,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1150,
        "startColumnNumber" : 27,
        "endLineNumber" : 1150,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1152,
      "startColumnNumber" : 60,
      "endLineNumber" : 1152,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1152,
        "startColumnNumber" : 60,
        "endLineNumber" : 1152,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1152,
        "startColumnNumber" : 27,
        "endLineNumber" : 1152,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1152,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 1150,
        "startColumnNumber" : 73,
        "endLineNumber" : 1153,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1152,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1152,
      "startColumnNumber" : 95,
      "endLineNumber" : 1152,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1152,
        "startColumnNumber" : 95,
        "endLineNumber" : 1152,
        "endColumnNumber" : 111
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1152,
        "startColumnNumber" : 27,
        "endLineNumber" : 1152,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1152,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 1150,
        "startColumnNumber" : 73,
        "endLineNumber" : 1153,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1152,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1153,
      "startColumnNumber" : 27,
      "endLineNumber" : 1153,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1153,
        "startColumnNumber" : 27,
        "endLineNumber" : 1153,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1153,
        "startColumnNumber" : 27,
        "endLineNumber" : 1153,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 1153,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1153,
        "startColumnNumber" : 27,
        "endLineNumber" : 1153,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1155,
      "startColumnNumber" : 47,
      "endLineNumber" : 1155,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1155,
        "startColumnNumber" : 47,
        "endLineNumber" : 1155,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 1155,
        "startColumnNumber" : 20,
        "endLineNumber" : 1158,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Double doubleVal=value.getValue(Type.DOUBLE);\n  in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 1153,
        "startColumnNumber" : 44,
        "endLineNumber" : 1160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 1153,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1155,
        "startColumnNumber" : 47,
        "endLineNumber" : 1155,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1157,
      "startColumnNumber" : 64,
      "endLineNumber" : 1157,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1157,
        "startColumnNumber" : 64,
        "endLineNumber" : 1157,
        "endColumnNumber" : 79
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1157,
        "startColumnNumber" : 31,
        "endLineNumber" : 1157,
        "endColumnNumber" : 114
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 1157,
        "startColumnNumber" : 24,
        "endLineNumber" : 1157,
        "endColumnNumber" : 143
      },
      "nodeContext" : "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 1157,
        "startColumnNumber" : 24,
        "endLineNumber" : 1157,
        "endColumnNumber" : 144
      },
      "nodeContext" : "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 1155,
        "startColumnNumber" : 56,
        "endLineNumber" : 1158,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Double doubleVal=value.getValue(Type.DOUBLE);\n  in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 1155,
        "startColumnNumber" : 20,
        "endLineNumber" : 1158,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Double doubleVal=value.getValue(Type.DOUBLE);\n  in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 1153,
        "startColumnNumber" : 44,
        "endLineNumber" : 1160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 1153,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 1157,
        "startColumnNumber" : 24,
        "endLineNumber" : 1157,
        "endColumnNumber" : 144
      },
      "nodeContext" : "in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1160,
      "startColumnNumber" : 27,
      "endLineNumber" : 1160,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1160,
        "startColumnNumber" : 27,
        "endLineNumber" : 1160,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 1160,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 1153,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1160,
        "startColumnNumber" : 27,
        "endLineNumber" : 1160,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1162,
      "startColumnNumber" : 60,
      "endLineNumber" : 1162,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1162,
        "startColumnNumber" : 60,
        "endLineNumber" : 1162,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 1162,
        "startColumnNumber" : 27,
        "endLineNumber" : 1162,
        "endColumnNumber" : 124
      },
      "nodeContext" : "NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 1162,
        "startColumnNumber" : 20,
        "endLineNumber" : 1162,
        "endColumnNumber" : 125
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 1160,
        "startColumnNumber" : 54,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 1160,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 1153,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 1150,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 1147,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1312,
        "startLineNumber" : 1144,
        "startColumnNumber" : 23,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 1140,
        "startColumnNumber" : 16,
        "endLineNumber" : 1163,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Double doubleVal=value.getValue(Type.DOUBLE);\n    in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 195,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1828,
        "startLineNumber" : 1137,
        "startColumnNumber" : 38,
        "endLineNumber" : 1165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 1162,
        "startColumnNumber" : 20,
        "endLineNumber" : 1162,
        "endColumnNumber" : 125
      },
      "nodeContext" : "return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1167,
      "startColumnNumber" : 29,
      "endLineNumber" : 1167,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1167,
        "startColumnNumber" : 29,
        "endLineNumber" : 1167,
        "endColumnNumber" : 37
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1167,
        "startColumnNumber" : 29,
        "endLineNumber" : 1167,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1167,
        "startColumnNumber" : 29,
        "endLineNumber" : 1167,
        "endColumnNumber" : 78
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(LONG) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1167,
        "startColumnNumber" : 21,
        "endLineNumber" : 1167,
        "endColumnNumber" : 78
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(LONG) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 1167,
        "startColumnNumber" : 16,
        "endLineNumber" : 1167,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 1167,
        "startColumnNumber" : 16,
        "endLineNumber" : 1167,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1167,
      "startColumnNumber" : 48,
      "endLineNumber" : 1167,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1167,
        "startColumnNumber" : 48,
        "endLineNumber" : 1167,
        "endColumnNumber" : 56
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 1167,
        "startColumnNumber" : 48,
        "endLineNumber" : 1167,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.first.getValue(LONG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1167,
        "startColumnNumber" : 29,
        "endLineNumber" : 1167,
        "endColumnNumber" : 78
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(LONG) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 1167,
        "startColumnNumber" : 21,
        "endLineNumber" : 1167,
        "endColumnNumber" : 78
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(LONG) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 1167,
        "startColumnNumber" : 16,
        "endLineNumber" : 1167,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 1167,
        "startColumnNumber" : 16,
        "endLineNumber" : 1167,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1168,
      "startColumnNumber" : 28,
      "endLineNumber" : 1168,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1168,
        "startColumnNumber" : 28,
        "endLineNumber" : 1168,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1168,
        "startColumnNumber" : 28,
        "endLineNumber" : 1168,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1168,
        "startColumnNumber" : 28,
        "endLineNumber" : 1168,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(LONG) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1168,
        "startColumnNumber" : 21,
        "endLineNumber" : 1168,
        "endColumnNumber" : 75
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(LONG) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 1168,
        "startColumnNumber" : 16,
        "endLineNumber" : 1168,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 1168,
        "startColumnNumber" : 16,
        "endLineNumber" : 1168,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1168,
      "startColumnNumber" : 46,
      "endLineNumber" : 1168,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1168,
        "startColumnNumber" : 46,
        "endLineNumber" : 1168,
        "endColumnNumber" : 53
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1168,
        "startColumnNumber" : 46,
        "endLineNumber" : 1168,
        "endColumnNumber" : 68
      },
      "nodeContext" : "pr.last.getValue(LONG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1168,
        "startColumnNumber" : 28,
        "endLineNumber" : 1168,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(LONG) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 1168,
        "startColumnNumber" : 21,
        "endLineNumber" : 1168,
        "endColumnNumber" : 75
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(LONG) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 1168,
        "startColumnNumber" : 16,
        "endLineNumber" : 1168,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 1168,
        "startColumnNumber" : 16,
        "endLineNumber" : 1168,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1169,
      "startColumnNumber" : 20,
      "endLineNumber" : 1169,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 36
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1169,
      "startColumnNumber" : 40,
      "endLineNumber" : 1169,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1169,
        "startColumnNumber" : 40,
        "endLineNumber" : 1169,
        "endColumnNumber" : 48
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1169,
        "startColumnNumber" : 40,
        "endLineNumber" : 1169,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1169,
      "startColumnNumber" : 56,
      "endLineNumber" : 1169,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1169,
        "startColumnNumber" : 56,
        "endLineNumber" : 1169,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1169,
        "startColumnNumber" : 40,
        "endLineNumber" : 1169,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1169,
      "startColumnNumber" : 68,
      "endLineNumber" : 1169,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1169,
        "startColumnNumber" : 68,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1170,
      "startColumnNumber" : 27,
      "endLineNumber" : 1170,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1170,
        "startColumnNumber" : 27,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1169,
        "startColumnNumber" : 20,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1170,
        "startColumnNumber" : 27,
        "endLineNumber" : 1170,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1172,
      "startColumnNumber" : 58,
      "endLineNumber" : 1172,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1172,
        "startColumnNumber" : 58,
        "endLineNumber" : 1172,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 1172,
        "startColumnNumber" : 27,
        "endLineNumber" : 1172,
        "endColumnNumber" : 100
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1172,
        "startColumnNumber" : 20,
        "endLineNumber" : 1172,
        "endColumnNumber" : 101
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 1170,
        "startColumnNumber" : 45,
        "endLineNumber" : 1173,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1172,
        "startColumnNumber" : 20,
        "endLineNumber" : 1172,
        "endColumnNumber" : 101
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1173,
      "startColumnNumber" : 27,
      "endLineNumber" : 1173,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1173,
      "startColumnNumber" : 47,
      "endLineNumber" : 1173,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1173,
        "startColumnNumber" : 47,
        "endLineNumber" : 1173,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1173,
        "startColumnNumber" : 47,
        "endLineNumber" : 1173,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1173,
        "startColumnNumber" : 27,
        "endLineNumber" : 1173,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1174,
      "startColumnNumber" : 58,
      "endLineNumber" : 1174,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1174,
        "startColumnNumber" : 58,
        "endLineNumber" : 1174,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1174,
        "startColumnNumber" : 27,
        "endLineNumber" : 1175,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1174,
        "startColumnNumber" : 20,
        "endLineNumber" : 1175,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1173,
        "startColumnNumber" : 64,
        "endLineNumber" : 1176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1174,
        "startColumnNumber" : 58,
        "endLineNumber" : 1174,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1175,
      "startColumnNumber" : 28,
      "endLineNumber" : 1175,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1175,
        "startColumnNumber" : 28,
        "endLineNumber" : 1175,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1174,
        "startColumnNumber" : 27,
        "endLineNumber" : 1175,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1174,
        "startColumnNumber" : 20,
        "endLineNumber" : 1175,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1173,
        "startColumnNumber" : 64,
        "endLineNumber" : 1176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1175,
        "startColumnNumber" : 28,
        "endLineNumber" : 1175,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1175,
      "startColumnNumber" : 47,
      "endLineNumber" : 1175,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1175,
        "startColumnNumber" : 47,
        "endLineNumber" : 1175,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 1174,
        "startColumnNumber" : 27,
        "endLineNumber" : 1175,
        "endColumnNumber" : 64
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 1174,
        "startColumnNumber" : 20,
        "endLineNumber" : 1175,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 1173,
        "startColumnNumber" : 64,
        "endLineNumber" : 1176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1175,
        "startColumnNumber" : 47,
        "endLineNumber" : 1175,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1176,
      "startColumnNumber" : 27,
      "endLineNumber" : 1176,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1176,
      "startColumnNumber" : 47,
      "endLineNumber" : 1176,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1176,
        "startColumnNumber" : 47,
        "endLineNumber" : 1176,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1176,
        "startColumnNumber" : 47,
        "endLineNumber" : 1176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1176,
        "startColumnNumber" : 27,
        "endLineNumber" : 1176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1178,
      "startColumnNumber" : 58,
      "endLineNumber" : 1178,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1178,
        "startColumnNumber" : 58,
        "endLineNumber" : 1178,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1178,
        "startColumnNumber" : 27,
        "endLineNumber" : 1178,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1178,
        "startColumnNumber" : 20,
        "endLineNumber" : 1178,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 1176,
        "startColumnNumber" : 64,
        "endLineNumber" : 1179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1178,
        "startColumnNumber" : 20,
        "endLineNumber" : 1178,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1178,
      "startColumnNumber" : 88,
      "endLineNumber" : 1178,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1178,
        "startColumnNumber" : 88,
        "endLineNumber" : 1178,
        "endColumnNumber" : 105
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1178,
        "startColumnNumber" : 27,
        "endLineNumber" : 1178,
        "endColumnNumber" : 112
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1178,
        "startColumnNumber" : 20,
        "endLineNumber" : 1178,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 1176,
        "startColumnNumber" : 64,
        "endLineNumber" : 1179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1178,
        "startColumnNumber" : 20,
        "endLineNumber" : 1178,
        "endColumnNumber" : 113
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1179,
      "startColumnNumber" : 27,
      "endLineNumber" : 1179,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1179,
      "startColumnNumber" : 47,
      "endLineNumber" : 1179,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1179,
        "startColumnNumber" : 47,
        "endLineNumber" : 1179,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1179,
        "startColumnNumber" : 47,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1179,
        "startColumnNumber" : 46,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1179,
      "startColumnNumber" : 62,
      "endLineNumber" : 1179,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1179,
        "startColumnNumber" : 62,
        "endLineNumber" : 1179,
        "endColumnNumber" : 70
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1179,
        "startColumnNumber" : 47,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1179,
        "startColumnNumber" : 46,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1179,
        "startColumnNumber" : 27,
        "endLineNumber" : 1179,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1181,
      "startColumnNumber" : 58,
      "endLineNumber" : 1181,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1181,
        "startColumnNumber" : 58,
        "endLineNumber" : 1181,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1181,
        "startColumnNumber" : 27,
        "endLineNumber" : 1181,
        "endColumnNumber" : 110
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1181,
        "startColumnNumber" : 20,
        "endLineNumber" : 1181,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1179,
        "startColumnNumber" : 73,
        "endLineNumber" : 1182,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1181,
        "startColumnNumber" : 20,
        "endLineNumber" : 1181,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1181,
      "startColumnNumber" : 93,
      "endLineNumber" : 1181,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1181,
        "startColumnNumber" : 93,
        "endLineNumber" : 1181,
        "endColumnNumber" : 109
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 1181,
        "startColumnNumber" : 27,
        "endLineNumber" : 1181,
        "endColumnNumber" : 110
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1181,
        "startColumnNumber" : 20,
        "endLineNumber" : 1181,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 1179,
        "startColumnNumber" : 73,
        "endLineNumber" : 1182,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1181,
        "startColumnNumber" : 20,
        "endLineNumber" : 1181,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1182,
      "startColumnNumber" : 27,
      "endLineNumber" : 1182,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1182,
        "startColumnNumber" : 27,
        "endLineNumber" : 1182,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1182,
        "startColumnNumber" : 27,
        "endLineNumber" : 1182,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 1182,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1182,
        "startColumnNumber" : 27,
        "endLineNumber" : 1182,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1184,
      "startColumnNumber" : 47,
      "endLineNumber" : 1184,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1184,
        "startColumnNumber" : 47,
        "endLineNumber" : 1184,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 1184,
        "startColumnNumber" : 20,
        "endLineNumber" : 1187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Long longVal=value.getValue(LONG);\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 1182,
        "startColumnNumber" : 44,
        "endLineNumber" : 1189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 1182,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1184,
        "startColumnNumber" : 47,
        "endLineNumber" : 1184,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1186,
      "startColumnNumber" : 62,
      "endLineNumber" : 1186,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1186,
        "startColumnNumber" : 62,
        "endLineNumber" : 1186,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 1186,
        "startColumnNumber" : 31,
        "endLineNumber" : 1186,
        "endColumnNumber" : 108
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 1186,
        "startColumnNumber" : 24,
        "endLineNumber" : 1186,
        "endColumnNumber" : 137
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 1186,
        "startColumnNumber" : 24,
        "endLineNumber" : 1186,
        "endColumnNumber" : 138
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 1184,
        "startColumnNumber" : 56,
        "endLineNumber" : 1187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Long longVal=value.getValue(LONG);\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 1184,
        "startColumnNumber" : 20,
        "endLineNumber" : 1187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  Long longVal=value.getValue(LONG);\n  in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 1182,
        "startColumnNumber" : 44,
        "endLineNumber" : 1189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 1182,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 1186,
        "startColumnNumber" : 24,
        "endLineNumber" : 1186,
        "endColumnNumber" : 138
      },
      "nodeContext" : "in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1189,
      "startColumnNumber" : 27,
      "endLineNumber" : 1189,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1189,
        "startColumnNumber" : 27,
        "endLineNumber" : 1189,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 1189,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 1182,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1189,
        "startColumnNumber" : 27,
        "endLineNumber" : 1189,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1191,
      "startColumnNumber" : 58,
      "endLineNumber" : 1191,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1191,
        "startColumnNumber" : 58,
        "endLineNumber" : 1191,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 1191,
        "startColumnNumber" : 27,
        "endLineNumber" : 1191,
        "endColumnNumber" : 118
      },
      "nodeContext" : "NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 1191,
        "startColumnNumber" : 20,
        "endLineNumber" : 1191,
        "endColumnNumber" : 119
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1189,
        "startColumnNumber" : 54,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 1189,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 1182,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 1179,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1063,
        "startLineNumber" : 1176,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 1173,
        "startColumnNumber" : 23,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 1169,
        "startColumnNumber" : 16,
        "endLineNumber" : 1192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 193,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1779,
        "startLineNumber" : 1166,
        "startColumnNumber" : 36,
        "endLineNumber" : 1194,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 1191,
        "startColumnNumber" : 20,
        "endLineNumber" : 1191,
        "endColumnNumber" : 119
      },
      "nodeContext" : "return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1196,
      "startColumnNumber" : 20,
      "endLineNumber" : 1196,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 1196,
        "startColumnNumber" : 20,
        "endLineNumber" : 1196,
        "endColumnNumber" : 29
      },
      "nodeContext" : "pr.isLike",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 1196,
        "startColumnNumber" : 16,
        "endLineNumber" : 1198,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 1196,
        "startColumnNumber" : 20,
        "endLineNumber" : 1196,
        "endColumnNumber" : 29
      },
      "nodeContext" : "pr.isLike",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1197,
      "startColumnNumber" : 43,
      "endLineNumber" : 1197,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1197,
        "startColumnNumber" : 43,
        "endLineNumber" : 1197,
        "endColumnNumber" : 58
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1197,
        "startColumnNumber" : 27,
        "endLineNumber" : 1197,
        "endColumnNumber" : 86
      },
      "nodeContext" : "createLikeQuery(pr.propertyName,pr.first.getValue(STRING))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1197,
        "startColumnNumber" : 20,
        "endLineNumber" : 1197,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 1196,
        "startColumnNumber" : 31,
        "endLineNumber" : 1198,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 1196,
        "startColumnNumber" : 16,
        "endLineNumber" : 1198,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1197,
        "startColumnNumber" : 20,
        "endLineNumber" : 1197,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1197,
      "startColumnNumber" : 60,
      "endLineNumber" : 1197,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1197,
        "startColumnNumber" : 60,
        "endLineNumber" : 1197,
        "endColumnNumber" : 68
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1197,
        "startColumnNumber" : 60,
        "endLineNumber" : 1197,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first.getValue(STRING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1197,
        "startColumnNumber" : 27,
        "endLineNumber" : 1197,
        "endColumnNumber" : 86
      },
      "nodeContext" : "createLikeQuery(pr.propertyName,pr.first.getValue(STRING))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1197,
        "startColumnNumber" : 20,
        "endLineNumber" : 1197,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 1196,
        "startColumnNumber" : 31,
        "endLineNumber" : 1198,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 1196,
        "startColumnNumber" : 16,
        "endLineNumber" : 1198,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1197,
        "startColumnNumber" : 20,
        "endLineNumber" : 1197,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1201,
      "startColumnNumber" : 31,
      "endLineNumber" : 1201,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1201,
        "startColumnNumber" : 31,
        "endLineNumber" : 1201,
        "endColumnNumber" : 39
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1201,
        "startColumnNumber" : 31,
        "endLineNumber" : 1201,
        "endColumnNumber" : 47
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 1201,
        "startColumnNumber" : 31,
        "endLineNumber" : 1201,
        "endColumnNumber" : 82
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(STRING) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1201,
        "startColumnNumber" : 23,
        "endLineNumber" : 1201,
        "endColumnNumber" : 82
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(STRING) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1201,
        "startColumnNumber" : 16,
        "endLineNumber" : 1201,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String first=pr.first != null ? pr.first.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1201,
        "startColumnNumber" : 16,
        "endLineNumber" : 1201,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String first=pr.first != null ? pr.first.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1201,
      "startColumnNumber" : 50,
      "endLineNumber" : 1201,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1201,
        "startColumnNumber" : 50,
        "endLineNumber" : 1201,
        "endColumnNumber" : 58
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1201,
        "startColumnNumber" : 50,
        "endLineNumber" : 1201,
        "endColumnNumber" : 75
      },
      "nodeContext" : "pr.first.getValue(STRING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 1201,
        "startColumnNumber" : 31,
        "endLineNumber" : 1201,
        "endColumnNumber" : 82
      },
      "nodeContext" : "pr.first != null ? pr.first.getValue(STRING) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1201,
        "startColumnNumber" : 23,
        "endLineNumber" : 1201,
        "endColumnNumber" : 82
      },
      "nodeContext" : "first=pr.first != null ? pr.first.getValue(STRING) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1201,
        "startColumnNumber" : 16,
        "endLineNumber" : 1201,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String first=pr.first != null ? pr.first.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1201,
        "startColumnNumber" : 16,
        "endLineNumber" : 1201,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String first=pr.first != null ? pr.first.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1202,
      "startColumnNumber" : 30,
      "endLineNumber" : 1202,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1202,
        "startColumnNumber" : 30,
        "endLineNumber" : 1202,
        "endColumnNumber" : 37
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1202,
        "startColumnNumber" : 30,
        "endLineNumber" : 1202,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1202,
        "startColumnNumber" : 30,
        "endLineNumber" : 1202,
        "endColumnNumber" : 79
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(STRING) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1202,
        "startColumnNumber" : 23,
        "endLineNumber" : 1202,
        "endColumnNumber" : 79
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(STRING) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1202,
        "startColumnNumber" : 16,
        "endLineNumber" : 1202,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String last=pr.last != null ? pr.last.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1202,
        "startColumnNumber" : 16,
        "endLineNumber" : 1202,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String last=pr.last != null ? pr.last.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1202,
      "startColumnNumber" : 48,
      "endLineNumber" : 1202,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1202,
        "startColumnNumber" : 48,
        "endLineNumber" : 1202,
        "endColumnNumber" : 55
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1202,
        "startColumnNumber" : 48,
        "endLineNumber" : 1202,
        "endColumnNumber" : 72
      },
      "nodeContext" : "pr.last.getValue(STRING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 1202,
        "startColumnNumber" : 30,
        "endLineNumber" : 1202,
        "endColumnNumber" : 79
      },
      "nodeContext" : "pr.last != null ? pr.last.getValue(STRING) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 1202,
        "startColumnNumber" : 23,
        "endLineNumber" : 1202,
        "endColumnNumber" : 79
      },
      "nodeContext" : "last=pr.last != null ? pr.last.getValue(STRING) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1202,
        "startColumnNumber" : 16,
        "endLineNumber" : 1202,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String last=pr.last != null ? pr.last.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 1202,
        "startColumnNumber" : 16,
        "endLineNumber" : 1202,
        "endColumnNumber" : 80
      },
      "nodeContext" : "String last=pr.last != null ? pr.last.getValue(STRING) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1203,
      "startColumnNumber" : 20,
      "endLineNumber" : 1203,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 28
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 36
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1203,
      "startColumnNumber" : 40,
      "endLineNumber" : 1203,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1203,
        "startColumnNumber" : 40,
        "endLineNumber" : 1203,
        "endColumnNumber" : 48
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1203,
        "startColumnNumber" : 40,
        "endLineNumber" : 1203,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1203,
      "startColumnNumber" : 56,
      "endLineNumber" : 1203,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1203,
        "startColumnNumber" : 56,
        "endLineNumber" : 1203,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1203,
        "startColumnNumber" : 40,
        "endLineNumber" : 1203,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first.equals(pr.last)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1203,
      "startColumnNumber" : 68,
      "endLineNumber" : 1203,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1203,
        "startColumnNumber" : 68,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1203,
        "endColumnNumber" : 85
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1204,
      "startColumnNumber" : 27,
      "endLineNumber" : 1204,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1204,
        "startColumnNumber" : 27,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 1203,
        "startColumnNumber" : 20,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1204,
        "startColumnNumber" : 27,
        "endLineNumber" : 1204,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1206,
      "startColumnNumber" : 50,
      "endLineNumber" : 1206,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1206,
        "startColumnNumber" : 50,
        "endLineNumber" : 1206,
        "endColumnNumber" : 65
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1206,
        "startColumnNumber" : 41,
        "endLineNumber" : 1206,
        "endColumnNumber" : 73
      },
      "nodeContext" : "new Term(pr.propertyName,first)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1206,
        "startColumnNumber" : 27,
        "endLineNumber" : 1206,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new TermQuery(new Term(pr.propertyName,first))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 1206,
        "startColumnNumber" : 20,
        "endLineNumber" : 1206,
        "endColumnNumber" : 75
      },
      "nodeContext" : "return new TermQuery(new Term(pr.propertyName,first));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 1204,
        "startColumnNumber" : 45,
        "endLineNumber" : 1207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 1206,
        "startColumnNumber" : 20,
        "endLineNumber" : 1206,
        "endColumnNumber" : 75
      },
      "nodeContext" : "return new TermQuery(new Term(pr.propertyName,first));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1207,
      "startColumnNumber" : 27,
      "endLineNumber" : 1207,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1207,
      "startColumnNumber" : 47,
      "endLineNumber" : 1207,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1207,
        "startColumnNumber" : 47,
        "endLineNumber" : 1207,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1207,
        "startColumnNumber" : 47,
        "endLineNumber" : 1207,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1207,
        "startColumnNumber" : 27,
        "endLineNumber" : 1207,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1208,
      "startColumnNumber" : 57,
      "endLineNumber" : 1208,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1208,
        "startColumnNumber" : 57,
        "endLineNumber" : 1208,
        "endColumnNumber" : 72
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 1208,
        "startColumnNumber" : 27,
        "endLineNumber" : 1209,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 1208,
        "startColumnNumber" : 20,
        "endLineNumber" : 1209,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1207,
        "startColumnNumber" : 64,
        "endLineNumber" : 1210,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1208,
        "startColumnNumber" : 57,
        "endLineNumber" : 1208,
        "endColumnNumber" : 72
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1209,
      "startColumnNumber" : 28,
      "endLineNumber" : 1209,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1209,
        "startColumnNumber" : 28,
        "endLineNumber" : 1209,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 1208,
        "startColumnNumber" : 27,
        "endLineNumber" : 1209,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 1208,
        "startColumnNumber" : 20,
        "endLineNumber" : 1209,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1207,
        "startColumnNumber" : 64,
        "endLineNumber" : 1210,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1209,
        "startColumnNumber" : 28,
        "endLineNumber" : 1209,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1209,
      "startColumnNumber" : 47,
      "endLineNumber" : 1209,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1209,
        "startColumnNumber" : 47,
        "endLineNumber" : 1209,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 1208,
        "startColumnNumber" : 27,
        "endLineNumber" : 1209,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 1208,
        "startColumnNumber" : 20,
        "endLineNumber" : 1209,
        "endColumnNumber" : 65
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1207,
        "startColumnNumber" : 64,
        "endLineNumber" : 1210,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1209,
        "startColumnNumber" : 47,
        "endLineNumber" : 1209,
        "endColumnNumber" : 63
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1210,
      "startColumnNumber" : 27,
      "endLineNumber" : 1210,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 35
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 43
      },
      "nodeContext" : "pr.first != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1210,
      "startColumnNumber" : 47,
      "endLineNumber" : 1210,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1210,
        "startColumnNumber" : 47,
        "endLineNumber" : 1210,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1210,
        "startColumnNumber" : 47,
        "endLineNumber" : 1210,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1210,
        "startColumnNumber" : 27,
        "endLineNumber" : 1210,
        "endColumnNumber" : 62
      },
      "nodeContext" : "pr.first != null && pr.last == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1212,
      "startColumnNumber" : 57,
      "endLineNumber" : 1212,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1212,
        "startColumnNumber" : 57,
        "endLineNumber" : 1212,
        "endColumnNumber" : 72
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1212,
        "startColumnNumber" : 27,
        "endLineNumber" : 1212,
        "endColumnNumber" : 111
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 1212,
        "startColumnNumber" : 20,
        "endLineNumber" : 1212,
        "endColumnNumber" : 112
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 1210,
        "startColumnNumber" : 64,
        "endLineNumber" : 1213,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 1212,
        "startColumnNumber" : 20,
        "endLineNumber" : 1212,
        "endColumnNumber" : 112
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1212,
      "startColumnNumber" : 87,
      "endLineNumber" : 1212,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 1212,
        "startColumnNumber" : 87,
        "endLineNumber" : 1212,
        "endColumnNumber" : 104
      },
      "nodeContext" : "pr.firstIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1212,
        "startColumnNumber" : 27,
        "endLineNumber" : 1212,
        "endColumnNumber" : 111
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 1212,
        "startColumnNumber" : 20,
        "endLineNumber" : 1212,
        "endColumnNumber" : 112
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 1210,
        "startColumnNumber" : 64,
        "endLineNumber" : 1213,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 1212,
        "startColumnNumber" : 20,
        "endLineNumber" : 1212,
        "endColumnNumber" : 112
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1213,
      "startColumnNumber" : 27,
      "endLineNumber" : 1213,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.last != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1213,
      "startColumnNumber" : 47,
      "endLineNumber" : 1213,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1213,
        "startColumnNumber" : 47,
        "endLineNumber" : 1213,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.last",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1213,
        "startColumnNumber" : 47,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1213,
        "startColumnNumber" : 46,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1213,
      "startColumnNumber" : 62,
      "endLineNumber" : 1213,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 1213,
        "startColumnNumber" : 62,
        "endLineNumber" : 1213,
        "endColumnNumber" : 70
      },
      "nodeContext" : "pr.first",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1213,
        "startColumnNumber" : 47,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last.equals(pr.first)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1213,
        "startColumnNumber" : 46,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!pr.last.equals(pr.first)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1213,
        "startColumnNumber" : 27,
        "endLineNumber" : 1213,
        "endColumnNumber" : 71
      },
      "nodeContext" : "pr.last != null && !pr.last.equals(pr.first)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1215,
      "startColumnNumber" : 57,
      "endLineNumber" : 1215,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1215,
        "startColumnNumber" : 57,
        "endLineNumber" : 1215,
        "endColumnNumber" : 72
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 1215,
        "startColumnNumber" : 27,
        "endLineNumber" : 1215,
        "endColumnNumber" : 109
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1215,
        "startColumnNumber" : 20,
        "endLineNumber" : 1215,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 1213,
        "startColumnNumber" : 73,
        "endLineNumber" : 1216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1215,
        "startColumnNumber" : 20,
        "endLineNumber" : 1215,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1215,
      "startColumnNumber" : 92,
      "endLineNumber" : 1215,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 1215,
        "startColumnNumber" : 92,
        "endLineNumber" : 1215,
        "endColumnNumber" : 108
      },
      "nodeContext" : "pr.lastIncluding",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 1215,
        "startColumnNumber" : 27,
        "endLineNumber" : 1215,
        "endColumnNumber" : 109
      },
      "nodeContext" : "TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1215,
        "startColumnNumber" : 20,
        "endLineNumber" : 1215,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 1213,
        "startColumnNumber" : 73,
        "endLineNumber" : 1216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 1215,
        "startColumnNumber" : 20,
        "endLineNumber" : 1215,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1216,
      "startColumnNumber" : 27,
      "endLineNumber" : 1216,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1216,
        "startColumnNumber" : 27,
        "endLineNumber" : 1216,
        "endColumnNumber" : 34
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1216,
        "startColumnNumber" : 27,
        "endLineNumber" : 1216,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 1216,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1216,
        "startColumnNumber" : 27,
        "endLineNumber" : 1216,
        "endColumnNumber" : 42
      },
      "nodeContext" : "pr.list != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1218,
      "startColumnNumber" : 47,
      "endLineNumber" : 1218,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1218,
        "startColumnNumber" : 47,
        "endLineNumber" : 1218,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 1218,
        "startColumnNumber" : 20,
        "endLineNumber" : 1221,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 1216,
        "startColumnNumber" : 44,
        "endLineNumber" : 1223,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 1216,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 1218,
        "startColumnNumber" : 47,
        "endLineNumber" : 1218,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pr.list",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1220,
      "startColumnNumber" : 54,
      "endLineNumber" : 1220,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1220,
        "startColumnNumber" : 54,
        "endLineNumber" : 1220,
        "endColumnNumber" : 69
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1220,
        "startColumnNumber" : 45,
        "endLineNumber" : 1220,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new Term(pr.propertyName,strVal)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 1220,
        "startColumnNumber" : 31,
        "endLineNumber" : 1220,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new TermQuery(new Term(pr.propertyName,strVal))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1220,
        "startColumnNumber" : 24,
        "endLineNumber" : 1220,
        "endColumnNumber" : 108
      },
      "nodeContext" : "in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1220,
        "startColumnNumber" : 24,
        "endLineNumber" : 1220,
        "endColumnNumber" : 109
      },
      "nodeContext" : "in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 1218,
        "startColumnNumber" : 56,
        "endLineNumber" : 1221,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 1218,
        "startColumnNumber" : 20,
        "endLineNumber" : 1221,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 1216,
        "startColumnNumber" : 44,
        "endLineNumber" : 1223,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 1216,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 1220,
        "startColumnNumber" : 24,
        "endLineNumber" : 1220,
        "endColumnNumber" : 109
      },
      "nodeContext" : "in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1223,
      "startColumnNumber" : 27,
      "endLineNumber" : 1223,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1223,
        "startColumnNumber" : 27,
        "endLineNumber" : 1223,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 1223,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 1216,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1223,
        "startColumnNumber" : 27,
        "endLineNumber" : 1223,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pr.isNotNullRestriction()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1224,
      "startColumnNumber" : 46,
      "endLineNumber" : 1224,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 1224,
        "startColumnNumber" : 46,
        "endLineNumber" : 1224,
        "endColumnNumber" : 61
      },
      "nodeContext" : "pr.propertyName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 1224,
        "startColumnNumber" : 27,
        "endLineNumber" : 1224,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new TermRangeQuery(pr.propertyName,null,null,true,true)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1224,
        "startColumnNumber" : 20,
        "endLineNumber" : 1224,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return new TermRangeQuery(pr.propertyName,null,null,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 1223,
        "startColumnNumber" : 54,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 1223,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 1216,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 1213,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 1210,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 1207,
        "startColumnNumber" : 23,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 1203,
        "startColumnNumber" : 16,
        "endLineNumber" : 1225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 1195,
        "startColumnNumber" : 21,
        "endLineNumber" : 1226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pr.isLike) {\n    return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n  }\n  String first=pr.first != null ? pr.first.getValue(STRING) : null;\n  String last=pr.last != null ? pr.last.getValue(STRING) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return new TermQuery(new Term(pr.propertyName,first));\n  }\n else   if (pr.first != null && pr.last != null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      String strVal=value.getValue(STRING);\n      in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return new TermRangeQuery(pr.propertyName,null,null,true,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7531,
        "startLineNumber" : 1106,
        "startColumnNumber" : 8,
        "endLineNumber" : 1227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (propType) {\ncase PropertyType.DATE:{\n    Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n    Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n        in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.DOUBLE:{\n  Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n  Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Double doubleVal=value.getValue(Type.DOUBLE);\n      in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n  }\n  break;\n}\ncase PropertyType.LONG:{\nLong first=pr.first != null ? pr.first.getValue(LONG) : null;\nLong last=pr.last != null ? pr.last.getValue(LONG) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n}\n else if (pr.first != null && pr.last != null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    Long longVal=value.getValue(LONG);\n    in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n}\nbreak;\n}\ndefault:{\nif (pr.isLike) {\nreturn createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\nreturn new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\nreturn TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\nBooleanQuery in=new BooleanQuery();\nfor (PropertyValue value : pr.list) {\n  String strVal=value.getValue(STRING);\n  in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n}\nreturn in;\n}\n else if (pr.isNotNullRestriction()) {\nreturn new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 970,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 1224,
        "startColumnNumber" : 20,
        "endLineNumber" : 1224,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return new TermRangeQuery(pr.propertyName,null,null,true,true);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  }, {
    "nodeContext" : "pr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 1228,
      "startColumnNumber" : 77,
      "endLineNumber" : 1228,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1228,
        "startColumnNumber" : 40,
        "endLineNumber" : 1228,
        "endColumnNumber" : 102
      },
      "nodeContext" : "\"PropertyRestriction not handled \" + pr + \" for index \"+ defn",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 1228,
        "startColumnNumber" : 14,
        "endLineNumber" : 1228,
        "endColumnNumber" : 103
      },
      "nodeContext" : "new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 1228,
        "startColumnNumber" : 8,
        "endLineNumber" : 1228,
        "endColumnNumber" : 104
      },
      "nodeContext" : "throw new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8125,
        "startLineNumber" : 1093,
        "startColumnNumber" : 62,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1028,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8262,
        "startLineNumber" : 1091,
        "startColumnNumber" : 4,
        "endLineNumber" : 1229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@CheckForNull private static Query createQuery(PropertyRestriction pr,PropertyDefinition defn){\n  int propType=determinePropertyType(defn,pr);\n  if (pr.isNullRestriction()) {\n    return new TermQuery(new Term(FieldNames.NULL_PROPS,defn.name));\n  }\n  if (pr.isNotNullRestriction() && defn.notNullCheckEnabled) {\n    return new TermQuery(new Term(FieldNames.NOT_NULL_PROPS,defn.name));\n  }\nswitch (propType) {\ncase PropertyType.DATE:{\n      Long first=pr.first != null ? FieldFactory.dateToLong(pr.first.getValue(Type.DATE)) : null;\n      Long last=pr.last != null ? FieldFactory.dateToLong(pr.last.getValue(Type.DATE)) : null;\n      if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n      }\n else       if (pr.first != null && pr.last != null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n      }\n else       if (pr.first != null && pr.last == null) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n      }\n else       if (pr.last != null && !pr.last.equals(pr.first)) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n      }\n else       if (pr.list != null) {\n        BooleanQuery in=new BooleanQuery();\n        for (        PropertyValue value : pr.list) {\n          Long dateVal=FieldFactory.dateToLong(value.getValue(Type.DATE));\n          in.add(NumericRangeQuery.newLongRange(pr.propertyName,dateVal,dateVal,true,true),BooleanClause.Occur.SHOULD);\n        }\n        return in;\n      }\n else       if (pr.isNotNullRestriction()) {\n        return NumericRangeQuery.newLongRange(pr.propertyName,0L,Long.MAX_VALUE,true,true);\n      }\n      break;\n    }\ncase PropertyType.DOUBLE:{\n    Double first=pr.first != null ? pr.first.getValue(Type.DOUBLE) : null;\n    Double last=pr.last != null ? pr.last.getValue(Type.DOUBLE) : null;\n    if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,first,true,true);\n    }\n else     if (pr.first != null && pr.last != null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n    }\n else     if (pr.first != null && pr.last == null) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,first,null,pr.firstIncluding,true);\n    }\n else     if (pr.last != null && !pr.last.equals(pr.first)) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,null,last,true,pr.lastIncluding);\n    }\n else     if (pr.list != null) {\n      BooleanQuery in=new BooleanQuery();\n      for (      PropertyValue value : pr.list) {\n        Double doubleVal=value.getValue(Type.DOUBLE);\n        in.add(NumericRangeQuery.newDoubleRange(pr.propertyName,doubleVal,doubleVal,true,true),BooleanClause.Occur.SHOULD);\n      }\n      return in;\n    }\n else     if (pr.isNotNullRestriction()) {\n      return NumericRangeQuery.newDoubleRange(pr.propertyName,Double.MIN_VALUE,Double.MAX_VALUE,true,true);\n    }\n    break;\n  }\ncase PropertyType.LONG:{\n  Long first=pr.first != null ? pr.first.getValue(LONG) : null;\n  Long last=pr.last != null ? pr.last.getValue(LONG) : null;\n  if (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,first,true,true);\n  }\n else   if (pr.first != null && pr.last != null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n  }\n else   if (pr.first != null && pr.last == null) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,first,null,pr.firstIncluding,true);\n  }\n else   if (pr.last != null && !pr.last.equals(pr.first)) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,null,last,true,pr.lastIncluding);\n  }\n else   if (pr.list != null) {\n    BooleanQuery in=new BooleanQuery();\n    for (    PropertyValue value : pr.list) {\n      Long longVal=value.getValue(LONG);\n      in.add(NumericRangeQuery.newLongRange(pr.propertyName,longVal,longVal,true,true),BooleanClause.Occur.SHOULD);\n    }\n    return in;\n  }\n else   if (pr.isNotNullRestriction()) {\n    return NumericRangeQuery.newLongRange(pr.propertyName,Long.MIN_VALUE,Long.MAX_VALUE,true,true);\n  }\n  break;\n}\ndefault:{\nif (pr.isLike) {\n  return createLikeQuery(pr.propertyName,pr.first.getValue(STRING));\n}\nString first=pr.first != null ? pr.first.getValue(STRING) : null;\nString last=pr.last != null ? pr.last.getValue(STRING) : null;\nif (pr.first != null && pr.first.equals(pr.last) && pr.firstIncluding && pr.lastIncluding) {\n  return new TermQuery(new Term(pr.propertyName,first));\n}\n else if (pr.first != null && pr.last != null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,last,pr.firstIncluding,pr.lastIncluding);\n}\n else if (pr.first != null && pr.last == null) {\n  return TermRangeQuery.newStringRange(pr.propertyName,first,null,pr.firstIncluding,true);\n}\n else if (pr.last != null && !pr.last.equals(pr.first)) {\n  return TermRangeQuery.newStringRange(pr.propertyName,null,last,true,pr.lastIncluding);\n}\n else if (pr.list != null) {\n  BooleanQuery in=new BooleanQuery();\n  for (  PropertyValue value : pr.list) {\n    String strVal=value.getValue(STRING);\n    in.add(new TermQuery(new Term(pr.propertyName,strVal)),BooleanClause.Occur.SHOULD);\n  }\n  return in;\n}\n else if (pr.isNotNullRestriction()) {\n  return new TermRangeQuery(pr.propertyName,null,null,true,true);\n}\n}\n}\nthrow new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1044,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 1228,
        "startColumnNumber" : 8,
        "endLineNumber" : 1228,
        "endColumnNumber" : 104
      },
      "nodeContext" : "throw new IllegalStateException(\"PropertyRestriction not handled \" + pr + \" for index \"+ defn);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.jackrabbit.oak.spi.query.Filter.PropertyRestriction"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 1094,
    "startColumnNumber" : 51,
    "endLineNumber" : 1094,
    "endColumnNumber" : 53
  }, {
    "charLength" : 2,
    "startLineNumber" : 1096,
    "startColumnNumber" : 12,
    "endLineNumber" : 1096,
    "endColumnNumber" : 14
  }, {
    "charLength" : 2,
    "startLineNumber" : 1102,
    "startColumnNumber" : 12,
    "endLineNumber" : 1102,
    "endColumnNumber" : 14
  }, {
    "charLength" : 2,
    "startLineNumber" : 1108,
    "startColumnNumber" : 29,
    "endLineNumber" : 1108,
    "endColumnNumber" : 31
  }, {
    "charLength" : 2,
    "startLineNumber" : 1108,
    "startColumnNumber" : 72,
    "endLineNumber" : 1108,
    "endColumnNumber" : 74
  }, {
    "charLength" : 2,
    "startLineNumber" : 1109,
    "startColumnNumber" : 28,
    "endLineNumber" : 1109,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1109,
    "startColumnNumber" : 70,
    "endLineNumber" : 1109,
    "endColumnNumber" : 72
  }, {
    "charLength" : 2,
    "startLineNumber" : 1110,
    "startColumnNumber" : 20,
    "endLineNumber" : 1110,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 1110,
    "startColumnNumber" : 40,
    "endLineNumber" : 1110,
    "endColumnNumber" : 42
  }, {
    "charLength" : 2,
    "startLineNumber" : 1110,
    "startColumnNumber" : 56,
    "endLineNumber" : 1110,
    "endColumnNumber" : 58
  }, {
    "charLength" : 2,
    "startLineNumber" : 1110,
    "startColumnNumber" : 68,
    "endLineNumber" : 1110,
    "endColumnNumber" : 70
  }, {
    "charLength" : 2,
    "startLineNumber" : 1111,
    "startColumnNumber" : 27,
    "endLineNumber" : 1111,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1113,
    "startColumnNumber" : 58,
    "endLineNumber" : 1113,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1114,
    "startColumnNumber" : 27,
    "endLineNumber" : 1114,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1114,
    "startColumnNumber" : 47,
    "endLineNumber" : 1114,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1115,
    "startColumnNumber" : 58,
    "endLineNumber" : 1115,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1116,
    "startColumnNumber" : 28,
    "endLineNumber" : 1116,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1116,
    "startColumnNumber" : 47,
    "endLineNumber" : 1116,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1117,
    "startColumnNumber" : 27,
    "endLineNumber" : 1117,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1117,
    "startColumnNumber" : 47,
    "endLineNumber" : 1117,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1119,
    "startColumnNumber" : 58,
    "endLineNumber" : 1119,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1119,
    "startColumnNumber" : 88,
    "endLineNumber" : 1119,
    "endColumnNumber" : 90
  }, {
    "charLength" : 2,
    "startLineNumber" : 1120,
    "startColumnNumber" : 27,
    "endLineNumber" : 1120,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1120,
    "startColumnNumber" : 47,
    "endLineNumber" : 1120,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1120,
    "startColumnNumber" : 62,
    "endLineNumber" : 1120,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1122,
    "startColumnNumber" : 58,
    "endLineNumber" : 1122,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1122,
    "startColumnNumber" : 93,
    "endLineNumber" : 1122,
    "endColumnNumber" : 95
  }, {
    "charLength" : 2,
    "startLineNumber" : 1123,
    "startColumnNumber" : 27,
    "endLineNumber" : 1123,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1125,
    "startColumnNumber" : 47,
    "endLineNumber" : 1125,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1127,
    "startColumnNumber" : 62,
    "endLineNumber" : 1127,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1130,
    "startColumnNumber" : 27,
    "endLineNumber" : 1130,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1132,
    "startColumnNumber" : 58,
    "endLineNumber" : 1132,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1138,
    "startColumnNumber" : 31,
    "endLineNumber" : 1138,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 1138,
    "startColumnNumber" : 50,
    "endLineNumber" : 1138,
    "endColumnNumber" : 52
  }, {
    "charLength" : 2,
    "startLineNumber" : 1139,
    "startColumnNumber" : 30,
    "endLineNumber" : 1139,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 1139,
    "startColumnNumber" : 48,
    "endLineNumber" : 1139,
    "endColumnNumber" : 50
  }, {
    "charLength" : 2,
    "startLineNumber" : 1140,
    "startColumnNumber" : 20,
    "endLineNumber" : 1140,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 1140,
    "startColumnNumber" : 40,
    "endLineNumber" : 1140,
    "endColumnNumber" : 42
  }, {
    "charLength" : 2,
    "startLineNumber" : 1140,
    "startColumnNumber" : 56,
    "endLineNumber" : 1140,
    "endColumnNumber" : 58
  }, {
    "charLength" : 2,
    "startLineNumber" : 1140,
    "startColumnNumber" : 68,
    "endLineNumber" : 1140,
    "endColumnNumber" : 70
  }, {
    "charLength" : 2,
    "startLineNumber" : 1141,
    "startColumnNumber" : 27,
    "endLineNumber" : 1141,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1143,
    "startColumnNumber" : 60,
    "endLineNumber" : 1143,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1144,
    "startColumnNumber" : 27,
    "endLineNumber" : 1144,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1144,
    "startColumnNumber" : 47,
    "endLineNumber" : 1144,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1145,
    "startColumnNumber" : 60,
    "endLineNumber" : 1145,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1146,
    "startColumnNumber" : 28,
    "endLineNumber" : 1146,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1146,
    "startColumnNumber" : 47,
    "endLineNumber" : 1146,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1147,
    "startColumnNumber" : 27,
    "endLineNumber" : 1147,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1147,
    "startColumnNumber" : 47,
    "endLineNumber" : 1147,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1149,
    "startColumnNumber" : 60,
    "endLineNumber" : 1149,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1149,
    "startColumnNumber" : 90,
    "endLineNumber" : 1149,
    "endColumnNumber" : 92
  }, {
    "charLength" : 2,
    "startLineNumber" : 1150,
    "startColumnNumber" : 27,
    "endLineNumber" : 1150,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1150,
    "startColumnNumber" : 47,
    "endLineNumber" : 1150,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1150,
    "startColumnNumber" : 62,
    "endLineNumber" : 1150,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1152,
    "startColumnNumber" : 60,
    "endLineNumber" : 1152,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1152,
    "startColumnNumber" : 95,
    "endLineNumber" : 1152,
    "endColumnNumber" : 97
  }, {
    "charLength" : 2,
    "startLineNumber" : 1153,
    "startColumnNumber" : 27,
    "endLineNumber" : 1153,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1155,
    "startColumnNumber" : 47,
    "endLineNumber" : 1155,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1157,
    "startColumnNumber" : 64,
    "endLineNumber" : 1157,
    "endColumnNumber" : 66
  }, {
    "charLength" : 2,
    "startLineNumber" : 1160,
    "startColumnNumber" : 27,
    "endLineNumber" : 1160,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1162,
    "startColumnNumber" : 60,
    "endLineNumber" : 1162,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1167,
    "startColumnNumber" : 29,
    "endLineNumber" : 1167,
    "endColumnNumber" : 31
  }, {
    "charLength" : 2,
    "startLineNumber" : 1167,
    "startColumnNumber" : 48,
    "endLineNumber" : 1167,
    "endColumnNumber" : 50
  }, {
    "charLength" : 2,
    "startLineNumber" : 1168,
    "startColumnNumber" : 28,
    "endLineNumber" : 1168,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1168,
    "startColumnNumber" : 46,
    "endLineNumber" : 1168,
    "endColumnNumber" : 48
  }, {
    "charLength" : 2,
    "startLineNumber" : 1169,
    "startColumnNumber" : 20,
    "endLineNumber" : 1169,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 1169,
    "startColumnNumber" : 40,
    "endLineNumber" : 1169,
    "endColumnNumber" : 42
  }, {
    "charLength" : 2,
    "startLineNumber" : 1169,
    "startColumnNumber" : 56,
    "endLineNumber" : 1169,
    "endColumnNumber" : 58
  }, {
    "charLength" : 2,
    "startLineNumber" : 1169,
    "startColumnNumber" : 68,
    "endLineNumber" : 1169,
    "endColumnNumber" : 70
  }, {
    "charLength" : 2,
    "startLineNumber" : 1170,
    "startColumnNumber" : 27,
    "endLineNumber" : 1170,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1172,
    "startColumnNumber" : 58,
    "endLineNumber" : 1172,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1173,
    "startColumnNumber" : 27,
    "endLineNumber" : 1173,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1173,
    "startColumnNumber" : 47,
    "endLineNumber" : 1173,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1174,
    "startColumnNumber" : 58,
    "endLineNumber" : 1174,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1175,
    "startColumnNumber" : 28,
    "endLineNumber" : 1175,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1175,
    "startColumnNumber" : 47,
    "endLineNumber" : 1175,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1176,
    "startColumnNumber" : 27,
    "endLineNumber" : 1176,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1176,
    "startColumnNumber" : 47,
    "endLineNumber" : 1176,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1178,
    "startColumnNumber" : 58,
    "endLineNumber" : 1178,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1178,
    "startColumnNumber" : 88,
    "endLineNumber" : 1178,
    "endColumnNumber" : 90
  }, {
    "charLength" : 2,
    "startLineNumber" : 1179,
    "startColumnNumber" : 27,
    "endLineNumber" : 1179,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1179,
    "startColumnNumber" : 47,
    "endLineNumber" : 1179,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1179,
    "startColumnNumber" : 62,
    "endLineNumber" : 1179,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1181,
    "startColumnNumber" : 58,
    "endLineNumber" : 1181,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1181,
    "startColumnNumber" : 93,
    "endLineNumber" : 1181,
    "endColumnNumber" : 95
  }, {
    "charLength" : 2,
    "startLineNumber" : 1182,
    "startColumnNumber" : 27,
    "endLineNumber" : 1182,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1184,
    "startColumnNumber" : 47,
    "endLineNumber" : 1184,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1186,
    "startColumnNumber" : 62,
    "endLineNumber" : 1186,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1189,
    "startColumnNumber" : 27,
    "endLineNumber" : 1189,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1191,
    "startColumnNumber" : 58,
    "endLineNumber" : 1191,
    "endColumnNumber" : 60
  }, {
    "charLength" : 2,
    "startLineNumber" : 1196,
    "startColumnNumber" : 20,
    "endLineNumber" : 1196,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 1197,
    "startColumnNumber" : 43,
    "endLineNumber" : 1197,
    "endColumnNumber" : 45
  }, {
    "charLength" : 2,
    "startLineNumber" : 1197,
    "startColumnNumber" : 60,
    "endLineNumber" : 1197,
    "endColumnNumber" : 62
  }, {
    "charLength" : 2,
    "startLineNumber" : 1201,
    "startColumnNumber" : 31,
    "endLineNumber" : 1201,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 1201,
    "startColumnNumber" : 50,
    "endLineNumber" : 1201,
    "endColumnNumber" : 52
  }, {
    "charLength" : 2,
    "startLineNumber" : 1202,
    "startColumnNumber" : 30,
    "endLineNumber" : 1202,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 1202,
    "startColumnNumber" : 48,
    "endLineNumber" : 1202,
    "endColumnNumber" : 50
  }, {
    "charLength" : 2,
    "startLineNumber" : 1203,
    "startColumnNumber" : 20,
    "endLineNumber" : 1203,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 1203,
    "startColumnNumber" : 40,
    "endLineNumber" : 1203,
    "endColumnNumber" : 42
  }, {
    "charLength" : 2,
    "startLineNumber" : 1203,
    "startColumnNumber" : 56,
    "endLineNumber" : 1203,
    "endColumnNumber" : 58
  }, {
    "charLength" : 2,
    "startLineNumber" : 1203,
    "startColumnNumber" : 68,
    "endLineNumber" : 1203,
    "endColumnNumber" : 70
  }, {
    "charLength" : 2,
    "startLineNumber" : 1204,
    "startColumnNumber" : 27,
    "endLineNumber" : 1204,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1206,
    "startColumnNumber" : 50,
    "endLineNumber" : 1206,
    "endColumnNumber" : 52
  }, {
    "charLength" : 2,
    "startLineNumber" : 1207,
    "startColumnNumber" : 27,
    "endLineNumber" : 1207,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1207,
    "startColumnNumber" : 47,
    "endLineNumber" : 1207,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1208,
    "startColumnNumber" : 57,
    "endLineNumber" : 1208,
    "endColumnNumber" : 59
  }, {
    "charLength" : 2,
    "startLineNumber" : 1209,
    "startColumnNumber" : 28,
    "endLineNumber" : 1209,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 1209,
    "startColumnNumber" : 47,
    "endLineNumber" : 1209,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1210,
    "startColumnNumber" : 27,
    "endLineNumber" : 1210,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1210,
    "startColumnNumber" : 47,
    "endLineNumber" : 1210,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1212,
    "startColumnNumber" : 57,
    "endLineNumber" : 1212,
    "endColumnNumber" : 59
  }, {
    "charLength" : 2,
    "startLineNumber" : 1212,
    "startColumnNumber" : 87,
    "endLineNumber" : 1212,
    "endColumnNumber" : 89
  }, {
    "charLength" : 2,
    "startLineNumber" : 1213,
    "startColumnNumber" : 27,
    "endLineNumber" : 1213,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1213,
    "startColumnNumber" : 47,
    "endLineNumber" : 1213,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1213,
    "startColumnNumber" : 62,
    "endLineNumber" : 1213,
    "endColumnNumber" : 64
  }, {
    "charLength" : 2,
    "startLineNumber" : 1215,
    "startColumnNumber" : 57,
    "endLineNumber" : 1215,
    "endColumnNumber" : 59
  }, {
    "charLength" : 2,
    "startLineNumber" : 1215,
    "startColumnNumber" : 92,
    "endLineNumber" : 1215,
    "endColumnNumber" : 94
  }, {
    "charLength" : 2,
    "startLineNumber" : 1216,
    "startColumnNumber" : 27,
    "endLineNumber" : 1216,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1218,
    "startColumnNumber" : 47,
    "endLineNumber" : 1218,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 1220,
    "startColumnNumber" : 54,
    "endLineNumber" : 1220,
    "endColumnNumber" : 56
  }, {
    "charLength" : 2,
    "startLineNumber" : 1223,
    "startColumnNumber" : 27,
    "endLineNumber" : 1223,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 1224,
    "startColumnNumber" : 46,
    "endLineNumber" : 1224,
    "endColumnNumber" : 48
  }, {
    "charLength" : 2,
    "startLineNumber" : 1228,
    "startColumnNumber" : 77,
    "endLineNumber" : 1228,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 101,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 102,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 103,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 104,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 122,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 68,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 90,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 92,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 100,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 101,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 102,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 103,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 104,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 105,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 106,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 107,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 108,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 109,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 110,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 111,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 112,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 113,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 114,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 115,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 116,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 117,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 118,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 119,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 120,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 121,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 122,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 101,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 102,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 103,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 104,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 122,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 122,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 100,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 102,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 105,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 106,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 107,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 122,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 1
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 1
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 1
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 1
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 12
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 12
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 33,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 34,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 35,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 36,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 37,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 38,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 39,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 40,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 41,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 42,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 43,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 44,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 45,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 46,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 47,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 48,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 49,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 50,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 51,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 52,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 53,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 54,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 55,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 56,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 58,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 59,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 60,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 61,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 62,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 63,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 64,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 65,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 66,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 67,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 68,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 69,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 70,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 71,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 72,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 73,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 74,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 75,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 76,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 77,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 78,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 79,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 80,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 81,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 82,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 83,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 84,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 85,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 86,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 87,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 88,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 89,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 90,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 91,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 92,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 93,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 94,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 95,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 96,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 97,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 98,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 99,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 100,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 101,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 102,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 103,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 104,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 105,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 106,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 107,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 108,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 109,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 110,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 111,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 112,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 113,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 114,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 115,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 116,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 117,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 118,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 119,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 120,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 121,
    "layout" : 13
  }, {
    "firstKey" : 29,
    "secondKey" : 122,
    "layout" : 14
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 33,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 34,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 35,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 36,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 37,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 38,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 39,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 52,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 53,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 54,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 55,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 56,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 58,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 59,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 60,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 61,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 62,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 63,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 64,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 65,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 66,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 67,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 68,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 69,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 70,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 71,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 72,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 73,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 74,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 75,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 76,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 77,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 78,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 79,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 80,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 81,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 82,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 83,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 84,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 85,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 86,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 87,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 88,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 89,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 90,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 91,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 92,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 93,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 94,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 95,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 96,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 97,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 98,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 99,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 100,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 101,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 102,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 103,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 104,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 105,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 106,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 107,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 108,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 109,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 110,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 111,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 112,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 113,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 114,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 115,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 116,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 117,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 118,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 119,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 120,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 121,
    "layout" : 11
  }, {
    "firstKey" : 31,
    "secondKey" : 122,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 32,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 32,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 33,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 33,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 33,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 34,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 34,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 34,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 34,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 34,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 34,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 35,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 35,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 35,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 35,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 35,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 35,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 36,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 36,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 36,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 36,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 36,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 36,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 37,
    "secondKey" : 38,
    "layout" : 1
  }, {
    "firstKey" : 37,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 37,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 37,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 38,
    "secondKey" : 37,
    "layout" : 1
  }, {
    "firstKey" : 38,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 38,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 39,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 36,
    "layout" : 1
  }, {
    "firstKey" : 39,
    "secondKey" : 37,
    "layout" : 1
  }, {
    "firstKey" : 39,
    "secondKey" : 38,
    "layout" : 1
  }, {
    "firstKey" : 39,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 39,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 39,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 122,
    "layout" : 6
  }, {
    "firstKey" : 40,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 40,
    "secondKey" : 36,
    "layout" : 1
  }, {
    "firstKey" : 40,
    "secondKey" : 37,
    "layout" : 1
  }, {
    "firstKey" : 40,
    "secondKey" : 38,
    "layout" : 1
  }, {
    "firstKey" : 40,
    "secondKey" : 39,
    "layout" : 1
  }, {
    "firstKey" : 40,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 40,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 100,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 102,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 105,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 106,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 107,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 122,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 41,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 41,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 41,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 41,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 42,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 42,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 42,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 42,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 42,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 42,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 43,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 43,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 43,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 43,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 43,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 43,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 43,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 44,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 44,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 44,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 44,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 45,
    "layout" : 1
  }, {
    "firstKey" : 44,
    "secondKey" : 46,
    "layout" : 1
  }, {
    "firstKey" : 44,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 44,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 45,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 45,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 45,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 45,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 44,
    "layout" : 1
  }, {
    "firstKey" : 45,
    "secondKey" : 46,
    "layout" : 1
  }, {
    "firstKey" : 45,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 45,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 46,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 46,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 46,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 46,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 44,
    "layout" : 1
  }, {
    "firstKey" : 46,
    "secondKey" : 45,
    "layout" : 1
  }, {
    "firstKey" : 46,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 46,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 47,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 47,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 47,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 47,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 47,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 48,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 48,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 48,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 48,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 48,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 49,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 49,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 49,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 50,
    "layout" : 1
  }, {
    "firstKey" : 49,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 49,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 50,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 50,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 50,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 50,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 49,
    "layout" : 1
  }, {
    "firstKey" : 50,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 50,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 50,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 51,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 51,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 51,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 51,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 51,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 51,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 51,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 51,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 51,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 51,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 51,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 51,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 52,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 52,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 52,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 52,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 52,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 52,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 52,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 52,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 52,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 52,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 52,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 52,
    "secondKey" : 53,
    "layout" : 1
  }, {
    "firstKey" : 52,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 53,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 53,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 53,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 53,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 53,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 53,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 53,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 53,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 53,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 53,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 53,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 53,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 53,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 53,
    "secondKey" : 52,
    "layout" : 1
  }, {
    "firstKey" : 53,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 54,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 54,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 54,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 54,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 54,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 54,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 54,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 54,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 54,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 54,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 54,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 54,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 54,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 55,
    "layout" : 1
  }, {
    "firstKey" : 54,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 55,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 55,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 55,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 55,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 55,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 55,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 55,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 55,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 55,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 55,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 54,
    "layout" : 1
  }, {
    "firstKey" : 55,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 55,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 56,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 56,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 56,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 56,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 56,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 56,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 56,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 56,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 56,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 56,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 56,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 56,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 56,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 56,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 56,
    "secondKey" : 59,
    "layout" : 2
  }, {
    "firstKey" : 56,
    "secondKey" : 60,
    "layout" : 2
  }, {
    "firstKey" : 56,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 57,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 57,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 57,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 57,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 57,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 57,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 57,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 57,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 57,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 57,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 57,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 57,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 57,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 57,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 57,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 57,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 57,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 57,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 57,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 57,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 57,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 57,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 58,
    "layout" : 1
  }, {
    "firstKey" : 57,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 57,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 58,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 58,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 58,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 8,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 9,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 10,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 11,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 12,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 13,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 14,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 15,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 16,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 17,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 24,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 25,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 26,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 27,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 28,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 29,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 30,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 31,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 32,
    "layout" : 12
  }, {
    "firstKey" : 58,
    "secondKey" : 33,
    "layout" : 12
  }, {
    "firstKey" : 58,
    "secondKey" : 34,
    "layout" : 12
  }, {
    "firstKey" : 58,
    "secondKey" : 35,
    "layout" : 12
  }, {
    "firstKey" : 58,
    "secondKey" : 36,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 37,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 38,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 39,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 58,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 45,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 46,
    "layout" : 10
  }, {
    "firstKey" : 58,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 58,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 58,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 58,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 58,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 58,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 58,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 58,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 58,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 58,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 58,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 58,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 58,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 58,
    "secondKey" : 61,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 62,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 63,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 64,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 65,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 66,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 67,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 68,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 69,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 70,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 71,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 72,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 73,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 74,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 75,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 76,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 77,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 78,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 79,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 80,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 81,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 82,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 83,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 84,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 85,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 86,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 87,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 88,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 89,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 90,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 91,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 92,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 93,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 94,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 95,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 96,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 97,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 98,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 99,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 100,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 101,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 102,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 103,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 104,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 105,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 106,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 107,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 108,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 109,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 110,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 111,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 112,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 113,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 114,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 115,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 116,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 117,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 118,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 119,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 120,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 121,
    "layout" : 13
  }, {
    "firstKey" : 58,
    "secondKey" : 122,
    "layout" : 14
  }, {
    "firstKey" : 59,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 59,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 59,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 59,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 59,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 59,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 59,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 59,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 59,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 59,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 59,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 59,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 59,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 59,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 59,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 59,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 59,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 59,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 59,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 59,
    "secondKey" : 57,
    "layout" : 2
  }, {
    "firstKey" : 59,
    "secondKey" : 58,
    "layout" : 2
  }, {
    "firstKey" : 59,
    "secondKey" : 60,
    "layout" : 1
  }, {
    "firstKey" : 59,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 59,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 60,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 60,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 60,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 28,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 29,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 30,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 31,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 60,
    "secondKey" : 33,
    "layout" : 10
  }, {
    "firstKey" : 60,
    "secondKey" : 34,
    "layout" : 10
  }, {
    "firstKey" : 60,
    "secondKey" : 35,
    "layout" : 10
  }, {
    "firstKey" : 60,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 60,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 60,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 60,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 60,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 60,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 60,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 60,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 60,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 60,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 60,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 60,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 60,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 60,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 60,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 60,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 60,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 60,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 60,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 60,
    "secondKey" : 61,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 62,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 63,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 64,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 65,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 66,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 67,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 68,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 69,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 70,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 71,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 72,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 73,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 74,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 75,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 76,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 77,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 78,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 79,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 80,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 81,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 82,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 83,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 84,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 85,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 86,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 87,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 88,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 89,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 90,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 91,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 92,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 93,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 94,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 95,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 96,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 97,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 98,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 99,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 100,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 101,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 102,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 103,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 104,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 105,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 106,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 107,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 108,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 109,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 110,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 111,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 112,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 113,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 114,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 115,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 116,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 117,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 118,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 119,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 120,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 121,
    "layout" : 11
  }, {
    "firstKey" : 60,
    "secondKey" : 122,
    "layout" : 12
  }, {
    "firstKey" : 61,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 61,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 61,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 61,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 62,
    "layout" : 2
  }, {
    "firstKey" : 61,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 61,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 61,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 62,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 62,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 62,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 62,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 61,
    "layout" : 2
  }, {
    "firstKey" : 62,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 62,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 62,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 63,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 63,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 63,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 63,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 64,
    "layout" : 2
  }, {
    "firstKey" : 63,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 63,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 63,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 64,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 64,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 64,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 64,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 63,
    "layout" : 2
  }, {
    "firstKey" : 64,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 64,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 64,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 65,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 65,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 65,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 65,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 65,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 65,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 65,
    "secondKey" : 66,
    "layout" : 2
  }, {
    "firstKey" : 65,
    "secondKey" : 67,
    "layout" : 2
  }, {
    "firstKey" : 65,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 65,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 65,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 65,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 65,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 66,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 66,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 66,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 66,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 66,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 66,
    "secondKey" : 67,
    "layout" : 1
  }, {
    "firstKey" : 66,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 66,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 66,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 66,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 66,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 67,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 67,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 67,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 67,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 67,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 67,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 67,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 67,
    "secondKey" : 65,
    "layout" : 2
  }, {
    "firstKey" : 67,
    "secondKey" : 66,
    "layout" : 1
  }, {
    "firstKey" : 67,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 67,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 67,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 67,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 67,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 68,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 68,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 68,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 68,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 68,
    "secondKey" : 65,
    "layout" : 1
  }, {
    "firstKey" : 68,
    "secondKey" : 66,
    "layout" : 1
  }, {
    "firstKey" : 68,
    "secondKey" : 67,
    "layout" : 1
  }, {
    "firstKey" : 68,
    "secondKey" : 69,
    "layout" : 2
  }, {
    "firstKey" : 68,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 68,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 68,
    "secondKey" : 122,
    "layout" : 6
  }, {
    "firstKey" : 69,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 69,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 69,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 69,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 69,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 69,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 69,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 69,
    "secondKey" : 65,
    "layout" : 1
  }, {
    "firstKey" : 69,
    "secondKey" : 66,
    "layout" : 1
  }, {
    "firstKey" : 69,
    "secondKey" : 67,
    "layout" : 1
  }, {
    "firstKey" : 69,
    "secondKey" : 68,
    "layout" : 1
  }, {
    "firstKey" : 69,
    "secondKey" : 70,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 73,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 74,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 75,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 78,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 79,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 80,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 83,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 84,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 69,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 100,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 102,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 105,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 106,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 107,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 69,
    "secondKey" : 122,
    "layout" : 5
  }, {
    "firstKey" : 70,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 70,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 70,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 70,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 70,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 70,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 70,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 70,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 70,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 70,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 71,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 71,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 71,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 71,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 71,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 71,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 71,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 71,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 71,
    "secondKey" : 72,
    "layout" : 2
  }, {
    "firstKey" : 71,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 71,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 71,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 72,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 72,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 72,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 72,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 72,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 72,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 72,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 72,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 72,
    "secondKey" : 71,
    "layout" : 2
  }, {
    "firstKey" : 72,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 72,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 72,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 73,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 73,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 73,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 73,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 73,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 73,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 73,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 73,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 74,
    "layout" : 1
  }, {
    "firstKey" : 73,
    "secondKey" : 75,
    "layout" : 1
  }, {
    "firstKey" : 73,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 73,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 73,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 74,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 74,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 74,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 74,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 74,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 74,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 74,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 74,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 74,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 73,
    "layout" : 1
  }, {
    "firstKey" : 74,
    "secondKey" : 75,
    "layout" : 1
  }, {
    "firstKey" : 74,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 74,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 74,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 75,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 75,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 75,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 75,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 75,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 75,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 75,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 75,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 75,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 73,
    "layout" : 1
  }, {
    "firstKey" : 75,
    "secondKey" : 74,
    "layout" : 1
  }, {
    "firstKey" : 75,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 75,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 75,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 76,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 76,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 76,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 76,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 76,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 76,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 76,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 76,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 76,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 76,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 76,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 76,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 76,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 76,
    "secondKey" : 77,
    "layout" : 2
  }, {
    "firstKey" : 76,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 76,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 76,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 77,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 77,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 77,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 77,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 77,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 77,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 77,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 77,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 77,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 77,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 77,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 77,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 77,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 77,
    "secondKey" : 76,
    "layout" : 2
  }, {
    "firstKey" : 77,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 77,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 103,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 104,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 105,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 106,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 107,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 112,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 113,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 114,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 115,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 116,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 117,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 118,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 119,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 120,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 121,
    "layout" : 7
  }, {
    "firstKey" : 77,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 78,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 78,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 78,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 78,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 78,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 78,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 78,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 78,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 78,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 78,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 78,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 78,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 78,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 79,
    "layout" : 1
  }, {
    "firstKey" : 78,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 78,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 78,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 79,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 79,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 79,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 79,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 79,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 79,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 79,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 79,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 79,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 79,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 79,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 79,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 79,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 79,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 78,
    "layout" : 1
  }, {
    "firstKey" : 79,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 79,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 79,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 80,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 80,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 80,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 80,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 80,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 80,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 80,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 80,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 80,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 80,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 80,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 80,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 80,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 80,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 80,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 80,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 80,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 80,
    "secondKey" : 81,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 82,
    "layout" : 2
  }, {
    "firstKey" : 80,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 80,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 80,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 81,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 81,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 81,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 81,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 81,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 81,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 81,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 81,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 81,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 81,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 81,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 81,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 81,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 81,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 81,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 81,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 81,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 81,
    "secondKey" : 82,
    "layout" : 1
  }, {
    "firstKey" : 81,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 81,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 81,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 82,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 82,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 82,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 82,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 82,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 82,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 82,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 82,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 82,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 82,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 82,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 82,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 82,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 82,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 82,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 82,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 82,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 82,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 82,
    "secondKey" : 81,
    "layout" : 1
  }, {
    "firstKey" : 82,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 82,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 82,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 83,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 83,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 83,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 83,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 83,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 83,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 83,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 83,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 83,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 83,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 83,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 83,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 83,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 83,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 83,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 83,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 83,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 83,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 84,
    "layout" : 1
  }, {
    "firstKey" : 83,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 83,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 83,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 84,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 84,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 84,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 84,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 84,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 84,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 84,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 84,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 84,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 84,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 84,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 84,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 84,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 84,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 84,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 84,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 84,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 84,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 83,
    "layout" : 1
  }, {
    "firstKey" : 84,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 84,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 84,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 85,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 85,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 85,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 85,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 85,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 85,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 85,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 85,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 85,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 85,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 85,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 85,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 85,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 85,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 85,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 85,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 85,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 85,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 85,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 85,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 85,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 85,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 85,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 88,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 89,
    "layout" : 2
  }, {
    "firstKey" : 85,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 85,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 86,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 86,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 86,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 86,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 86,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 86,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 86,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 86,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 86,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 86,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 86,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 86,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 86,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 86,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 86,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 86,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 86,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 86,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 86,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 86,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 86,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 86,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 86,
    "secondKey" : 87,
    "layout" : 1
  }, {
    "firstKey" : 86,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 86,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 86,
    "secondKey" : 90,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 91,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 92,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 93,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 94,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 95,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 96,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 103,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 104,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 105,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 106,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 107,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 108,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 109,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 110,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 111,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 117,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 118,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 119,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 120,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 121,
    "layout" : 9
  }, {
    "firstKey" : 86,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 87,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 87,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 87,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 8,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 9,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 10,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 11,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 12,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 13,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 14,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 15,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 16,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 17,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 18,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 19,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 20,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 24,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 25,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 26,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 27,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 28,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 29,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 30,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 31,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 32,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 33,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 34,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 35,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 36,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 37,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 38,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 39,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 40,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 41,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 42,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 43,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 44,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 45,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 46,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 47,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 48,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 49,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 50,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 51,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 52,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 53,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 54,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 55,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 56,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 58,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 59,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 60,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 61,
    "layout" : 12
  }, {
    "firstKey" : 87,
    "secondKey" : 62,
    "layout" : 12
  }, {
    "firstKey" : 87,
    "secondKey" : 63,
    "layout" : 12
  }, {
    "firstKey" : 87,
    "secondKey" : 64,
    "layout" : 12
  }, {
    "firstKey" : 87,
    "secondKey" : 65,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 66,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 67,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 68,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 69,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 70,
    "layout" : 11
  }, {
    "firstKey" : 87,
    "secondKey" : 71,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 72,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 73,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 74,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 75,
    "layout" : 10
  }, {
    "firstKey" : 87,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 87,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 87,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 87,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 87,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 87,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 87,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 87,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 87,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 87,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 87,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 87,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 87,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 87,
    "secondKey" : 90,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 91,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 92,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 93,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 94,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 95,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 96,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 97,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 98,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 99,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 100,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 101,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 102,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 103,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 104,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 105,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 106,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 107,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 108,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 109,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 110,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 111,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 112,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 113,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 114,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 115,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 116,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 117,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 118,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 119,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 120,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 121,
    "layout" : 13
  }, {
    "firstKey" : 87,
    "secondKey" : 122,
    "layout" : 14
  }, {
    "firstKey" : 88,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 88,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 88,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 88,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 88,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 88,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 88,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 88,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 88,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 88,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 88,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 88,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 88,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 88,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 88,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 88,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 88,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 88,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 88,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 88,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 88,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 88,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 88,
    "secondKey" : 85,
    "layout" : 2
  }, {
    "firstKey" : 88,
    "secondKey" : 86,
    "layout" : 2
  }, {
    "firstKey" : 88,
    "secondKey" : 87,
    "layout" : 2
  }, {
    "firstKey" : 88,
    "secondKey" : 89,
    "layout" : 1
  }, {
    "firstKey" : 88,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 97,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 98,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 99,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 100,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 101,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 102,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 108,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 109,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 110,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 111,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 112,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 113,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 114,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 115,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 116,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 118,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 119,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 88,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 89,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 89,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 89,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 28,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 29,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 30,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 31,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 32,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 33,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 34,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 35,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 36,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 37,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 38,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 39,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 52,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 53,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 54,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 55,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 56,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 58,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 59,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 60,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 61,
    "layout" : 10
  }, {
    "firstKey" : 89,
    "secondKey" : 62,
    "layout" : 10
  }, {
    "firstKey" : 89,
    "secondKey" : 63,
    "layout" : 10
  }, {
    "firstKey" : 89,
    "secondKey" : 64,
    "layout" : 10
  }, {
    "firstKey" : 89,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 89,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 89,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 89,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 89,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 89,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 89,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 89,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 89,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 89,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 89,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 89,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 89,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 89,
    "secondKey" : 90,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 91,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 92,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 93,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 94,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 95,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 96,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 97,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 98,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 99,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 100,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 101,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 102,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 103,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 104,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 105,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 106,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 107,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 108,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 109,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 110,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 111,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 112,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 113,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 114,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 115,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 116,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 117,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 118,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 119,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 120,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 121,
    "layout" : 11
  }, {
    "firstKey" : 89,
    "secondKey" : 122,
    "layout" : 12
  }, {
    "firstKey" : 90,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 90,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 90,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 90,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 90,
    "secondKey" : 91,
    "layout" : 1
  }, {
    "firstKey" : 90,
    "secondKey" : 92,
    "layout" : 1
  }, {
    "firstKey" : 90,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 100,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 101,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 102,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 103,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 104,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 105,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 106,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 107,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 108,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 109,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 110,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 111,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 112,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 113,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 114,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 115,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 116,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 117,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 118,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 119,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 120,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 121,
    "layout" : 2
  }, {
    "firstKey" : 90,
    "secondKey" : 122,
    "layout" : 4
  }, {
    "firstKey" : 91,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 91,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 91,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 91,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 91,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 91,
    "secondKey" : 92,
    "layout" : 1
  }, {
    "firstKey" : 91,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 91,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 92,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 92,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 92,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 92,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 92,
    "secondKey" : 91,
    "layout" : 2
  }, {
    "firstKey" : 92,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 108,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 109,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 110,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 111,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 117,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 119,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 120,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 121,
    "layout" : 6
  }, {
    "firstKey" : 92,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 93,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 93,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 93,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 93,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 93,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 94,
    "layout" : 2
  }, {
    "firstKey" : 93,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 93,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 94,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 94,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 94,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 94,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 94,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 93,
    "layout" : 2
  }, {
    "firstKey" : 94,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 94,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 95,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 95,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 95,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 95,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 95,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 96,
    "layout" : 2
  }, {
    "firstKey" : 95,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 95,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 96,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 96,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 96,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 96,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 96,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 95,
    "layout" : 2
  }, {
    "firstKey" : 96,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 96,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 97,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 97,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 97,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 97,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 97,
    "secondKey" : 98,
    "layout" : 2
  }, {
    "firstKey" : 97,
    "secondKey" : 99,
    "layout" : 2
  }, {
    "firstKey" : 97,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 97,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 97,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 97,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 98,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 98,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 98,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 98,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 98,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 98,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 98,
    "secondKey" : 99,
    "layout" : 1
  }, {
    "firstKey" : 98,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 98,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 98,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 98,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 99,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 99,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 99,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 99,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 99,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 99,
    "secondKey" : 97,
    "layout" : 2
  }, {
    "firstKey" : 99,
    "secondKey" : 98,
    "layout" : 1
  }, {
    "firstKey" : 99,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 99,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 99,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 99,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 100,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 100,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 100,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 100,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 57,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 58,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 59,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 60,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 61,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 62,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 63,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 64,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 65,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 66,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 67,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 68,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 69,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 70,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 71,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 72,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 73,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 74,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 75,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 76,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 77,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 78,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 79,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 80,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 81,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 82,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 83,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 84,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 85,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 86,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 87,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 88,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 89,
    "layout" : 5
  }, {
    "firstKey" : 100,
    "secondKey" : 90,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 91,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 92,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 93,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 94,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 95,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 96,
    "layout" : 4
  }, {
    "firstKey" : 100,
    "secondKey" : 97,
    "layout" : 1
  }, {
    "firstKey" : 100,
    "secondKey" : 98,
    "layout" : 1
  }, {
    "firstKey" : 100,
    "secondKey" : 99,
    "layout" : 1
  }, {
    "firstKey" : 100,
    "secondKey" : 101,
    "layout" : 2
  }, {
    "firstKey" : 100,
    "secondKey" : 102,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 103,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 104,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 100,
    "secondKey" : 122,
    "layout" : 6
  }, {
    "firstKey" : 101,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 101,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 101,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 101,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 57,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 58,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 59,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 60,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 61,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 62,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 63,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 64,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 65,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 66,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 67,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 68,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 69,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 70,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 71,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 72,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 73,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 74,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 75,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 76,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 77,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 78,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 79,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 80,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 81,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 82,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 83,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 84,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 85,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 86,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 87,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 88,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 89,
    "layout" : 4
  }, {
    "firstKey" : 101,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 101,
    "secondKey" : 97,
    "layout" : 1
  }, {
    "firstKey" : 101,
    "secondKey" : 98,
    "layout" : 1
  }, {
    "firstKey" : 101,
    "secondKey" : 99,
    "layout" : 1
  }, {
    "firstKey" : 101,
    "secondKey" : 100,
    "layout" : 1
  }, {
    "firstKey" : 101,
    "secondKey" : 102,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 103,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 104,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 105,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 106,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 107,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 108,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 109,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 110,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 111,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 112,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 113,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 114,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 115,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 116,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 117,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 118,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 119,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 120,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 121,
    "layout" : 2
  }, {
    "firstKey" : 101,
    "secondKey" : 122,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 102,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 102,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 102,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 102,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 102,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 112,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 113,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 114,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 115,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 116,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 120,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 121,
    "layout" : 5
  }, {
    "firstKey" : 102,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 103,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 103,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 103,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 103,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 103,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 103,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 100,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 102,
    "layout" : 4
  }, {
    "firstKey" : 103,
    "secondKey" : 104,
    "layout" : 2
  }, {
    "firstKey" : 103,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 103,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 104,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 104,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 104,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 104,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 57,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 58,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 59,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 60,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 61,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 62,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 63,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 64,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 65,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 66,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 67,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 68,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 69,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 70,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 71,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 72,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 73,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 74,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 75,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 76,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 77,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 78,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 79,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 80,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 81,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 82,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 83,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 84,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 85,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 86,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 87,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 88,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 89,
    "layout" : 6
  }, {
    "firstKey" : 104,
    "secondKey" : 90,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 91,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 92,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 93,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 94,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 95,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 96,
    "layout" : 5
  }, {
    "firstKey" : 104,
    "secondKey" : 97,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 98,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 99,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 100,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 101,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 102,
    "layout" : 4
  }, {
    "firstKey" : 104,
    "secondKey" : 103,
    "layout" : 2
  }, {
    "firstKey" : 104,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 104,
    "secondKey" : 122,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 105,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 105,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 105,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 105,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 105,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 105,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 106,
    "layout" : 1
  }, {
    "firstKey" : 105,
    "secondKey" : 107,
    "layout" : 1
  }, {
    "firstKey" : 105,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 105,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 106,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 106,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 106,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 106,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 106,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 106,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 106,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 105,
    "layout" : 1
  }, {
    "firstKey" : 106,
    "secondKey" : 107,
    "layout" : 1
  }, {
    "firstKey" : 106,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 106,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 107,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 107,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 107,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 107,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 107,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 107,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 107,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 105,
    "layout" : 1
  }, {
    "firstKey" : 107,
    "secondKey" : 106,
    "layout" : 1
  }, {
    "firstKey" : 107,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 107,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 108,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 108,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 108,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 108,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 108,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 108,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 108,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 108,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 108,
    "secondKey" : 105,
    "layout" : 4
  }, {
    "firstKey" : 108,
    "secondKey" : 106,
    "layout" : 4
  }, {
    "firstKey" : 108,
    "secondKey" : 107,
    "layout" : 4
  }, {
    "firstKey" : 108,
    "secondKey" : 109,
    "layout" : 2
  }, {
    "firstKey" : 108,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 108,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 109,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 109,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 109,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 109,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 58,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 59,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 60,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 61,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 62,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 63,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 64,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 65,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 66,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 67,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 68,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 69,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 70,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 71,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 72,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 73,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 74,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 75,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 76,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 77,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 78,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 79,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 80,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 81,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 82,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 83,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 84,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 85,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 86,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 87,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 88,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 89,
    "layout" : 7
  }, {
    "firstKey" : 109,
    "secondKey" : 90,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 91,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 92,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 93,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 94,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 95,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 96,
    "layout" : 6
  }, {
    "firstKey" : 109,
    "secondKey" : 97,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 98,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 99,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 100,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 101,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 102,
    "layout" : 5
  }, {
    "firstKey" : 109,
    "secondKey" : 103,
    "layout" : 4
  }, {
    "firstKey" : 109,
    "secondKey" : 104,
    "layout" : 4
  }, {
    "firstKey" : 109,
    "secondKey" : 105,
    "layout" : 4
  }, {
    "firstKey" : 109,
    "secondKey" : 106,
    "layout" : 4
  }, {
    "firstKey" : 109,
    "secondKey" : 107,
    "layout" : 4
  }, {
    "firstKey" : 109,
    "secondKey" : 108,
    "layout" : 2
  }, {
    "firstKey" : 109,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 109,
    "secondKey" : 122,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 110,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 110,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 110,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 110,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 110,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 110,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 110,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 110,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 110,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 110,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 110,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 111,
    "layout" : 1
  }, {
    "firstKey" : 110,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 110,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 111,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 111,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 111,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 111,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 111,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 111,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 111,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 111,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 111,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 111,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 111,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 111,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 110,
    "layout" : 1
  }, {
    "firstKey" : 111,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 111,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 112,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 112,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 112,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 112,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 112,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 112,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 112,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 112,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 112,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 112,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 112,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 112,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 112,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 112,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 112,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 112,
    "secondKey" : 113,
    "layout" : 2
  }, {
    "firstKey" : 112,
    "secondKey" : 114,
    "layout" : 2
  }, {
    "firstKey" : 112,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 112,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 113,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 113,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 113,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 113,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 113,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 113,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 113,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 113,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 113,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 113,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 113,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 113,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 113,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 113,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 113,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 113,
    "secondKey" : 114,
    "layout" : 1
  }, {
    "firstKey" : 113,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 113,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 114,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 114,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 114,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 114,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 114,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 114,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 114,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 114,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 114,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 114,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 114,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 114,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 114,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 114,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 114,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 114,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 114,
    "secondKey" : 113,
    "layout" : 1
  }, {
    "firstKey" : 114,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 114,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 115,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 115,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 115,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 115,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 115,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 115,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 115,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 115,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 115,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 115,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 115,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 115,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 115,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 115,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 115,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 115,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 116,
    "layout" : 1
  }, {
    "firstKey" : 115,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 115,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 116,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 116,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 116,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 116,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 116,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 116,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 116,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 116,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 116,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 116,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 116,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 116,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 116,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 116,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 116,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 116,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 115,
    "layout" : 1
  }, {
    "firstKey" : 116,
    "secondKey" : 117,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 118,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 119,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 121,
    "layout" : 4
  }, {
    "firstKey" : 116,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 117,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 117,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 117,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 117,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 117,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 117,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 117,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 117,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 117,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 117,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 117,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 117,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 117,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 117,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 117,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 117,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 117,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 117,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 117,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 117,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 117,
    "secondKey" : 118,
    "layout" : 2
  }, {
    "firstKey" : 117,
    "secondKey" : 119,
    "layout" : 2
  }, {
    "firstKey" : 117,
    "secondKey" : 120,
    "layout" : 2
  }, {
    "firstKey" : 117,
    "secondKey" : 121,
    "layout" : 2
  }, {
    "firstKey" : 117,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 118,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 118,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 118,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 52,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 53,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 54,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 55,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 56,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 58,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 59,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 60,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 61,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 62,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 63,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 64,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 65,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 66,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 67,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 68,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 69,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 70,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 71,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 72,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 73,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 74,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 75,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 76,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 77,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 78,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 79,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 80,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 81,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 82,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 83,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 84,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 85,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 86,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 87,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 88,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 89,
    "layout" : 9
  }, {
    "firstKey" : 118,
    "secondKey" : 90,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 91,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 92,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 93,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 94,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 95,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 96,
    "layout" : 8
  }, {
    "firstKey" : 118,
    "secondKey" : 97,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 98,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 99,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 100,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 101,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 102,
    "layout" : 7
  }, {
    "firstKey" : 118,
    "secondKey" : 103,
    "layout" : 6
  }, {
    "firstKey" : 118,
    "secondKey" : 104,
    "layout" : 6
  }, {
    "firstKey" : 118,
    "secondKey" : 105,
    "layout" : 6
  }, {
    "firstKey" : 118,
    "secondKey" : 106,
    "layout" : 6
  }, {
    "firstKey" : 118,
    "secondKey" : 107,
    "layout" : 6
  }, {
    "firstKey" : 118,
    "secondKey" : 108,
    "layout" : 5
  }, {
    "firstKey" : 118,
    "secondKey" : 109,
    "layout" : 5
  }, {
    "firstKey" : 118,
    "secondKey" : 110,
    "layout" : 5
  }, {
    "firstKey" : 118,
    "secondKey" : 111,
    "layout" : 5
  }, {
    "firstKey" : 118,
    "secondKey" : 112,
    "layout" : 4
  }, {
    "firstKey" : 118,
    "secondKey" : 113,
    "layout" : 4
  }, {
    "firstKey" : 118,
    "secondKey" : 114,
    "layout" : 4
  }, {
    "firstKey" : 118,
    "secondKey" : 115,
    "layout" : 4
  }, {
    "firstKey" : 118,
    "secondKey" : 116,
    "layout" : 4
  }, {
    "firstKey" : 118,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 118,
    "secondKey" : 119,
    "layout" : 1
  }, {
    "firstKey" : 118,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 118,
    "secondKey" : 121,
    "layout" : 3
  }, {
    "firstKey" : 118,
    "secondKey" : 122,
    "layout" : 10
  }, {
    "firstKey" : 119,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 119,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 119,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 119,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 4,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 5,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 8,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 9,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 10,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 11,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 12,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 13,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 14,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 15,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 16,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 17,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 21,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 22,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 23,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 24,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 25,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 26,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 27,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 28,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 29,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 30,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 31,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 32,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 33,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 34,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 35,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 36,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 37,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 38,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 39,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 40,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 41,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 42,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 43,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 44,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 45,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 46,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 47,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 48,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 49,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 50,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 51,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 52,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 53,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 54,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 55,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 56,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 57,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 58,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 59,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 60,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 61,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 62,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 63,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 64,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 65,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 66,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 67,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 68,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 69,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 70,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 71,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 72,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 73,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 74,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 75,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 76,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 77,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 78,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 79,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 80,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 81,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 82,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 83,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 84,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 85,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 86,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 87,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 88,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 89,
    "layout" : 14
  }, {
    "firstKey" : 119,
    "secondKey" : 90,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 91,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 92,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 93,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 94,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 95,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 96,
    "layout" : 13
  }, {
    "firstKey" : 119,
    "secondKey" : 97,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 98,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 99,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 100,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 101,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 102,
    "layout" : 12
  }, {
    "firstKey" : 119,
    "secondKey" : 103,
    "layout" : 11
  }, {
    "firstKey" : 119,
    "secondKey" : 104,
    "layout" : 11
  }, {
    "firstKey" : 119,
    "secondKey" : 105,
    "layout" : 11
  }, {
    "firstKey" : 119,
    "secondKey" : 106,
    "layout" : 11
  }, {
    "firstKey" : 119,
    "secondKey" : 107,
    "layout" : 11
  }, {
    "firstKey" : 119,
    "secondKey" : 108,
    "layout" : 10
  }, {
    "firstKey" : 119,
    "secondKey" : 109,
    "layout" : 10
  }, {
    "firstKey" : 119,
    "secondKey" : 110,
    "layout" : 10
  }, {
    "firstKey" : 119,
    "secondKey" : 111,
    "layout" : 10
  }, {
    "firstKey" : 119,
    "secondKey" : 112,
    "layout" : 9
  }, {
    "firstKey" : 119,
    "secondKey" : 113,
    "layout" : 9
  }, {
    "firstKey" : 119,
    "secondKey" : 114,
    "layout" : 9
  }, {
    "firstKey" : 119,
    "secondKey" : 115,
    "layout" : 9
  }, {
    "firstKey" : 119,
    "secondKey" : 116,
    "layout" : 9
  }, {
    "firstKey" : 119,
    "secondKey" : 117,
    "layout" : 8
  }, {
    "firstKey" : 119,
    "secondKey" : 118,
    "layout" : 6
  }, {
    "firstKey" : 119,
    "secondKey" : 120,
    "layout" : 8
  }, {
    "firstKey" : 119,
    "secondKey" : 121,
    "layout" : 8
  }, {
    "firstKey" : 119,
    "secondKey" : 122,
    "layout" : 15
  }, {
    "firstKey" : 120,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 120,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 120,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 120,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 33,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 34,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 35,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 36,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 37,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 38,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 39,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 40,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 41,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 42,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 43,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 44,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 45,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 46,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 47,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 48,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 49,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 50,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 51,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 58,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 59,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 60,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 61,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 62,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 63,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 64,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 65,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 66,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 67,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 68,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 69,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 70,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 71,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 72,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 73,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 74,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 75,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 76,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 77,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 78,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 79,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 80,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 81,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 82,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 83,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 84,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 85,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 86,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 87,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 88,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 89,
    "layout" : 8
  }, {
    "firstKey" : 120,
    "secondKey" : 90,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 91,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 92,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 93,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 94,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 95,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 96,
    "layout" : 7
  }, {
    "firstKey" : 120,
    "secondKey" : 97,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 98,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 99,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 100,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 101,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 102,
    "layout" : 6
  }, {
    "firstKey" : 120,
    "secondKey" : 103,
    "layout" : 5
  }, {
    "firstKey" : 120,
    "secondKey" : 104,
    "layout" : 5
  }, {
    "firstKey" : 120,
    "secondKey" : 105,
    "layout" : 5
  }, {
    "firstKey" : 120,
    "secondKey" : 106,
    "layout" : 5
  }, {
    "firstKey" : 120,
    "secondKey" : 107,
    "layout" : 5
  }, {
    "firstKey" : 120,
    "secondKey" : 108,
    "layout" : 4
  }, {
    "firstKey" : 120,
    "secondKey" : 109,
    "layout" : 4
  }, {
    "firstKey" : 120,
    "secondKey" : 110,
    "layout" : 4
  }, {
    "firstKey" : 120,
    "secondKey" : 111,
    "layout" : 4
  }, {
    "firstKey" : 120,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 120,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 120,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 120,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 120,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 120,
    "secondKey" : 117,
    "layout" : 2
  }, {
    "firstKey" : 120,
    "secondKey" : 118,
    "layout" : 2
  }, {
    "firstKey" : 120,
    "secondKey" : 119,
    "layout" : 2
  }, {
    "firstKey" : 120,
    "secondKey" : 121,
    "layout" : 1
  }, {
    "firstKey" : 120,
    "secondKey" : 122,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 121,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 121,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 121,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 28,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 29,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 30,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 31,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 32,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 33,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 34,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 35,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 36,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 37,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 38,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 39,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 52,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 53,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 54,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 55,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 56,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 58,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 59,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 60,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 61,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 62,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 63,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 64,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 65,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 66,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 67,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 68,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 69,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 70,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 71,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 72,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 73,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 74,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 75,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 76,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 77,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 78,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 79,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 80,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 81,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 82,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 83,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 84,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 85,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 86,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 87,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 88,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 89,
    "layout" : 11
  }, {
    "firstKey" : 121,
    "secondKey" : 90,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 91,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 92,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 93,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 94,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 95,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 96,
    "layout" : 10
  }, {
    "firstKey" : 121,
    "secondKey" : 97,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 98,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 99,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 100,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 101,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 102,
    "layout" : 9
  }, {
    "firstKey" : 121,
    "secondKey" : 103,
    "layout" : 8
  }, {
    "firstKey" : 121,
    "secondKey" : 104,
    "layout" : 8
  }, {
    "firstKey" : 121,
    "secondKey" : 105,
    "layout" : 8
  }, {
    "firstKey" : 121,
    "secondKey" : 106,
    "layout" : 8
  }, {
    "firstKey" : 121,
    "secondKey" : 107,
    "layout" : 8
  }, {
    "firstKey" : 121,
    "secondKey" : 108,
    "layout" : 7
  }, {
    "firstKey" : 121,
    "secondKey" : 109,
    "layout" : 7
  }, {
    "firstKey" : 121,
    "secondKey" : 110,
    "layout" : 7
  }, {
    "firstKey" : 121,
    "secondKey" : 111,
    "layout" : 7
  }, {
    "firstKey" : 121,
    "secondKey" : 112,
    "layout" : 6
  }, {
    "firstKey" : 121,
    "secondKey" : 113,
    "layout" : 6
  }, {
    "firstKey" : 121,
    "secondKey" : 114,
    "layout" : 6
  }, {
    "firstKey" : 121,
    "secondKey" : 115,
    "layout" : 6
  }, {
    "firstKey" : 121,
    "secondKey" : 116,
    "layout" : 6
  }, {
    "firstKey" : 121,
    "secondKey" : 117,
    "layout" : 5
  }, {
    "firstKey" : 121,
    "secondKey" : 118,
    "layout" : 5
  }, {
    "firstKey" : 121,
    "secondKey" : 119,
    "layout" : 5
  }, {
    "firstKey" : 121,
    "secondKey" : 120,
    "layout" : 4
  }, {
    "firstKey" : 121,
    "secondKey" : 122,
    "layout" : 12
  }, {
    "firstKey" : 122,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 58,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 59,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 60,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 61,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 62,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 63,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 64,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 65,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 66,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 67,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 68,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 69,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 70,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 71,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 72,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 73,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 74,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 75,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 76,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 77,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 78,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 79,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 80,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 81,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 82,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 83,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 84,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 85,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 86,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 87,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 88,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 89,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 90,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 91,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 92,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 93,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 94,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 95,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 96,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 97,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 98,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 99,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 100,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 101,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 102,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 103,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 104,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 105,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 106,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 107,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 108,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 109,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 110,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 111,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 112,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 113,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 114,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 115,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 116,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 117,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 118,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 119,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 120,
    "layout" : 3
  }, {
    "firstKey" : 122,
    "secondKey" : 121,
    "layout" : 3
  } ]
}