{
  "id" : 90,
  "expression" : "DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ReplicatorRateLimiterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 161,
      "startLineNumber" : 107,
      "startColumnNumber" : 38,
      "endLineNumber" : 110,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 107,
        "startColumnNumber" : 38,
        "endLineNumber" : 111,
        "endColumnNumber" : 24
      },
      "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 107,
        "startColumnNumber" : 21,
        "endLineNumber" : 111,
        "endColumnNumber" : 24
      },
      "nodeContext" : "nsDispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 25
      },
      "nodeContext" : "DispatchRate nsDispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4447,
        "startLineNumber" : 81,
        "startColumnNumber" : 62,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cleanup();\n  config1.setSystemTopicEnabled(true);\n  config1.setTopicLevelPoliciesEnabled(true);\n  config1.setDispatchThrottlingRatePerReplicatorInMsg(100);\n  config1.setDispatchThrottlingRatePerReplicatorInByte(200L);\n  setup();\n  final String namespace=\"pulsar/replicatorchange-\" + System.currentTimeMillis();\n  final String topicName=\"persistent://\" + namespace + \"/ratechange\";\n  admin1.namespaces().createNamespace(namespace);\n  admin1.namespaces().setNamespaceReplicationClusters(namespace,Sets.newHashSet(\"r1\",\"r2\"));\n  @Cleanup PulsarClient client1=PulsarClient.builder().serviceUrl(url1.toString()).statsInterval(0,TimeUnit.SECONDS).build();\n  client1.newProducer().topic(topicName).create().close();\n  PersistentTopic topic=(PersistentTopic)pulsar1.getBrokerService().getOrCreateTopic(topicName).get();\n  assertTrue(topic.getReplicators().values().get(0).getRateLimiter().isPresent());\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),100);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),200L);\n  DispatchRate nsDispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build();\n  admin1.namespaces().setReplicatorDispatchRate(namespace,nsDispatchRate);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.namespaces().getReplicatorDispatchRate(namespace),nsDispatchRate));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),50);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),60L);\n  DispatchRate topicRate=DispatchRate.builder().dispatchThrottlingRateInMsg(10).dispatchThrottlingRateInByte(20).ratePeriodInSecond(30).build();\n  admin1.topics().setReplicatorDispatchRate(topicName,topicRate);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.topics().getReplicatorDispatchRate(topicName),topicRate));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),10);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),20L);\n  DispatchRate nsDispatchRate2=DispatchRate.builder().dispatchThrottlingRateInMsg(500).dispatchThrottlingRateInByte(600).ratePeriodInSecond(700).build();\n  admin1.namespaces().setReplicatorDispatchRate(namespace,nsDispatchRate2);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.namespaces().getReplicatorDispatchRate(namespace),nsDispatchRate2));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),20L);\n  admin1.topics().removeReplicatorDispatchRate(topicName);\n  Awaitility.await().untilAsserted(() -> assertNull(admin1.topics().getReplicatorDispatchRate(topicName)));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),500);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),600L);\n  admin1.namespaces().setReplicatorDispatchRate(namespace,null);\n  Awaitility.await().untilAsserted(() -> assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),100));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),200L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4515,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplicatorRatePriority() throws Exception {\n  cleanup();\n  config1.setSystemTopicEnabled(true);\n  config1.setTopicLevelPoliciesEnabled(true);\n  config1.setDispatchThrottlingRatePerReplicatorInMsg(100);\n  config1.setDispatchThrottlingRatePerReplicatorInByte(200L);\n  setup();\n  final String namespace=\"pulsar/replicatorchange-\" + System.currentTimeMillis();\n  final String topicName=\"persistent://\" + namespace + \"/ratechange\";\n  admin1.namespaces().createNamespace(namespace);\n  admin1.namespaces().setNamespaceReplicationClusters(namespace,Sets.newHashSet(\"r1\",\"r2\"));\n  @Cleanup PulsarClient client1=PulsarClient.builder().serviceUrl(url1.toString()).statsInterval(0,TimeUnit.SECONDS).build();\n  client1.newProducer().topic(topicName).create().close();\n  PersistentTopic topic=(PersistentTopic)pulsar1.getBrokerService().getOrCreateTopic(topicName).get();\n  assertTrue(topic.getReplicators().values().get(0).getRateLimiter().isPresent());\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),100);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),200L);\n  DispatchRate nsDispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build();\n  admin1.namespaces().setReplicatorDispatchRate(namespace,nsDispatchRate);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.namespaces().getReplicatorDispatchRate(namespace),nsDispatchRate));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),50);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),60L);\n  DispatchRate topicRate=DispatchRate.builder().dispatchThrottlingRateInMsg(10).dispatchThrottlingRateInByte(20).ratePeriodInSecond(30).build();\n  admin1.topics().setReplicatorDispatchRate(topicName,topicRate);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.topics().getReplicatorDispatchRate(topicName),topicRate));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),10);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),20L);\n  DispatchRate nsDispatchRate2=DispatchRate.builder().dispatchThrottlingRateInMsg(500).dispatchThrottlingRateInByte(600).ratePeriodInSecond(700).build();\n  admin1.namespaces().setReplicatorDispatchRate(namespace,nsDispatchRate2);\n  Awaitility.await().untilAsserted(() -> assertEquals(admin1.namespaces().getReplicatorDispatchRate(namespace),nsDispatchRate2));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),20L);\n  admin1.topics().removeReplicatorDispatchRate(topicName);\n  Awaitility.await().untilAsserted(() -> assertNull(admin1.topics().getReplicatorDispatchRate(topicName)));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),500);\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),600L);\n  admin1.namespaces().setReplicatorDispatchRate(namespace,null);\n  Awaitility.await().untilAsserted(() -> assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnMsg(),100));\n  assertEquals(topic.getReplicators().values().get(0).getRateLimiter().get().getDispatchRateOnByte(),200L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 503,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 107,
        "startColumnNumber" : 38,
        "endLineNumber" : 111,
        "endColumnNumber" : 24
      },
      "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(50).dispatchThrottlingRateInByte(60).ratePeriodInSecond(60).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "org.apache.pulsar.common.policies.data.DispatchRate.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 161,
    "startLineNumber" : 107,
    "startColumnNumber" : 38,
    "endLineNumber" : 110,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}