{
  "id" : 244,
  "expression" : "i",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/scalar/RowToRowCast.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 143,
      "startColumnNumber" : 24,
      "endLineNumber" : 143,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 143,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < toTypes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 143,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < toTypes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 144,
      "startColumnNumber" : 107,
      "endLineNumber" : 144,
      "endColumnNumber" : 108
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 144,
        "startColumnNumber" : 93,
        "endLineNumber" : 144,
        "endColumnNumber" : 109
      },
      "nodeContext" : "fromTypes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 144,
        "startColumnNumber" : 44,
        "endLineNumber" : 144,
        "endColumnNumber" : 126
      },
      "nodeContext" : "functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 144,
        "startColumnNumber" : 27,
        "endLineNumber" : 144,
        "endColumnNumber" : 126
      },
      "nodeContext" : "functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 127
      },
      "nodeContext" : "FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 127
      },
      "nodeContext" : "FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 144,
      "startColumnNumber" : 123,
      "endLineNumber" : 144,
      "endColumnNumber" : 124
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 144,
        "startColumnNumber" : 111,
        "endLineNumber" : 144,
        "endColumnNumber" : 125
      },
      "nodeContext" : "toTypes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 144,
        "startColumnNumber" : 44,
        "endLineNumber" : 144,
        "endColumnNumber" : 126
      },
      "nodeContext" : "functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 144,
        "startColumnNumber" : 27,
        "endLineNumber" : 144,
        "endColumnNumber" : 126
      },
      "nodeContext" : "functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 127
      },
      "nodeContext" : "FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 127
      },
      "nodeContext" : "FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 146,
      "startColumnNumber" : 49,
      "endLineNumber" : 146,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 146,
        "startColumnNumber" : 35,
        "endLineNumber" : 146,
        "endColumnNumber" : 51
      },
      "nodeContext" : "fromTypes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 146,
        "startColumnNumber" : 17,
        "endLineNumber" : 146,
        "endColumnNumber" : 51
      },
      "nodeContext" : "currentFromType=fromTypes.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Type currentFromType=fromTypes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Type currentFromType=fromTypes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 151,
      "startColumnNumber" : 111,
      "endLineNumber" : 151,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 151,
        "startColumnNumber" : 99,
        "endLineNumber" : 151,
        "endColumnNumber" : 113
      },
      "nodeContext" : "constantInt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 151,
        "startColumnNumber" : 45,
        "endLineNumber" : 151,
        "endColumnNumber" : 114
      },
      "nodeContext" : "constantType(binder,currentFromType).getValue(value,constantInt(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 151,
        "startColumnNumber" : 31,
        "endLineNumber" : 151,
        "endColumnNumber" : 114
      },
      "nodeContext" : "fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 115
      },
      "nodeContext" : "BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 115
      },
      "nodeContext" : "BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 155,
      "startColumnNumber" : 86,
      "endLineNumber" : 155,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 155,
        "startColumnNumber" : 74,
        "endLineNumber" : 155,
        "endColumnNumber" : 88
      },
      "nodeContext" : "constantInt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 155,
        "startColumnNumber" : 36,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "value.invoke(\"isNull\",boolean.class,constantInt(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 96
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 111
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 157,
      "startColumnNumber" : 62,
      "endLineNumber" : 157,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 157,
        "startColumnNumber" : 50,
        "endLineNumber" : 157,
        "endColumnNumber" : 64
      },
      "nodeContext" : "toTypes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 157,
        "startColumnNumber" : 29,
        "endLineNumber" : 157,
        "endColumnNumber" : 65
      },
      "nodeContext" : "constantType(binder,toTypes.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 157,
        "startColumnNumber" : 29,
        "endLineNumber" : 157,
        "endColumnNumber" : 109
      },
      "nodeContext" : "constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 110
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 111
      },
      "nodeContext" : "ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 143,
        "startColumnNumber" : 49,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < toTypes.size(); i++) {\n  FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n  JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n  Type currentFromType=fromTypes.get(i);\n  if (currentFromType.equals(UNKNOWN)) {\n    body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n    continue;\n  }\n  BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n  BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n  IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n  ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n  body.append(ifElementNull);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4292,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateRowCast(Type fromType,Type toType,FunctionAndTypeManager functionAndTypeManager){\n  List<Type> toTypes=toType.getTypeParameters();\n  List<Type> fromTypes=fromType.getTypeParameters();\n  CallSiteBinder binder=new CallSiteBinder();\n  byte[] md5Suffix=Hashing.md5().hashBytes((fromType + \"$\" + toType).getBytes()).asBytes();\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"$\").join(\"RowCast\",BaseEncoding.base16().encode(md5Suffix))),type(Object.class));\n  Parameter properties=arg(\"properties\",SqlFunctionProperties.class);\n  Parameter value=arg(\"value\",Block.class);\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"castRow\",type(Block.class),properties,value);\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable wasNull=scope.declareVariable(boolean.class,\"wasNull\");\n  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);\n  Variable singleRowBlockWriter=scope.createTempVariable(BlockBuilder.class);\n  body.append(wasNull.set(constantBoolean(false)));\n  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(definition,binder);\n  body.append(blockBuilder.set(constantType(binder,toType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(1))));\n  body.append(singleRowBlockWriter.set(blockBuilder.invoke(\"beginBlockEntry\",BlockBuilder.class)));\n  for (int i=0; i < toTypes.size(); i++) {\n    FunctionHandle functionHandle=functionAndTypeManager.lookupCast(CastType.CAST,fromTypes.get(i),toTypes.get(i));\n    JavaScalarFunctionImplementation function=functionAndTypeManager.getJavaScalarFunctionImplementation(functionHandle);\n    Type currentFromType=fromTypes.get(i);\n    if (currentFromType.equals(UNKNOWN)) {\n      body.append(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop());\n      continue;\n    }\n    BytecodeExpression fromElement=constantType(binder,currentFromType).getValue(value,constantInt(i));\n    BytecodeExpression toElement=invokeFunction(scope,cachedInstanceBinder,CAST.name(),function,fromElement);\n    IfStatement ifElementNull=new IfStatement(\"if the element in the row type is null...\");\n    ifElementNull.condition(value.invoke(\"isNull\",boolean.class,constantInt(i))).ifTrue(singleRowBlockWriter.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement));\n    body.append(ifElementNull);\n  }\n  body.append(blockBuilder.invoke(\"closeEntry\",BlockBuilder.class).pop());\n  body.append(constantType(binder,toType).invoke(\"getObject\",Object.class,blockBuilder.cast(Block.class),constantInt(0)).cast(Block.class).ret());\n  MethodDefinition constructorDefinition=definition.declareConstructor(a(PUBLIC));\n  BytecodeBlock constructorBody=constructorDefinition.getBody();\n  Variable thisVariable=constructorDefinition.getThis();\n  constructorBody.comment(\"super();\").append(thisVariable).invokeConstructor(Object.class);\n  cachedInstanceBinder.generateInitializations(thisVariable,constructorBody);\n  constructorBody.ret();\n  return defineClass(definition,Object.class,binder.getBindings(),RowToRowCast.class.getClassLoader());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 157,
        "startColumnNumber" : 29,
        "endLineNumber" : 157,
        "endColumnNumber" : 109
      },
      "nodeContext" : "constantType(binder,toTypes.get(i)).writeValue(singleRowBlockWriter,toElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 143,
    "startColumnNumber" : 24,
    "endLineNumber" : 143,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 144,
    "startColumnNumber" : 107,
    "endLineNumber" : 144,
    "endColumnNumber" : 108
  }, {
    "charLength" : 1,
    "startLineNumber" : 144,
    "startColumnNumber" : 123,
    "endLineNumber" : 144,
    "endColumnNumber" : 124
  }, {
    "charLength" : 1,
    "startLineNumber" : 146,
    "startColumnNumber" : 49,
    "endLineNumber" : 146,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 151,
    "startColumnNumber" : 111,
    "endLineNumber" : 151,
    "endColumnNumber" : 112
  }, {
    "charLength" : 1,
    "startLineNumber" : 155,
    "startColumnNumber" : 86,
    "endLineNumber" : 155,
    "endColumnNumber" : 87
  }, {
    "charLength" : 1,
    "startLineNumber" : 157,
    "startColumnNumber" : 62,
    "endLineNumber" : 157,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}