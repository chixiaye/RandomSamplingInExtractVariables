{
  "id" : 22,
  "expression" : "mqttHeader.getKeepAliveTimeSeconds()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/processor/DefaultMqttMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mqttHeader.getKeepAliveTimeSeconds()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 65,
      "startColumnNumber" : 53,
      "endLineNumber" : 65,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 61,
        "startColumnNumber" : 59,
        "endLineNumber" : 65,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 30,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 61,
        "startColumnNumber" : 42,
        "endLineNumber" : 65,
        "endColumnNumber" : 90
      },
      "nodeContext" : "variableHeader=new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 65,
        "endColumnNumber" : 91
      },
      "nodeContext" : "MqttConnectVariableHeader variableHeader=new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 35,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (fixedHeader.messageType()) {\ncase CONNECT:  MqttConnectVariableHeader variableHeader=new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds());\nRocketMQMqttConnectPayload payload=decode(message.getBody(),RocketMQMqttConnectPayload.class);\nmqttMessage=new MqttConnectMessage(fixedHeader,variableHeader,payload.toMqttConnectPayload());\ncase DISCONNECT:}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 67,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1313,
        "startLineNumber" : 53,
        "startColumnNumber" : 74,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MqttHeader mqttHeader=(MqttHeader)message.decodeCommandCustomHeader(MqttHeader.class);\n  MqttFixedHeader fixedHeader=new MqttFixedHeader(MqttMessageType.valueOf(mqttHeader.getMessageType()),mqttHeader.isDup(),MqttQoS.valueOf(mqttHeader.getQosLevel()),mqttHeader.isRetain(),mqttHeader.getRemainingLength());\n  MqttMessage mqttMessage=null;\nswitch (fixedHeader.messageType()) {\ncase CONNECT:    MqttConnectVariableHeader variableHeader=new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds());\n  RocketMQMqttConnectPayload payload=decode(message.getBody(),RocketMQMqttConnectPayload.class);\nmqttMessage=new MqttConnectMessage(fixedHeader,variableHeader,payload.toMqttConnectPayload());\ncase DISCONNECT:}\nreturn type2handler.get(MqttMessageType.valueOf(mqttHeader.getMessageType())).handleMessage(mqttMessage,remotingChannel);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public RemotingCommand processRequest(RemotingChannel remotingChannel,RemotingCommand message) throws RemotingCommandException, UnsupportedEncodingException {\n  MqttHeader mqttHeader=(MqttHeader)message.decodeCommandCustomHeader(MqttHeader.class);\n  MqttFixedHeader fixedHeader=new MqttFixedHeader(MqttMessageType.valueOf(mqttHeader.getMessageType()),mqttHeader.isDup(),MqttQoS.valueOf(mqttHeader.getQosLevel()),mqttHeader.isRetain(),mqttHeader.getRemainingLength());\n  MqttMessage mqttMessage=null;\nswitch (fixedHeader.messageType()) {\ncase CONNECT:    MqttConnectVariableHeader variableHeader=new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds());\n  RocketMQMqttConnectPayload payload=decode(message.getBody(),RocketMQMqttConnectPayload.class);\nmqttMessage=new MqttConnectMessage(fixedHeader,variableHeader,payload.toMqttConnectPayload());\ncase DISCONNECT:}\nreturn type2handler.get(MqttMessageType.valueOf(mqttHeader.getMessageType())).handleMessage(mqttMessage,remotingChannel);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 61,
        "startColumnNumber" : 59,
        "endLineNumber" : 65,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new MqttConnectVariableHeader(mqttHeader.getName(),mqttHeader.getVersion(),mqttHeader.isHasUserName(),mqttHeader.isHasPassword(),mqttHeader.isWillRetain(),mqttHeader.getWillQos(),mqttHeader.isWillFlag(),mqttHeader.isCleanSession(),mqttHeader.getKeepAliveTimeSeconds())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 30,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 65,
    "startColumnNumber" : 53,
    "endLineNumber" : 65,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}