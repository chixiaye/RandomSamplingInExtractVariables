{
  "id" : 192,
  "expression" : "MEDIA_TYPE_ALL_LIST",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MEDIA_TYPE_ALL_LIST",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 48,
      "startColumnNumber" : 10,
      "endLineNumber" : 48,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 48,
        "startColumnNumber" : 3,
        "endLineNumber" : 48,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return MEDIA_TYPE_ALL_LIST;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return MEDIA_TYPE_ALL_LIST;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (headerValueArray == null) {\n  return MEDIA_TYPE_ALL_LIST;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 44,
        "startColumnNumber" : 46,
        "endLineNumber" : 61,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] headerValueArray=request.getHeaderValues(HttpHeaders.ACCEPT);\n  if (headerValueArray == null) {\n    return MEDIA_TYPE_ALL_LIST;\n  }\n  List<String> headerValues=Arrays.asList(headerValueArray);\n  try {\n    List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n    MediaType.sortBySpecificityAndQuality(mediaTypes);\n    return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n  }\n catch (  InvalidMediaTypeException ex) {\n    throw new HttpMediaTypeNotAcceptableException(\"Could not parse 'Accept' header \" + headerValues + \": \"+ ex.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 61,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@inheritDoc}\n * @throws HttpMediaTypeNotAcceptableException if the 'Accept' header cannot be parsed\n */\n@Override public List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n  String[] headerValueArray=request.getHeaderValues(HttpHeaders.ACCEPT);\n  if (headerValueArray == null) {\n    return MEDIA_TYPE_ALL_LIST;\n  }\n  List<String> headerValues=Arrays.asList(headerValueArray);\n  try {\n    List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n    MediaType.sortBySpecificityAndQuality(mediaTypes);\n    return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n  }\n catch (  InvalidMediaTypeException ex) {\n    throw new HttpMediaTypeNotAcceptableException(\"Could not parse 'Accept' header \" + headerValues + \": \"+ ex.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 48,
        "startColumnNumber" : 3,
        "endLineNumber" : 48,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return MEDIA_TYPE_ALL_LIST;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 4,
    "type" : "java.util.List<org.springframework.http.MediaType>"
  }, {
    "nodeContext" : "MEDIA_TYPE_ALL_LIST",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 55,
      "startColumnNumber" : 62,
      "endLineNumber" : 55,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 55,
        "startColumnNumber" : 10,
        "endLineNumber" : 55,
        "endColumnNumber" : 81
      },
      "nodeContext" : "!CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 55,
        "startColumnNumber" : 3,
        "endLineNumber" : 55,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n  MediaType.sortBySpecificityAndQuality(mediaTypes);\n  return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n  MediaType.sortBySpecificityAndQuality(mediaTypes);\n  return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n}\n catch (InvalidMediaTypeException ex) {\n  throw new HttpMediaTypeNotAcceptableException(\"Could not parse 'Accept' header \" + headerValues + \": \"+ ex.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 44,
        "startColumnNumber" : 46,
        "endLineNumber" : 61,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] headerValueArray=request.getHeaderValues(HttpHeaders.ACCEPT);\n  if (headerValueArray == null) {\n    return MEDIA_TYPE_ALL_LIST;\n  }\n  List<String> headerValues=Arrays.asList(headerValueArray);\n  try {\n    List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n    MediaType.sortBySpecificityAndQuality(mediaTypes);\n    return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n  }\n catch (  InvalidMediaTypeException ex) {\n    throw new HttpMediaTypeNotAcceptableException(\"Could not parse 'Accept' header \" + headerValues + \": \"+ ex.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 61,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@inheritDoc}\n * @throws HttpMediaTypeNotAcceptableException if the 'Accept' header cannot be parsed\n */\n@Override public List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n  String[] headerValueArray=request.getHeaderValues(HttpHeaders.ACCEPT);\n  if (headerValueArray == null) {\n    return MEDIA_TYPE_ALL_LIST;\n  }\n  List<String> headerValues=Arrays.asList(headerValueArray);\n  try {\n    List<MediaType> mediaTypes=MediaType.parseMediaTypes(headerValues);\n    MediaType.sortBySpecificityAndQuality(mediaTypes);\n    return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n  }\n catch (  InvalidMediaTypeException ex) {\n    throw new HttpMediaTypeNotAcceptableException(\"Could not parse 'Accept' header \" + headerValues + \": \"+ ex.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 55,
        "startColumnNumber" : 3,
        "endLineNumber" : 55,
        "endColumnNumber" : 82
      },
      "nodeContext" : "return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.util.List<org.springframework.http.MediaType>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 48,
    "startColumnNumber" : 10,
    "endLineNumber" : 48,
    "endColumnNumber" : 29
  }, {
    "charLength" : 19,
    "startLineNumber" : 55,
    "startColumnNumber" : 62,
    "endLineNumber" : 55,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}