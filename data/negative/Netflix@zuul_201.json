{
  "id" : 201,
  "expression" : "new ZuulException(\"Received invalid message from origin\",true)",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientResponseWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ZuulException(\"Received invalid message from origin\",true)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 158,
      "startColumnNumber" : 18,
      "endLineNumber" : 158,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new ZuulException(\"Received invalid message from origin\",true);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 155,
        "startColumnNumber" : 13,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ReferenceCountUtil.release(msg);\n  throw new ZuulException(\"Received invalid message from origin\",true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 472,
        "startLineNumber" : 146,
        "startColumnNumber" : 13,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof HttpContent) {\n  final HttpContent chunk=(HttpContent)msg;\n  if (channel.isActive()) {\n    channel.writeAndFlush(chunk);\n  }\n else {\n    chunk.release();\n    channel.close();\n  }\n}\n else {\n  ReferenceCountUtil.release(msg);\n  throw new ZuulException(\"Received invalid message from origin\",true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3029,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof HttpResponseMessage) {\n  final HttpResponseMessage resp=(HttpResponseMessage)msg;\n  if (skipProcessing(resp)) {\n    return;\n  }\n  if ((!isHandlingRequest) || (startedSendingResponseToClient)) {\n    resp.disposeBufferedBody();\n    if (zuulResponse != null)     zuulResponse.disposeBufferedBody();\n    ctx.close();\n    return;\n  }\n  startedSendingResponseToClient=true;\n  zuulResponse=resp;\n  if (\"close\".equalsIgnoreCase(zuulResponse.getHeaders().getFirst(\"Connection\"))) {\n    closeConnection=true;\n  }\n  channel.attr(ATTR_ZUUL_RESP).set(zuulResponse);\n  if (channel.isActive()) {\n    if (!ClientRequestReceiver.isLastContentReceivedForChannel(channel)) {\n      StatusCategory status=StatusCategoryUtils.getStatusCategory(ClientRequestReceiver.getRequestFromChannel(channel));\n      if (ZuulStatusCategory.FAILURE_CLIENT_TIMEOUT.equals(status)) {\n      }\n else {\n        responseBeforeReceivedLastContentCounter.increment();\n        LOG.warn(\"Writing response to client channel before have received the LastContent of request! \" + zuulResponse.getInboundRequest().getInfoForLogging() + \", \"+ ChannelUtils.channelInfoForLogging(channel));\n      }\n    }\n    channel.write(buildHttpResponse(zuulResponse));\n    writeBufferedBodyContent(zuulResponse,channel);\n    channel.flush();\n  }\n else {\n    channel.close();\n  }\n}\n else if (msg instanceof HttpContent) {\n  final HttpContent chunk=(HttpContent)msg;\n  if (channel.isActive()) {\n    channel.writeAndFlush(chunk);\n  }\n else {\n    chunk.release();\n    channel.close();\n  }\n}\n else {\n  ReferenceCountUtil.release(msg);\n  throw new ZuulException(\"Received invalid message from origin\",true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 199,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3093,
        "startLineNumber" : 93,
        "startColumnNumber" : 90,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Channel channel=ctx.channel();\n  if (msg instanceof HttpResponseMessage) {\n    final HttpResponseMessage resp=(HttpResponseMessage)msg;\n    if (skipProcessing(resp)) {\n      return;\n    }\n    if ((!isHandlingRequest) || (startedSendingResponseToClient)) {\n      resp.disposeBufferedBody();\n      if (zuulResponse != null)       zuulResponse.disposeBufferedBody();\n      ctx.close();\n      return;\n    }\n    startedSendingResponseToClient=true;\n    zuulResponse=resp;\n    if (\"close\".equalsIgnoreCase(zuulResponse.getHeaders().getFirst(\"Connection\"))) {\n      closeConnection=true;\n    }\n    channel.attr(ATTR_ZUUL_RESP).set(zuulResponse);\n    if (channel.isActive()) {\n      if (!ClientRequestReceiver.isLastContentReceivedForChannel(channel)) {\n        StatusCategory status=StatusCategoryUtils.getStatusCategory(ClientRequestReceiver.getRequestFromChannel(channel));\n        if (ZuulStatusCategory.FAILURE_CLIENT_TIMEOUT.equals(status)) {\n        }\n else {\n          responseBeforeReceivedLastContentCounter.increment();\n          LOG.warn(\"Writing response to client channel before have received the LastContent of request! \" + zuulResponse.getInboundRequest().getInfoForLogging() + \", \"+ ChannelUtils.channelInfoForLogging(channel));\n        }\n      }\n      channel.write(buildHttpResponse(zuulResponse));\n      writeBufferedBodyContent(zuulResponse,channel);\n      channel.flush();\n    }\n else {\n      channel.close();\n    }\n  }\n else   if (msg instanceof HttpContent) {\n    final HttpContent chunk=(HttpContent)msg;\n    if (channel.isActive()) {\n      channel.writeAndFlush(chunk);\n    }\n else {\n      chunk.release();\n      channel.close();\n    }\n  }\n else {\n    ReferenceCountUtil.release(msg);\n    throw new ZuulException(\"Received invalid message from origin\",true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3193,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(final ChannelHandlerContext ctx,Object msg) throws Exception {\n  final Channel channel=ctx.channel();\n  if (msg instanceof HttpResponseMessage) {\n    final HttpResponseMessage resp=(HttpResponseMessage)msg;\n    if (skipProcessing(resp)) {\n      return;\n    }\n    if ((!isHandlingRequest) || (startedSendingResponseToClient)) {\n      resp.disposeBufferedBody();\n      if (zuulResponse != null)       zuulResponse.disposeBufferedBody();\n      ctx.close();\n      return;\n    }\n    startedSendingResponseToClient=true;\n    zuulResponse=resp;\n    if (\"close\".equalsIgnoreCase(zuulResponse.getHeaders().getFirst(\"Connection\"))) {\n      closeConnection=true;\n    }\n    channel.attr(ATTR_ZUUL_RESP).set(zuulResponse);\n    if (channel.isActive()) {\n      if (!ClientRequestReceiver.isLastContentReceivedForChannel(channel)) {\n        StatusCategory status=StatusCategoryUtils.getStatusCategory(ClientRequestReceiver.getRequestFromChannel(channel));\n        if (ZuulStatusCategory.FAILURE_CLIENT_TIMEOUT.equals(status)) {\n        }\n else {\n          responseBeforeReceivedLastContentCounter.increment();\n          LOG.warn(\"Writing response to client channel before have received the LastContent of request! \" + zuulResponse.getInboundRequest().getInfoForLogging() + \", \"+ ChannelUtils.channelInfoForLogging(channel));\n        }\n      }\n      channel.write(buildHttpResponse(zuulResponse));\n      writeBufferedBodyContent(zuulResponse,channel);\n      channel.flush();\n    }\n else {\n      channel.close();\n    }\n  }\n else   if (msg instanceof HttpContent) {\n    final HttpContent chunk=(HttpContent)msg;\n    if (channel.isActive()) {\n      channel.writeAndFlush(chunk);\n    }\n else {\n      chunk.release();\n      channel.close();\n    }\n  }\n else {\n    ReferenceCountUtil.release(msg);\n    throw new ZuulException(\"Received invalid message from origin\",true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new ZuulException(\"Received invalid message from origin\",true);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "com.netflix.zuul.exception.ZuulException"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 158,
    "startColumnNumber" : 18,
    "endLineNumber" : 158,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}