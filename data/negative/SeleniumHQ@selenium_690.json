{
  "id" : 690,
  "expression" : "0",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/client/test/org/openqa/selenium/remote/tracing/opentelemetry/TracerTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 119,
      "startColumnNumber" : 37,
      "endLineNumber" : 119,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 119,
        "startColumnNumber" : 24,
        "endLineNumber" : 119,
        "endColumnNumber" : 39
      },
      "nodeContext" : "allSpans.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 119,
        "startColumnNumber" : 13,
        "endLineNumber" : 119,
        "endColumnNumber" : 39
      },
      "nodeContext" : "spanData=allSpans.get(0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "SpanData spanData=allSpans.get(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "SpanData spanData=allSpans.get(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 123,
      "startColumnNumber" : 36,
      "endLineNumber" : 123,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertThat(timedEvents).element(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 127,
      "startColumnNumber" : 36,
      "endLineNumber" : 127,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertThat(timedEvents).element(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 22
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 128,
      "startColumnNumber" : 19,
      "endLineNumber" : 128,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 22
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldBeAbleToCreateASpanWithEvents(){\n  List<SpanData> allSpans=new ArrayList<>();\n  Tracer tracer=createTracer(allSpans);\n  String startEvent=\"Test event started\";\n  String endEvent=\"Test event ended\";\n  try (Span span=tracer.getCurrentContext().createSpan(\"parent\")){\n    span.addEvent(startEvent);\n    span.addEvent(endEvent);\n  }\n   assertThat(allSpans).hasSize(1);\n  SpanData spanData=allSpans.get(0);\n  assertThat(spanData.getEvents()).hasSize(2);\n  List<SpanData.Event> timedEvents=spanData.getEvents();\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getName).isEqualTo(startEvent);\n  assertThat(timedEvents).element(1).extracting(SpanData.Event::getName).isEqualTo(endEvent);\n  assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 21
      },
      "nodeContext" : "assertThat(timedEvents).element(0).extracting(SpanData.Event::getTotalAttributeCount).isEqualTo(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 119,
    "startColumnNumber" : 37,
    "endLineNumber" : 119,
    "endColumnNumber" : 38
  }, {
    "charLength" : 1,
    "startLineNumber" : 123,
    "startColumnNumber" : 36,
    "endLineNumber" : 123,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 127,
    "startColumnNumber" : 36,
    "endLineNumber" : 127,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 128,
    "startColumnNumber" : 19,
    "endLineNumber" : 128,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  } ]
}