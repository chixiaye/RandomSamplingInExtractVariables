{
  "id" : 212,
  "expression" : "new AlwaysTrueValueMatcher()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-cron/src/main/java/cn/hutool/cron/pattern/CronPattern.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AlwaysTrueValueMatcher()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 289,
      "startColumnNumber" : 25,
      "endLineNumber" : 289,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 289,
        "startColumnNumber" : 3,
        "endLineNumber" : 289,
        "endColumnNumber" : 54
      },
      "nodeContext" : "this.yearMatchers.add(new AlwaysTrueValueMatcher())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 289,
        "startColumnNumber" : 3,
        "endLineNumber" : 289,
        "endColumnNumber" : 55
      },
      "nodeContext" : "this.yearMatchers.add(new AlwaysTrueValueMatcher());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 288,
        "startColumnNumber" : 9,
        "endLineNumber" : 290,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.yearMatchers.add(new AlwaysTrueValueMatcher());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 282,
        "startColumnNumber" : 2,
        "endLineNumber" : 290,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (parts.length == 7) {\n  try {\n    this.yearMatchers.add(ValueMatcherBuilder.build(parts[6],YEAR_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'year' field error!\",pattern);\n  }\n}\n else {\n  this.yearMatchers.add(new AlwaysTrueValueMatcher());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 231,
        "startColumnNumber" : 49,
        "endLineNumber" : 292,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final String[] parts=pattern.split(\"\\\\s\");\n  int offset=0;\n  if (parts.length == 6 || parts.length == 7) {\n    offset=1;\n  }\n else   if (parts.length != 5) {\n    throw new CronException(\"Pattern [{}] is invalid, it must be 5-7 parts!\",pattern);\n  }\n  if (1 == offset) {\n    try {\n      this.secondMatchers.add(ValueMatcherBuilder.build(parts[0],SECOND_VALUE_PARSER));\n    }\n catch (    Exception e) {\n      throw new CronException(e,\"Invalid pattern [{}], parsing 'second' field error!\",pattern);\n    }\n  }\n else {\n    this.secondMatchers.add(ValueMatcherBuilder.build(String.valueOf(DateUtil.date().second()),SECOND_VALUE_PARSER));\n  }\n  try {\n    this.minuteMatchers.add(ValueMatcherBuilder.build(parts[offset],MINUTE_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'minute' field error!\",pattern);\n  }\n  try {\n    this.hourMatchers.add(ValueMatcherBuilder.build(parts[1 + offset],HOUR_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'hour' field error!\",pattern);\n  }\n  try {\n    this.dayOfMonthMatchers.add(ValueMatcherBuilder.build(parts[2 + offset],DAY_OF_MONTH_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'day of month' field error!\",pattern);\n  }\n  try {\n    this.monthMatchers.add(ValueMatcherBuilder.build(parts[3 + offset],MONTH_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'month' field error!\",pattern);\n  }\n  try {\n    this.dayOfWeekMatchers.add(ValueMatcherBuilder.build(parts[4 + offset],DAY_OF_WEEK_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'day of week' field error!\",pattern);\n  }\n  if (parts.length == 7) {\n    try {\n      this.yearMatchers.add(ValueMatcherBuilder.build(parts[6],YEAR_VALUE_PARSER));\n    }\n catch (    Exception e) {\n      throw new CronException(e,\"Invalid pattern [{}], parsing 'year' field error!\",pattern);\n    }\n  }\n else {\n    this.yearMatchers.add(new AlwaysTrueValueMatcher());\n  }\n  matcherSize++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2459,
        "startLineNumber" : 226,
        "startColumnNumber" : 1,
        "endLineNumber" : 292,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 解析单一定时任务表达式\n * @param pattern 表达式\n */\nprivate void parseSinglePattern(String pattern){\n  final String[] parts=pattern.split(\"\\\\s\");\n  int offset=0;\n  if (parts.length == 6 || parts.length == 7) {\n    offset=1;\n  }\n else   if (parts.length != 5) {\n    throw new CronException(\"Pattern [{}] is invalid, it must be 5-7 parts!\",pattern);\n  }\n  if (1 == offset) {\n    try {\n      this.secondMatchers.add(ValueMatcherBuilder.build(parts[0],SECOND_VALUE_PARSER));\n    }\n catch (    Exception e) {\n      throw new CronException(e,\"Invalid pattern [{}], parsing 'second' field error!\",pattern);\n    }\n  }\n else {\n    this.secondMatchers.add(ValueMatcherBuilder.build(String.valueOf(DateUtil.date().second()),SECOND_VALUE_PARSER));\n  }\n  try {\n    this.minuteMatchers.add(ValueMatcherBuilder.build(parts[offset],MINUTE_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'minute' field error!\",pattern);\n  }\n  try {\n    this.hourMatchers.add(ValueMatcherBuilder.build(parts[1 + offset],HOUR_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'hour' field error!\",pattern);\n  }\n  try {\n    this.dayOfMonthMatchers.add(ValueMatcherBuilder.build(parts[2 + offset],DAY_OF_MONTH_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'day of month' field error!\",pattern);\n  }\n  try {\n    this.monthMatchers.add(ValueMatcherBuilder.build(parts[3 + offset],MONTH_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'month' field error!\",pattern);\n  }\n  try {\n    this.dayOfWeekMatchers.add(ValueMatcherBuilder.build(parts[4 + offset],DAY_OF_WEEK_VALUE_PARSER));\n  }\n catch (  Exception e) {\n    throw new CronException(e,\"Invalid pattern [{}], parsing 'day of week' field error!\",pattern);\n  }\n  if (parts.length == 7) {\n    try {\n      this.yearMatchers.add(ValueMatcherBuilder.build(parts[6],YEAR_VALUE_PARSER));\n    }\n catch (    Exception e) {\n      throw new CronException(e,\"Invalid pattern [{}], parsing 'year' field error!\",pattern);\n    }\n  }\n else {\n    this.yearMatchers.add(new AlwaysTrueValueMatcher());\n  }\n  matcherSize++;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 289,
        "startColumnNumber" : 3,
        "endLineNumber" : 289,
        "endColumnNumber" : 55
      },
      "nodeContext" : "this.yearMatchers.add(new AlwaysTrueValueMatcher());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "cn.hutool.cron.pattern.matcher.AlwaysTrueValueMatcher"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 289,
    "startColumnNumber" : 25,
    "endLineNumber" : 289,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}