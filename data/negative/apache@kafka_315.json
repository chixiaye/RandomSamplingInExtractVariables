{
  "id" : 315,
  "expression" : "String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers())",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/main/java/org/apache/kafka/connect/util/TopicAdmin.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 107,
      "startLineNumber" : 694,
      "startColumnNumber" : 33,
      "endLineNumber" : 694,
      "endColumnNumber" : 140
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 694,
        "startColumnNumber" : 27,
        "endLineNumber" : 694,
        "endColumnNumber" : 140
      },
      "nodeContext" : "msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 694,
        "startColumnNumber" : 20,
        "endLineNumber" : 694,
        "endColumnNumber" : 141
      },
      "nodeContext" : "String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 693,
        "startColumnNumber" : 23,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 691,
        "startColumnNumber" : 23,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n  throw (org.apache.kafka.common.errors.RetriableException)cause;\n}\n else {\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 700,
        "startLineNumber" : 688,
        "startColumnNumber" : 23,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cause instanceof LeaderNotAvailableException) {\n  String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new LeaderNotAvailableException(msg,e);\n}\n else if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n  throw (org.apache.kafka.common.errors.RetriableException)cause;\n}\n else {\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 685,
        "startColumnNumber" : 23,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cause instanceof TimeoutException) {\n  String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new TimeoutException(msg,e);\n}\n else if (cause instanceof LeaderNotAvailableException) {\n  String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new LeaderNotAvailableException(msg,e);\n}\n else if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n  throw (org.apache.kafka.common.errors.RetriableException)cause;\n}\n else {\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1495,
        "startLineNumber" : 680,
        "startColumnNumber" : 23,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cause instanceof UnsupportedVersionException) {\n  String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n  throw new UnsupportedVersionException(msg,e);\n}\n else if (cause instanceof TimeoutException) {\n  String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new TimeoutException(msg,e);\n}\n else if (cause instanceof LeaderNotAvailableException) {\n  String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new LeaderNotAvailableException(msg,e);\n}\n else if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n  throw (org.apache.kafka.common.errors.RetriableException)cause;\n}\n else {\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1769,
        "startLineNumber" : 677,
        "startColumnNumber" : 16,
        "endLineNumber" : 696,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (cause instanceof AuthorizationException) {\n  String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n else if (cause instanceof UnsupportedVersionException) {\n  String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n  throw new UnsupportedVersionException(msg,e);\n}\n else if (cause instanceof TimeoutException) {\n  String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new TimeoutException(msg,e);\n}\n else if (cause instanceof LeaderNotAvailableException) {\n  String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new LeaderNotAvailableException(msg,e);\n}\n else if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n  throw (org.apache.kafka.common.errors.RetriableException)cause;\n}\n else {\n  String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n  throw new ConnectException(msg,e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 674,
        "startColumnNumber" : 43,
        "endLineNumber" : 697,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Throwable cause=e.getCause();\n  String topic=partition.topic();\n  if (cause instanceof AuthorizationException) {\n    String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n else   if (cause instanceof UnsupportedVersionException) {\n    String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n    throw new UnsupportedVersionException(msg,e);\n  }\n else   if (cause instanceof TimeoutException) {\n    String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new TimeoutException(msg,e);\n  }\n else   if (cause instanceof LeaderNotAvailableException) {\n    String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new LeaderNotAvailableException(msg,e);\n  }\n else   if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n    throw (org.apache.kafka.common.errors.RetriableException)cause;\n  }\n else {\n    String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1928,
        "startLineNumber" : 674,
        "startColumnNumber" : 14,
        "endLineNumber" : 697,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (ExecutionException e) {\n  Throwable cause=e.getCause();\n  String topic=partition.topic();\n  if (cause instanceof AuthorizationException) {\n    String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n else   if (cause instanceof UnsupportedVersionException) {\n    String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n    throw new UnsupportedVersionException(msg,e);\n  }\n else   if (cause instanceof TimeoutException) {\n    String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new TimeoutException(msg,e);\n  }\n else   if (cause instanceof LeaderNotAvailableException) {\n    String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new LeaderNotAvailableException(msg,e);\n  }\n else   if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n    throw (org.apache.kafka.common.errors.RetriableException)cause;\n  }\n else {\n    String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 168,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2400,
        "startLineNumber" : 671,
        "startColumnNumber" : 12,
        "endLineNumber" : 701,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  ListOffsetsResultInfo info=resultFuture.partitionResult(partition).get();\n  result.put(partition,info.offset());\n}\n catch (ExecutionException e) {\n  Throwable cause=e.getCause();\n  String topic=partition.topic();\n  if (cause instanceof AuthorizationException) {\n    String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n else   if (cause instanceof UnsupportedVersionException) {\n    String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n    throw new UnsupportedVersionException(msg,e);\n  }\n else   if (cause instanceof TimeoutException) {\n    String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new TimeoutException(msg,e);\n  }\n else   if (cause instanceof LeaderNotAvailableException) {\n    String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new LeaderNotAvailableException(msg,e);\n  }\n else   if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n    throw (org.apache.kafka.common.errors.RetriableException)cause;\n  }\n else {\n    String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n    throw new ConnectException(msg,e);\n  }\n}\ncatch (InterruptedException e) {\n  Thread.interrupted();\n  String msg=String.format(\"Interrupted while attempting to read end offsets for topic '%s' on brokers at %s\",partition.topic(),bootstrapServers());\n  throw new RetriableException(msg,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 219,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2424,
        "startLineNumber" : 670,
        "startColumnNumber" : 52,
        "endLineNumber" : 702,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    ListOffsetsResultInfo info=resultFuture.partitionResult(partition).get();\n    result.put(partition,info.offset());\n  }\n catch (  ExecutionException e) {\n    Throwable cause=e.getCause();\n    String topic=partition.topic();\n    if (cause instanceof AuthorizationException) {\n      String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new ConnectException(msg,e);\n    }\n else     if (cause instanceof UnsupportedVersionException) {\n      String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n      throw new UnsupportedVersionException(msg,e);\n    }\n else     if (cause instanceof TimeoutException) {\n      String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new TimeoutException(msg,e);\n    }\n else     if (cause instanceof LeaderNotAvailableException) {\n      String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new LeaderNotAvailableException(msg,e);\n    }\n else     if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n      throw (org.apache.kafka.common.errors.RetriableException)cause;\n    }\n else {\n      String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new ConnectException(msg,e);\n    }\n  }\ncatch (  InterruptedException e) {\n    Thread.interrupted();\n    String msg=String.format(\"Interrupted while attempting to read end offsets for topic '%s' on brokers at %s\",partition.topic(),bootstrapServers());\n    throw new RetriableException(msg,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2468,
        "startLineNumber" : 670,
        "startColumnNumber" : 8,
        "endLineNumber" : 702,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TopicPartition partition : partitions) {\n  try {\n    ListOffsetsResultInfo info=resultFuture.partitionResult(partition).get();\n    result.put(partition,info.offset());\n  }\n catch (  ExecutionException e) {\n    Throwable cause=e.getCause();\n    String topic=partition.topic();\n    if (cause instanceof AuthorizationException) {\n      String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new ConnectException(msg,e);\n    }\n else     if (cause instanceof UnsupportedVersionException) {\n      String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n      throw new UnsupportedVersionException(msg,e);\n    }\n else     if (cause instanceof TimeoutException) {\n      String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new TimeoutException(msg,e);\n    }\n else     if (cause instanceof LeaderNotAvailableException) {\n      String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new LeaderNotAvailableException(msg,e);\n    }\n else     if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n      throw (org.apache.kafka.common.errors.RetriableException)cause;\n    }\n else {\n      String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n      throw new ConnectException(msg,e);\n    }\n  }\ncatch (  InterruptedException e) {\n    Thread.interrupted();\n    String msg=String.format(\"Interrupted while attempting to read end offsets for topic '%s' on brokers at %s\",partition.topic(),bootstrapServers());\n    throw new RetriableException(msg,e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 226,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2999,
        "startLineNumber" : 662,
        "startColumnNumber" : 80,
        "endLineNumber" : 704,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (partitions == null || partitions.isEmpty()) {\n    return Collections.emptyMap();\n  }\n  Map<TopicPartition,OffsetSpec> offsetSpecMap=partitions.stream().collect(Collectors.toMap(Function.identity(),tp -> OffsetSpec.latest()));\n  ListOffsetsResult resultFuture=admin.listOffsets(offsetSpecMap);\n  Map<TopicPartition,Long> result=new HashMap<>();\n  for (  TopicPartition partition : partitions) {\n    try {\n      ListOffsetsResultInfo info=resultFuture.partitionResult(partition).get();\n      result.put(partition,info.offset());\n    }\n catch (    ExecutionException e) {\n      Throwable cause=e.getCause();\n      String topic=partition.topic();\n      if (cause instanceof AuthorizationException) {\n        String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new ConnectException(msg,e);\n      }\n else       if (cause instanceof UnsupportedVersionException) {\n        String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n        throw new UnsupportedVersionException(msg,e);\n      }\n else       if (cause instanceof TimeoutException) {\n        String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new TimeoutException(msg,e);\n      }\n else       if (cause instanceof LeaderNotAvailableException) {\n        String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new LeaderNotAvailableException(msg,e);\n      }\n else       if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n        throw (org.apache.kafka.common.errors.RetriableException)cause;\n      }\n else {\n        String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new ConnectException(msg,e);\n      }\n    }\ncatch (    InterruptedException e) {\n      Thread.interrupted();\n      String msg=String.format(\"Interrupted while attempting to read end offsets for topic '%s' on brokers at %s\",partition.topic(),bootstrapServers());\n      throw new RetriableException(msg,e);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3973,
        "startLineNumber" : 648,
        "startColumnNumber" : 4,
        "endLineNumber" : 704,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Fetch the most recent offset for each of the supplied  {@link TopicPartition} objects.\n * @param partitions the topic partitions\n * @return the map of offset for each topic partition, or an empty map if the supplied partitionsare null or empty\n * @throws UnsupportedVersionException if the admin client cannot read end offsets\n * @throws TimeoutException if the offset metadata could not be fetched before the amount of time allocatedby  {@code request.timeout.ms} expires, and this call can be retried\n * @throws LeaderNotAvailableException if the leader was not available and this call can be retried\n * @throws RetriableException if a retriable error occurs, or the thread is interrupted while attempting to perform this operation\n * @throws ConnectException if a non retriable error occurs\n */\npublic Map<TopicPartition,Long> endOffsets(Set<TopicPartition> partitions){\n  if (partitions == null || partitions.isEmpty()) {\n    return Collections.emptyMap();\n  }\n  Map<TopicPartition,OffsetSpec> offsetSpecMap=partitions.stream().collect(Collectors.toMap(Function.identity(),tp -> OffsetSpec.latest()));\n  ListOffsetsResult resultFuture=admin.listOffsets(offsetSpecMap);\n  Map<TopicPartition,Long> result=new HashMap<>();\n  for (  TopicPartition partition : partitions) {\n    try {\n      ListOffsetsResultInfo info=resultFuture.partitionResult(partition).get();\n      result.put(partition,info.offset());\n    }\n catch (    ExecutionException e) {\n      Throwable cause=e.getCause();\n      String topic=partition.topic();\n      if (cause instanceof AuthorizationException) {\n        String msg=String.format(\"Not authorized to get the end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new ConnectException(msg,e);\n      }\n else       if (cause instanceof UnsupportedVersionException) {\n        String msg=String.format(\"API to get the get the end offsets for topic '%s' is unsupported on brokers at %s\",topic,bootstrapServers());\n        throw new UnsupportedVersionException(msg,e);\n      }\n else       if (cause instanceof TimeoutException) {\n        String msg=String.format(\"Timed out while waiting to get end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new TimeoutException(msg,e);\n      }\n else       if (cause instanceof LeaderNotAvailableException) {\n        String msg=String.format(\"Unable to get end offsets during leader election for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new LeaderNotAvailableException(msg,e);\n      }\n else       if (cause instanceof org.apache.kafka.common.errors.RetriableException) {\n        throw (org.apache.kafka.common.errors.RetriableException)cause;\n      }\n else {\n        String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n        throw new ConnectException(msg,e);\n      }\n    }\ncatch (    InterruptedException e) {\n      Thread.interrupted();\n      String msg=String.format(\"Interrupted while attempting to read end offsets for topic '%s' on brokers at %s\",partition.topic(),bootstrapServers());\n      throw new RetriableException(msg,e);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 694,
        "startColumnNumber" : 20,
        "endLineNumber" : 694,
        "endColumnNumber" : 141
      },
      "nodeContext" : "String msg=String.format(\"Error while getting end offsets for topic '%s' on brokers at %s\",topic,bootstrapServers());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 14,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 107,
    "startLineNumber" : 694,
    "startColumnNumber" : 33,
    "endLineNumber" : 694,
    "endColumnNumber" : 140
  } ],
  "layoutRelationDataList" : [ ]
}