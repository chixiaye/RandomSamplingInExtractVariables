{
  "id" : 445,
  "expression" : "res.getErrorMessage()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/transport/codec/DeprecatedExchangeCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "res.getErrorMessage()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 263,
      "startColumnNumber" : 32,
      "endLineNumber" : 263,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 263,
        "startColumnNumber" : 19,
        "endLineNumber" : 263,
        "endColumnNumber" : 54
      },
      "nodeContext" : "out.writeUTF(res.getErrorMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 263,
        "startColumnNumber" : 19,
        "endLineNumber" : 263,
        "endColumnNumber" : 55
      },
      "nodeContext" : "out.writeUTF(res.getErrorMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 257,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 55
      },
      "nodeContext" : "if (status == Response.OK) {\n  if (res.isHeartbeat()) {\n    encodeHeartbeatData(channel,out,res.getResult());\n  }\n else {\n    encodeResponseData(channel,out,res.getResult());\n  }\n}\n else out.writeUTF(res.getErrorMessage());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Serialization serialization=CodecSupport.getSerialization(channel.getUrl());\n  byte[] header=new byte[HEADER_LENGTH];\n  Bytes.short2bytes(MAGIC,header);\n  header[2]=serialization.getContentTypeId();\n  if (res.isHeartbeat())   header[2]|=FLAG_EVENT;\n  byte status=res.getStatus();\n  header[3]=status;\n  Bytes.long2bytes(res.getId(),header,4);\n  UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(1024);\n  ObjectOutput out=serialization.serialize(channel.getUrl(),bos);\n  if (status == Response.OK) {\n    if (res.isHeartbeat()) {\n      encodeHeartbeatData(channel,out,res.getResult());\n    }\n else {\n      encodeResponseData(channel,out,res.getResult());\n    }\n  }\n else   out.writeUTF(res.getErrorMessage());\n  out.flushBuffer();\n  bos.flush();\n  bos.close();\n  byte[] data=bos.toByteArray();\n  checkPayload(channel,data.length);\n  Bytes.int2bytes(data.length,header,12);\n  os.write(header);\n  os.write(data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2870,
        "startLineNumber" : 239,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Serialization serialization=CodecSupport.getSerialization(channel.getUrl());\n  byte[] header=new byte[HEADER_LENGTH];\n  Bytes.short2bytes(MAGIC,header);\n  header[2]=serialization.getContentTypeId();\n  if (res.isHeartbeat())   header[2]|=FLAG_EVENT;\n  byte status=res.getStatus();\n  header[3]=status;\n  Bytes.long2bytes(res.getId(),header,4);\n  UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(1024);\n  ObjectOutput out=serialization.serialize(channel.getUrl(),bos);\n  if (status == Response.OK) {\n    if (res.isHeartbeat()) {\n      encodeHeartbeatData(channel,out,res.getResult());\n    }\n else {\n      encodeResponseData(channel,out,res.getResult());\n    }\n  }\n else   out.writeUTF(res.getErrorMessage());\n  out.flushBuffer();\n  bos.flush();\n  bos.close();\n  byte[] data=bos.toByteArray();\n  checkPayload(channel,data.length);\n  Bytes.int2bytes(data.length,header,12);\n  os.write(header);\n  os.write(data);\n}\n catch (Throwable t) {\n  if (!res.isEvent() && res.getStatus() != Response.BAD_RESPONSE) {\n    try {\n      logger.warn(\"Fail to encode response: \" + res + \", send bad_response info instead, cause: \"+ t.getMessage(),t);\n      Response r=new Response(res.getId(),res.getVersion());\n      r.setStatus(Response.BAD_RESPONSE);\n      r.setErrorMessage(\"Failed to send response: \" + res + \", cause: \"+ StringUtils.toString(t));\n      channel.send(r);\n      return;\n    }\n catch (    RemotingException e) {\n      logger.warn(\"Failed to send bad_response info back: \" + res + \", cause: \"+ e.getMessage(),e);\n    }\n  }\n  if (t instanceof IOException) {\n    throw (IOException)t;\n  }\n else   if (t instanceof RuntimeException) {\n    throw (RuntimeException)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new RuntimeException(t.getMessage(),t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 238,
        "startColumnNumber" : 101,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Serialization serialization=CodecSupport.getSerialization(channel.getUrl());\n    byte[] header=new byte[HEADER_LENGTH];\n    Bytes.short2bytes(MAGIC,header);\n    header[2]=serialization.getContentTypeId();\n    if (res.isHeartbeat())     header[2]|=FLAG_EVENT;\n    byte status=res.getStatus();\n    header[3]=status;\n    Bytes.long2bytes(res.getId(),header,4);\n    UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(1024);\n    ObjectOutput out=serialization.serialize(channel.getUrl(),bos);\n    if (status == Response.OK) {\n      if (res.isHeartbeat()) {\n        encodeHeartbeatData(channel,out,res.getResult());\n      }\n else {\n        encodeResponseData(channel,out,res.getResult());\n      }\n    }\n else     out.writeUTF(res.getErrorMessage());\n    out.flushBuffer();\n    bos.flush();\n    bos.close();\n    byte[] data=bos.toByteArray();\n    checkPayload(channel,data.length);\n    Bytes.int2bytes(data.length,header,12);\n    os.write(header);\n    os.write(data);\n  }\n catch (  Throwable t) {\n    if (!res.isEvent() && res.getStatus() != Response.BAD_RESPONSE) {\n      try {\n        logger.warn(\"Fail to encode response: \" + res + \", send bad_response info instead, cause: \"+ t.getMessage(),t);\n        Response r=new Response(res.getId(),res.getVersion());\n        r.setStatus(Response.BAD_RESPONSE);\n        r.setErrorMessage(\"Failed to send response: \" + res + \", cause: \"+ StringUtils.toString(t));\n        channel.send(r);\n        return;\n      }\n catch (      RemotingException e) {\n        logger.warn(\"Failed to send bad_response info back: \" + res + \", cause: \"+ e.getMessage(),e);\n      }\n    }\n    if (t instanceof IOException) {\n      throw (IOException)t;\n    }\n else     if (t instanceof RuntimeException) {\n      throw (RuntimeException)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new RuntimeException(t.getMessage(),t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2983,
        "startLineNumber" : 238,
        "startColumnNumber" : 4,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void encodeResponse(Channel channel,OutputStream os,Response res) throws IOException {\n  try {\n    Serialization serialization=CodecSupport.getSerialization(channel.getUrl());\n    byte[] header=new byte[HEADER_LENGTH];\n    Bytes.short2bytes(MAGIC,header);\n    header[2]=serialization.getContentTypeId();\n    if (res.isHeartbeat())     header[2]|=FLAG_EVENT;\n    byte status=res.getStatus();\n    header[3]=status;\n    Bytes.long2bytes(res.getId(),header,4);\n    UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(1024);\n    ObjectOutput out=serialization.serialize(channel.getUrl(),bos);\n    if (status == Response.OK) {\n      if (res.isHeartbeat()) {\n        encodeHeartbeatData(channel,out,res.getResult());\n      }\n else {\n        encodeResponseData(channel,out,res.getResult());\n      }\n    }\n else     out.writeUTF(res.getErrorMessage());\n    out.flushBuffer();\n    bos.flush();\n    bos.close();\n    byte[] data=bos.toByteArray();\n    checkPayload(channel,data.length);\n    Bytes.int2bytes(data.length,header,12);\n    os.write(header);\n    os.write(data);\n  }\n catch (  Throwable t) {\n    if (!res.isEvent() && res.getStatus() != Response.BAD_RESPONSE) {\n      try {\n        logger.warn(\"Fail to encode response: \" + res + \", send bad_response info instead, cause: \"+ t.getMessage(),t);\n        Response r=new Response(res.getId(),res.getVersion());\n        r.setStatus(Response.BAD_RESPONSE);\n        r.setErrorMessage(\"Failed to send response: \" + res + \", cause: \"+ StringUtils.toString(t));\n        channel.send(r);\n        return;\n      }\n catch (      RemotingException e) {\n        logger.warn(\"Failed to send bad_response info back: \" + res + \", cause: \"+ e.getMessage(),e);\n      }\n    }\n    if (t instanceof IOException) {\n      throw (IOException)t;\n    }\n else     if (t instanceof RuntimeException) {\n      throw (RuntimeException)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new RuntimeException(t.getMessage(),t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 263,
        "startColumnNumber" : 19,
        "endLineNumber" : 263,
        "endColumnNumber" : 55
      },
      "nodeContext" : "out.writeUTF(res.getErrorMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 263,
    "startColumnNumber" : 32,
    "endLineNumber" : 263,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}