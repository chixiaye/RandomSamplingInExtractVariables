{
  "id" : 443,
  "expression" : "null",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 200,
      "startColumnNumber" : 20,
      "endLineNumber" : 200,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 24
      },
      "nodeContext" : "args != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args != null) {\n  healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n  healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n  eventBus=args.eventBus;\n}\n else {\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 24
      },
      "nodeContext" : "args != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 206,
      "startColumnNumber" : 42,
      "endLineNumber" : 206,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 46
      },
      "nodeContext" : "healthCheckCallbackProvider=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 47
      },
      "nodeContext" : "healthCheckCallbackProvider=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 205,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args != null) {\n  healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n  healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n  eventBus=args.eventBus;\n}\n else {\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 47
      },
      "nodeContext" : "healthCheckCallbackProvider=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 207,
      "startColumnNumber" : 41,
      "endLineNumber" : 207,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 45
      },
      "nodeContext" : "healthCheckHandlerProvider=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 46
      },
      "nodeContext" : "healthCheckHandlerProvider=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 205,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args != null) {\n  healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n  healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n  eventBus=args.eventBus;\n}\n else {\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 207,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 46
      },
      "nodeContext" : "healthCheckHandlerProvider=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 208,
      "startColumnNumber" : 23,
      "endLineNumber" : 208,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 27
      },
      "nodeContext" : "eventBus=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 28
      },
      "nodeContext" : "eventBus=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 205,
        "startColumnNumber" : 13,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args != null) {\n  healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n  healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n  eventBus=args.eventBus;\n}\n else {\n  healthCheckCallbackProvider=null;\n  healthCheckHandlerProvider=null;\n  eventBus=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 28
      },
      "nodeContext" : "eventBus=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 235,
      "startColumnNumber" : 26,
      "endLineNumber" : 235,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 235,
        "startColumnNumber" : 16,
        "endLineNumber" : 235,
        "endColumnNumber" : 30
      },
      "nodeContext" : "myInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (myInfo != null) {\n  instanceInfo=myInfo;\n  appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 235,
        "startColumnNumber" : 16,
        "endLineNumber" : 235,
        "endColumnNumber" : 30
      },
      "nodeContext" : "myInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 259,
      "startColumnNumber" : 16,
      "endLineNumber" : 259,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 259,
        "startColumnNumber" : 16,
        "endLineNumber" : 259,
        "endColumnNumber" : 50
      },
      "nodeContext" : "null != remoteRegionsToFetch.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 259,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != remoteRegionsToFetch.get()) {\n  azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 259,
        "startColumnNumber" : 16,
        "endLineNumber" : 259,
        "endColumnNumber" : 50
      },
      "nodeContext" : "null != remoteRegionsToFetch.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 274,
      "startColumnNumber" : 40,
      "endLineNumber" : 274,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 274,
        "startColumnNumber" : 24,
        "endLineNumber" : 274,
        "endColumnNumber" : 44
      },
      "nodeContext" : "instanceInfo == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 274,
        "startColumnNumber" : 24,
        "endLineNumber" : 274,
        "endColumnNumber" : 78
      },
      "nodeContext" : "instanceInfo == null ? null : instanceInfo.getIPAddr()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 274,
        "startColumnNumber" : 19,
        "endLineNumber" : 274,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ip=instanceInfo == null ? null : instanceInfo.getIPAddr()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 274,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 274,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 274,
      "startColumnNumber" : 47,
      "endLineNumber" : 274,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 274,
        "startColumnNumber" : 24,
        "endLineNumber" : 274,
        "endColumnNumber" : 78
      },
      "nodeContext" : "instanceInfo == null ? null : instanceInfo.getIPAddr()",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 274,
        "startColumnNumber" : 19,
        "endLineNumber" : 274,
        "endColumnNumber" : 78
      },
      "nodeContext" : "ip=instanceInfo == null ? null : instanceInfo.getIPAddr()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 274,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 274,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 278,
      "startColumnNumber" : 29,
      "endLineNumber" : 278,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 278,
        "startColumnNumber" : 16,
        "endLineNumber" : 278,
        "endColumnNumber" : 33
      },
      "nodeContext" : "proxyHost != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 278,
        "startColumnNumber" : 16,
        "endLineNumber" : 278,
        "endColumnNumber" : 54
      },
      "nodeContext" : "proxyHost != null && proxyPort != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 278,
        "startColumnNumber" : 12,
        "endLineNumber" : 282,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (proxyHost != null && proxyPort != null) {\n  cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 278,
        "startColumnNumber" : 16,
        "endLineNumber" : 278,
        "endColumnNumber" : 54
      },
      "nodeContext" : "proxyHost != null && proxyPort != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 278,
      "startColumnNumber" : 50,
      "endLineNumber" : 278,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 278,
        "startColumnNumber" : 37,
        "endLineNumber" : 278,
        "endColumnNumber" : 54
      },
      "nodeContext" : "proxyPort != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 278,
        "startColumnNumber" : 16,
        "endLineNumber" : 278,
        "endColumnNumber" : 54
      },
      "nodeContext" : "proxyHost != null && proxyPort != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 278,
        "startColumnNumber" : 12,
        "endLineNumber" : 282,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (proxyHost != null && proxyPort != null) {\n  cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4085,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n  clientConfig=config;\n  final String zone=getZone(myInfo);\n  eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n  scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n  localRegionApps.set(new Applications());\n  heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n  fetchRegistryGeneration=new AtomicLong(0);\n  if (myInfo != null) {\n    instanceInfo=myInfo;\n    appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n  }\n  String proxyHost=clientConfig.getProxyHost();\n  String proxyPort=clientConfig.getProxyPort();\n  discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  ClientConfig cc=discoveryJerseyClient.getClientconfig();\n  remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n  AzToRegionMapper azToRegionMapper;\n  if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n    azToRegionMapper=new DNSBasedAzToRegionMapper();\n  }\n else {\n    azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n  }\n  if (null != remoteRegionsToFetch.get()) {\n    azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n  }\n  instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n  boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n  if (enableGZIPContentEncodingFilter) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n  EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  if (proxyHost != null && proxyPort != null) {\n    cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n  }\n}\n catch (Throwable e) {\n  throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 332,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5070,
        "startLineNumber" : 199,
        "startColumnNumber" : 109,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5187,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Inject public DiscoveryClient(InstanceInfo myInfo,EurekaClientConfig config,DiscoveryClientOptionalArgs args){\n  if (args != null) {\n    healthCheckHandlerProvider=args.healthCheckHandlerProvider;\n    healthCheckCallbackProvider=args.healthCheckCallbackProvider;\n    eventBus=args.eventBus;\n  }\n else {\n    healthCheckCallbackProvider=null;\n    healthCheckHandlerProvider=null;\n    eventBus=null;\n  }\n  try {\n    scheduler=Executors.newScheduledThreadPool(4,new ThreadFactoryBuilder().setNameFormat(\"DiscoveryClient-%d\").setDaemon(true).build());\n    clientConfig=config;\n    final String zone=getZone(myInfo);\n    eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));\n    scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),clientConfig.getEurekaServiceUrlPollIntervalSeconds(),TimeUnit.SECONDS);\n    localRegionApps.set(new Applications());\n    heartbeatExecutor=new ThreadPoolExecutor(1,clientConfig.getHeartbeatExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    cacheRefreshExecutor=new ThreadPoolExecutor(1,clientConfig.getCacheRefreshExecutorThreadPoolSize(),0,TimeUnit.SECONDS,new SynchronousQueue<Runnable>());\n    fetchRegistryGeneration=new AtomicLong(0);\n    if (myInfo != null) {\n      instanceInfo=myInfo;\n      appPathIdentifier=instanceInfo.getAppName() + \"/\" + instanceInfo.getId();\n    }\n    String proxyHost=clientConfig.getProxyHost();\n    String proxyPort=clientConfig.getProxyPort();\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,clientConfig.getEurekaServerTotalConnectionsPerHost(),clientConfig.getEurekaServerTotalConnections(),clientConfig.getEurekaConnectionIdleTimeoutSeconds());\n    discoveryApacheClient=discoveryJerseyClient.getClient();\n    ClientConfig cc=discoveryJerseyClient.getClientconfig();\n    remoteRegionsToFetch=new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());\n    AzToRegionMapper azToRegionMapper;\n    if (clientConfig.shouldUseDnsForFetchingServiceUrls()) {\n      azToRegionMapper=new DNSBasedAzToRegionMapper();\n    }\n else {\n      azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);\n    }\n    if (null != remoteRegionsToFetch.get()) {\n      azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));\n    }\n    instanceRegionChecker=new InstanceRegionChecker(azToRegionMapper,clientConfig.getRegion());\n    boolean enableGZIPContentEncodingFilter=config.shouldGZipContent();\n    if (enableGZIPContentEncodingFilter) {\n      discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n    }\n    String ip=instanceInfo == null ? null : instanceInfo.getIPAddr();\n    EurekaClientIdentity identity=new EurekaClientIdentity(ip);\n    discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n    if (proxyHost != null && proxyPort != null) {\n      cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,\"http://\" + proxyHost + \":\"+ proxyPort);\n    }\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"Failed to initialize DiscoveryClient!\",e);\n  }\n  if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {\n    fetchRegistryFromBackup();\n  }\n  initScheduledTasks();\n  try {\n    Monitors.registerObject(this);\n  }\n catch (  Throwable e) {\n    logger.warn(\"Cannot register timers\",e);\n  }\n  DiscoveryManager.getInstance().setDiscoveryClient(this);\n  DiscoveryManager.getInstance().setEurekaClientConfig(config);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 435,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 278,
        "startColumnNumber" : 16,
        "endLineNumber" : 278,
        "endColumnNumber" : 54
      },
      "nodeContext" : "proxyHost != null && proxyPort != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 200,
    "startColumnNumber" : 20,
    "endLineNumber" : 200,
    "endColumnNumber" : 24
  }, {
    "charLength" : 4,
    "startLineNumber" : 206,
    "startColumnNumber" : 42,
    "endLineNumber" : 206,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 207,
    "startColumnNumber" : 41,
    "endLineNumber" : 207,
    "endColumnNumber" : 45
  }, {
    "charLength" : 4,
    "startLineNumber" : 208,
    "startColumnNumber" : 23,
    "endLineNumber" : 208,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 235,
    "startColumnNumber" : 26,
    "endLineNumber" : 235,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 259,
    "startColumnNumber" : 16,
    "endLineNumber" : 259,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 274,
    "startColumnNumber" : 40,
    "endLineNumber" : 274,
    "endColumnNumber" : 44
  }, {
    "charLength" : 4,
    "startLineNumber" : 274,
    "startColumnNumber" : 47,
    "endLineNumber" : 274,
    "endColumnNumber" : 51
  }, {
    "charLength" : 4,
    "startLineNumber" : 278,
    "startColumnNumber" : 29,
    "endLineNumber" : 278,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 278,
    "startColumnNumber" : 50,
    "endLineNumber" : 278,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  } ]
}