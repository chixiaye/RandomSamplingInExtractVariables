{
  "id" : 190,
  "expression" : "iter.next()",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/tests/PipeliningTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iter.next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 121,
      "startColumnNumber" : 22,
      "endLineNumber" : 121,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 121,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 33
      },
      "nodeContext" : "firstKey=iter.next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 34
      },
      "nodeContext" : "byte[] firstKey=iter.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2117,
        "startLineNumber" : 89,
        "startColumnNumber" : 47,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  jedis.hset(\"key\".getBytes(),\"f1\".getBytes(),\"v111\".getBytes());\n  jedis.hset(\"key\".getBytes(),\"f22\".getBytes(),\"v2222\".getBytes());\n  Pipeline p=jedis.pipelined();\n  Response<Map<byte[],byte[]>> fmap=p.hgetAll(\"key\".getBytes());\n  Response<Set<byte[]>> fkeys=p.hkeys(\"key\".getBytes());\n  Response<List<byte[]>> fordered=p.hmget(\"key\".getBytes(),\"f22\".getBytes(),\"f1\".getBytes());\n  Response<List<byte[]>> fvals=p.hvals(\"key\".getBytes());\n  p.sync();\n  assertNotNull(fmap.get());\n  Map<byte[],byte[]> map=fmap.get();\n  Set<byte[]> mapKeys=map.keySet();\n  Iterator<byte[]> iterMap=mapKeys.iterator();\n  byte[] firstMapKey=iterMap.next();\n  byte[] secondMapKey=iterMap.next();\n  assertFalse(iterMap.hasNext());\n  verifyHasBothValues(firstMapKey,secondMapKey,\"f1\".getBytes(),\"f22\".getBytes());\n  byte[] firstMapValue=map.get(firstMapKey);\n  byte[] secondMapValue=map.get(secondMapKey);\n  verifyHasBothValues(firstMapValue,secondMapValue,\"v111\".getBytes(),\"v2222\".getBytes());\n  assertNotNull(fkeys.get());\n  Iterator<byte[]> iter=fkeys.get().iterator();\n  byte[] firstKey=iter.next();\n  byte[] secondKey=iter.next();\n  assertFalse(iter.hasNext());\n  verifyHasBothValues(firstKey,secondKey,\"f1\".getBytes(),\"f22\".getBytes());\n  assertNotNull(fordered.get());\n  assertArrayEquals(\"v2222\".getBytes(),fordered.get().get(0));\n  assertArrayEquals(\"v111\".getBytes(),fordered.get().get(1));\n  assertNotNull(fvals.get());\n  assertEquals(2,fvals.get().size());\n  byte[] firstValue=fvals.get().get(0);\n  byte[] secondValue=fvals.get().get(1);\n  verifyHasBothValues(firstValue,secondValue,\"v111\".getBytes(),\"v2222\".getBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2170,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void pipelineBinarySafeHashCommands(){\n  jedis.hset(\"key\".getBytes(),\"f1\".getBytes(),\"v111\".getBytes());\n  jedis.hset(\"key\".getBytes(),\"f22\".getBytes(),\"v2222\".getBytes());\n  Pipeline p=jedis.pipelined();\n  Response<Map<byte[],byte[]>> fmap=p.hgetAll(\"key\".getBytes());\n  Response<Set<byte[]>> fkeys=p.hkeys(\"key\".getBytes());\n  Response<List<byte[]>> fordered=p.hmget(\"key\".getBytes(),\"f22\".getBytes(),\"f1\".getBytes());\n  Response<List<byte[]>> fvals=p.hvals(\"key\".getBytes());\n  p.sync();\n  assertNotNull(fmap.get());\n  Map<byte[],byte[]> map=fmap.get();\n  Set<byte[]> mapKeys=map.keySet();\n  Iterator<byte[]> iterMap=mapKeys.iterator();\n  byte[] firstMapKey=iterMap.next();\n  byte[] secondMapKey=iterMap.next();\n  assertFalse(iterMap.hasNext());\n  verifyHasBothValues(firstMapKey,secondMapKey,\"f1\".getBytes(),\"f22\".getBytes());\n  byte[] firstMapValue=map.get(firstMapKey);\n  byte[] secondMapValue=map.get(secondMapKey);\n  verifyHasBothValues(firstMapValue,secondMapValue,\"v111\".getBytes(),\"v2222\".getBytes());\n  assertNotNull(fkeys.get());\n  Iterator<byte[]> iter=fkeys.get().iterator();\n  byte[] firstKey=iter.next();\n  byte[] secondKey=iter.next();\n  assertFalse(iter.hasNext());\n  verifyHasBothValues(firstKey,secondKey,\"f1\".getBytes(),\"f22\".getBytes());\n  assertNotNull(fordered.get());\n  assertArrayEquals(\"v2222\".getBytes(),fordered.get().get(0));\n  assertArrayEquals(\"v111\".getBytes(),fordered.get().get(1));\n  assertNotNull(fvals.get());\n  assertEquals(2,fvals.get().size());\n  byte[] firstValue=fvals.get().get(0);\n  byte[] secondValue=fvals.get().get(1);\n  verifyHasBothValues(firstValue,secondValue,\"v111\".getBytes(),\"v2222\".getBytes());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 34
      },
      "nodeContext" : "byte[] firstKey=iter.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  }, {
    "nodeContext" : "iter.next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 122,
      "startColumnNumber" : 23,
      "endLineNumber" : 122,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 122,
        "startColumnNumber" : 11,
        "endLineNumber" : 122,
        "endColumnNumber" : 34
      },
      "nodeContext" : "secondKey=iter.next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 35
      },
      "nodeContext" : "byte[] secondKey=iter.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2117,
        "startLineNumber" : 89,
        "startColumnNumber" : 47,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  jedis.hset(\"key\".getBytes(),\"f1\".getBytes(),\"v111\".getBytes());\n  jedis.hset(\"key\".getBytes(),\"f22\".getBytes(),\"v2222\".getBytes());\n  Pipeline p=jedis.pipelined();\n  Response<Map<byte[],byte[]>> fmap=p.hgetAll(\"key\".getBytes());\n  Response<Set<byte[]>> fkeys=p.hkeys(\"key\".getBytes());\n  Response<List<byte[]>> fordered=p.hmget(\"key\".getBytes(),\"f22\".getBytes(),\"f1\".getBytes());\n  Response<List<byte[]>> fvals=p.hvals(\"key\".getBytes());\n  p.sync();\n  assertNotNull(fmap.get());\n  Map<byte[],byte[]> map=fmap.get();\n  Set<byte[]> mapKeys=map.keySet();\n  Iterator<byte[]> iterMap=mapKeys.iterator();\n  byte[] firstMapKey=iterMap.next();\n  byte[] secondMapKey=iterMap.next();\n  assertFalse(iterMap.hasNext());\n  verifyHasBothValues(firstMapKey,secondMapKey,\"f1\".getBytes(),\"f22\".getBytes());\n  byte[] firstMapValue=map.get(firstMapKey);\n  byte[] secondMapValue=map.get(secondMapKey);\n  verifyHasBothValues(firstMapValue,secondMapValue,\"v111\".getBytes(),\"v2222\".getBytes());\n  assertNotNull(fkeys.get());\n  Iterator<byte[]> iter=fkeys.get().iterator();\n  byte[] firstKey=iter.next();\n  byte[] secondKey=iter.next();\n  assertFalse(iter.hasNext());\n  verifyHasBothValues(firstKey,secondKey,\"f1\".getBytes(),\"f22\".getBytes());\n  assertNotNull(fordered.get());\n  assertArrayEquals(\"v2222\".getBytes(),fordered.get().get(0));\n  assertArrayEquals(\"v111\".getBytes(),fordered.get().get(1));\n  assertNotNull(fvals.get());\n  assertEquals(2,fvals.get().size());\n  byte[] firstValue=fvals.get().get(0);\n  byte[] secondValue=fvals.get().get(1);\n  verifyHasBothValues(firstValue,secondValue,\"v111\".getBytes(),\"v2222\".getBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2170,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 135,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void pipelineBinarySafeHashCommands(){\n  jedis.hset(\"key\".getBytes(),\"f1\".getBytes(),\"v111\".getBytes());\n  jedis.hset(\"key\".getBytes(),\"f22\".getBytes(),\"v2222\".getBytes());\n  Pipeline p=jedis.pipelined();\n  Response<Map<byte[],byte[]>> fmap=p.hgetAll(\"key\".getBytes());\n  Response<Set<byte[]>> fkeys=p.hkeys(\"key\".getBytes());\n  Response<List<byte[]>> fordered=p.hmget(\"key\".getBytes(),\"f22\".getBytes(),\"f1\".getBytes());\n  Response<List<byte[]>> fvals=p.hvals(\"key\".getBytes());\n  p.sync();\n  assertNotNull(fmap.get());\n  Map<byte[],byte[]> map=fmap.get();\n  Set<byte[]> mapKeys=map.keySet();\n  Iterator<byte[]> iterMap=mapKeys.iterator();\n  byte[] firstMapKey=iterMap.next();\n  byte[] secondMapKey=iterMap.next();\n  assertFalse(iterMap.hasNext());\n  verifyHasBothValues(firstMapKey,secondMapKey,\"f1\".getBytes(),\"f22\".getBytes());\n  byte[] firstMapValue=map.get(firstMapKey);\n  byte[] secondMapValue=map.get(secondMapKey);\n  verifyHasBothValues(firstMapValue,secondMapValue,\"v111\".getBytes(),\"v2222\".getBytes());\n  assertNotNull(fkeys.get());\n  Iterator<byte[]> iter=fkeys.get().iterator();\n  byte[] firstKey=iter.next();\n  byte[] secondKey=iter.next();\n  assertFalse(iter.hasNext());\n  verifyHasBothValues(firstKey,secondKey,\"f1\".getBytes(),\"f22\".getBytes());\n  assertNotNull(fordered.get());\n  assertArrayEquals(\"v2222\".getBytes(),fordered.get().get(0));\n  assertArrayEquals(\"v111\".getBytes(),fordered.get().get(1));\n  assertNotNull(fvals.get());\n  assertEquals(2,fvals.get().size());\n  byte[] firstValue=fvals.get().get(0);\n  byte[] secondValue=fvals.get().get(1);\n  verifyHasBothValues(firstValue,secondValue,\"v111\".getBytes(),\"v2222\".getBytes());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 35
      },
      "nodeContext" : "byte[] secondKey=iter.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 121,
    "startColumnNumber" : 22,
    "endLineNumber" : 121,
    "endColumnNumber" : 33
  }, {
    "charLength" : 11,
    "startLineNumber" : 122,
    "startColumnNumber" : 23,
    "endLineNumber" : 122,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}