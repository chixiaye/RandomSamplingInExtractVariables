{
  "id" : 111,
  "expression" : "af",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 116,
      "startColumnNumber" : 6,
      "endLineNumber" : 116,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 116,
        "endColumnNumber" : 22
      },
      "nodeContext" : "af.isInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n else if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 116,
        "endColumnNumber" : 22
      },
      "nodeContext" : "af.isInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 117,
      "startColumnNumber" : 8,
      "endLineNumber" : 117,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 43
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_ABSTRACT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 36
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 118,
        "endColumnNumber" : 36
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 118,
        "endColumnNumber" : 37
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 116,
        "startColumnNumber" : 24,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n else if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 43
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_ABSTRACT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 119,
      "startColumnNumber" : 13,
      "endLineNumber" : 119,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 119,
        "startColumnNumber" : 13,
        "endLineNumber" : 119,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isEnum()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 119,
        "startColumnNumber" : 9,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n else if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 119,
        "startColumnNumber" : 13,
        "endLineNumber" : 119,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isEnum()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 120,
      "startColumnNumber" : 8,
      "endLineNumber" : 120,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 40
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_FINAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 38
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 36
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 120,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 36
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 120,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 37
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 119,
        "startColumnNumber" : 26,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 119,
        "startColumnNumber" : 9,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n else if (af.isEnum()) {\n  af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 40
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_FINAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 127,
      "startColumnNumber" : 8,
      "endLineNumber" : 127,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 41
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_STATIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 127,
        "startColumnNumber" : 3,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 127,
        "startColumnNumber" : 3,
        "endLineNumber" : 127,
        "endColumnNumber" : 74
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 126,
        "startColumnNumber" : 33,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 126,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!cls.getAlias().isInner()) {\n  af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 127,
        "startColumnNumber" : 3,
        "endLineNumber" : 127,
        "endColumnNumber" : 74
      },
      "nodeContext" : "af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 133,
      "startColumnNumber" : 20,
      "endLineNumber" : 133,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 133,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 35
      },
      "nodeContext" : "af.makeString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 36
      },
      "nodeContext" : "clsCode.startLine(af.makeString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 37
      },
      "nodeContext" : "clsCode.startLine(af.makeString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 37
      },
      "nodeContext" : "clsCode.startLine(af.makeString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 134,
      "startColumnNumber" : 6,
      "endLineNumber" : 134,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 134,
        "endColumnNumber" : 22
      },
      "nodeContext" : "af.isInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  if (af.isAnnotation()) {\n    clsCode.add('@');\n  }\n  clsCode.add(\"interface \");\n}\n else if (af.isEnum()) {\n  clsCode.add(\"enum \");\n}\n else {\n  clsCode.add(\"class \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 134,
        "endColumnNumber" : 22
      },
      "nodeContext" : "af.isInterface()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 135,
      "startColumnNumber" : 7,
      "endLineNumber" : 135,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 135,
        "startColumnNumber" : 7,
        "endLineNumber" : 135,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isAnnotation()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 135,
        "startColumnNumber" : 3,
        "endLineNumber" : 137,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (af.isAnnotation()) {\n  clsCode.add('@');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 134,
        "startColumnNumber" : 24,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (af.isAnnotation()) {\n    clsCode.add('@');\n  }\n  clsCode.add(\"interface \");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  if (af.isAnnotation()) {\n    clsCode.add('@');\n  }\n  clsCode.add(\"interface \");\n}\n else if (af.isEnum()) {\n  clsCode.add(\"enum \");\n}\n else {\n  clsCode.add(\"class \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 135,
        "startColumnNumber" : 7,
        "endLineNumber" : 135,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isAnnotation()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 139,
      "startColumnNumber" : 13,
      "endLineNumber" : 139,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 139,
        "startColumnNumber" : 13,
        "endLineNumber" : 139,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isEnum()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 139,
        "startColumnNumber" : 9,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isEnum()) {\n  clsCode.add(\"enum \");\n}\n else {\n  clsCode.add(\"class \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (af.isInterface()) {\n  if (af.isAnnotation()) {\n    clsCode.add('@');\n  }\n  clsCode.add(\"interface \");\n}\n else if (af.isEnum()) {\n  clsCode.add(\"enum \");\n}\n else {\n  clsCode.add(\"class \");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 139,
        "startColumnNumber" : 13,
        "endLineNumber" : 139,
        "endColumnNumber" : 24
      },
      "nodeContext" : "af.isEnum()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  }, {
    "nodeContext" : "af",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 159,
      "startColumnNumber" : 41,
      "endLineNumber" : 159,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 159,
        "startColumnNumber" : 41,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "af.isAnnotation()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 159,
        "startColumnNumber" : 40,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!af.isAnnotation()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!cls.getInterfaces().isEmpty() && !af.isAnnotation()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n  if (cls.getAccessFlags().isInterface()) {\n    clsCode.add(\"extends \");\n  }\n else {\n    clsCode.add(\"implements \");\n  }\n  for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n    ArgType interf=it.next();\n    useClass(clsCode,interf);\n    if (it.hasNext()) {\n      clsCode.add(\", \");\n    }\n  }\n  if (!cls.getInterfaces().isEmpty()) {\n    clsCode.add(' ');\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 114,
        "startColumnNumber" : 53,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void addClassDeclaration(CodeWriter clsCode){\n  AccessInfo af=cls.getAccessFlags();\n  if (af.isInterface()) {\n    af=af.remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n else   if (af.isEnum()) {\n    af=af.remove(AccessFlags.ACC_FINAL).remove(AccessFlags.ACC_ABSTRACT).remove(AccessFlags.ACC_STATIC);\n  }\n  if (!cls.getAlias().isInner()) {\n    af=af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);\n  }\n  annotationGen.addForClass(clsCode);\n  insertSourceFileInfo(clsCode,cls);\n  insertRenameInfo(clsCode,cls);\n  clsCode.startLine(af.makeString());\n  if (af.isInterface()) {\n    if (af.isAnnotation()) {\n      clsCode.add('@');\n    }\n    clsCode.add(\"interface \");\n  }\n else   if (af.isEnum()) {\n    clsCode.add(\"enum \");\n  }\n else {\n    clsCode.add(\"class \");\n  }\n  clsCode.attachDefinition(cls);\n  clsCode.add(cls.getShortName());\n  addGenericMap(clsCode,cls.getGenericMap(),true);\n  clsCode.add(' ');\n  ArgType sup=cls.getSuperClass();\n  if (sup != null && !sup.equals(ArgType.OBJECT) && !sup.getObject().equals(ArgType.ENUM.getObject())) {\n    clsCode.add(\"extends \");\n    useClass(clsCode,sup);\n    clsCode.add(' ');\n  }\n  if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {\n    if (cls.getAccessFlags().isInterface()) {\n      clsCode.add(\"extends \");\n    }\n else {\n      clsCode.add(\"implements \");\n    }\n    for (Iterator<ArgType> it=cls.getInterfaces().iterator(); it.hasNext(); ) {\n      ArgType interf=it.next();\n      useClass(clsCode,interf);\n      if (it.hasNext()) {\n        clsCode.add(\", \");\n      }\n    }\n    if (!cls.getInterfaces().isEmpty()) {\n      clsCode.add(' ');\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 159,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!cls.getInterfaces().isEmpty() && !af.isAnnotation()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.core.dex.info.AccessInfo"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 116,
    "startColumnNumber" : 6,
    "endLineNumber" : 116,
    "endColumnNumber" : 8
  }, {
    "charLength" : 2,
    "startLineNumber" : 117,
    "startColumnNumber" : 8,
    "endLineNumber" : 117,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 119,
    "startColumnNumber" : 13,
    "endLineNumber" : 119,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 120,
    "startColumnNumber" : 8,
    "endLineNumber" : 120,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 127,
    "startColumnNumber" : 8,
    "endLineNumber" : 127,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 133,
    "startColumnNumber" : 20,
    "endLineNumber" : 133,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 134,
    "startColumnNumber" : 6,
    "endLineNumber" : 134,
    "endColumnNumber" : 8
  }, {
    "charLength" : 2,
    "startLineNumber" : 135,
    "startColumnNumber" : 7,
    "endLineNumber" : 135,
    "endColumnNumber" : 9
  }, {
    "charLength" : 2,
    "startLineNumber" : 139,
    "startColumnNumber" : 13,
    "endLineNumber" : 139,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 159,
    "startColumnNumber" : 41,
    "endLineNumber" : 159,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  } ]
}