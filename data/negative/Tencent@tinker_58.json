{
  "id" : 58,
  "expression" : "\"Referrer-affected change class: %s\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/DexClassesComparator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Referrer-affected change class: %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 284,
      "startColumnNumber" : 42,
      "endLineNumber" : 284,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 284,
        "startColumnNumber" : 28,
        "endLineNumber" : 284,
        "endColumnNumber" : 85
      },
      "nodeContext" : "logger.i(TAG,\"Referrer-affected change class: %s\",desc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 284,
        "startColumnNumber" : 28,
        "endLineNumber" : 284,
        "endColumnNumber" : 86
      },
      "nodeContext" : "logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 283,
        "startColumnNumber" : 31,
        "endLineNumber" : 288,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n  changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 504,
        "startLineNumber" : 281,
        "startColumnNumber" : 24,
        "endLineNumber" : 288,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n  logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n}\n else {\n  logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n  changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 280,
        "startColumnNumber" : 23,
        "endLineNumber" : 289,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n    logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n  }\n else {\n    logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n    changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 275,
        "startColumnNumber" : 20,
        "endLineNumber" : 289,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n  if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n    logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n  }\n else {\n    logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n    changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 876,
        "startLineNumber" : 274,
        "startColumnNumber" : 65,
        "endLineNumber" : 291,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n      changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n    }\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1915,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 295,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (compareMode) {\ncase COMPARE_MODE_NORMAL:{\n    if (!isSameClass(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n      if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n        logger.i(TAG,\"Ignored changed class: %s\",desc);\n      }\n else {\n        logger.i(TAG,\"Changed class: %s\",desc);\n        changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n      }\n    }\n    break;\n  }\ncase COMPARE_MODE_REFERRER_AFFECTED_CHANGE_ONLY:{\n  if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n      changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n    }\n  }\n  break;\n}\ndefault:{\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2107,
        "startLineNumber" : 252,
        "startColumnNumber" : 51,
        "endLineNumber" : 296,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DexClassInfo oldClassInfo=oldClassDescriptorToClassInfoMap.get(desc);\n  DexClassInfo newClassInfo=newClassDescriptorToClassInfoMap.get(desc);\nswitch (compareMode) {\ncase COMPARE_MODE_NORMAL:{\n      if (!isSameClass(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n        if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n          logger.i(TAG,\"Ignored changed class: %s\",desc);\n        }\n else {\n          logger.i(TAG,\"Changed class: %s\",desc);\n          changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n        }\n      }\n      break;\n    }\ncase COMPARE_MODE_REFERRER_AFFECTED_CHANGE_ONLY:{\n    if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n      if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n        logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n      }\n else {\n        logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n        changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n      }\n    }\n    break;\n  }\ndefault:{\n  break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 252,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String desc : mayBeChangedClassDescs) {\n  DexClassInfo oldClassInfo=oldClassDescriptorToClassInfoMap.get(desc);\n  DexClassInfo newClassInfo=newClassDescriptorToClassInfoMap.get(desc);\nswitch (compareMode) {\ncase COMPARE_MODE_NORMAL:{\n      if (!isSameClass(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n        if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n          logger.i(TAG,\"Ignored changed class: %s\",desc);\n        }\n else {\n          logger.i(TAG,\"Changed class: %s\",desc);\n          changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n        }\n      }\n      break;\n    }\ncase COMPARE_MODE_REFERRER_AFFECTED_CHANGE_ONLY:{\n    if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n      if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n        logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n      }\n else {\n        logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n        changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n      }\n    }\n    break;\n  }\ndefault:{\n  break;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 141,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6059,
        "startLineNumber" : 168,
        "startColumnNumber" : 71,
        "endLineNumber" : 297,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  addedClassInfoList.clear();\n  deletedClassInfoList.clear();\n  changedClassDescToClassInfosMap.clear();\n  oldDescriptorOfClassesToCheck.clear();\n  newDescriptorOfClassesToCheck.clear();\n  oldClassDescriptorToClassInfoMap.clear();\n  newClassDescriptorToClassInfoMap.clear();\n  refAffectedClassDescs.clear();\n  for (  Dex oldDex : oldDexGroup.dexes) {\n    int classDefIndex=0;\n    for (    ClassDef oldClassDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(oldClassDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        if (!oldDescriptorOfClassesToCheck.add(desc)) {\n          throw new IllegalStateException(String.format(\"duplicate class descriptor [%s] in different old dexes.\",desc));\n        }\n      }\n      DexClassInfo classInfo=new DexClassInfo(desc,classDefIndex,oldClassDef,oldDex);\n      ++classDefIndex;\n      oldClassDescriptorToClassInfoMap.put(desc,classInfo);\n    }\n  }\n  for (  Dex newDex : newDexGroup.dexes) {\n    int classDefIndex=0;\n    for (    ClassDef newClassDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(newClassDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        if (!newDescriptorOfClassesToCheck.add(desc)) {\n          throw new IllegalStateException(String.format(\"duplicate class descriptor [%s] in different new dexes.\",desc));\n        }\n      }\n      DexClassInfo classInfo=new DexClassInfo(desc,classDefIndex,newClassDef,newDex);\n      ++classDefIndex;\n      newClassDescriptorToClassInfoMap.put(desc,classInfo);\n    }\n  }\n  Set<String> deletedClassDescs=new HashSet<>(oldDescriptorOfClassesToCheck);\n  deletedClassDescs.removeAll(newDescriptorOfClassesToCheck);\n  for (  String desc : deletedClassDescs) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored deleted class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Deleted class: %s\",desc);\n      deletedClassInfoList.add(oldClassDescriptorToClassInfoMap.get(desc));\n    }\n  }\n  Set<String> addedClassDescs=new HashSet<>(newDescriptorOfClassesToCheck);\n  addedClassDescs.removeAll(oldDescriptorOfClassesToCheck);\n  for (  String desc : addedClassDescs) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored added class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Added class: %s\",desc);\n      addedClassInfoList.add(newClassDescriptorToClassInfoMap.get(desc));\n    }\n  }\n  Set<String> mayBeChangedClassDescs=new HashSet<>(oldDescriptorOfClassesToCheck);\n  mayBeChangedClassDescs.retainAll(newDescriptorOfClassesToCheck);\n  for (  String desc : mayBeChangedClassDescs) {\n    DexClassInfo oldClassInfo=oldClassDescriptorToClassInfoMap.get(desc);\n    DexClassInfo newClassInfo=newClassDescriptorToClassInfoMap.get(desc);\nswitch (compareMode) {\ncase COMPARE_MODE_NORMAL:{\n        if (!isSameClass(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n          if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n            logger.i(TAG,\"Ignored changed class: %s\",desc);\n          }\n else {\n            logger.i(TAG,\"Changed class: %s\",desc);\n            changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n          }\n        }\n        break;\n      }\ncase COMPARE_MODE_REFERRER_AFFECTED_CHANGE_ONLY:{\n      if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n        if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n          logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n        }\n else {\n          logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n          changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n        }\n      }\n      break;\n    }\ndefault:{\n    break;\n  }\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 462,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6126,
        "startLineNumber" : 168,
        "startColumnNumber" : 4,
        "endLineNumber" : 297,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void startCheck(DexGroup oldDexGroup,DexGroup newDexGroup){\n  addedClassInfoList.clear();\n  deletedClassInfoList.clear();\n  changedClassDescToClassInfosMap.clear();\n  oldDescriptorOfClassesToCheck.clear();\n  newDescriptorOfClassesToCheck.clear();\n  oldClassDescriptorToClassInfoMap.clear();\n  newClassDescriptorToClassInfoMap.clear();\n  refAffectedClassDescs.clear();\n  for (  Dex oldDex : oldDexGroup.dexes) {\n    int classDefIndex=0;\n    for (    ClassDef oldClassDef : oldDex.classDefs()) {\n      String desc=oldDex.typeNames().get(oldClassDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        if (!oldDescriptorOfClassesToCheck.add(desc)) {\n          throw new IllegalStateException(String.format(\"duplicate class descriptor [%s] in different old dexes.\",desc));\n        }\n      }\n      DexClassInfo classInfo=new DexClassInfo(desc,classDefIndex,oldClassDef,oldDex);\n      ++classDefIndex;\n      oldClassDescriptorToClassInfoMap.put(desc,classInfo);\n    }\n  }\n  for (  Dex newDex : newDexGroup.dexes) {\n    int classDefIndex=0;\n    for (    ClassDef newClassDef : newDex.classDefs()) {\n      String desc=newDex.typeNames().get(newClassDef.typeIndex);\n      if (Utils.isStringMatchesPatterns(desc,patternsOfClassDescToCheck)) {\n        if (!newDescriptorOfClassesToCheck.add(desc)) {\n          throw new IllegalStateException(String.format(\"duplicate class descriptor [%s] in different new dexes.\",desc));\n        }\n      }\n      DexClassInfo classInfo=new DexClassInfo(desc,classDefIndex,newClassDef,newDex);\n      ++classDefIndex;\n      newClassDescriptorToClassInfoMap.put(desc,classInfo);\n    }\n  }\n  Set<String> deletedClassDescs=new HashSet<>(oldDescriptorOfClassesToCheck);\n  deletedClassDescs.removeAll(newDescriptorOfClassesToCheck);\n  for (  String desc : deletedClassDescs) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored deleted class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Deleted class: %s\",desc);\n      deletedClassInfoList.add(oldClassDescriptorToClassInfoMap.get(desc));\n    }\n  }\n  Set<String> addedClassDescs=new HashSet<>(newDescriptorOfClassesToCheck);\n  addedClassDescs.removeAll(oldDescriptorOfClassesToCheck);\n  for (  String desc : addedClassDescs) {\n    if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n      logger.i(TAG,\"Ignored added class: %s\",desc);\n    }\n else {\n      logger.i(TAG,\"Added class: %s\",desc);\n      addedClassInfoList.add(newClassDescriptorToClassInfoMap.get(desc));\n    }\n  }\n  Set<String> mayBeChangedClassDescs=new HashSet<>(oldDescriptorOfClassesToCheck);\n  mayBeChangedClassDescs.retainAll(newDescriptorOfClassesToCheck);\n  for (  String desc : mayBeChangedClassDescs) {\n    DexClassInfo oldClassInfo=oldClassDescriptorToClassInfoMap.get(desc);\n    DexClassInfo newClassInfo=newClassDescriptorToClassInfoMap.get(desc);\nswitch (compareMode) {\ncase COMPARE_MODE_NORMAL:{\n        if (!isSameClass(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n          if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n            logger.i(TAG,\"Ignored changed class: %s\",desc);\n          }\n else {\n            logger.i(TAG,\"Changed class: %s\",desc);\n            changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n          }\n        }\n        break;\n      }\ncase COMPARE_MODE_REFERRER_AFFECTED_CHANGE_ONLY:{\n      if (isClassChangeAffectedToReferrer(oldClassInfo.owner,newClassInfo.owner,oldClassInfo.classDef,newClassInfo.classDef)) {\n        if (Utils.isStringMatchesPatterns(desc,patternsOfIgnoredRemovedClassDesc)) {\n          logger.i(TAG,\"Ignored referrer-affected changed class: %s\",desc);\n        }\n else {\n          logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n          changedClassDescToClassInfosMap.put(desc,new DexClassInfo[]{oldClassInfo,newClassInfo});\n        }\n      }\n      break;\n    }\ndefault:{\n    break;\n  }\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 474,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 284,
        "startColumnNumber" : 28,
        "endLineNumber" : 284,
        "endColumnNumber" : 86
      },
      "nodeContext" : "logger.i(TAG,\"Referrer-affected change class: %s\",desc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 284,
    "startColumnNumber" : 42,
    "endLineNumber" : 284,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}