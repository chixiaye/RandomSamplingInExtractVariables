{
  "id" : 490,
  "expression" : "\"XXX0+YY0\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"XXX0+YY0\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 144,
      "startColumnNumber" : 58,
      "endLineNumber" : 144,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6194,
        "startLineNumber" : 83,
        "startColumnNumber" : 95,
        "endLineNumber" : 183,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestOutputTopic<Integer,String> outputTopic=driver.createOutputTopic(output,Serdes.Integer().deserializer(),Serdes.String().deserializer());\n  for (int i=0; i < 2; i++) {\n    inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n  }\n  inputTopic1.pipeInput(null,\"SomeVal\",42L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"X0+null\",5L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"X1+null\",6L);\n  assertTrue(outputTopic.isEmpty());\n  for (int i=0; i < 2; i++) {\n    inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n  }\n  inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"X0+Y0\",5L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"X1+Y1\",10L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+Y0\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+Y1\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+null\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+null\",7L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+YY0\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+YY1\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+YY1\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XXX2+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XXX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  inputTopic2.pipeInput(expectedKeys[0],null,5L);\n  inputTopic2.pipeInput(expectedKeys[1],null,7L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+null\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+null\",7L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXXX0+null\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXXX1+null\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XXXX2+YY2\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XXXX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  inputTopic1.pipeInput(expectedKeys[0],null,0L);\n  inputTopic1.pipeInput(expectedKeys[1],null,42L);\n  inputTopic1.pipeInput(expectedKeys[2],null,5L);\n  inputTopic1.pipeInput(expectedKeys[3],null,20L);\n  assertOutputKeyValueTimestamp(outputTopic,0,null,0L);\n  assertOutputKeyValueTimestamp(outputTopic,1,null,42L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"null+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"null+YY3\",20L);\n  assertTrue(outputTopic.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 508,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6281,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 183,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n  final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestOutputTopic<Integer,String> outputTopic=driver.createOutputTopic(output,Serdes.Integer().deserializer(),Serdes.String().deserializer());\n  for (int i=0; i < 2; i++) {\n    inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n  }\n  inputTopic1.pipeInput(null,\"SomeVal\",42L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"X0+null\",5L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"X1+null\",6L);\n  assertTrue(outputTopic.isEmpty());\n  for (int i=0; i < 2; i++) {\n    inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n  }\n  inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"X0+Y0\",5L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"X1+Y1\",10L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+Y0\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+Y1\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+null\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+null\",7L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+YY0\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+YY1\",7L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+YY1\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XXX2+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XXX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  inputTopic2.pipeInput(expectedKeys[0],null,5L);\n  inputTopic2.pipeInput(expectedKeys[1],null,7L);\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+null\",6L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+null\",7L);\n  assertTrue(outputTopic.isEmpty());\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n  }\n  assertOutputKeyValueTimestamp(outputTopic,0,\"XXXX0+null\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,1,\"XXXX1+null\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"XXXX2+YY2\",13L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"XXXX3+YY3\",15L);\n  assertTrue(outputTopic.isEmpty());\n  inputTopic1.pipeInput(expectedKeys[0],null,0L);\n  inputTopic1.pipeInput(expectedKeys[1],null,42L);\n  inputTopic1.pipeInput(expectedKeys[2],null,5L);\n  inputTopic1.pipeInput(expectedKeys[3],null,20L);\n  assertOutputKeyValueTimestamp(outputTopic,0,null,0L);\n  assertOutputKeyValueTimestamp(outputTopic,1,null,42L);\n  assertOutputKeyValueTimestamp(outputTopic,2,\"null+YY2\",10L);\n  assertOutputKeyValueTimestamp(outputTopic,3,\"null+YY3\",20L);\n  assertTrue(outputTopic.isEmpty());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 522,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7085,
        "startLineNumber" : 63,
        "startColumnNumber" : 27,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamsBuilder builder=new StreamsBuilder();\n  final int[] expectedKeys=new int[]{0,1,2,3};\n  final KTable<Integer,String> table1;\n  final KTable<Integer,String> table2;\n  final KTable<Integer,String> joined;\n  table1=builder.table(topic1,consumed);\n  table2=builder.table(topic2,consumed);\n  joined=table1.outerJoin(table2,MockValueJoiner.TOSTRING_JOINER);\n  joined.toStream().to(output);\n  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n  assertEquals(1,copartitionGroups.size());\n  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());\n  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n    final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestOutputTopic<Integer,String> outputTopic=driver.createOutputTopic(output,Serdes.Integer().deserializer(),Serdes.String().deserializer());\n    for (int i=0; i < 2; i++) {\n      inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n    }\n    inputTopic1.pipeInput(null,\"SomeVal\",42L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"X0+null\",5L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"X1+null\",6L);\n    assertTrue(outputTopic.isEmpty());\n    for (int i=0; i < 2; i++) {\n      inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n    }\n    inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"X0+Y0\",5L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"X1+Y1\",10L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+Y0\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+Y1\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+null\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+null\",7L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+YY0\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+YY1\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+YY1\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XXX2+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XXX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    inputTopic2.pipeInput(expectedKeys[0],null,5L);\n    inputTopic2.pipeInput(expectedKeys[1],null,7L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+null\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+null\",7L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXXX0+null\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXXX1+null\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XXXX2+YY2\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XXXX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    inputTopic1.pipeInput(expectedKeys[0],null,0L);\n    inputTopic1.pipeInput(expectedKeys[1],null,42L);\n    inputTopic1.pipeInput(expectedKeys[2],null,5L);\n    inputTopic1.pipeInput(expectedKeys[3],null,20L);\n    assertOutputKeyValueTimestamp(outputTopic,0,null,0L);\n    assertOutputKeyValueTimestamp(outputTopic,1,null,42L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"null+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"null+YY3\",20L);\n    assertTrue(outputTopic.isEmpty());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 658,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7118,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testJoin(){\n  final StreamsBuilder builder=new StreamsBuilder();\n  final int[] expectedKeys=new int[]{0,1,2,3};\n  final KTable<Integer,String> table1;\n  final KTable<Integer,String> table2;\n  final KTable<Integer,String> joined;\n  table1=builder.table(topic1,consumed);\n  table2=builder.table(topic2,consumed);\n  joined=table1.outerJoin(table2,MockValueJoiner.TOSTRING_JOINER);\n  joined.toStream().to(output);\n  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n  assertEquals(1,copartitionGroups.size());\n  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());\n  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n    final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestOutputTopic<Integer,String> outputTopic=driver.createOutputTopic(output,Serdes.Integer().deserializer(),Serdes.String().deserializer());\n    for (int i=0; i < 2; i++) {\n      inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n    }\n    inputTopic1.pipeInput(null,\"SomeVal\",42L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"X0+null\",5L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"X1+null\",6L);\n    assertTrue(outputTopic.isEmpty());\n    for (int i=0; i < 2; i++) {\n      inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n    }\n    inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"X0+Y0\",5L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"X1+Y1\",10L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+Y0\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+Y1\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+null\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+null\",7L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XX0+YY0\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XX1+YY1\",7L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XX2+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+YY1\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XXX2+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XXX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    inputTopic2.pipeInput(expectedKeys[0],null,5L);\n    inputTopic2.pipeInput(expectedKeys[1],null,7L);\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+null\",6L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXX1+null\",7L);\n    assertTrue(outputTopic.isEmpty());\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n    }\n    assertOutputKeyValueTimestamp(outputTopic,0,\"XXXX0+null\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,1,\"XXXX1+null\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"XXXX2+YY2\",13L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"XXXX3+YY3\",15L);\n    assertTrue(outputTopic.isEmpty());\n    inputTopic1.pipeInput(expectedKeys[0],null,0L);\n    inputTopic1.pipeInput(expectedKeys[1],null,42L);\n    inputTopic1.pipeInput(expectedKeys[2],null,5L);\n    inputTopic1.pipeInput(expectedKeys[3],null,20L);\n    assertOutputKeyValueTimestamp(outputTopic,0,null,0L);\n    assertOutputKeyValueTimestamp(outputTopic,1,null,42L);\n    assertOutputKeyValueTimestamp(outputTopic,2,\"null+YY2\",10L);\n    assertOutputKeyValueTimestamp(outputTopic,3,\"null+YY3\",20L);\n    assertTrue(outputTopic.isEmpty());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 664,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 144,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertOutputKeyValueTimestamp(outputTopic,0,\"XXX0+YY0\",6L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 144,
    "startColumnNumber" : 58,
    "endLineNumber" : 144,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}