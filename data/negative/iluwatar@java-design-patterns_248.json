{
  "id" : 248,
  "expression" : "true",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/commander/src/main/java/com/iluwatar/commander/Retry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 107,
      "startColumnNumber" : 13,
      "endLineNumber" : 107,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 19
      },
      "nodeContext" : "do {\n  try {\n    op.operation(list);\n    return;\n  }\n catch (  Exception e) {\n    this.errors.add(e);\n    if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {\n      this.handleError.handleIssue(obj,e);\n      return;\n    }\n    try {\n      long testDelay=(long)Math.pow(2,this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);\n      long delay=Math.min(testDelay,this.maxDelay);\n      Thread.sleep(delay);\n    }\n catch (    InterruptedException f) {\n    }\n  }\n}\n while (true);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 98,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 87,
        "startColumnNumber" : 51,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  do {\n    try {\n      op.operation(list);\n      return;\n    }\n catch (    Exception e) {\n      this.errors.add(e);\n      if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {\n        this.handleError.handleIssue(obj,e);\n        return;\n      }\n      try {\n        long testDelay=(long)Math.pow(2,this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);\n        long delay=Math.min(testDelay,this.maxDelay);\n        Thread.sleep(delay);\n      }\n catch (      InterruptedException f) {\n      }\n    }\n  }\n while (true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performing the operation with retries.\n * @param list is the exception list\n * @param obj  is the parameter to be passed into handleIsuue method\n */\npublic void perform(List<Exception> list,T obj){\n  do {\n    try {\n      op.operation(list);\n      return;\n    }\n catch (    Exception e) {\n      this.errors.add(e);\n      if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {\n        this.handleError.handleIssue(obj,e);\n        return;\n      }\n      try {\n        long testDelay=(long)Math.pow(2,this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);\n        long delay=Math.min(testDelay,this.maxDelay);\n        Thread.sleep(delay);\n      }\n catch (      InterruptedException f) {\n      }\n    }\n  }\n while (true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 19
      },
      "nodeContext" : "do {\n  try {\n    op.operation(list);\n    return;\n  }\n catch (  Exception e) {\n    this.errors.add(e);\n    if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {\n      this.handleError.handleIssue(obj,e);\n      return;\n    }\n    try {\n      long testDelay=(long)Math.pow(2,this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);\n      long delay=Math.min(testDelay,this.maxDelay);\n      Thread.sleep(delay);\n    }\n catch (    InterruptedException f) {\n    }\n  }\n}\n while (true);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 98,
      "astHeight" : 16
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 107,
    "startColumnNumber" : 13,
    "endLineNumber" : 107,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}