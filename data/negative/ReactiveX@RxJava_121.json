{
  "id" : 121,
  "expression" : "TimeUnit.DAYS",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/schedulers/ExecutorSchedulerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit.DAYS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 79,
      "startColumnNumber" : 53,
      "endLineNumber" : 79,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 67
      },
      "nodeContext" : "w.schedulePeriodically(action,0,1,TimeUnit.DAYS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 68
      },
      "nodeContext" : "w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 75,
        "startColumnNumber" : 40,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i % 50000 == 0) {\n    System.out.println(\"  -> still scheduling: \" + i);\n  }\n  w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (i % 50000 == 0) {\n    System.out.println(\"  -> still scheduling: \" + i);\n  }\n  w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 67,
        "startColumnNumber" : 22,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final CountDownLatch cdl=new CountDownLatch(n);\n  final Runnable action=new Runnable(){\n    @Override public void run(){\n      cdl.countDown();\n    }\n  }\n;\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n  }\n  System.out.println(\"Waiting for the first round to finish...\");\n  cdl.await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 935,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (periodic) {\n  final CountDownLatch cdl=new CountDownLatch(n);\n  final Runnable action=new Runnable(){\n    @Override public void run(){\n      cdl.countDown();\n    }\n  }\n;\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n  }\n  System.out.println(\"Waiting for the first round to finish...\");\n  cdl.await();\n}\n else {\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 50,
        "startColumnNumber" : 112,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(\"Wait before GC\");\n  Thread.sleep(1000);\n  System.out.println(\"GC\");\n  System.gc();\n  Thread.sleep(1000);\n  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();\n  MemoryUsage memHeap=memoryMXBean.getHeapMemoryUsage();\n  long initial=memHeap.getUsed();\n  System.out.printf(\"Starting: %.3f MB%n\",initial / 1024.0 / 1024.0);\n  int n=100 * 1000;\n  if (periodic) {\n    final CountDownLatch cdl=new CountDownLatch(n);\n    final Runnable action=new Runnable(){\n      @Override public void run(){\n        cdl.countDown();\n      }\n    }\n;\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n    }\n    System.out.println(\"Waiting for the first round to finish...\");\n    cdl.await();\n  }\n else {\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n    }\n  }\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long after=memHeap.getUsed();\n  System.out.printf(\"Peak: %.3f MB%n\",after / 1024.0 / 1024.0);\n  w.dispose();\n  System.out.println(\"Wait before second GC\");\n  System.out.println(\"JDK 6 purge is N log N because it removes and shifts one by one\");\n  int t=(int)(n * Math.log(n) / 100) + SchedulerPoolFactory.PURGE_PERIOD_SECONDS * 1000;\n  while (t > 0) {\n    System.out.printf(\"  >> Waiting for purge: %.2f s remaining%n\",t / 1000d);\n    Thread.sleep(1000);\n    t-=1000;\n  }\n  System.out.println(\"Second GC\");\n  System.gc();\n  Thread.sleep(1000);\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long finish=memHeap.getUsed();\n  System.out.printf(\"After: %.3f MB%n\",finish / 1024.0 / 1024.0);\n  if (finish > initial * 5) {\n    fail(String.format(\"Tasks retained: %.3f -> %.3f -> %.3f\",initial / 1024 / 1024.0,after / 1024 / 1024.0,finish / 1024 / 1024d));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2702,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void testCancelledRetention(Scheduler.Worker w,boolean periodic) throws InterruptedException {\n  System.out.println(\"Wait before GC\");\n  Thread.sleep(1000);\n  System.out.println(\"GC\");\n  System.gc();\n  Thread.sleep(1000);\n  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();\n  MemoryUsage memHeap=memoryMXBean.getHeapMemoryUsage();\n  long initial=memHeap.getUsed();\n  System.out.printf(\"Starting: %.3f MB%n\",initial / 1024.0 / 1024.0);\n  int n=100 * 1000;\n  if (periodic) {\n    final CountDownLatch cdl=new CountDownLatch(n);\n    final Runnable action=new Runnable(){\n      @Override public void run(){\n        cdl.countDown();\n      }\n    }\n;\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n    }\n    System.out.println(\"Waiting for the first round to finish...\");\n    cdl.await();\n  }\n else {\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n    }\n  }\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long after=memHeap.getUsed();\n  System.out.printf(\"Peak: %.3f MB%n\",after / 1024.0 / 1024.0);\n  w.dispose();\n  System.out.println(\"Wait before second GC\");\n  System.out.println(\"JDK 6 purge is N log N because it removes and shifts one by one\");\n  int t=(int)(n * Math.log(n) / 100) + SchedulerPoolFactory.PURGE_PERIOD_SECONDS * 1000;\n  while (t > 0) {\n    System.out.printf(\"  >> Waiting for purge: %.2f s remaining%n\",t / 1000d);\n    Thread.sleep(1000);\n    t-=1000;\n  }\n  System.out.println(\"Second GC\");\n  System.gc();\n  Thread.sleep(1000);\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long finish=memHeap.getUsed();\n  System.out.printf(\"After: %.3f MB%n\",finish / 1024.0 / 1024.0);\n  if (finish > initial * 5) {\n    fail(String.format(\"Tasks retained: %.3f -> %.3f -> %.3f\",initial / 1024 / 1024.0,after / 1024 / 1024.0,finish / 1024 / 1024d));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 68
      },
      "nodeContext" : "w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  }, {
    "nodeContext" : "TimeUnit.DAYS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 89,
      "startColumnNumber" : 57,
      "endLineNumber" : 89,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 71
      },
      "nodeContext" : "w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 72
      },
      "nodeContext" : "w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 85,
        "startColumnNumber" : 40,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (i % 50000 == 0) {\n    System.out.println(\"  -> still scheduling: \" + i);\n  }\n  w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (i % 50000 == 0) {\n    System.out.println(\"  -> still scheduling: \" + i);\n  }\n  w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 84,
        "startColumnNumber" : 15,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 935,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (periodic) {\n  final CountDownLatch cdl=new CountDownLatch(n);\n  final Runnable action=new Runnable(){\n    @Override public void run(){\n      cdl.countDown();\n    }\n  }\n;\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n  }\n  System.out.println(\"Waiting for the first round to finish...\");\n  cdl.await();\n}\n else {\n  for (int i=0; i < n; i++) {\n    if (i % 50000 == 0) {\n      System.out.println(\"  -> still scheduling: \" + i);\n    }\n    w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 50,
        "startColumnNumber" : 112,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(\"Wait before GC\");\n  Thread.sleep(1000);\n  System.out.println(\"GC\");\n  System.gc();\n  Thread.sleep(1000);\n  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();\n  MemoryUsage memHeap=memoryMXBean.getHeapMemoryUsage();\n  long initial=memHeap.getUsed();\n  System.out.printf(\"Starting: %.3f MB%n\",initial / 1024.0 / 1024.0);\n  int n=100 * 1000;\n  if (periodic) {\n    final CountDownLatch cdl=new CountDownLatch(n);\n    final Runnable action=new Runnable(){\n      @Override public void run(){\n        cdl.countDown();\n      }\n    }\n;\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n    }\n    System.out.println(\"Waiting for the first round to finish...\");\n    cdl.await();\n  }\n else {\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n    }\n  }\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long after=memHeap.getUsed();\n  System.out.printf(\"Peak: %.3f MB%n\",after / 1024.0 / 1024.0);\n  w.dispose();\n  System.out.println(\"Wait before second GC\");\n  System.out.println(\"JDK 6 purge is N log N because it removes and shifts one by one\");\n  int t=(int)(n * Math.log(n) / 100) + SchedulerPoolFactory.PURGE_PERIOD_SECONDS * 1000;\n  while (t > 0) {\n    System.out.printf(\"  >> Waiting for purge: %.2f s remaining%n\",t / 1000d);\n    Thread.sleep(1000);\n    t-=1000;\n  }\n  System.out.println(\"Second GC\");\n  System.gc();\n  Thread.sleep(1000);\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long finish=memHeap.getUsed();\n  System.out.printf(\"After: %.3f MB%n\",finish / 1024.0 / 1024.0);\n  if (finish > initial * 5) {\n    fail(String.format(\"Tasks retained: %.3f -> %.3f -> %.3f\",initial / 1024 / 1024.0,after / 1024 / 1024.0,finish / 1024 / 1024d));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2702,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void testCancelledRetention(Scheduler.Worker w,boolean periodic) throws InterruptedException {\n  System.out.println(\"Wait before GC\");\n  Thread.sleep(1000);\n  System.out.println(\"GC\");\n  System.gc();\n  Thread.sleep(1000);\n  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();\n  MemoryUsage memHeap=memoryMXBean.getHeapMemoryUsage();\n  long initial=memHeap.getUsed();\n  System.out.printf(\"Starting: %.3f MB%n\",initial / 1024.0 / 1024.0);\n  int n=100 * 1000;\n  if (periodic) {\n    final CountDownLatch cdl=new CountDownLatch(n);\n    final Runnable action=new Runnable(){\n      @Override public void run(){\n        cdl.countDown();\n      }\n    }\n;\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedulePeriodically(action,0,1,TimeUnit.DAYS);\n    }\n    System.out.println(\"Waiting for the first round to finish...\");\n    cdl.await();\n  }\n else {\n    for (int i=0; i < n; i++) {\n      if (i % 50000 == 0) {\n        System.out.println(\"  -> still scheduling: \" + i);\n      }\n      w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n    }\n  }\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long after=memHeap.getUsed();\n  System.out.printf(\"Peak: %.3f MB%n\",after / 1024.0 / 1024.0);\n  w.dispose();\n  System.out.println(\"Wait before second GC\");\n  System.out.println(\"JDK 6 purge is N log N because it removes and shifts one by one\");\n  int t=(int)(n * Math.log(n) / 100) + SchedulerPoolFactory.PURGE_PERIOD_SECONDS * 1000;\n  while (t > 0) {\n    System.out.printf(\"  >> Waiting for purge: %.2f s remaining%n\",t / 1000d);\n    Thread.sleep(1000);\n    t-=1000;\n  }\n  System.out.println(\"Second GC\");\n  System.gc();\n  Thread.sleep(1000);\n  memHeap=memoryMXBean.getHeapMemoryUsage();\n  long finish=memHeap.getUsed();\n  System.out.printf(\"After: %.3f MB%n\",finish / 1024.0 / 1024.0);\n  if (finish > initial * 5) {\n    fail(String.format(\"Tasks retained: %.3f -> %.3f -> %.3f\",initial / 1024 / 1024.0,after / 1024 / 1024.0,finish / 1024 / 1024d));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 72
      },
      "nodeContext" : "w.schedule(Functions.emptyRunnable(),1,TimeUnit.DAYS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 79,
    "startColumnNumber" : 53,
    "endLineNumber" : 79,
    "endColumnNumber" : 66
  }, {
    "charLength" : 13,
    "startLineNumber" : 89,
    "startColumnNumber" : 57,
    "endLineNumber" : 89,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}