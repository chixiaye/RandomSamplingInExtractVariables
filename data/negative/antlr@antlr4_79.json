{
  "id" : 79,
  "expression" : "\"a : (A | A B) EOF;\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestATNInterpreter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"a : (A | A B) EOF;\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 106,
      "startColumnNumber" : 3,
      "endLineNumber" : 106,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 105,
        "startColumnNumber" : 3,
        "endLineNumber" : 106,
        "endColumnNumber" : 23
      },
      "nodeContext" : "\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 104,
        "startColumnNumber" : 14,
        "endLineNumber" : 106,
        "endColumnNumber" : 24
      },
      "nodeContext" : "new Grammar(\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 106,
        "endColumnNumber" : 24
      },
      "nodeContext" : "g=new Grammar(\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Grammar g=new Grammar(\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 98,
        "startColumnNumber" : 68,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\");\n  checkMatchedAlt(lg,g,\"a\",1);\n  checkMatchedAlt(lg,g,\"ab\",2);\n  try {\n    checkMatchedAlt(lg,g,\"ac\",1);\n  }\n catch (  NoViableAltException re) {\n    assertEquals(1,re.getOffendingToken().getTokenIndex());\n    assertEquals(3,re.getOffendingToken().getType());\n    throw re;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 625,
        "startLineNumber" : 97,
        "startColumnNumber" : 1,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test(expected=NoViableAltException.class) public void testMustTrackPreviousGoodAltWithEOF() throws Exception {\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\");\n  checkMatchedAlt(lg,g,\"a\",1);\n  checkMatchedAlt(lg,g,\"ab\",2);\n  try {\n    checkMatchedAlt(lg,g,\"ac\",1);\n  }\n catch (  NoViableAltException re) {\n    assertEquals(1,re.getOffendingToken().getTokenIndex());\n    assertEquals(3,re.getOffendingToken().getType());\n    throw re;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 105,
        "startColumnNumber" : 3,
        "endLineNumber" : 106,
        "endColumnNumber" : 23
      },
      "nodeContext" : "\"parser grammar T;\\n\" + \"a : (A | A B) EOF;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 106,
    "startColumnNumber" : 3,
    "endLineNumber" : 106,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}