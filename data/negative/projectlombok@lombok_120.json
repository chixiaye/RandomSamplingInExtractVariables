{
  "id" : 120,
  "expression" : "field == null",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/LombokNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "field == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 179,
      "startColumnNumber" : 6,
      "endLineNumber" : 179,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "field == null || field.getKind() != Kind.FIELD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 85
      },
      "nodeContext" : "if (field == null || field.getKind() != Kind.FIELD) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 176,
        "startColumnNumber" : 49,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 172,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@code @Foo int x, y;} is stored in both javac and ecj as 2 FieldDeclarations, both with the same annotation as child.The normal  {@code up()} method can't handle having multiple parents, but this one can.\n */\npublic Collection<L> upFromAnnotationToFields(){\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 85
      },
      "nodeContext" : "if (field == null || field.getKind() != Kind.FIELD) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 179,
    "startColumnNumber" : 6,
    "endLineNumber" : 179,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}