{
  "id" : 108,
  "expression" : "groupInstanceId",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractPartitionAssignorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groupInstanceId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 77,
      "startColumnNumber" : 46,
      "endLineNumber" : 77,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 77,
        "startColumnNumber" : 27,
        "endLineNumber" : 77,
        "endColumnNumber" : 62
      },
      "nodeContext" : "new MemberInfo(id,groupInstanceId)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 77,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 62
      },
      "nodeContext" : "m=new MemberInfo(id,groupInstanceId)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 63
      },
      "nodeContext" : "MemberInfo m=new MemberInfo(id,groupInstanceId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 71,
        "startColumnNumber" : 38,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String id=Integer.toString(i + 100);\n  Optional<String> groupInstanceId=rand.nextInt(bound) < bound / 2 ? Optional.of(id) : Optional.empty();\n  MemberInfo m=new MemberInfo(id,groupInstanceId);\n  memberInfoList.add(m);\n  if (m.groupInstanceId.isPresent()) {\n    staticMemberList.add(m);\n  }\n else {\n    dynamicMemberList.add(m);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  String id=Integer.toString(i + 100);\n  Optional<String> groupInstanceId=rand.nextInt(bound) < bound / 2 ? Optional.of(id) : Optional.empty();\n  MemberInfo m=new MemberInfo(id,groupInstanceId);\n  memberInfoList.add(m);\n  if (m.groupInstanceId.isPresent()) {\n    staticMemberList.add(m);\n  }\n else {\n    dynamicMemberList.add(m);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1088,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Random rand=new Random();\n  int bound=2;\n  List<MemberInfo> memberInfoList=new ArrayList<>();\n  List<MemberInfo> staticMemberList=new ArrayList<>();\n  List<MemberInfo> dynamicMemberList=new ArrayList<>();\n  for (int i=0; i < 100; i++) {\n    String id=Integer.toString(i + 100);\n    Optional<String> groupInstanceId=rand.nextInt(bound) < bound / 2 ? Optional.of(id) : Optional.empty();\n    MemberInfo m=new MemberInfo(id,groupInstanceId);\n    memberInfoList.add(m);\n    if (m.groupInstanceId.isPresent()) {\n      staticMemberList.add(m);\n    }\n else {\n      dynamicMemberList.add(m);\n    }\n  }\n  staticMemberList.addAll(dynamicMemberList);\n  Collections.shuffle(memberInfoList);\n  assertEquals(staticMemberList,Utils.sorted(memberInfoList));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMergeSortManyMemberInfo(){\n  Random rand=new Random();\n  int bound=2;\n  List<MemberInfo> memberInfoList=new ArrayList<>();\n  List<MemberInfo> staticMemberList=new ArrayList<>();\n  List<MemberInfo> dynamicMemberList=new ArrayList<>();\n  for (int i=0; i < 100; i++) {\n    String id=Integer.toString(i + 100);\n    Optional<String> groupInstanceId=rand.nextInt(bound) < bound / 2 ? Optional.of(id) : Optional.empty();\n    MemberInfo m=new MemberInfo(id,groupInstanceId);\n    memberInfoList.add(m);\n    if (m.groupInstanceId.isPresent()) {\n      staticMemberList.add(m);\n    }\n else {\n      dynamicMemberList.add(m);\n    }\n  }\n  staticMemberList.addAll(dynamicMemberList);\n  Collections.shuffle(memberInfoList);\n  assertEquals(staticMemberList,Utils.sorted(memberInfoList));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 63
      },
      "nodeContext" : "MemberInfo m=new MemberInfo(id,groupInstanceId);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 77,
    "startColumnNumber" : 46,
    "endLineNumber" : 77,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}