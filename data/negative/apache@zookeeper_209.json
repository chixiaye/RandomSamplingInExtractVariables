{
  "id" : 209,
  "expression" : "e",
  "projectName" : "apache@zookeeper",
  "commitID" : "344a30792bb30430a5949fa20ae69872c42394e0",
  "filePath" : "zookeeper/java/src/com/yahoo/zookeeper/server/FinalRequestProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 218,
      "startColumnNumber" : 18,
      "endLineNumber" : 218,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 218,
        "startColumnNumber" : 18,
        "endLineNumber" : 218,
        "endColumnNumber" : 29
      },
      "nodeContext" : "e.getCode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 29
      },
      "nodeContext" : "err=e.getCode()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 30
      },
      "nodeContext" : "err=e.getCode();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 217,
        "startColumnNumber" : 36,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  err=e.getCode();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 217,
        "startColumnNumber" : 10,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (KeeperException e) {\n  err=e.getCode();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 30
      },
      "nodeContext" : "err=e.getCode();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.yahoo.zookeeper.KeeperException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 228,
      "startColumnNumber" : 32,
      "endLineNumber" : 228,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ZooLog.logException(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ZooLog.logException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 219,
        "startColumnNumber" : 30,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 219,
        "startColumnNumber" : 10,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  ZooLog.logWarn(\"****************************** \" + request);\n  StringBuffer sb=new StringBuffer();\n  ByteBuffer bb=request.request;\n  bb.rewind();\n  while (bb.hasRemaining()) {\n    sb.append(Integer.toHexString(bb.get() & 0xff));\n  }\n  ZooLog.logWarn(sb.toString());\n  ZooLog.logException(e);\n  err=Code.MarshallingError;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4687,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 230,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n    throw new KeeperException(((ErrorTxn)request.txn).getErr());\n  }\nswitch (request.type) {\ncase OpCode.ping:    request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n  return;\ncase OpCode.createSession:request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 583,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 228,
        "startColumnNumber" : 12,
        "endLineNumber" : 228,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ZooLog.logException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Exception"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 239,
      "startColumnNumber" : 32,
      "endLineNumber" : 239,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ZooLog.logException(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ZooLog.logException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 238,
        "startColumnNumber" : 32,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ZooLog.logException(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 238,
        "startColumnNumber" : 10,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  ZooLog.logException(e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 240,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  request.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\n  ZooLog.logException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7626,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 921,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7670,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  long traceMask=ZooLog.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooLog.SERVER_PING_TRACE_MASK;\n  }\n  ZooLog.logRequest('E',request,\"\",traceMask);\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        ZooLog.logError(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          ZooLog.logWarn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  int err=0;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw new KeeperException(((ErrorTxn)request.txn).getErr());\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=rc.err;\nbreak;\ncase OpCode.delete:err=rc.err;\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=rc.err;\nbreak;\ncase OpCode.closeSession:err=rc.err;\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException(Code.BadArguments);\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nArrayList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException(Code.NoNode);\n}\nPrepRequestProcessor.checkACL(zks,n.acl,ZooDefs.Perms.READ,request.authInfo);\nArrayList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.getCode();\n}\ncatch (Exception e) {\nZooLog.logWarn(\"****************************** \" + request);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nZooLog.logWarn(sb.toString());\nZooLog.logException(e);\nerr=Code.MarshallingError;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err);\nlong latency=System.currentTimeMillis() - request.createTime;\ncount++;\navg+=latency;\nrequest.cnxn.setStats(latency,(avg / count));\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nZooLog.logException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 929,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ZooLog.logException(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 218,
    "startColumnNumber" : 18,
    "endLineNumber" : 218,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 228,
    "startColumnNumber" : 32,
    "endLineNumber" : 228,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 239,
    "startColumnNumber" : 32,
    "endLineNumber" : 239,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}