{
  "id" : 119,
  "expression" : "unprefixedGrammarFileName",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/MojoUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "unprefixedGrammarFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 73,
      "startColumnNumber" : 12,
      "endLineNumber" : 73,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "unprefixedGrammarFileName.getParent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 57
      },
      "nodeContext" : "unprefixedGrammarFileName.getParent() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (unprefixedGrammarFileName.getParent() == null) {\n  return \"\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 62,
        "startColumnNumber" : 82,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String srcPath=sourceDirectory.getPath() + File.separator;\n  String path=grammarFile.getPath();\n  if (!path.startsWith(srcPath)) {\n    throw new IllegalArgumentException(\"expected \" + path + \" to be prefixed with \"+ sourceDirectory);\n  }\n  File unprefixedGrammarFileName=new File(path.substring(srcPath.length()));\n  if (unprefixedGrammarFileName.getParent() == null) {\n    return \"\";\n  }\n  return unprefixedGrammarFileName.getParent() + File.separator;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1253,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given the source directory File object and the full PATH to a grammar, produce the path to the named grammar file in relative terms to the  {@code sourceDirectory}. This will then allow ANTLR to produce output relative to the base of the output directory and reflect the input organization of the grammar files.\n * @param sourceDirectory  The source directory {@link File} object\n * @param grammarFileName  The full path to the input grammar file\n * @return  The path to the grammar file relative to the source directory\n */\npublic static String findSourceSubdir(File sourceDirectory,File grammarFile){\n  String srcPath=sourceDirectory.getPath() + File.separator;\n  String path=grammarFile.getPath();\n  if (!path.startsWith(srcPath)) {\n    throw new IllegalArgumentException(\"expected \" + path + \" to be prefixed with \"+ sourceDirectory);\n  }\n  File unprefixedGrammarFileName=new File(path.substring(srcPath.length()));\n  if (unprefixedGrammarFileName.getParent() == null) {\n    return \"\";\n  }\n  return unprefixedGrammarFileName.getParent() + File.separator;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 57
      },
      "nodeContext" : "unprefixedGrammarFileName.getParent() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "unprefixedGrammarFileName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 77,
      "startColumnNumber" : 15,
      "endLineNumber" : 77,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 77,
        "startColumnNumber" : 15,
        "endLineNumber" : 77,
        "endColumnNumber" : 52
      },
      "nodeContext" : "unprefixedGrammarFileName.getParent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 77,
        "startColumnNumber" : 15,
        "endLineNumber" : 77,
        "endColumnNumber" : 69
      },
      "nodeContext" : "unprefixedGrammarFileName.getParent() + File.separator",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return unprefixedGrammarFileName.getParent() + File.separator;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 62,
        "startColumnNumber" : 82,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String srcPath=sourceDirectory.getPath() + File.separator;\n  String path=grammarFile.getPath();\n  if (!path.startsWith(srcPath)) {\n    throw new IllegalArgumentException(\"expected \" + path + \" to be prefixed with \"+ sourceDirectory);\n  }\n  File unprefixedGrammarFileName=new File(path.substring(srcPath.length()));\n  if (unprefixedGrammarFileName.getParent() == null) {\n    return \"\";\n  }\n  return unprefixedGrammarFileName.getParent() + File.separator;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1253,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given the source directory File object and the full PATH to a grammar, produce the path to the named grammar file in relative terms to the  {@code sourceDirectory}. This will then allow ANTLR to produce output relative to the base of the output directory and reflect the input organization of the grammar files.\n * @param sourceDirectory  The source directory {@link File} object\n * @param grammarFileName  The full path to the input grammar file\n * @return  The path to the grammar file relative to the source directory\n */\npublic static String findSourceSubdir(File sourceDirectory,File grammarFile){\n  String srcPath=sourceDirectory.getPath() + File.separator;\n  String path=grammarFile.getPath();\n  if (!path.startsWith(srcPath)) {\n    throw new IllegalArgumentException(\"expected \" + path + \" to be prefixed with \"+ sourceDirectory);\n  }\n  File unprefixedGrammarFileName=new File(path.substring(srcPath.length()));\n  if (unprefixedGrammarFileName.getParent() == null) {\n    return \"\";\n  }\n  return unprefixedGrammarFileName.getParent() + File.separator;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return unprefixedGrammarFileName.getParent() + File.separator;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 73,
    "startColumnNumber" : 12,
    "endLineNumber" : 73,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 77,
    "startColumnNumber" : 15,
    "endLineNumber" : 77,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}