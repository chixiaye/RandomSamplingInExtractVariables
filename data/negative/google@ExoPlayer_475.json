{
  "id" : 475,
  "expression" : "dataSpec.position",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/datasource/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dataSpec.position",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 71,
      "startColumnNumber" : 8,
      "endLineNumber" : 71,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "dataSpec.position > data.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (dataSpec.position > data.length) {\n  data=null;\n  throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 48,
        "startColumnNumber" : 57,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  transferInitializing(dataSpec);\n  this.dataSpec=dataSpec;\n  Uri uri=dataSpec.uri;\n  String scheme=uri.getScheme();\n  Assertions.checkArgument(SCHEME_DATA.equals(scheme),\"Unsupported scheme: \" + scheme);\n  String[] uriParts=Util.split(uri.getSchemeSpecificPart(),\",\");\n  if (uriParts.length != 2) {\n    throw ParserException.createForMalformedDataOfUnknownType(\"Unexpected URI format: \" + uri,null);\n  }\n  String dataString=uriParts[1];\n  if (uriParts[0].contains(\";base64\")) {\n    try {\n      data=Base64.decode(dataString,Base64.DEFAULT);\n    }\n catch (    IllegalArgumentException e) {\n      throw ParserException.createForMalformedDataOfUnknownType(\"Error while parsing Base64 encoded string: \" + dataString,e);\n    }\n  }\n else {\n    data=Util.getUtf8Bytes(URLDecoder.decode(dataString,Charsets.US_ASCII.name()));\n  }\n  if (dataSpec.position > data.length) {\n    data=null;\n    throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);\n  }\n  readPosition=(int)dataSpec.position;\n  bytesRemaining=data.length - readPosition;\n  if (dataSpec.length != C.LENGTH_UNSET) {\n    bytesRemaining=(int)min(bytesRemaining,dataSpec.length);\n  }\n  transferStarted(dataSpec);\n  return dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : bytesRemaining;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public long open(DataSpec dataSpec) throws IOException {\n  transferInitializing(dataSpec);\n  this.dataSpec=dataSpec;\n  Uri uri=dataSpec.uri;\n  String scheme=uri.getScheme();\n  Assertions.checkArgument(SCHEME_DATA.equals(scheme),\"Unsupported scheme: \" + scheme);\n  String[] uriParts=Util.split(uri.getSchemeSpecificPart(),\",\");\n  if (uriParts.length != 2) {\n    throw ParserException.createForMalformedDataOfUnknownType(\"Unexpected URI format: \" + uri,null);\n  }\n  String dataString=uriParts[1];\n  if (uriParts[0].contains(\";base64\")) {\n    try {\n      data=Base64.decode(dataString,Base64.DEFAULT);\n    }\n catch (    IllegalArgumentException e) {\n      throw ParserException.createForMalformedDataOfUnknownType(\"Error while parsing Base64 encoded string: \" + dataString,e);\n    }\n  }\n else {\n    data=Util.getUtf8Bytes(URLDecoder.decode(dataString,Charsets.US_ASCII.name()));\n  }\n  if (dataSpec.position > data.length) {\n    data=null;\n    throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);\n  }\n  readPosition=(int)dataSpec.position;\n  bytesRemaining=data.length - readPosition;\n  if (dataSpec.length != C.LENGTH_UNSET) {\n    bytesRemaining=(int)min(bytesRemaining,dataSpec.length);\n  }\n  transferStarted(dataSpec);\n  return dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : bytesRemaining;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "dataSpec.position > data.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "long"
  }, {
    "nodeContext" : "dataSpec.position",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 75,
      "startColumnNumber" : 25,
      "endLineNumber" : 75,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 42
      },
      "nodeContext" : "(int)dataSpec.position",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 42
      },
      "nodeContext" : "readPosition=(int)dataSpec.position",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 43
      },
      "nodeContext" : "readPosition=(int)dataSpec.position;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 48,
        "startColumnNumber" : 57,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  transferInitializing(dataSpec);\n  this.dataSpec=dataSpec;\n  Uri uri=dataSpec.uri;\n  String scheme=uri.getScheme();\n  Assertions.checkArgument(SCHEME_DATA.equals(scheme),\"Unsupported scheme: \" + scheme);\n  String[] uriParts=Util.split(uri.getSchemeSpecificPart(),\",\");\n  if (uriParts.length != 2) {\n    throw ParserException.createForMalformedDataOfUnknownType(\"Unexpected URI format: \" + uri,null);\n  }\n  String dataString=uriParts[1];\n  if (uriParts[0].contains(\";base64\")) {\n    try {\n      data=Base64.decode(dataString,Base64.DEFAULT);\n    }\n catch (    IllegalArgumentException e) {\n      throw ParserException.createForMalformedDataOfUnknownType(\"Error while parsing Base64 encoded string: \" + dataString,e);\n    }\n  }\n else {\n    data=Util.getUtf8Bytes(URLDecoder.decode(dataString,Charsets.US_ASCII.name()));\n  }\n  if (dataSpec.position > data.length) {\n    data=null;\n    throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);\n  }\n  readPosition=(int)dataSpec.position;\n  bytesRemaining=data.length - readPosition;\n  if (dataSpec.length != C.LENGTH_UNSET) {\n    bytesRemaining=(int)min(bytesRemaining,dataSpec.length);\n  }\n  transferStarted(dataSpec);\n  return dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : bytesRemaining;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public long open(DataSpec dataSpec) throws IOException {\n  transferInitializing(dataSpec);\n  this.dataSpec=dataSpec;\n  Uri uri=dataSpec.uri;\n  String scheme=uri.getScheme();\n  Assertions.checkArgument(SCHEME_DATA.equals(scheme),\"Unsupported scheme: \" + scheme);\n  String[] uriParts=Util.split(uri.getSchemeSpecificPart(),\",\");\n  if (uriParts.length != 2) {\n    throw ParserException.createForMalformedDataOfUnknownType(\"Unexpected URI format: \" + uri,null);\n  }\n  String dataString=uriParts[1];\n  if (uriParts[0].contains(\";base64\")) {\n    try {\n      data=Base64.decode(dataString,Base64.DEFAULT);\n    }\n catch (    IllegalArgumentException e) {\n      throw ParserException.createForMalformedDataOfUnknownType(\"Error while parsing Base64 encoded string: \" + dataString,e);\n    }\n  }\n else {\n    data=Util.getUtf8Bytes(URLDecoder.decode(dataString,Charsets.US_ASCII.name()));\n  }\n  if (dataSpec.position > data.length) {\n    data=null;\n    throw new DataSourceException(PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE);\n  }\n  readPosition=(int)dataSpec.position;\n  bytesRemaining=data.length - readPosition;\n  if (dataSpec.length != C.LENGTH_UNSET) {\n    bytesRemaining=(int)min(bytesRemaining,dataSpec.length);\n  }\n  transferStarted(dataSpec);\n  return dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : bytesRemaining;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 43
      },
      "nodeContext" : "readPosition=(int)dataSpec.position;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 71,
    "startColumnNumber" : 8,
    "endLineNumber" : 71,
    "endColumnNumber" : 25
  }, {
    "charLength" : 17,
    "startLineNumber" : 75,
    "startColumnNumber" : 25,
    "endLineNumber" : 75,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}