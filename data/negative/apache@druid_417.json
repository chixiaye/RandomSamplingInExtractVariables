{
  "id" : 417,
  "expression" : "Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n  @Override public Iterator<Sequence<Integer>> make(){\n    return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n  }\n  @Override public void cleanup(  Iterator<Sequence<Integer>> iterFromMake){\n    ++closedCount[0];\n  }\n}\n))",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/java/util/common/guava/ConcatSequenceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n  @Override public Iterator<Sequence<Integer>> make(){\n    return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n  }\n  @Override public void cleanup(  Iterator<Sequence<Integer>> iterFromMake){\n    ++closedCount[0];\n  }\n}\n))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 658,
      "startLineNumber" : 109,
      "startColumnNumber" : 34,
      "endLineNumber" : 129,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 89,
    "astHeight" : 12,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 109,
        "startColumnNumber" : 28,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "seq=Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n  @Override public Iterator<Sequence<Integer>> make(){\n    return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n  }\n  @Override public void cleanup(  Iterator<Sequence<Integer>> iterFromMake){\n    ++closedCount[0];\n  }\n}\n))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 91,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 689,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final Sequence<Integer> seq=Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n  @Override public Iterator<Sequence<Integer>> make(){\n    return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n  }\n  @Override public void cleanup(  Iterator<Sequence<Integer>> iterFromMake){\n    ++closedCount[0];\n  }\n}\n));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1688,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int[] closedCount={0};\n  final Sequence<Integer> seq=Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n    @Override public Iterator<Sequence<Integer>> make(){\n      return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n    }\n    @Override public void cleanup(    Iterator<Sequence<Integer>> iterFromMake){\n      ++closedCount[0];\n    }\n  }\n));\n  Assert.assertEquals(9,seq.accumulate(1,new Accumulator<Integer,Integer>(){\n    @Override public Integer accumulate(    Integer accumulated,    Integer in){\n      Assert.assertEquals(accumulated,in);\n      return accumulated + 1;\n    }\n  }\n).intValue());\n  Assert.assertEquals(1,closedCount[0]);\n  final Yielder<Integer> yielder=seq.toYielder(1,new YieldingAccumulator<Integer,Integer>(){\n    @Override public Integer accumulate(    Integer accumulated,    Integer in){\n      Assert.assertEquals(accumulated,in);\n      return accumulated + 1;\n    }\n  }\n);\n  Assert.assertEquals(9,yielder.get().intValue());\n  Assert.assertEquals(1,closedCount[0]);\n  yielder.close();\n  Assert.assertEquals(2,closedCount[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testClosingOfSequenceSequence() throws Exception {\n  final int[] closedCount={0};\n  final Sequence<Integer> seq=Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n    @Override public Iterator<Sequence<Integer>> make(){\n      return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n    }\n    @Override public void cleanup(    Iterator<Sequence<Integer>> iterFromMake){\n      ++closedCount[0];\n    }\n  }\n));\n  Assert.assertEquals(9,seq.accumulate(1,new Accumulator<Integer,Integer>(){\n    @Override public Integer accumulate(    Integer accumulated,    Integer in){\n      Assert.assertEquals(accumulated,in);\n      return accumulated + 1;\n    }\n  }\n).intValue());\n  Assert.assertEquals(1,closedCount[0]);\n  final Yielder<Integer> yielder=seq.toYielder(1,new YieldingAccumulator<Integer,Integer>(){\n    @Override public Integer accumulate(    Integer accumulated,    Integer in){\n      Assert.assertEquals(accumulated,in);\n      return accumulated + 1;\n    }\n  }\n);\n  Assert.assertEquals(9,yielder.get().intValue());\n  Assert.assertEquals(1,closedCount[0]);\n  yielder.close();\n  Assert.assertEquals(2,closedCount[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 689,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final Sequence<Integer> seq=Sequences.concat(new BaseSequence<>(new BaseSequence.IteratorMaker<Sequence<Integer>,Iterator<Sequence<Integer>>>(){\n  @Override public Iterator<Sequence<Integer>> make(){\n    return Arrays.asList(Sequences.simple(Arrays.asList(1,2,3,4)),Sequences.simple(Arrays.asList(5,6,7,8))).iterator();\n  }\n  @Override public void cleanup(  Iterator<Sequence<Integer>> iterFromMake){\n    ++closedCount[0];\n  }\n}\n));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 98,
      "astHeight" : 14
    },
    "tokenLength" : 34,
    "type" : "org.apache.druid.java.util.common.guava.Sequence<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 658,
    "startLineNumber" : 109,
    "startColumnNumber" : 34,
    "endLineNumber" : 129,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}