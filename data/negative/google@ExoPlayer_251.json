{
  "id" : 251,
  "expression" : "new SubMesh[subMeshCount]",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/ProjectionDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SubMesh[subMeshCount]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 203,
      "startColumnNumber" : 26,
      "endLineNumber" : 203,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 203,
        "startColumnNumber" : 14,
        "endLineNumber" : 203,
        "endColumnNumber" : 51
      },
      "nodeContext" : "subMeshes=new SubMesh[subMeshCount]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 203,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 52
      },
      "nodeContext" : "SubMesh[] subMeshes=new SubMesh[subMeshCount];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2683,
        "startLineNumber" : 163,
        "startColumnNumber" : 67,
        "endLineNumber" : 229,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int coordinateCount=input.readInt();\n  if (coordinateCount > MAX_COORDINATE_COUNT) {\n    return null;\n  }\n  float[] coordinates=new float[coordinateCount];\n  for (int coordinate=0; coordinate < coordinateCount; coordinate++) {\n    coordinates[coordinate]=input.readFloat();\n  }\n  int vertexCount=input.readInt();\n  if (vertexCount > MAX_VERTEX_COUNT) {\n    return null;\n  }\n  final double log2=Math.log(2.0);\n  int coordinateCountSizeBits=(int)Math.ceil(Math.log(2.0 * coordinateCount) / log2);\n  ParsableBitArray bitInput=new ParsableBitArray(input.getData());\n  bitInput.setPosition(input.getPosition() * 8);\n  float[] vertices=new float[vertexCount * 5];\n  int[] coordinateIndices=new int[5];\n  int vertexIndex=0;\n  for (int vertex=0; vertex < vertexCount; vertex++) {\n    for (int i=0; i < 5; i++) {\n      int coordinateIndex=coordinateIndices[i] + decodeZigZag(bitInput.readBits(coordinateCountSizeBits));\n      if (coordinateIndex >= coordinateCount || coordinateIndex < 0) {\n        return null;\n      }\n      vertices[vertexIndex++]=coordinates[coordinateIndex];\n      coordinateIndices[i]=coordinateIndex;\n    }\n  }\n  bitInput.setPosition(((bitInput.getPosition() + 7) & ~7));\n  int subMeshCount=bitInput.readBits(32);\n  SubMesh[] subMeshes=new SubMesh[subMeshCount];\n  for (int i=0; i < subMeshCount; i++) {\n    int textureId=bitInput.readBits(8);\n    int drawMode=bitInput.readBits(8);\n    int triangleIndexCount=bitInput.readBits(32);\n    if (triangleIndexCount > MAX_TRIANGLE_INDICES) {\n      return null;\n    }\n    int vertexCountSizeBits=(int)Math.ceil(Math.log(2.0 * vertexCount) / log2);\n    int index=0;\n    float[] triangleVertices=new float[triangleIndexCount * 3];\n    float[] textureCoords=new float[triangleIndexCount * 2];\n    for (int counter=0; counter < triangleIndexCount; counter++) {\n      index+=decodeZigZag(bitInput.readBits(vertexCountSizeBits));\n      if (index < 0 || index >= vertexCount) {\n        return null;\n      }\n      triangleVertices[counter * 3]=vertices[index * 5];\n      triangleVertices[counter * 3 + 1]=vertices[index * 5 + 1];\n      triangleVertices[counter * 3 + 2]=vertices[index * 5 + 2];\n      textureCoords[counter * 2]=vertices[index * 5 + 3];\n      textureCoords[counter * 2 + 1]=vertices[index * 5 + 4];\n    }\n    subMeshes[i]=new SubMesh(textureId,triangleVertices,textureCoords,drawMode);\n  }\n  return new Mesh(subMeshes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 448,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2748,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static @Nullable Mesh parseMesh(ParsableByteArray input){\n  int coordinateCount=input.readInt();\n  if (coordinateCount > MAX_COORDINATE_COUNT) {\n    return null;\n  }\n  float[] coordinates=new float[coordinateCount];\n  for (int coordinate=0; coordinate < coordinateCount; coordinate++) {\n    coordinates[coordinate]=input.readFloat();\n  }\n  int vertexCount=input.readInt();\n  if (vertexCount > MAX_VERTEX_COUNT) {\n    return null;\n  }\n  final double log2=Math.log(2.0);\n  int coordinateCountSizeBits=(int)Math.ceil(Math.log(2.0 * coordinateCount) / log2);\n  ParsableBitArray bitInput=new ParsableBitArray(input.getData());\n  bitInput.setPosition(input.getPosition() * 8);\n  float[] vertices=new float[vertexCount * 5];\n  int[] coordinateIndices=new int[5];\n  int vertexIndex=0;\n  for (int vertex=0; vertex < vertexCount; vertex++) {\n    for (int i=0; i < 5; i++) {\n      int coordinateIndex=coordinateIndices[i] + decodeZigZag(bitInput.readBits(coordinateCountSizeBits));\n      if (coordinateIndex >= coordinateCount || coordinateIndex < 0) {\n        return null;\n      }\n      vertices[vertexIndex++]=coordinates[coordinateIndex];\n      coordinateIndices[i]=coordinateIndex;\n    }\n  }\n  bitInput.setPosition(((bitInput.getPosition() + 7) & ~7));\n  int subMeshCount=bitInput.readBits(32);\n  SubMesh[] subMeshes=new SubMesh[subMeshCount];\n  for (int i=0; i < subMeshCount; i++) {\n    int textureId=bitInput.readBits(8);\n    int drawMode=bitInput.readBits(8);\n    int triangleIndexCount=bitInput.readBits(32);\n    if (triangleIndexCount > MAX_TRIANGLE_INDICES) {\n      return null;\n    }\n    int vertexCountSizeBits=(int)Math.ceil(Math.log(2.0 * vertexCount) / log2);\n    int index=0;\n    float[] triangleVertices=new float[triangleIndexCount * 3];\n    float[] textureCoords=new float[triangleIndexCount * 2];\n    for (int counter=0; counter < triangleIndexCount; counter++) {\n      index+=decodeZigZag(bitInput.readBits(vertexCountSizeBits));\n      if (index < 0 || index >= vertexCount) {\n        return null;\n      }\n      triangleVertices[counter * 3]=vertices[index * 5];\n      triangleVertices[counter * 3 + 1]=vertices[index * 5 + 1];\n      triangleVertices[counter * 3 + 2]=vertices[index * 5 + 2];\n      textureCoords[counter * 2]=vertices[index * 5 + 3];\n      textureCoords[counter * 2 + 1]=vertices[index * 5 + 4];\n    }\n    subMeshes[i]=new SubMesh(textureId,triangleVertices,textureCoords,drawMode);\n  }\n  return new Mesh(subMeshes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 460,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 203,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 52
      },
      "nodeContext" : "SubMesh[] subMeshes=new SubMesh[subMeshCount];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.video.spherical.Projection.SubMesh[]"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 203,
    "startColumnNumber" : 26,
    "endLineNumber" : 203,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}