{
  "id" : 317,
  "expression" : "subscriber",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subscriber",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 74,
      "startColumnNumber" : 30,
      "endLineNumber" : 74,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "subscriptions.add(subscriber)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 42
      },
      "nodeContext" : "subscriptions.add(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 72,
        "startColumnNumber" : 43,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < subCount; ++i) {\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2811,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 42
      },
      "nodeContext" : "subscriptions.add(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.TestSubscriber<java.lang.Long>"
  }, {
    "nodeContext" : "subscriber",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 75,
      "startColumnNumber" : 28,
      "endLineNumber" : 75,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "longs.subscribe(subscriber)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "longs.subscribe(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 72,
        "startColumnNumber" : 43,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < subCount; ++i) {\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2811,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "longs.subscribe(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.TestSubscriber<java.lang.Long>"
  }, {
    "nodeContext" : "subscriber",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 76,
      "startColumnNumber" : 28,
      "endLineNumber" : 76,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "subscribers.add(subscriber)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "subscribers.add(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 72,
        "startColumnNumber" : 43,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < subCount; ++i) {\n  TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n  subscriptions.add(subscriber);\n  longs.subscribe(subscriber);\n  subscribers.add(subscriber);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2811,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Flowable<Long> longs=Flowable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestSubscriber<Long>> subscribers=new ArrayList<TestSubscriber<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestSubscriber<Long> subscriber=new TestSubscriber<Long>();\n    subscriptions.add(subscriber);\n    longs.subscribe(subscriber);\n    subscribers.add(subscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "subscribers.add(subscriber);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.TestSubscriber<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 74,
    "startColumnNumber" : 30,
    "endLineNumber" : 74,
    "endColumnNumber" : 40
  }, {
    "charLength" : 10,
    "startLineNumber" : 75,
    "startColumnNumber" : 28,
    "endLineNumber" : 75,
    "endColumnNumber" : 38
  }, {
    "charLength" : 10,
    "startLineNumber" : 76,
    "startColumnNumber" : 28,
    "endLineNumber" : 76,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}