{
  "id" : 422,
  "expression" : "Boolean.FALSE",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.FALSE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 284,
      "startColumnNumber" : 11,
      "endLineNumber" : 284,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 284,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return Boolean.FALSE;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 282,
        "startColumnNumber" : 65,
        "endLineNumber" : 285,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  return Boolean.FALSE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 282,
        "startColumnNumber" : 3,
        "endLineNumber" : 295,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (boolean.class == fieldType || Boolean.class == fieldType) {\n  return Boolean.FALSE;\n}\n else if (fieldType.isArray()) {\n  return Array.newInstance(fieldType.getComponentType(),0);\n}\n else if (Collection.class.isAssignableFrom(fieldType)) {\n  return CollectionFactory.createCollection(fieldType,0);\n}\n else if (Map.class.isAssignableFrom(fieldType)) {\n  return CollectionFactory.createMap(fieldType,0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 281,
        "startColumnNumber" : 6,
        "endLineNumber" : 296,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (boolean.class == fieldType || Boolean.class == fieldType) {\n    return Boolean.FALSE;\n  }\n else   if (fieldType.isArray()) {\n    return Array.newInstance(fieldType.getComponentType(),0);\n  }\n else   if (Collection.class.isAssignableFrom(fieldType)) {\n    return CollectionFactory.createCollection(fieldType,0);\n  }\n else   if (Map.class.isAssignableFrom(fieldType)) {\n    return CollectionFactory.createMap(fieldType,0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 281,
        "startColumnNumber" : 2,
        "endLineNumber" : 301,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (boolean.class == fieldType || Boolean.class == fieldType) {\n    return Boolean.FALSE;\n  }\n else   if (fieldType.isArray()) {\n    return Array.newInstance(fieldType.getComponentType(),0);\n  }\n else   if (Collection.class.isAssignableFrom(fieldType)) {\n    return CollectionFactory.createCollection(fieldType,0);\n  }\n else   if (Map.class.isAssignableFrom(fieldType)) {\n    return CollectionFactory.createMap(fieldType,0);\n  }\n}\n catch (IllegalArgumentException ex) {\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Failed to create default value - falling back to null: \" + ex.getMessage());\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 762,
        "startLineNumber" : 280,
        "startColumnNumber" : 49,
        "endLineNumber" : 304,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    if (boolean.class == fieldType || Boolean.class == fieldType) {\n      return Boolean.FALSE;\n    }\n else     if (fieldType.isArray()) {\n      return Array.newInstance(fieldType.getComponentType(),0);\n    }\n else     if (Collection.class.isAssignableFrom(fieldType)) {\n      return CollectionFactory.createCollection(fieldType,0);\n    }\n else     if (Map.class.isAssignableFrom(fieldType)) {\n      return CollectionFactory.createMap(fieldType,0);\n    }\n  }\n catch (  IllegalArgumentException ex) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Failed to create default value - falling back to null: \" + ex.getMessage());\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 265,
        "startColumnNumber" : 1,
        "endLineNumber" : 304,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine an empty value for the specified field. <p>The default implementation returns: <ul> <li> {@code Boolean.FALSE} for boolean fields<li>an empty array for array types <li>Collection implementations for Collection types <li>Map implementations for Map types <li>else,  {@code null} is used as default</ul>\n * @param fieldType the type of the field\n * @return the empty value (for most fields: {@code null})\n * @since 5.0\n */\n@Nullable public Object getEmptyValue(Class<?> fieldType){\n  try {\n    if (boolean.class == fieldType || Boolean.class == fieldType) {\n      return Boolean.FALSE;\n    }\n else     if (fieldType.isArray()) {\n      return Array.newInstance(fieldType.getComponentType(),0);\n    }\n else     if (Collection.class.isAssignableFrom(fieldType)) {\n      return CollectionFactory.createCollection(fieldType,0);\n    }\n else     if (Map.class.isAssignableFrom(fieldType)) {\n      return CollectionFactory.createMap(fieldType,0);\n    }\n  }\n catch (  IllegalArgumentException ex) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Failed to create default value - falling back to null: \" + ex.getMessage());\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 284,
        "endColumnNumber" : 25
      },
      "nodeContext" : "return Boolean.FALSE;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.Boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 284,
    "startColumnNumber" : 11,
    "endLineNumber" : 284,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}