{
  "id" : 135,
  "expression" : "consumersToFill",
  "projectName" : "apache@kafka",
  "commitID" : "e3ef29ea0300e3ed5edf5c800f914f19273c9851",
  "filePath" : "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1116,
      "startColumnNumber" : 20,
      "endLineNumber" : 1116,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1116,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 51
      },
      "nodeContext" : "consumersToFill.offer(consumer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1116,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 52
      },
      "nodeContext" : "consumersToFill.offer(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 1115,
        "startColumnNumber" : 64,
        "endLineNumber" : 1117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  consumersToFill.offer(consumer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 1115,
        "startColumnNumber" : 16,
        "endLineNumber" : 1117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (threadAssignment.size() < tasksTargetCount) {\n  consumersToFill.offer(consumer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 1097,
        "startColumnNumber" : 52,
        "endLineNumber" : 1118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n  if (isStateful) {\n    for (    final TaskId task : state.prevTasksByLag(consumer)) {\n      if (unassignedTasks.contains(task)) {\n        if (threadAssignment.size() < tasksTargetCount) {\n          threadAssignment.add(task);\n          unassignedTasks.remove(task);\n        }\n else {\n          unassignedTaskToPreviousOwner.put(task,consumer);\n        }\n      }\n    }\n  }\n  if (threadAssignment.size() < tasksTargetCount) {\n    consumersToFill.offer(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1055,
        "startLineNumber" : 1097,
        "startColumnNumber" : 12,
        "endLineNumber" : 1118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (final String consumer : consumers) {\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n  if (isStateful) {\n    for (    final TaskId task : state.prevTasksByLag(consumer)) {\n      if (unassignedTasks.contains(task)) {\n        if (threadAssignment.size() < tasksTargetCount) {\n          threadAssignment.add(task);\n          unassignedTasks.remove(task);\n        }\n else {\n          unassignedTaskToPreviousOwner.put(task,consumer);\n        }\n      }\n    }\n  }\n  if (threadAssignment.size() < tasksTargetCount) {\n    consumersToFill.offer(consumer);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1116,
        "startColumnNumber" : 20,
        "endLineNumber" : 1116,
        "endColumnNumber" : 52
      },
      "nodeContext" : "consumersToFill.offer(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1121,
      "startColumnNumber" : 20,
      "endLineNumber" : 1121,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1121,
        "startColumnNumber" : 20,
        "endLineNumber" : 1121,
        "endColumnNumber" : 45
      },
      "nodeContext" : "consumersToFill.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 1121,
        "startColumnNumber" : 19,
        "endLineNumber" : 1121,
        "endColumnNumber" : 45
      },
      "nodeContext" : "!consumersToFill.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 1121,
        "startColumnNumber" : 12,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!consumersToFill.isEmpty()) {\n  final TaskId task=unassignedTasks.poll();\n  if (task != null) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n    final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n    if (threadTaskCount < minTasksPerThread) {\n      consumersToFill.offer(consumer);\n    }\n  }\n else {\n    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 1121,
        "startColumnNumber" : 19,
        "endLineNumber" : 1121,
        "endColumnNumber" : 45
      },
      "nodeContext" : "!consumersToFill.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1124,
      "startColumnNumber" : 44,
      "endLineNumber" : 1124,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1124,
        "startColumnNumber" : 44,
        "endLineNumber" : 1124,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumersToFill.poll()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1124,
        "startColumnNumber" : 33,
        "endLineNumber" : 1124,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumer=consumersToFill.poll()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1124,
        "startColumnNumber" : 20,
        "endLineNumber" : 1124,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final String consumer=consumersToFill.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 1123,
        "startColumnNumber" : 34,
        "endLineNumber" : 1131,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n  final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n  if (threadTaskCount < minTasksPerThread) {\n    consumersToFill.offer(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 1123,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (task != null) {\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n  final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n  if (threadTaskCount < minTasksPerThread) {\n    consumersToFill.offer(consumer);\n  }\n}\n else {\n  throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 1121,
        "startColumnNumber" : 47,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final TaskId task=unassignedTasks.poll();\n  if (task != null) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n    final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n    if (threadTaskCount < minTasksPerThread) {\n      consumersToFill.offer(consumer);\n    }\n  }\n else {\n    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 1121,
        "startColumnNumber" : 12,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!consumersToFill.isEmpty()) {\n  final TaskId task=unassignedTasks.poll();\n  if (task != null) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n    final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n    if (threadTaskCount < minTasksPerThread) {\n      consumersToFill.offer(consumer);\n    }\n  }\n else {\n    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1124,
        "startColumnNumber" : 20,
        "endLineNumber" : 1124,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final String consumer=consumersToFill.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1129,
      "startColumnNumber" : 24,
      "endLineNumber" : 1129,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 1129,
        "startColumnNumber" : 24,
        "endLineNumber" : 1129,
        "endColumnNumber" : 55
      },
      "nodeContext" : "consumersToFill.offer(consumer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1129,
        "startColumnNumber" : 24,
        "endLineNumber" : 1129,
        "endColumnNumber" : 56
      },
      "nodeContext" : "consumersToFill.offer(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 1128,
        "startColumnNumber" : 61,
        "endLineNumber" : 1130,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  consumersToFill.offer(consumer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (threadTaskCount < minTasksPerThread) {\n  consumersToFill.offer(consumer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 1123,
        "startColumnNumber" : 34,
        "endLineNumber" : 1131,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n  final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n  if (threadTaskCount < minTasksPerThread) {\n    consumersToFill.offer(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 1123,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (task != null) {\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n  final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n  if (threadTaskCount < minTasksPerThread) {\n    consumersToFill.offer(consumer);\n  }\n}\n else {\n  throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 1121,
        "startColumnNumber" : 47,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final TaskId task=unassignedTasks.poll();\n  if (task != null) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n    final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n    if (threadTaskCount < minTasksPerThread) {\n      consumersToFill.offer(consumer);\n    }\n  }\n else {\n    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 1121,
        "startColumnNumber" : 12,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (!consumersToFill.isEmpty()) {\n  final TaskId task=unassignedTasks.poll();\n  if (task != null) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n    final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n    if (threadTaskCount < minTasksPerThread) {\n      consumersToFill.offer(consumer);\n    }\n  }\n else {\n    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1129,
        "startColumnNumber" : 24,
        "endLineNumber" : 1129,
        "endColumnNumber" : 56
      },
      "nodeContext" : "consumersToFill.offer(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1144,
      "startColumnNumber" : 24,
      "endLineNumber" : 1144,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 1144,
        "startColumnNumber" : 24,
        "endLineNumber" : 1144,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumersToFill.add(consumer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 1144,
        "startColumnNumber" : 24,
        "endLineNumber" : 1144,
        "endColumnNumber" : 54
      },
      "nodeContext" : "consumersToFill.add(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 1143,
        "startColumnNumber" : 56,
        "endLineNumber" : 1145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  consumersToFill.add(consumer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 1143,
        "startColumnNumber" : 20,
        "endLineNumber" : 1145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (taskCount == minTasksPerThread) {\n  consumersToFill.add(consumer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 1141,
        "startColumnNumber" : 56,
        "endLineNumber" : 1146,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n  if (taskCount == minTasksPerThread) {\n    consumersToFill.add(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 1141,
        "startColumnNumber" : 16,
        "endLineNumber" : 1146,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (final String consumer : consumers) {\n  final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n  if (taskCount == minTasksPerThread) {\n    consumersToFill.add(consumer);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 1140,
        "startColumnNumber" : 44,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1516,
        "startLineNumber" : 1140,
        "startColumnNumber" : 12,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 1144,
        "startColumnNumber" : 24,
        "endLineNumber" : 1144,
        "endColumnNumber" : 54
      },
      "nodeContext" : "consumersToFill.add(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1152,
      "startColumnNumber" : 24,
      "endLineNumber" : 1152,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 1152,
        "startColumnNumber" : 24,
        "endLineNumber" : 1152,
        "endColumnNumber" : 58
      },
      "nodeContext" : "consumersToFill.contains(consumer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 1152,
        "startColumnNumber" : 24,
        "endLineNumber" : 1152,
        "endColumnNumber" : 92
      },
      "nodeContext" : "consumersToFill.contains(consumer) && unassignedTasks.contains(task)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1157,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n  assignment.get(consumer).add(task);\n  unassignedTasks.remove(task);\n  consumersToFill.remove(consumer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 1149,
        "startColumnNumber" : 107,
        "endLineNumber" : 1158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final TaskId task=taskEntry.getKey();\n  final String consumer=taskEntry.getValue();\n  if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n    assignment.get(consumer).add(task);\n    unassignedTasks.remove(task);\n    consumersToFill.remove(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 1149,
        "startColumnNumber" : 16,
        "endLineNumber" : 1158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n  final TaskId task=taskEntry.getKey();\n  final String consumer=taskEntry.getValue();\n  if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n    assignment.get(consumer).add(task);\n    unassignedTasks.remove(task);\n    consumersToFill.remove(consumer);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 1140,
        "startColumnNumber" : 44,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1516,
        "startLineNumber" : 1140,
        "startColumnNumber" : 12,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 1152,
        "startColumnNumber" : 24,
        "endLineNumber" : 1152,
        "endColumnNumber" : 92
      },
      "nodeContext" : "consumersToFill.contains(consumer) && unassignedTasks.contains(task)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1156,
      "startColumnNumber" : 24,
      "endLineNumber" : 1156,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 1156,
        "startColumnNumber" : 24,
        "endLineNumber" : 1156,
        "endColumnNumber" : 56
      },
      "nodeContext" : "consumersToFill.remove(consumer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1156,
        "startColumnNumber" : 24,
        "endLineNumber" : 1156,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumersToFill.remove(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 1152,
        "startColumnNumber" : 94,
        "endLineNumber" : 1157,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  assignment.get(consumer).add(task);\n  unassignedTasks.remove(task);\n  consumersToFill.remove(consumer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 1152,
        "startColumnNumber" : 20,
        "endLineNumber" : 1157,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n  assignment.get(consumer).add(task);\n  unassignedTasks.remove(task);\n  consumersToFill.remove(consumer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 1149,
        "startColumnNumber" : 107,
        "endLineNumber" : 1158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final TaskId task=taskEntry.getKey();\n  final String consumer=taskEntry.getValue();\n  if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n    assignment.get(consumer).add(task);\n    unassignedTasks.remove(task);\n    consumersToFill.remove(consumer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 1149,
        "startColumnNumber" : 16,
        "endLineNumber" : 1158,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n  final TaskId task=taskEntry.getKey();\n  final String consumer=taskEntry.getValue();\n  if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n    assignment.get(consumer).add(task);\n    unassignedTasks.remove(task);\n    consumersToFill.remove(consumer);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 1140,
        "startColumnNumber" : 44,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1516,
        "startLineNumber" : 1140,
        "startColumnNumber" : 12,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1156,
        "startColumnNumber" : 24,
        "endLineNumber" : 1156,
        "endColumnNumber" : 57
      },
      "nodeContext" : "consumersToFill.remove(consumer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  }, {
    "nodeContext" : "consumersToFill",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 1162,
      "startColumnNumber" : 44,
      "endLineNumber" : 1162,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 1162,
        "startColumnNumber" : 44,
        "endLineNumber" : 1162,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumersToFill.poll()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1162,
        "startColumnNumber" : 33,
        "endLineNumber" : 1162,
        "endColumnNumber" : 66
      },
      "nodeContext" : "consumer=consumersToFill.poll()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1162,
        "startColumnNumber" : 20,
        "endLineNumber" : 1162,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final String consumer=consumersToFill.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 1161,
        "startColumnNumber" : 58,
        "endLineNumber" : 1165,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 1161,
        "startColumnNumber" : 16,
        "endLineNumber" : 1165,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (final TaskId task : unassignedTasks) {\n  final String consumer=consumersToFill.poll();\n  final List<TaskId> threadAssignment=assignment.get(consumer);\n  threadAssignment.add(task);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 1140,
        "startColumnNumber" : 44,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1516,
        "startLineNumber" : 1140,
        "startColumnNumber" : 12,
        "endLineNumber" : 1166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n    if (taskCount == minTasksPerThread) {\n      consumersToFill.add(consumer);\n    }\n  }\n  for (  final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n    final TaskId task=taskEntry.getKey();\n    final String consumer=taskEntry.getValue();\n    if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n      assignment.get(consumer).add(task);\n      unassignedTasks.remove(task);\n      consumersToFill.remove(consumer);\n    }\n  }\n  for (  final TaskId task : unassignedTasks) {\n    final String consumer=consumersToFill.poll();\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    threadAssignment.add(task);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 1095,
        "startColumnNumber" : 40,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4030,
        "startLineNumber" : 1095,
        "startColumnNumber" : 8,
        "endLineNumber" : 1167,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!unassignedTasks.isEmpty()) {\n  for (  final String consumer : consumers) {\n    final List<TaskId> threadAssignment=assignment.get(consumer);\n    final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n    if (isStateful) {\n      for (      final TaskId task : state.prevTasksByLag(consumer)) {\n        if (unassignedTasks.contains(task)) {\n          if (threadAssignment.size() < tasksTargetCount) {\n            threadAssignment.add(task);\n            unassignedTasks.remove(task);\n          }\n else {\n            unassignedTaskToPreviousOwner.put(task,consumer);\n          }\n        }\n      }\n    }\n    if (threadAssignment.size() < tasksTargetCount) {\n      consumersToFill.offer(consumer);\n    }\n  }\n  while (!consumersToFill.isEmpty()) {\n    final TaskId task=unassignedTasks.poll();\n    if (task != null) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n      final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n      if (threadTaskCount < minTasksPerThread) {\n        consumersToFill.offer(consumer);\n      }\n    }\n else {\n      throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n    }\n  }\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n      if (taskCount == minTasksPerThread) {\n        consumersToFill.add(consumer);\n      }\n    }\n    for (    final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n      final TaskId task=taskEntry.getKey();\n      final String consumer=taskEntry.getValue();\n      if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n        assignment.get(consumer).add(task);\n        unassignedTasks.remove(task);\n        consumersToFill.remove(consumer);\n      }\n    }\n    for (    final TaskId task : unassignedTasks) {\n      final String consumer=consumersToFill.poll();\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      threadAssignment.add(task);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5237,
        "startLineNumber" : 1079,
        "startColumnNumber" : 97,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6276,
        "startLineNumber" : 1067,
        "startColumnNumber" : 4,
        "endLineNumber" : 1176,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate an assignment that tries to preserve thread-level stickiness for stateful tasks without violating balance. The tasks are balanced across threads. Stateful tasks without previous owners will be interleaved by group id to spread subtopologies across threads and further balance the workload. Stateless tasks are simply spread across threads without taking into account previous ownership. threadLoad is a map that keeps track of task load per thread across multiple calls so active and standby tasks are evenly distributed\n */\nstatic Map<String,List<TaskId>> assignTasksToThreads(final Collection<TaskId> tasksToAssign,final boolean isStateful,final SortedSet<String> consumers,final ClientState state,final Map<String,Integer> threadLoad){\n  final Map<String,List<TaskId>> assignment=new HashMap<>();\n  for (  final String consumer : consumers) {\n    assignment.put(consumer,new ArrayList<>());\n  }\n  final int totalTasks=threadLoad.values().stream().reduce(tasksToAssign.size(),Integer::sum);\n  final int minTasksPerThread=(int)Math.floor(((double)totalTasks) / consumers.size());\n  final PriorityQueue<TaskId> unassignedTasks=new PriorityQueue<>(tasksToAssign);\n  final Queue<String> consumersToFill=new LinkedList<>();\n  final Map<TaskId,String> unassignedTaskToPreviousOwner=new TreeMap<>();\n  if (!unassignedTasks.isEmpty()) {\n    for (    final String consumer : consumers) {\n      final List<TaskId> threadAssignment=assignment.get(consumer);\n      final int tasksTargetCount=minTasksPerThread - threadLoad.getOrDefault(consumer,0);\n      if (isStateful) {\n        for (        final TaskId task : state.prevTasksByLag(consumer)) {\n          if (unassignedTasks.contains(task)) {\n            if (threadAssignment.size() < tasksTargetCount) {\n              threadAssignment.add(task);\n              unassignedTasks.remove(task);\n            }\n else {\n              unassignedTaskToPreviousOwner.put(task,consumer);\n            }\n          }\n        }\n      }\n      if (threadAssignment.size() < tasksTargetCount) {\n        consumersToFill.offer(consumer);\n      }\n    }\n    while (!consumersToFill.isEmpty()) {\n      final TaskId task=unassignedTasks.poll();\n      if (task != null) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n        final int threadTaskCount=threadAssignment.size() + threadLoad.getOrDefault(consumer,0);\n        if (threadTaskCount < minTasksPerThread) {\n          consumersToFill.offer(consumer);\n        }\n      }\n else {\n        throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n      }\n    }\n    if (!unassignedTasks.isEmpty()) {\n      for (      final String consumer : consumers) {\n        final int taskCount=assignment.get(consumer).size() + threadLoad.getOrDefault(consumer,0);\n        if (taskCount == minTasksPerThread) {\n          consumersToFill.add(consumer);\n        }\n      }\n      for (      final Map.Entry<TaskId,String> taskEntry : unassignedTaskToPreviousOwner.entrySet()) {\n        final TaskId task=taskEntry.getKey();\n        final String consumer=taskEntry.getValue();\n        if (consumersToFill.contains(consumer) && unassignedTasks.contains(task)) {\n          assignment.get(consumer).add(task);\n          unassignedTasks.remove(task);\n          consumersToFill.remove(consumer);\n        }\n      }\n      for (      final TaskId task : unassignedTasks) {\n        final String consumer=consumersToFill.poll();\n        final List<TaskId> threadAssignment=assignment.get(consumer);\n        threadAssignment.add(task);\n      }\n    }\n  }\n  for (  final Map.Entry<String,List<TaskId>> taskEntry : assignment.entrySet()) {\n    final String consumer=taskEntry.getKey();\n    final int totalCount=threadLoad.getOrDefault(consumer,0) + taskEntry.getValue().size();\n    threadLoad.put(consumer,totalCount);\n  }\n  return assignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 528,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1162,
        "startColumnNumber" : 20,
        "endLineNumber" : 1162,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final String consumer=consumersToFill.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Queue<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 1116,
    "startColumnNumber" : 20,
    "endLineNumber" : 1116,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 1121,
    "startColumnNumber" : 20,
    "endLineNumber" : 1121,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 1124,
    "startColumnNumber" : 44,
    "endLineNumber" : 1124,
    "endColumnNumber" : 59
  }, {
    "charLength" : 15,
    "startLineNumber" : 1129,
    "startColumnNumber" : 24,
    "endLineNumber" : 1129,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 1144,
    "startColumnNumber" : 24,
    "endLineNumber" : 1144,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 1152,
    "startColumnNumber" : 24,
    "endLineNumber" : 1152,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 1156,
    "startColumnNumber" : 24,
    "endLineNumber" : 1156,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 1162,
    "startColumnNumber" : 44,
    "endLineNumber" : 1162,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  } ]
}