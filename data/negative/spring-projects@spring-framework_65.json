{
  "id" : 65,
  "expression" : "\"field2x.txt\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/web/multipart/commons/CommonsMultipartResolverTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"field2x.txt\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 207,
      "startColumnNumber" : 15,
      "endLineNumber" : 207,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"field2x.txt\",file2x.getOriginalFilename())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(\"field2x.txt\",file2x.getOriginalFilename());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2505,
        "startLineNumber" : 167,
        "startColumnNumber" : 82,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Set<String> fileNames=new HashSet<>();\n  Iterator<String> fileIter=request.getFileNames();\n  while (fileIter.hasNext()) {\n    fileNames.add(fileIter.next());\n  }\n  assertEquals(3,fileNames.size());\n  assertTrue(fileNames.contains(\"field1\"));\n  assertTrue(fileNames.contains(\"field2\"));\n  assertTrue(fileNames.contains(\"field2x\"));\n  CommonsMultipartFile file1=(CommonsMultipartFile)request.getFile(\"field1\");\n  CommonsMultipartFile file2=(CommonsMultipartFile)request.getFile(\"field2\");\n  CommonsMultipartFile file2x=(CommonsMultipartFile)request.getFile(\"field2x\");\n  Map<String,MultipartFile> fileMap=request.getFileMap();\n  assertEquals(3,fileMap.size());\n  assertTrue(fileMap.containsKey(\"field1\"));\n  assertTrue(fileMap.containsKey(\"field2\"));\n  assertTrue(fileMap.containsKey(\"field2x\"));\n  assertEquals(file1,fileMap.get(\"field1\"));\n  assertEquals(file2,fileMap.get(\"field2\"));\n  assertEquals(file2x,fileMap.get(\"field2x\"));\n  MultiValueMap<String,MultipartFile> multiFileMap=request.getMultiFileMap();\n  assertEquals(3,multiFileMap.size());\n  assertTrue(multiFileMap.containsKey(\"field1\"));\n  assertTrue(multiFileMap.containsKey(\"field2\"));\n  assertTrue(multiFileMap.containsKey(\"field2x\"));\n  List<MultipartFile> field1Files=multiFileMap.get(\"field1\");\n  assertEquals(2,field1Files.size());\n  assertTrue(field1Files.contains(file1));\n  assertEquals(file1,multiFileMap.getFirst(\"field1\"));\n  assertEquals(file2,multiFileMap.getFirst(\"field2\"));\n  assertEquals(file2x,multiFileMap.getFirst(\"field2x\"));\n  assertEquals(\"type1\",file1.getContentType());\n  assertEquals(\"type2\",file2.getContentType());\n  assertEquals(\"type2\",file2x.getContentType());\n  assertEquals(\"field1.txt\",file1.getOriginalFilename());\n  assertEquals(\"field2.txt\",file2.getOriginalFilename());\n  assertEquals(\"field2x.txt\",file2x.getOriginalFilename());\n  assertEquals(\"text1\",new String(file1.getBytes()));\n  assertEquals(\"text2\",new String(file2.getBytes()));\n  assertEquals(5,file1.getSize());\n  assertEquals(5,file2.getSize());\n  assertTrue(file1.getInputStream() instanceof ByteArrayInputStream);\n  assertTrue(file2.getInputStream() instanceof ByteArrayInputStream);\n  File transfer1=new File(\"C:/transfer1\");\n  file1.transferTo(transfer1);\n  File transfer2=new File(\"C:/transfer2\");\n  file2.transferTo(transfer2);\n  assertEquals(transfer1,((MockFileItem)file1.getFileItem()).writtenFile);\n  assertEquals(transfer2,((MockFileItem)file2.getFileItem()).writtenFile);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 404,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2586,
        "startLineNumber" : 167,
        "startColumnNumber" : 1,
        "endLineNumber" : 221,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void doTestFiles(MultipartHttpServletRequest request) throws IOException {\n  Set<String> fileNames=new HashSet<>();\n  Iterator<String> fileIter=request.getFileNames();\n  while (fileIter.hasNext()) {\n    fileNames.add(fileIter.next());\n  }\n  assertEquals(3,fileNames.size());\n  assertTrue(fileNames.contains(\"field1\"));\n  assertTrue(fileNames.contains(\"field2\"));\n  assertTrue(fileNames.contains(\"field2x\"));\n  CommonsMultipartFile file1=(CommonsMultipartFile)request.getFile(\"field1\");\n  CommonsMultipartFile file2=(CommonsMultipartFile)request.getFile(\"field2\");\n  CommonsMultipartFile file2x=(CommonsMultipartFile)request.getFile(\"field2x\");\n  Map<String,MultipartFile> fileMap=request.getFileMap();\n  assertEquals(3,fileMap.size());\n  assertTrue(fileMap.containsKey(\"field1\"));\n  assertTrue(fileMap.containsKey(\"field2\"));\n  assertTrue(fileMap.containsKey(\"field2x\"));\n  assertEquals(file1,fileMap.get(\"field1\"));\n  assertEquals(file2,fileMap.get(\"field2\"));\n  assertEquals(file2x,fileMap.get(\"field2x\"));\n  MultiValueMap<String,MultipartFile> multiFileMap=request.getMultiFileMap();\n  assertEquals(3,multiFileMap.size());\n  assertTrue(multiFileMap.containsKey(\"field1\"));\n  assertTrue(multiFileMap.containsKey(\"field2\"));\n  assertTrue(multiFileMap.containsKey(\"field2x\"));\n  List<MultipartFile> field1Files=multiFileMap.get(\"field1\");\n  assertEquals(2,field1Files.size());\n  assertTrue(field1Files.contains(file1));\n  assertEquals(file1,multiFileMap.getFirst(\"field1\"));\n  assertEquals(file2,multiFileMap.getFirst(\"field2\"));\n  assertEquals(file2x,multiFileMap.getFirst(\"field2x\"));\n  assertEquals(\"type1\",file1.getContentType());\n  assertEquals(\"type2\",file2.getContentType());\n  assertEquals(\"type2\",file2x.getContentType());\n  assertEquals(\"field1.txt\",file1.getOriginalFilename());\n  assertEquals(\"field2.txt\",file2.getOriginalFilename());\n  assertEquals(\"field2x.txt\",file2x.getOriginalFilename());\n  assertEquals(\"text1\",new String(file1.getBytes()));\n  assertEquals(\"text2\",new String(file2.getBytes()));\n  assertEquals(5,file1.getSize());\n  assertEquals(5,file2.getSize());\n  assertTrue(file1.getInputStream() instanceof ByteArrayInputStream);\n  assertTrue(file2.getInputStream() instanceof ByteArrayInputStream);\n  File transfer1=new File(\"C:/transfer1\");\n  file1.transferTo(transfer1);\n  File transfer2=new File(\"C:/transfer2\");\n  file2.transferTo(transfer2);\n  assertEquals(transfer1,((MockFileItem)file1.getFileItem()).writtenFile);\n  assertEquals(transfer2,((MockFileItem)file2.getFileItem()).writtenFile);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(\"field2x.txt\",file2x.getOriginalFilename());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 207,
    "startColumnNumber" : 15,
    "endLineNumber" : 207,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}