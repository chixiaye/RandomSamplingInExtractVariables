{
  "id" : 326,
  "expression" : "header.substring(colon + 1).trim()",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RestMethodInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "header.substring(colon + 1).trim()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 228,
      "startColumnNumber" : 27,
      "endLineNumber" : 228,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 228,
        "startColumnNumber" : 13,
        "endLineNumber" : 228,
        "endColumnNumber" : 61
      },
      "nodeContext" : "headerValue=header.substring(colon + 1).trim()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 228,
        "startColumnNumber" : 6,
        "endLineNumber" : 228,
        "endColumnNumber" : 62
      },
      "nodeContext" : "String headerValue=header.substring(colon + 1).trim();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 221,
        "startColumnNumber" : 34,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int colon=header.indexOf(':');\n  if (colon == -1 || colon == 0 || colon == header.length() - 1) {\n    throw methodError(\"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"%s\\\"\",header);\n  }\n  String headerName=header.substring(0,colon);\n  String headerValue=header.substring(colon + 1).trim();\n  if (\"Content-Type\".equalsIgnoreCase(headerName)) {\n    contentTypeHeader=headerValue;\n  }\n else {\n    headerList.add(new retrofit.client.Header(headerName,headerValue));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String header : headers) {\n  int colon=header.indexOf(':');\n  if (colon == -1 || colon == 0 || colon == header.length() - 1) {\n    throw methodError(\"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"%s\\\"\",header);\n  }\n  String headerName=header.substring(0,colon);\n  String headerValue=header.substring(colon + 1).trim();\n  if (\"Content-Type\".equalsIgnoreCase(headerName)) {\n    contentTypeHeader=headerValue;\n  }\n else {\n    headerList.add(new retrofit.client.Header(headerName,headerValue));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 219,
        "startColumnNumber" : 62,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<retrofit.client.Header> headerList=new ArrayList<retrofit.client.Header>();\n  for (  String header : headers) {\n    int colon=header.indexOf(':');\n    if (colon == -1 || colon == 0 || colon == header.length() - 1) {\n      throw methodError(\"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"%s\\\"\",header);\n    }\n    String headerName=header.substring(0,colon);\n    String headerValue=header.substring(colon + 1).trim();\n    if (\"Content-Type\".equalsIgnoreCase(headerName)) {\n      contentTypeHeader=headerValue;\n    }\n else {\n      headerList.add(new retrofit.client.Header(headerName,headerValue));\n    }\n  }\n  return headerList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 766,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 236,
        "endColumnNumber" : 3
      },
      "nodeContext" : "List<retrofit.client.Header> parseHeaders(String[] headers){\n  List<retrofit.client.Header> headerList=new ArrayList<retrofit.client.Header>();\n  for (  String header : headers) {\n    int colon=header.indexOf(':');\n    if (colon == -1 || colon == 0 || colon == header.length() - 1) {\n      throw methodError(\"@Headers value must be in the form \\\"Name: Value\\\". Found: \\\"%s\\\"\",header);\n    }\n    String headerName=header.substring(0,colon);\n    String headerValue=header.substring(colon + 1).trim();\n    if (\"Content-Type\".equalsIgnoreCase(headerName)) {\n      contentTypeHeader=headerValue;\n    }\n else {\n      headerList.add(new retrofit.client.Header(headerName,headerValue));\n    }\n  }\n  return headerList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 228,
        "startColumnNumber" : 6,
        "endLineNumber" : 228,
        "endColumnNumber" : 62
      },
      "nodeContext" : "String headerValue=header.substring(colon + 1).trim();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 228,
    "startColumnNumber" : 27,
    "endLineNumber" : 228,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}