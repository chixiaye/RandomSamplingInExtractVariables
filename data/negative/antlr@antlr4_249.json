{
  "id" : 249,
  "expression" : "i < n",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/tree/AbstractParseTreeVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < n",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 40,
      "startColumnNumber" : 16,
      "endLineNumber" : 40,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (!shouldVisitNextChild(node,result)) {\n    break;\n  }\n  ParseTree c=node.getChild(i);\n  T childResult=c.accept(this);\n  result=aggregateResult(result,childResult);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 37,
        "startColumnNumber" : 39,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  T result=defaultResult();\n  int n=node.getChildCount();\n  for (int i=0; i < n; i++) {\n    if (!shouldVisitNextChild(node,result)) {\n      break;\n    }\n    ParseTree c=node.getChild(i);\n    T childResult=c.accept(this);\n    result=aggregateResult(result,childResult);\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1160,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@inheritDoc}<p>The default implementation initializes the aggregate result to {@link #defaultResult defaultResult()}. Before visiting each child, it calls  {@link #shouldVisitNextChild shouldVisitNextChild}; if the result is  {@code false} no more children are visited and the current aggregateresult is returned. After visiting a child, the aggregate result is updated by calling  {@link #aggregateResult aggregateResult} with theprevious aggregate result and the result of visiting the child.</p> <p>The default implementation is not safe for use in visitors that modify the tree structure. Visitors that modify the tree should override this method to behave properly in respect to the specific algorithm in use.</p>\n */\n@Override public T visitChildren(RuleNode node){\n  T result=defaultResult();\n  int n=node.getChildCount();\n  for (int i=0; i < n; i++) {\n    if (!shouldVisitNextChild(node,result)) {\n      break;\n    }\n    ParseTree c=node.getChild(i);\n    T childResult=c.accept(this);\n    result=aggregateResult(result,childResult);\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 74,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (!shouldVisitNextChild(node,result)) {\n    break;\n  }\n  ParseTree c=node.getChild(i);\n  T childResult=c.accept(this);\n  result=aggregateResult(result,childResult);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 40,
    "startColumnNumber" : 16,
    "endLineNumber" : 40,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}