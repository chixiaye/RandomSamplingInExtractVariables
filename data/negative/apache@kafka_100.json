{
  "id" : 100,
  "expression" : "Versions.parse(nullableVersions,Versions.NONE)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/generator/src/main/java/org/apache/kafka/message/FieldSpec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Versions.parse(nullableVersions,Versions.NONE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 94,
      "startColumnNumber" : 32,
      "endLineNumber" : 94,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.nullableVersions=Versions.parse(nullableVersions,Versions.NONE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.nullableVersions=Versions.parse(nullableVersions,Versions.NONE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2966,
        "startLineNumber" : 77,
        "startColumnNumber" : 65,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.name=Objects.requireNonNull(name);\n  if (!VALID_FIELD_NAMES.matcher(this.name).matches()) {\n    throw new RuntimeException(\"Invalid field name \" + this.name);\n  }\n  this.taggedVersions=Versions.parse(taggedVersions,Versions.NONE);\n  this.versions=Versions.parse(versions,this.taggedVersions.empty() ? null : this.taggedVersions);\n  if (this.versions == null) {\n    throw new RuntimeException(\"You must specify the version of the \" + name + \" structure.\");\n  }\n  this.fields=Collections.unmodifiableList(fields == null ? Collections.emptyList() : new ArrayList<>(fields));\n  this.type=FieldType.parse(Objects.requireNonNull(type));\n  this.mapKey=mapKey;\n  this.nullableVersions=Versions.parse(nullableVersions,Versions.NONE);\n  if (!this.nullableVersions.empty()) {\n    if (!this.type.canBeNullable()) {\n      throw new RuntimeException(\"Type \" + this.type + \" cannot be nullable.\");\n    }\n  }\n  this.fieldDefault=fieldDefault == null ? \"\" : fieldDefault;\n  this.ignorable=ignorable;\n  this.entityType=(entityType == null) ? EntityType.UNKNOWN : entityType;\n  this.entityType.verifyTypeMatches(name,this.type);\n  this.about=about == null ? \"\" : about;\n  if (!this.fields().isEmpty()) {\n    if (!this.type.isArray() && !this.type.isStruct()) {\n      throw new RuntimeException(\"Non-array or Struct field \" + name + \" cannot have fields\");\n    }\n  }\n  if (flexibleVersions == null || flexibleVersions.isEmpty()) {\n    this.flexibleVersions=Optional.empty();\n  }\n else {\n    this.flexibleVersions=Optional.of(Versions.parse(flexibleVersions,null));\n    if (!(this.type.isString() || this.type.isBytes())) {\n      throw new RuntimeException(\"Invalid flexibleVersions override for \" + name + \".  Only fields of type string or bytes can specify a flexibleVersions \"+ \"override.\");\n    }\n  }\n  this.tag=Optional.ofNullable(tag);\n  if (this.tag.isPresent() && mapKey) {\n    throw new RuntimeException(\"Tagged fields cannot be used as keys.\");\n  }\n  checkTagInvariants();\n  this.zeroCopy=zeroCopy;\n  if (this.zeroCopy && !this.type.isBytes()) {\n    throw new RuntimeException(\"Invalid zeroCopy value for \" + name + \". Only fields of type bytes can use zeroCopy flag.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3905,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@JsonCreator public FieldSpec(@JsonProperty(\"name\") String name,@JsonProperty(\"versions\") String versions,@JsonProperty(\"fields\") List<FieldSpec> fields,@JsonProperty(\"type\") String type,@JsonProperty(\"mapKey\") boolean mapKey,@JsonProperty(\"nullableVersions\") String nullableVersions,@JsonProperty(\"default\") String fieldDefault,@JsonProperty(\"ignorable\") boolean ignorable,@JsonProperty(\"entityType\") EntityType entityType,@JsonProperty(\"about\") String about,@JsonProperty(\"taggedVersions\") String taggedVersions,@JsonProperty(\"flexibleVersions\") String flexibleVersions,@JsonProperty(\"tag\") Integer tag,@JsonProperty(\"zeroCopy\") boolean zeroCopy){\n  this.name=Objects.requireNonNull(name);\n  if (!VALID_FIELD_NAMES.matcher(this.name).matches()) {\n    throw new RuntimeException(\"Invalid field name \" + this.name);\n  }\n  this.taggedVersions=Versions.parse(taggedVersions,Versions.NONE);\n  this.versions=Versions.parse(versions,this.taggedVersions.empty() ? null : this.taggedVersions);\n  if (this.versions == null) {\n    throw new RuntimeException(\"You must specify the version of the \" + name + \" structure.\");\n  }\n  this.fields=Collections.unmodifiableList(fields == null ? Collections.emptyList() : new ArrayList<>(fields));\n  this.type=FieldType.parse(Objects.requireNonNull(type));\n  this.mapKey=mapKey;\n  this.nullableVersions=Versions.parse(nullableVersions,Versions.NONE);\n  if (!this.nullableVersions.empty()) {\n    if (!this.type.canBeNullable()) {\n      throw new RuntimeException(\"Type \" + this.type + \" cannot be nullable.\");\n    }\n  }\n  this.fieldDefault=fieldDefault == null ? \"\" : fieldDefault;\n  this.ignorable=ignorable;\n  this.entityType=(entityType == null) ? EntityType.UNKNOWN : entityType;\n  this.entityType.verifyTypeMatches(name,this.type);\n  this.about=about == null ? \"\" : about;\n  if (!this.fields().isEmpty()) {\n    if (!this.type.isArray() && !this.type.isStruct()) {\n      throw new RuntimeException(\"Non-array or Struct field \" + name + \" cannot have fields\");\n    }\n  }\n  if (flexibleVersions == null || flexibleVersions.isEmpty()) {\n    this.flexibleVersions=Optional.empty();\n  }\n else {\n    this.flexibleVersions=Optional.of(Versions.parse(flexibleVersions,null));\n    if (!(this.type.isString() || this.type.isBytes())) {\n      throw new RuntimeException(\"Invalid flexibleVersions override for \" + name + \".  Only fields of type string or bytes can specify a flexibleVersions \"+ \"override.\");\n    }\n  }\n  this.tag=Optional.ofNullable(tag);\n  if (this.tag.isPresent() && mapKey) {\n    throw new RuntimeException(\"Tagged fields cannot be used as keys.\");\n  }\n  checkTagInvariants();\n  this.zeroCopy=zeroCopy;\n  if (this.zeroCopy && !this.type.isBytes()) {\n    throw new RuntimeException(\"Invalid zeroCopy value for \" + name + \". Only fields of type bytes can use zeroCopy flag.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 445,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.nullableVersions=Versions.parse(nullableVersions,Versions.NONE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "org.apache.kafka.message.Versions"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 94,
    "startColumnNumber" : 32,
    "endLineNumber" : 94,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}