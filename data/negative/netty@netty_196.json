{
  "id" : 196,
  "expression" : "insertDepth == 1 ? 2 : 1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/Bzip2HuffmanAllocator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "insertDepth == 1 ? 2 : 1",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 126,
      "startColumnNumber" : 27,
      "endLineNumber" : 126,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 51
      },
      "nodeContext" : "currentDepth=insertDepth == 1 ? 2 : 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int currentDepth=insertDepth == 1 ? 2 : 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1127,
        "startLineNumber" : 123,
        "startColumnNumber" : 105,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int firstNode=array.length - 2;\n  int nextNode=array.length - 1;\n  int currentDepth=insertDepth == 1 ? 2 : 1;\n  int nodesLeftToMove=insertDepth == 1 ? nodesToMove - 2 : nodesToMove;\n  for (int availableNodes=currentDepth << 1; availableNodes > 0; currentDepth++) {\n    final int lastNode=firstNode;\n    firstNode=firstNode <= nodesToMove ? firstNode : first(array,lastNode - 1,nodesToMove);\n    int offset=0;\n    if (currentDepth >= insertDepth) {\n      offset=Math.min(nodesLeftToMove,1 << (currentDepth - insertDepth));\n    }\n else     if (currentDepth == insertDepth - 1) {\n      offset=1;\n      if (array[firstNode] == lastNode) {\n        firstNode++;\n      }\n    }\n    for (int i=availableNodes - (lastNode - firstNode + offset); i > 0; i--) {\n      array[nextNode--]=currentDepth;\n    }\n    nodesLeftToMove-=offset;\n    availableNodes=(lastNode - firstNode + offset) << 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1613,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * A final allocation pass that relocates nodes in order to achieve a maximum code length limit.\n * @param array The code length array\n * @param nodesToMove The number of internal nodes to be relocated\n * @param insertDepth The depth at which to insert relocated nodes\n */\nprivate static void allocateNodeLengthsWithRelocation(final int[] array,final int nodesToMove,final int insertDepth){\n  int firstNode=array.length - 2;\n  int nextNode=array.length - 1;\n  int currentDepth=insertDepth == 1 ? 2 : 1;\n  int nodesLeftToMove=insertDepth == 1 ? nodesToMove - 2 : nodesToMove;\n  for (int availableNodes=currentDepth << 1; availableNodes > 0; currentDepth++) {\n    final int lastNode=firstNode;\n    firstNode=firstNode <= nodesToMove ? firstNode : first(array,lastNode - 1,nodesToMove);\n    int offset=0;\n    if (currentDepth >= insertDepth) {\n      offset=Math.min(nodesLeftToMove,1 << (currentDepth - insertDepth));\n    }\n else     if (currentDepth == insertDepth - 1) {\n      offset=1;\n      if (array[firstNode] == lastNode) {\n        firstNode++;\n      }\n    }\n    for (int i=availableNodes - (lastNode - firstNode + offset); i > 0; i--) {\n      array[nextNode--]=currentDepth;\n    }\n    nodesLeftToMove-=offset;\n    availableNodes=(lastNode - firstNode + offset) << 1;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 52
      },
      "nodeContext" : "int currentDepth=insertDepth == 1 ? 2 : 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 126,
    "startColumnNumber" : 27,
    "endLineNumber" : 126,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}