{
  "id" : 239,
  "expression" : "\"vp9\"",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/util/MimeTypes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"vp9\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 245,
      "startColumnNumber" : 32,
      "endLineNumber" : 245,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 245,
        "startColumnNumber" : 15,
        "endLineNumber" : 245,
        "endColumnNumber" : 38
      },
      "nodeContext" : "codec.startsWith(\"vp9\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 245,
        "startColumnNumber" : 15,
        "endLineNumber" : 245,
        "endColumnNumber" : 66
      },
      "nodeContext" : "codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1951,
        "startLineNumber" : 245,
        "startColumnNumber" : 11,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n  return MimeTypes.VIDEO_VP9;\n}\n else if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n  return MimeTypes.VIDEO_VP8;\n}\n else if (codec.startsWith(\"mp4a\")) {\n  @Nullable String mimeType=null;\n  if (codec.startsWith(\"mp4a.\")) {\n    String objectTypeString=codec.substring(5);\n    if (objectTypeString.length() >= 2) {\n      try {\n        String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n        int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n        mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n      }\n catch (      NumberFormatException ignored) {\n      }\n    }\n  }\n  return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n}\n else if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n  return MimeTypes.AUDIO_AC3;\n}\n else if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n  return MimeTypes.AUDIO_E_AC3;\n}\n else if (codec.startsWith(\"ec+3\")) {\n  return MimeTypes.AUDIO_E_AC3_JOC;\n}\n else if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n  return MimeTypes.AUDIO_AC4;\n}\n else if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n  return MimeTypes.AUDIO_DTS;\n}\n else if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n  return MimeTypes.AUDIO_DTS_HD;\n}\n else if (codec.startsWith(\"opus\")) {\n  return MimeTypes.AUDIO_OPUS;\n}\n else if (codec.startsWith(\"vorbis\")) {\n  return MimeTypes.AUDIO_VORBIS;\n}\n else if (codec.startsWith(\"flac\")) {\n  return MimeTypes.AUDIO_FLAC;\n}\n else if (codec.startsWith(\"stpp\")) {\n  return MimeTypes.APPLICATION_TTML;\n}\n else if (codec.startsWith(\"wvtt\")) {\n  return MimeTypes.TEXT_VTT;\n}\n else {\n  return getCustomMimeTypeForCodec(codec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 251,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 243,
        "startColumnNumber" : 11,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (codec.startsWith(\"av01\")) {\n  return MimeTypes.VIDEO_AV1;\n}\n else if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n  return MimeTypes.VIDEO_VP9;\n}\n else if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n  return MimeTypes.VIDEO_VP8;\n}\n else if (codec.startsWith(\"mp4a\")) {\n  @Nullable String mimeType=null;\n  if (codec.startsWith(\"mp4a.\")) {\n    String objectTypeString=codec.substring(5);\n    if (objectTypeString.length() >= 2) {\n      try {\n        String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n        int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n        mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n      }\n catch (      NumberFormatException ignored) {\n      }\n    }\n  }\n  return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n}\n else if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n  return MimeTypes.AUDIO_AC3;\n}\n else if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n  return MimeTypes.AUDIO_E_AC3;\n}\n else if (codec.startsWith(\"ec+3\")) {\n  return MimeTypes.AUDIO_E_AC3_JOC;\n}\n else if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n  return MimeTypes.AUDIO_AC4;\n}\n else if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n  return MimeTypes.AUDIO_DTS;\n}\n else if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n  return MimeTypes.AUDIO_DTS_HD;\n}\n else if (codec.startsWith(\"opus\")) {\n  return MimeTypes.AUDIO_OPUS;\n}\n else if (codec.startsWith(\"vorbis\")) {\n  return MimeTypes.AUDIO_VORBIS;\n}\n else if (codec.startsWith(\"flac\")) {\n  return MimeTypes.AUDIO_FLAC;\n}\n else if (codec.startsWith(\"stpp\")) {\n  return MimeTypes.APPLICATION_TTML;\n}\n else if (codec.startsWith(\"wvtt\")) {\n  return MimeTypes.TEXT_VTT;\n}\n else {\n  return getCustomMimeTypeForCodec(codec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 261,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2222,
        "startLineNumber" : 238,
        "startColumnNumber" : 11,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (codec.startsWith(\"dvav\") || codec.startsWith(\"dva1\") || codec.startsWith(\"dvhe\")|| codec.startsWith(\"dvh1\")) {\n  return MimeTypes.VIDEO_DOLBY_VISION;\n}\n else if (codec.startsWith(\"av01\")) {\n  return MimeTypes.VIDEO_AV1;\n}\n else if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n  return MimeTypes.VIDEO_VP9;\n}\n else if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n  return MimeTypes.VIDEO_VP8;\n}\n else if (codec.startsWith(\"mp4a\")) {\n  @Nullable String mimeType=null;\n  if (codec.startsWith(\"mp4a.\")) {\n    String objectTypeString=codec.substring(5);\n    if (objectTypeString.length() >= 2) {\n      try {\n        String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n        int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n        mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n      }\n catch (      NumberFormatException ignored) {\n      }\n    }\n  }\n  return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n}\n else if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n  return MimeTypes.AUDIO_AC3;\n}\n else if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n  return MimeTypes.AUDIO_E_AC3;\n}\n else if (codec.startsWith(\"ec+3\")) {\n  return MimeTypes.AUDIO_E_AC3_JOC;\n}\n else if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n  return MimeTypes.AUDIO_AC4;\n}\n else if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n  return MimeTypes.AUDIO_DTS;\n}\n else if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n  return MimeTypes.AUDIO_DTS_HD;\n}\n else if (codec.startsWith(\"opus\")) {\n  return MimeTypes.AUDIO_OPUS;\n}\n else if (codec.startsWith(\"vorbis\")) {\n  return MimeTypes.AUDIO_VORBIS;\n}\n else if (codec.startsWith(\"flac\")) {\n  return MimeTypes.AUDIO_FLAC;\n}\n else if (codec.startsWith(\"stpp\")) {\n  return MimeTypes.APPLICATION_TTML;\n}\n else if (codec.startsWith(\"wvtt\")) {\n  return MimeTypes.TEXT_VTT;\n}\n else {\n  return getCustomMimeTypeForCodec(codec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 284,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2328,
        "startLineNumber" : 236,
        "startColumnNumber" : 11,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (codec.startsWith(\"hev1\") || codec.startsWith(\"hvc1\")) {\n  return MimeTypes.VIDEO_H265;\n}\n else if (codec.startsWith(\"dvav\") || codec.startsWith(\"dva1\") || codec.startsWith(\"dvhe\")|| codec.startsWith(\"dvh1\")) {\n  return MimeTypes.VIDEO_DOLBY_VISION;\n}\n else if (codec.startsWith(\"av01\")) {\n  return MimeTypes.VIDEO_AV1;\n}\n else if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n  return MimeTypes.VIDEO_VP9;\n}\n else if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n  return MimeTypes.VIDEO_VP8;\n}\n else if (codec.startsWith(\"mp4a\")) {\n  @Nullable String mimeType=null;\n  if (codec.startsWith(\"mp4a.\")) {\n    String objectTypeString=codec.substring(5);\n    if (objectTypeString.length() >= 2) {\n      try {\n        String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n        int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n        mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n      }\n catch (      NumberFormatException ignored) {\n      }\n    }\n  }\n  return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n}\n else if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n  return MimeTypes.AUDIO_AC3;\n}\n else if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n  return MimeTypes.AUDIO_E_AC3;\n}\n else if (codec.startsWith(\"ec+3\")) {\n  return MimeTypes.AUDIO_E_AC3_JOC;\n}\n else if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n  return MimeTypes.AUDIO_AC4;\n}\n else if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n  return MimeTypes.AUDIO_DTS;\n}\n else if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n  return MimeTypes.AUDIO_DTS_HD;\n}\n else if (codec.startsWith(\"opus\")) {\n  return MimeTypes.AUDIO_OPUS;\n}\n else if (codec.startsWith(\"vorbis\")) {\n  return MimeTypes.AUDIO_VORBIS;\n}\n else if (codec.startsWith(\"flac\")) {\n  return MimeTypes.AUDIO_FLAC;\n}\n else if (codec.startsWith(\"stpp\")) {\n  return MimeTypes.APPLICATION_TTML;\n}\n else if (codec.startsWith(\"wvtt\")) {\n  return MimeTypes.TEXT_VTT;\n}\n else {\n  return getCustomMimeTypeForCodec(codec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 299,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2434,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (codec.startsWith(\"avc1\") || codec.startsWith(\"avc3\")) {\n  return MimeTypes.VIDEO_H264;\n}\n else if (codec.startsWith(\"hev1\") || codec.startsWith(\"hvc1\")) {\n  return MimeTypes.VIDEO_H265;\n}\n else if (codec.startsWith(\"dvav\") || codec.startsWith(\"dva1\") || codec.startsWith(\"dvhe\")|| codec.startsWith(\"dvh1\")) {\n  return MimeTypes.VIDEO_DOLBY_VISION;\n}\n else if (codec.startsWith(\"av01\")) {\n  return MimeTypes.VIDEO_AV1;\n}\n else if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n  return MimeTypes.VIDEO_VP9;\n}\n else if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n  return MimeTypes.VIDEO_VP8;\n}\n else if (codec.startsWith(\"mp4a\")) {\n  @Nullable String mimeType=null;\n  if (codec.startsWith(\"mp4a.\")) {\n    String objectTypeString=codec.substring(5);\n    if (objectTypeString.length() >= 2) {\n      try {\n        String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n        int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n        mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n      }\n catch (      NumberFormatException ignored) {\n      }\n    }\n  }\n  return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n}\n else if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n  return MimeTypes.AUDIO_AC3;\n}\n else if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n  return MimeTypes.AUDIO_E_AC3;\n}\n else if (codec.startsWith(\"ec+3\")) {\n  return MimeTypes.AUDIO_E_AC3_JOC;\n}\n else if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n  return MimeTypes.AUDIO_AC4;\n}\n else if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n  return MimeTypes.AUDIO_DTS;\n}\n else if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n  return MimeTypes.AUDIO_DTS_HD;\n}\n else if (codec.startsWith(\"opus\")) {\n  return MimeTypes.AUDIO_OPUS;\n}\n else if (codec.startsWith(\"vorbis\")) {\n  return MimeTypes.AUDIO_VORBIS;\n}\n else if (codec.startsWith(\"flac\")) {\n  return MimeTypes.AUDIO_FLAC;\n}\n else if (codec.startsWith(\"stpp\")) {\n  return MimeTypes.APPLICATION_TTML;\n}\n else if (codec.startsWith(\"wvtt\")) {\n  return MimeTypes.TEXT_VTT;\n}\n else {\n  return getCustomMimeTypeForCodec(codec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 314,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 229,
        "startColumnNumber" : 64,
        "endLineNumber" : 289,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (codec == null) {\n    return null;\n  }\n  codec=Util.toLowerInvariant(codec.trim());\n  if (codec.startsWith(\"avc1\") || codec.startsWith(\"avc3\")) {\n    return MimeTypes.VIDEO_H264;\n  }\n else   if (codec.startsWith(\"hev1\") || codec.startsWith(\"hvc1\")) {\n    return MimeTypes.VIDEO_H265;\n  }\n else   if (codec.startsWith(\"dvav\") || codec.startsWith(\"dva1\") || codec.startsWith(\"dvhe\")|| codec.startsWith(\"dvh1\")) {\n    return MimeTypes.VIDEO_DOLBY_VISION;\n  }\n else   if (codec.startsWith(\"av01\")) {\n    return MimeTypes.VIDEO_AV1;\n  }\n else   if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n    return MimeTypes.VIDEO_VP9;\n  }\n else   if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n    return MimeTypes.VIDEO_VP8;\n  }\n else   if (codec.startsWith(\"mp4a\")) {\n    @Nullable String mimeType=null;\n    if (codec.startsWith(\"mp4a.\")) {\n      String objectTypeString=codec.substring(5);\n      if (objectTypeString.length() >= 2) {\n        try {\n          String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n          int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n          mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n        }\n catch (        NumberFormatException ignored) {\n        }\n      }\n    }\n    return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n  }\n else   if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n    return MimeTypes.AUDIO_AC3;\n  }\n else   if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n    return MimeTypes.AUDIO_E_AC3;\n  }\n else   if (codec.startsWith(\"ec+3\")) {\n    return MimeTypes.AUDIO_E_AC3_JOC;\n  }\n else   if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n    return MimeTypes.AUDIO_AC4;\n  }\n else   if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n    return MimeTypes.AUDIO_DTS;\n  }\n else   if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n    return MimeTypes.AUDIO_DTS_HD;\n  }\n else   if (codec.startsWith(\"opus\")) {\n    return MimeTypes.AUDIO_OPUS;\n  }\n else   if (codec.startsWith(\"vorbis\")) {\n    return MimeTypes.AUDIO_VORBIS;\n  }\n else   if (codec.startsWith(\"flac\")) {\n    return MimeTypes.AUDIO_FLAC;\n  }\n else   if (codec.startsWith(\"stpp\")) {\n    return MimeTypes.APPLICATION_TTML;\n  }\n else   if (codec.startsWith(\"wvtt\")) {\n    return MimeTypes.TEXT_VTT;\n  }\n else {\n    return getCustomMimeTypeForCodec(codec);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 331,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2820,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 289,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Derives a mimeType from a codec identifier, as defined in RFC 6381.\n * @param codec The codec identifier to derive.\n * @return The mimeType, or null if it could not be derived.\n */\n@Nullable public static String getMediaMimeType(@Nullable String codec){\n  if (codec == null) {\n    return null;\n  }\n  codec=Util.toLowerInvariant(codec.trim());\n  if (codec.startsWith(\"avc1\") || codec.startsWith(\"avc3\")) {\n    return MimeTypes.VIDEO_H264;\n  }\n else   if (codec.startsWith(\"hev1\") || codec.startsWith(\"hvc1\")) {\n    return MimeTypes.VIDEO_H265;\n  }\n else   if (codec.startsWith(\"dvav\") || codec.startsWith(\"dva1\") || codec.startsWith(\"dvhe\")|| codec.startsWith(\"dvh1\")) {\n    return MimeTypes.VIDEO_DOLBY_VISION;\n  }\n else   if (codec.startsWith(\"av01\")) {\n    return MimeTypes.VIDEO_AV1;\n  }\n else   if (codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")) {\n    return MimeTypes.VIDEO_VP9;\n  }\n else   if (codec.startsWith(\"vp8\") || codec.startsWith(\"vp08\")) {\n    return MimeTypes.VIDEO_VP8;\n  }\n else   if (codec.startsWith(\"mp4a\")) {\n    @Nullable String mimeType=null;\n    if (codec.startsWith(\"mp4a.\")) {\n      String objectTypeString=codec.substring(5);\n      if (objectTypeString.length() >= 2) {\n        try {\n          String objectTypeHexString=Util.toUpperInvariant(objectTypeString.substring(0,2));\n          int objectTypeInt=Integer.parseInt(objectTypeHexString,16);\n          mimeType=getMimeTypeFromMp4ObjectType(objectTypeInt);\n        }\n catch (        NumberFormatException ignored) {\n        }\n      }\n    }\n    return mimeType == null ? MimeTypes.AUDIO_AAC : mimeType;\n  }\n else   if (codec.startsWith(\"ac-3\") || codec.startsWith(\"dac3\")) {\n    return MimeTypes.AUDIO_AC3;\n  }\n else   if (codec.startsWith(\"ec-3\") || codec.startsWith(\"dec3\")) {\n    return MimeTypes.AUDIO_E_AC3;\n  }\n else   if (codec.startsWith(\"ec+3\")) {\n    return MimeTypes.AUDIO_E_AC3_JOC;\n  }\n else   if (codec.startsWith(\"ac-4\") || codec.startsWith(\"dac4\")) {\n    return MimeTypes.AUDIO_AC4;\n  }\n else   if (codec.startsWith(\"dtsc\") || codec.startsWith(\"dtse\")) {\n    return MimeTypes.AUDIO_DTS;\n  }\n else   if (codec.startsWith(\"dtsh\") || codec.startsWith(\"dtsl\")) {\n    return MimeTypes.AUDIO_DTS_HD;\n  }\n else   if (codec.startsWith(\"opus\")) {\n    return MimeTypes.AUDIO_OPUS;\n  }\n else   if (codec.startsWith(\"vorbis\")) {\n    return MimeTypes.AUDIO_VORBIS;\n  }\n else   if (codec.startsWith(\"flac\")) {\n    return MimeTypes.AUDIO_FLAC;\n  }\n else   if (codec.startsWith(\"stpp\")) {\n    return MimeTypes.APPLICATION_TTML;\n  }\n else   if (codec.startsWith(\"wvtt\")) {\n    return MimeTypes.TEXT_VTT;\n  }\n else {\n    return getCustomMimeTypeForCodec(codec);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 245,
        "startColumnNumber" : 15,
        "endLineNumber" : 245,
        "endColumnNumber" : 66
      },
      "nodeContext" : "codec.startsWith(\"vp9\") || codec.startsWith(\"vp09\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 245,
    "startColumnNumber" : 32,
    "endLineNumber" : 245,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}