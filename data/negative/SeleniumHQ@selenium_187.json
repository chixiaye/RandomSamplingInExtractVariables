{
  "id" : 187,
  "expression" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/docker/VersionCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 319,
      "startLineNumber" : 65,
      "startColumnNumber" : 13,
      "endLineNumber" : 72,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 42,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 353,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 73,
        "endColumnNumber" : 33
      },
      "nodeContext" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n).map(Map.Entry::getValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 395,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n).map(Map.Entry::getValue).map(func -> func.apply(handler))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 75,
        "endColumnNumber" : 20
      },
      "nodeContext" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 65,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 21
      },
      "nodeContext" : "return SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 816,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HttpResponse res=handler.execute(new HttpRequest(GET,\"/version\"));\n  if (!res.isSuccessful()) {\n    return Optional.empty();\n  }\n  Map<String,Object> raw=JSON.toType(Contents.string(res),MAP_TYPE);\n  Version maxVersion=new Version((String)raw.get(\"ApiVersion\"));\n  Version minVersion=new Version((String)raw.get(\"MinAPIVersion\"));\n  return SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n    Version version=entry.getKey();\n    if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n      return true;\n    }\n    return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n  }\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  HttpResponse res=handler.execute(new HttpRequest(GET,\"/version\"));\n  if (!res.isSuccessful()) {\n    return Optional.empty();\n  }\n  Map<String,Object> raw=JSON.toType(Contents.string(res),MAP_TYPE);\n  Version maxVersion=new Version((String)raw.get(\"ApiVersion\"));\n  Version minVersion=new Version((String)raw.get(\"MinAPIVersion\"));\n  return SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n    Version version=entry.getKey();\n    if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n      return true;\n    }\n    return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n  }\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst();\n}\n catch (ClassCastException|JsonException|NullPointerException|UncheckedIOException e) {\n  return Optional.empty();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 151,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 960,
        "startLineNumber" : 52,
        "startColumnNumber" : 54,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    HttpResponse res=handler.execute(new HttpRequest(GET,\"/version\"));\n    if (!res.isSuccessful()) {\n      return Optional.empty();\n    }\n    Map<String,Object> raw=JSON.toType(Contents.string(res),MAP_TYPE);\n    Version maxVersion=new Version((String)raw.get(\"ApiVersion\"));\n    Version minVersion=new Version((String)raw.get(\"MinAPIVersion\"));\n    return SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n      Version version=entry.getKey();\n      if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n        return true;\n      }\n      return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n    }\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst();\n  }\n catch (  ClassCastException|JsonException|NullPointerException|UncheckedIOException e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Optional<DockerProtocol> getDockerProtocol(){\n  try {\n    HttpResponse res=handler.execute(new HttpRequest(GET,\"/version\"));\n    if (!res.isSuccessful()) {\n      return Optional.empty();\n    }\n    Map<String,Object> raw=JSON.toType(Contents.string(res),MAP_TYPE);\n    Version maxVersion=new Version((String)raw.get(\"ApiVersion\"));\n    Version minVersion=new Version((String)raw.get(\"MinAPIVersion\"));\n    return SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n      Version version=entry.getKey();\n      if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n        return true;\n      }\n      return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n    }\n).map(Map.Entry::getValue).map(func -> func.apply(handler)).findFirst();\n  }\n catch (  ClassCastException|JsonException|NullPointerException|UncheckedIOException e) {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 353,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 73,
        "endColumnNumber" : 33
      },
      "nodeContext" : "SUPPORTED_VERSIONS.entrySet().stream().filter(entry -> {\n  Version version=entry.getKey();\n  if (version.equalTo(maxVersion) || version.equalTo(minVersion)) {\n    return true;\n  }\n  return version.isLessThan(maxVersion) && version.isGreaterThan(minVersion);\n}\n).map(Map.Entry::getValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 8
    },
    "tokenLength" : 25,
    "type" : "java.util.stream.Stream<java.util.Map.Entry<org.openqa.selenium.docker.Version,java.util.function.Function<org.openqa.selenium.remote.http.HttpHandler,org.openqa.selenium.docker.DockerProtocol>>>"
  } ],
  "positionList" : [ {
    "charLength" : 319,
    "startLineNumber" : 65,
    "startColumnNumber" : 13,
    "endLineNumber" : 72,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ ]
}