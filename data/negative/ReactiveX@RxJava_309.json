{
  "id" : 309,
  "expression" : "5 * observableCount",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5 * observableCount",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 80,
      "startColumnNumber" : 25,
      "endLineNumber" : 80,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(5 * observableCount,actual.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(5 * observableCount,actual.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 60,
        "startColumnNumber" : 50,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int observableCount=100;\n  int maxConcurrent=2 + (times % 10);\n  AtomicInteger subscriptionCount=new AtomicInteger(0);\n  List<Flowable<String>> os=new ArrayList<Flowable<String>>();\n  List<SubscriptionCheckObservable> scos=new ArrayList<SubscriptionCheckObservable>();\n  for (int i=0; i < observableCount; i++) {\n    SubscriptionCheckObservable sco=new SubscriptionCheckObservable(subscriptionCount,maxConcurrent);\n    scos.add(sco);\n    os.add(Flowable.create(sco));\n  }\n  Iterator<String> iter=Flowable.merge(os,maxConcurrent).toBlocking().iterator();\n  List<String> actual=new ArrayList<String>();\n  while (iter.hasNext()) {\n    actual.add(iter.next());\n  }\n  assertEquals(5 * observableCount,actual.size());\n  for (  SubscriptionCheckObservable sco : scos) {\n    assertFalse(sco.failed);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1210,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int times=0; times < 100; times++) {\n  int observableCount=100;\n  int maxConcurrent=2 + (times % 10);\n  AtomicInteger subscriptionCount=new AtomicInteger(0);\n  List<Flowable<String>> os=new ArrayList<Flowable<String>>();\n  List<SubscriptionCheckObservable> scos=new ArrayList<SubscriptionCheckObservable>();\n  for (int i=0; i < observableCount; i++) {\n    SubscriptionCheckObservable sco=new SubscriptionCheckObservable(subscriptionCount,maxConcurrent);\n    scos.add(sco);\n    os.add(Flowable.create(sco));\n  }\n  Iterator<String> iter=Flowable.merge(os,maxConcurrent).toBlocking().iterator();\n  List<String> actual=new ArrayList<String>();\n  while (iter.hasNext()) {\n    actual.add(iter.next());\n  }\n  assertEquals(5 * observableCount,actual.size());\n  for (  SubscriptionCheckObservable sco : scos) {\n    assertFalse(sco.failed);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 170,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int times=0; times < 100; times++) {\n    int observableCount=100;\n    int maxConcurrent=2 + (times % 10);\n    AtomicInteger subscriptionCount=new AtomicInteger(0);\n    List<Flowable<String>> os=new ArrayList<Flowable<String>>();\n    List<SubscriptionCheckObservable> scos=new ArrayList<SubscriptionCheckObservable>();\n    for (int i=0; i < observableCount; i++) {\n      SubscriptionCheckObservable sco=new SubscriptionCheckObservable(subscriptionCount,maxConcurrent);\n      scos.add(sco);\n      os.add(Flowable.create(sco));\n    }\n    Iterator<String> iter=Flowable.merge(os,maxConcurrent).toBlocking().iterator();\n    List<String> actual=new ArrayList<String>();\n    while (iter.hasNext()) {\n      actual.add(iter.next());\n    }\n    assertEquals(5 * observableCount,actual.size());\n    for (    SubscriptionCheckObservable sco : scos) {\n      assertFalse(sco.failed);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMaxConcurrent(){\n  for (int times=0; times < 100; times++) {\n    int observableCount=100;\n    int maxConcurrent=2 + (times % 10);\n    AtomicInteger subscriptionCount=new AtomicInteger(0);\n    List<Flowable<String>> os=new ArrayList<Flowable<String>>();\n    List<SubscriptionCheckObservable> scos=new ArrayList<SubscriptionCheckObservable>();\n    for (int i=0; i < observableCount; i++) {\n      SubscriptionCheckObservable sco=new SubscriptionCheckObservable(subscriptionCount,maxConcurrent);\n      scos.add(sco);\n      os.add(Flowable.create(sco));\n    }\n    Iterator<String> iter=Flowable.merge(os,maxConcurrent).toBlocking().iterator();\n    List<String> actual=new ArrayList<String>();\n    while (iter.hasNext()) {\n      actual.add(iter.next());\n    }\n    assertEquals(5 * observableCount,actual.size());\n    for (    SubscriptionCheckObservable sco : scos) {\n      assertFalse(sco.failed);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(5 * observableCount,actual.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 80,
    "startColumnNumber" : 25,
    "endLineNumber" : 80,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}