{
  "id" : 246,
  "expression" : "targetConstraintValidatorFactory",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetConstraintValidatorFactory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 281,
      "startColumnNumber" : 6,
      "endLineNumber" : 281,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 281,
        "startColumnNumber" : 6,
        "endLineNumber" : 281,
        "endColumnNumber" : 46
      },
      "nodeContext" : "targetConstraintValidatorFactory == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 281,
        "startColumnNumber" : 6,
        "endLineNumber" : 281,
        "endColumnNumber" : 81
      },
      "nodeContext" : "targetConstraintValidatorFactory == null && this.applicationContext != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 281,
        "startColumnNumber" : 2,
        "endLineNumber" : 284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n  targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 242,
        "startColumnNumber" : 34,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2714,
        "startLineNumber" : 240,
        "startColumnNumber" : 1,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings({\"rawtypes\",\"unchecked\"}) public void afterPropertiesSet(){\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 281,
        "startColumnNumber" : 6,
        "endLineNumber" : 281,
        "endColumnNumber" : 81
      },
      "nodeContext" : "targetConstraintValidatorFactory == null && this.applicationContext != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.validation.beanvalidation.ConstraintValidatorFactory"
  }, {
    "nodeContext" : "targetConstraintValidatorFactory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 285,
      "startColumnNumber" : 6,
      "endLineNumber" : 285,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 285,
        "startColumnNumber" : 6,
        "endLineNumber" : 285,
        "endColumnNumber" : 46
      },
      "nodeContext" : "targetConstraintValidatorFactory != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 285,
        "startColumnNumber" : 2,
        "endLineNumber" : 287,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (targetConstraintValidatorFactory != null) {\n  configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 242,
        "startColumnNumber" : 34,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2714,
        "startLineNumber" : 240,
        "startColumnNumber" : 1,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings({\"rawtypes\",\"unchecked\"}) public void afterPropertiesSet(){\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 285,
        "startColumnNumber" : 6,
        "endLineNumber" : 285,
        "endColumnNumber" : 46
      },
      "nodeContext" : "targetConstraintValidatorFactory != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.springframework.validation.beanvalidation.ConstraintValidatorFactory"
  }, {
    "nodeContext" : "targetConstraintValidatorFactory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 286,
      "startColumnNumber" : 44,
      "endLineNumber" : 286,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 286,
        "startColumnNumber" : 3,
        "endLineNumber" : 286,
        "endColumnNumber" : 77
      },
      "nodeContext" : "configuration.constraintValidatorFactory(targetConstraintValidatorFactory)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 286,
        "startColumnNumber" : 3,
        "endLineNumber" : 286,
        "endColumnNumber" : 78
      },
      "nodeContext" : "configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 285,
        "startColumnNumber" : 48,
        "endLineNumber" : 287,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 285,
        "startColumnNumber" : 2,
        "endLineNumber" : 287,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (targetConstraintValidatorFactory != null) {\n  configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2624,
        "startLineNumber" : 242,
        "startColumnNumber" : 34,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2714,
        "startLineNumber" : 240,
        "startColumnNumber" : 1,
        "endLineNumber" : 311,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings({\"rawtypes\",\"unchecked\"}) public void afterPropertiesSet(){\n  Configuration<?> configuration;\n  if (this.providerClass != null) {\n    ProviderSpecificBootstrap bootstrap=Validation.byProvider(this.providerClass);\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n else {\n    GenericBootstrap bootstrap=Validation.byDefaultProvider();\n    if (this.validationProviderResolver != null) {\n      bootstrap=bootstrap.providerResolver(this.validationProviderResolver);\n    }\n    configuration=bootstrap.configure();\n  }\n  if (this.applicationContext != null) {\n    try {\n      Method eclMethod=configuration.getClass().getMethod(\"externalClassLoader\",ClassLoader.class);\n      ReflectionUtils.invokeMethod(eclMethod,configuration,this.applicationContext.getClassLoader());\n    }\n catch (    NoSuchMethodException ex) {\n    }\n  }\n  MessageInterpolator targetInterpolator=this.messageInterpolator;\n  if (targetInterpolator == null) {\n    targetInterpolator=configuration.getDefaultMessageInterpolator();\n  }\n  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));\n  if (this.traversableResolver != null) {\n    configuration.traversableResolver(this.traversableResolver);\n  }\n  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;\n  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {\n    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());\n  }\n  if (targetConstraintValidatorFactory != null) {\n    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n  }\n  if (this.parameterNameDiscoverer != null) {\n    configureParameterNameProvider(this.parameterNameDiscoverer,configuration);\n  }\n  if (this.mappingLocations != null) {\n    for (    Resource location : this.mappingLocations) {\n      try {\n        configuration.addMapping(location.getInputStream());\n      }\n catch (      IOException ex) {\n        throw new IllegalStateException(\"Cannot read mapping resource: \" + location);\n      }\n    }\n  }\n  this.validationPropertyMap.forEach(configuration::addProperty);\n  postProcessConfiguration(configuration);\n  this.validatorFactory=configuration.buildValidatorFactory();\n  setTargetValidator(this.validatorFactory.getValidator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 286,
        "startColumnNumber" : 3,
        "endLineNumber" : 286,
        "endColumnNumber" : 78
      },
      "nodeContext" : "configuration.constraintValidatorFactory(targetConstraintValidatorFactory);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.validation.beanvalidation.ConstraintValidatorFactory"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 281,
    "startColumnNumber" : 6,
    "endLineNumber" : 281,
    "endColumnNumber" : 38
  }, {
    "charLength" : 32,
    "startLineNumber" : 285,
    "startColumnNumber" : 6,
    "endLineNumber" : 285,
    "endColumnNumber" : 38
  }, {
    "charLength" : 32,
    "startLineNumber" : 286,
    "startColumnNumber" : 44,
    "endLineNumber" : 286,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}