{
  "id" : 146,
  "expression" : "\"pulsarSuperUser\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"pulsarSuperUser\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 264,
      "startColumnNumber" : 39,
      "endLineNumber" : 264,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 264,
        "startColumnNumber" : 21,
        "endLineNumber" : 264,
        "endColumnNumber" : 56
      },
      "nodeContext" : "pulsarSuperUser=\"pulsarSuperUser\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final String pulsarSuperUser=\"pulsarSuperUser\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4529,
        "startLineNumber" : 248,
        "startColumnNumber" : 109,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TenantInfo tenantInfo=TenantInfo.builder().build();\n  AuthenticationDataSource authenticationDataSource=mock(AuthenticationDataSource.class);\n  FunctionsImpl functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  AuthorizationService authorizationService=mock(AuthorizationService.class);\n  doReturn(authorizationService).when(mockedWorkerService).getAuthorizationService();\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setAuthorizationEnabled(true);\n  workerConfig.setSuperUserRoles(Collections.singleton(superUser));\n  doReturn(workerConfig).when(mockedWorkerService).getWorkerConfig();\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",superUser,authenticationDataSource));\n  final String pulsarSuperUser=\"pulsarSuperUser\";\n  when(authorizationService.isSuperUser(eq(pulsarSuperUser),any())).thenReturn(CompletableFuture.completedFuture(true));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",pulsarSuperUser,authenticationDataSource));\n  assertTrue(functionImpl.isSuperUser(pulsarSuperUser,null));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(false).when(functionImpl).allowFunctionOps(any(),any(),any());\n  Tenants tenants=mock(Tenants.class);\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  PulsarAdmin admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(false));\n  when(authorizationService.isSuperUser(eq(\"test-user\"),any())).thenReturn(CompletableFuture.completedFuture(false));\n  assertFalse(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(false).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  tenantInfo=TenantInfo.builder().adminRoles(Collections.singleton(\"test-user\")).build();\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(true));\n  when(authorizationService.isSuperUser(\"test-user\",authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(false));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(true).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  tenantInfo=TenantInfo.builder().build();\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(true));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(true).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  when(tenants.getTenantInfo(any())).thenReturn(TenantInfo.builder().build());\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  assertFalse(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",null,authenticationDataSource));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 571,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4644,
        "startLineNumber" : 247,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testIsAuthorizedRole() throws PulsarAdminException, InterruptedException, ExecutionException {\n  TenantInfo tenantInfo=TenantInfo.builder().build();\n  AuthenticationDataSource authenticationDataSource=mock(AuthenticationDataSource.class);\n  FunctionsImpl functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  AuthorizationService authorizationService=mock(AuthorizationService.class);\n  doReturn(authorizationService).when(mockedWorkerService).getAuthorizationService();\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setAuthorizationEnabled(true);\n  workerConfig.setSuperUserRoles(Collections.singleton(superUser));\n  doReturn(workerConfig).when(mockedWorkerService).getWorkerConfig();\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",superUser,authenticationDataSource));\n  final String pulsarSuperUser=\"pulsarSuperUser\";\n  when(authorizationService.isSuperUser(eq(pulsarSuperUser),any())).thenReturn(CompletableFuture.completedFuture(true));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",pulsarSuperUser,authenticationDataSource));\n  assertTrue(functionImpl.isSuperUser(pulsarSuperUser,null));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(false).when(functionImpl).allowFunctionOps(any(),any(),any());\n  Tenants tenants=mock(Tenants.class);\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  PulsarAdmin admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(false));\n  when(authorizationService.isSuperUser(eq(\"test-user\"),any())).thenReturn(CompletableFuture.completedFuture(false));\n  assertFalse(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(false).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  tenantInfo=TenantInfo.builder().adminRoles(Collections.singleton(\"test-user\")).build();\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(true));\n  when(authorizationService.isSuperUser(\"test-user\",authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(false));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(true).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  tenantInfo=TenantInfo.builder().build();\n  when(tenants.getTenantInfo(any())).thenReturn(tenantInfo);\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  when(authorizationService.isTenantAdmin(\"test-tenant\",\"test-user\",tenantInfo,authenticationDataSource)).thenReturn(CompletableFuture.completedFuture(true));\n  assertTrue(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",\"test-user\",authenticationDataSource));\n  functionImpl=spy(new FunctionsImpl(() -> mockedWorkerService));\n  doReturn(true).when(functionImpl).allowFunctionOps(any(),any(),any());\n  tenants=mock(Tenants.class);\n  when(tenants.getTenantInfo(any())).thenReturn(TenantInfo.builder().build());\n  admin=mock(PulsarAdmin.class);\n  when(admin.tenants()).thenReturn(tenants);\n  when(this.mockedWorkerService.getBrokerAdmin()).thenReturn(admin);\n  assertFalse(functionImpl.isAuthorizedRole(\"test-tenant\",\"test-ns\",null,authenticationDataSource));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 583,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final String pulsarSuperUser=\"pulsarSuperUser\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 264,
    "startColumnNumber" : 39,
    "endLineNumber" : 264,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}