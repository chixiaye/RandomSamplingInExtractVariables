{
  "id" : 292,
  "expression" : "query",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/integration-tests/src/main/java/org/apache/druid/server/coordination/ServerManagerForQueryErrorTest.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 130,
      "startColumnNumber" : 8,
      "endLineNumber" : 130,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 68
      },
      "nodeContext" : "query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 68
      },
      "nodeContext" : "query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 133,
      "startColumnNumber" : 10,
      "endLineNumber" : 133,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 133,
        "startColumnNumber" : 10,
        "endLineNumber" : 133,
        "endColumnNumber" : 35
      },
      "nodeContext" : "query.getMostSpecificId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 144,
        "endColumnNumber" : 7
      },
      "nodeContext" : "queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n  if (ignoredSegments == null) {\n    ignoredSegments=new HashSet<>();\n  }\n  if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n    ignoredSegments.add(descriptor);\n    isIgnoreSegment.setTrue();\n  }\n  return ignoredSegments;\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 144,
        "endColumnNumber" : 8
      },
      "nodeContext" : "queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n  if (ignoredSegments == null) {\n    ignoredSegments=new HashSet<>();\n  }\n  if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n    ignoredSegments.add(descriptor);\n    isIgnoreSegment.setTrue();\n  }\n  return ignoredSegments;\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 130,
        "startColumnNumber" : 70,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 133,
        "startColumnNumber" : 10,
        "endLineNumber" : 133,
        "endColumnNumber" : 35
      },
      "nodeContext" : "query.getMostSpecificId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 150,
      "startColumnNumber" : 15,
      "endLineNumber" : 150,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 150,
        "startColumnNumber" : 15,
        "endLineNumber" : 150,
        "endColumnNumber" : 77
      },
      "nodeContext" : "query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 150,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 150,
        "startColumnNumber" : 15,
        "endLineNumber" : 150,
        "endColumnNumber" : 77
      },
      "nodeContext" : "query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 165,
      "startColumnNumber" : 15,
      "endLineNumber" : 165,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 165,
        "startColumnNumber" : 15,
        "endLineNumber" : 165,
        "endColumnNumber" : 87
      },
      "nodeContext" : "query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2492,
        "startLineNumber" : 165,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 150,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 165,
        "startColumnNumber" : 15,
        "endLineNumber" : 165,
        "endColumnNumber" : 87
      },
      "nodeContext" : "query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 180,
      "startColumnNumber" : 15,
      "endLineNumber" : 180,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 180,
        "startColumnNumber" : 15,
        "endLineNumber" : 180,
        "endColumnNumber" : 81
      },
      "nodeContext" : "query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1804,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2492,
        "startLineNumber" : 165,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 150,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 180,
        "startColumnNumber" : 15,
        "endLineNumber" : 180,
        "endColumnNumber" : 81
      },
      "nodeContext" : "query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 195,
      "startColumnNumber" : 15,
      "endLineNumber" : 195,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 195,
        "startColumnNumber" : 15,
        "endLineNumber" : 195,
        "endColumnNumber" : 87
      },
      "nodeContext" : "query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 195,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1804,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2492,
        "startLineNumber" : 165,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 150,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 195,
        "startColumnNumber" : 15,
        "endLineNumber" : 195,
        "endColumnNumber" : 87
      },
      "nodeContext" : "query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 210,
      "startColumnNumber" : 15,
      "endLineNumber" : 210,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 210,
        "startColumnNumber" : 15,
        "endLineNumber" : 210,
        "endColumnNumber" : 77
      },
      "nodeContext" : "query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 210,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 195,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1804,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 237,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2492,
        "startLineNumber" : 165,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 150,
        "startColumnNumber" : 11,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 395,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3882,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n  final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n  queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n    if (ignoredSegments == null) {\n      ignoredSegments=new HashSet<>();\n    }\n    if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n      ignoredSegments.add(descriptor);\n      isIgnoreSegment.setTrue();\n    }\n    return ignoredSegments;\n  }\n);\n  if (isIgnoreSegment.isTrue()) {\n    LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n    return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n  }\n}\n else if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryTimeoutException(\"query timeout test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new QueryUnsupportedException(\"query unsupported test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n    }\n  }\n;\n}\n else if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n  return (queryPlus,responseContext) -> new Sequence<T>(){\n    @Override public <OutType>OutType accumulate(    OutType initValue,    Accumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){\n      throw new RuntimeException(\"query failure test\");\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 210,
        "startColumnNumber" : 15,
        "endLineNumber" : 210,
        "endColumnNumber" : 77
      },
      "nodeContext" : "query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 228,
      "startColumnNumber" : 8,
      "endLineNumber" : 228,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 227,
        "startColumnNumber" : 11,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix)",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 236,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4538,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 237,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override <T>QueryRunner<T> buildQueryRunnerForSegment(Query<T> query,SegmentDescriptor descriptor,QueryRunnerFactory<T,Query<T>> factory,QueryToolChest<T,Query<T>> toolChest,VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline,Function<SegmentReference,SegmentReference> segmentMapFn,AtomicLong cpuTimeAccumulator,Optional<byte[]> cacheKeyPrefix){\n  if (query.getContextBoolean(QUERY_RETRY_TEST_CONTEXT_KEY,false)) {\n    final MutableBoolean isIgnoreSegment=new MutableBoolean(false);\n    queryToIgnoredSegments.compute(query.getMostSpecificId(),(queryId,ignoredSegments) -> {\n      if (ignoredSegments == null) {\n        ignoredSegments=new HashSet<>();\n      }\n      if (ignoredSegments.size() < MAX_NUM_FALSE_MISSING_SEGMENTS_REPORTS) {\n        ignoredSegments.add(descriptor);\n        isIgnoreSegment.setTrue();\n      }\n      return ignoredSegments;\n    }\n);\n    if (isIgnoreSegment.isTrue()) {\n      LOG.info(\"Pretending I don't have segment[%s]\",descriptor);\n      return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);\n    }\n  }\n else   if (query.getContextBoolean(QUERY_TIMEOUT_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryTimeoutException(\"query timeout test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_CAPACITY_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw QueryCapacityExceededException.withErrorMessageAndResolvedHost(\"query capacity exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_UNSUPPORTED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new QueryUnsupportedException(\"query unsupported test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(RESOURCE_LIMIT_EXCEEDED_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new ResourceLimitExceededException(\"resource limit exceeded test\");\n      }\n    }\n;\n  }\n else   if (query.getContextBoolean(QUERY_FAILURE_TEST_CONTEXT_KEY,false)) {\n    return (queryPlus,responseContext) -> new Sequence<T>(){\n      @Override public <OutType>OutType accumulate(      OutType initValue,      Accumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n      @Override public <OutType>Yielder<OutType> toYielder(      OutType initValue,      YieldingAccumulator<OutType,T> accumulator){\n        throw new RuntimeException(\"query failure test\");\n      }\n    }\n;\n  }\n  return super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 560,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 227,
        "startColumnNumber" : 11,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "super.buildQueryRunnerForSegment(query,descriptor,factory,toolChest,timeline,segmentMapFn,cpuTimeAccumulator,cacheKeyPrefix)",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.Query<T>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 130,
    "startColumnNumber" : 8,
    "endLineNumber" : 130,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 133,
    "startColumnNumber" : 10,
    "endLineNumber" : 133,
    "endColumnNumber" : 15
  }, {
    "charLength" : 5,
    "startLineNumber" : 150,
    "startColumnNumber" : 15,
    "endLineNumber" : 150,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 165,
    "startColumnNumber" : 15,
    "endLineNumber" : 165,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 180,
    "startColumnNumber" : 15,
    "endLineNumber" : 180,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 195,
    "startColumnNumber" : 15,
    "endLineNumber" : 195,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 210,
    "startColumnNumber" : 15,
    "endLineNumber" : 210,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 228,
    "startColumnNumber" : 8,
    "endLineNumber" : 228,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  } ]
}