{
  "id" : 554,
  "expression" : "AttributeKey",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "738dd0ee18a142d3fe69fc5f16889ac770188c93",
  "filePath" : "java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 183,
      "startColumnNumber" : 15,
      "endLineNumber" : 183,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 183,
        "startColumnNumber" : 15,
        "endLineNumber" : 183,
        "endColumnNumber" : 40
      },
      "nodeContext" : "AttributeKey.LOGGER_CLASS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 183,
        "startColumnNumber" : 15,
        "endLineNumber" : 183,
        "endColumnNumber" : 49
      },
      "nodeContext" : "AttributeKey.LOGGER_CLASS.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 183,
        "startColumnNumber" : 15,
        "endLineNumber" : 183,
        "endColumnNumber" : 49
      },
      "nodeContext" : "AttributeKey.LOGGER_CLASS.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 244,
      "startColumnNumber" : 24,
      "endLineNumber" : 244,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 244,
        "startColumnNumber" : 24,
        "endLineNumber" : 244,
        "endColumnNumber" : 55
      },
      "nodeContext" : "AttributeKey.DOWNSTREAM_DIALECT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 244,
        "startColumnNumber" : 24,
        "endLineNumber" : 244,
        "endColumnNumber" : 64
      },
      "nodeContext" : "AttributeKey.DOWNSTREAM_DIALECT.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 77
      },
      "nodeContext" : "span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 78
      },
      "nodeContext" : "span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 78
      },
      "nodeContext" : "span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 245,
      "startColumnNumber" : 24,
      "endLineNumber" : 245,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 245,
        "startColumnNumber" : 24,
        "endLineNumber" : 245,
        "endColumnNumber" : 53
      },
      "nodeContext" : "AttributeKey.UPSTREAM_DIALECT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 245,
        "startColumnNumber" : 24,
        "endLineNumber" : 245,
        "endColumnNumber" : 62
      },
      "nodeContext" : "AttributeKey.UPSTREAM_DIALECT.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 73
      },
      "nodeContext" : "span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 74
      },
      "nodeContext" : "span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 74
      },
      "nodeContext" : "span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 246,
      "startColumnNumber" : 24,
      "endLineNumber" : 246,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 246,
        "startColumnNumber" : 24,
        "endLineNumber" : 246,
        "endColumnNumber" : 48
      },
      "nodeContext" : "AttributeKey.SESSION_URI",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 246,
        "startColumnNumber" : 24,
        "endLineNumber" : 246,
        "endColumnNumber" : 57
      },
      "nodeContext" : "AttributeKey.SESSION_URI.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 246,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 70
      },
      "nodeContext" : "span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 246,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 71
      },
      "nodeContext" : "span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 246,
        "startColumnNumber" : 6,
        "endLineNumber" : 246,
        "endColumnNumber" : 71
      },
      "nodeContext" : "span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 248,
      "startColumnNumber" : 23,
      "endLineNumber" : 248,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 248,
        "startColumnNumber" : 23,
        "endLineNumber" : 248,
        "endColumnNumber" : 54
      },
      "nodeContext" : "AttributeKey.DOWNSTREAM_DIALECT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 248,
        "startColumnNumber" : 23,
        "endLineNumber" : 248,
        "endColumnNumber" : 63
      },
      "nodeContext" : "AttributeKey.DOWNSTREAM_DIALECT.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 248,
        "startColumnNumber" : 6,
        "endLineNumber" : 248,
        "endColumnNumber" : 101
      },
      "nodeContext" : "attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 248,
        "startColumnNumber" : 6,
        "endLineNumber" : 248,
        "endColumnNumber" : 102
      },
      "nodeContext" : "attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 248,
        "startColumnNumber" : 6,
        "endLineNumber" : 248,
        "endColumnNumber" : 102
      },
      "nodeContext" : "attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 249,
      "startColumnNumber" : 23,
      "endLineNumber" : 249,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 249,
        "startColumnNumber" : 23,
        "endLineNumber" : 249,
        "endColumnNumber" : 52
      },
      "nodeContext" : "AttributeKey.UPSTREAM_DIALECT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 249,
        "startColumnNumber" : 23,
        "endLineNumber" : 249,
        "endColumnNumber" : 61
      },
      "nodeContext" : "AttributeKey.UPSTREAM_DIALECT.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 249,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 249,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 249,
        "startColumnNumber" : 6,
        "endLineNumber" : 249,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  }, {
    "nodeContext" : "AttributeKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 250,
      "startColumnNumber" : 23,
      "endLineNumber" : 250,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 250,
        "startColumnNumber" : 23,
        "endLineNumber" : 250,
        "endColumnNumber" : 47
      },
      "nodeContext" : "AttributeKey.SESSION_URI",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 250,
        "startColumnNumber" : 23,
        "endLineNumber" : 250,
        "endColumnNumber" : 56
      },
      "nodeContext" : "AttributeKey.SESSION_URI.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 250,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 250,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 180,
        "startColumnNumber" : 80,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3828,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n  LOG.fine(\"Creating new session using span: \" + span);\n  attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n  attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n  int currentSessionCount=getCurrentSessionCount();\n  span.setAttribute(\"current.session.count\",currentSessionCount);\n  attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n  if (getCurrentSessionCount() >= maxSessionCount) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.RESOURCE_EXHAUSTED);\n    attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n    span.addEvent(\"Max session count reached\",attributeMap);\n    return Optional.empty();\n  }\n  SessionSlot slotToUse=null;\nsynchronized (factories) {\n    for (    SessionSlot factory : factories) {\n      if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n        continue;\n      }\n      factory.reserve();\n      slotToUse=factory;\n      break;\n    }\n  }\n  if (slotToUse == null) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slot matched capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n  if (!possibleSession.isPresent()) {\n    slotToUse.release();\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.NOT_FOUND);\n    span.addEvent(\"No slots available for capabilities \",attributeMap);\n    return Optional.empty();\n  }\n  ActiveSession session=possibleSession.get();\n  currentSessions.put(session.getId(),slotToUse);\n  SessionId sessionId=session.getId();\n  Capabilities caps=session.getCapabilities();\n  SESSION_ID.accept(span,sessionId);\n  CAPABILITIES.accept(span,caps);\n  SESSION_ID_EVENT.accept(attributeMap,sessionId);\n  CAPABILITIES_EVENT.accept(attributeMap,caps);\n  String downstream=session.getDownstreamDialect().toString();\n  String upstream=session.getUpstreamDialect().toString();\n  String sessionUri=session.getUri().toString();\n  span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n  span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n  span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n  attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n  attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n  attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n  span.addEvent(\"Session created by node\",attributeMap);\n  Session externalSession=createExternalSession(session,externalUri);\n  return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 434,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3895,
        "startLineNumber" : 177,
        "startColumnNumber" : 89,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 176,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest){\n  Require.nonNull(\"Session request\",sessionRequest);\n  try (Span span=tracer.getCurrentContext().createSpan(\"node.new_session\")){\n    Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n    attributeMap.put(AttributeKey.LOGGER_CLASS.getKey(),EventAttribute.setValue(getClass().getName()));\n    LOG.fine(\"Creating new session using span: \" + span);\n    attributeMap.put(\"session.request.capabilities\",EventAttribute.setValue(sessionRequest.getCapabilities().toString()));\n    attributeMap.put(\"session.request.downstreamdialect\",EventAttribute.setValue(sessionRequest.getDownstreamDialects().toString()));\n    int currentSessionCount=getCurrentSessionCount();\n    span.setAttribute(\"current.session.count\",currentSessionCount);\n    attributeMap.put(\"current.session.count\",EventAttribute.setValue(currentSessionCount));\n    if (getCurrentSessionCount() >= maxSessionCount) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.RESOURCE_EXHAUSTED);\n      attributeMap.put(\"max.session.count\",EventAttribute.setValue(maxSessionCount));\n      span.addEvent(\"Max session count reached\",attributeMap);\n      return Optional.empty();\n    }\n    SessionSlot slotToUse=null;\nsynchronized (factories) {\n      for (      SessionSlot factory : factories) {\n        if (!factory.isAvailable() || !factory.test(sessionRequest.getCapabilities())) {\n          continue;\n        }\n        factory.reserve();\n        slotToUse=factory;\n        break;\n      }\n    }\n    if (slotToUse == null) {\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slot matched capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    Optional<ActiveSession> possibleSession=slotToUse.apply(sessionRequest);\n    if (!possibleSession.isPresent()) {\n      slotToUse.release();\n      span.setAttribute(\"error\",true);\n      span.setStatus(Status.NOT_FOUND);\n      span.addEvent(\"No slots available for capabilities \",attributeMap);\n      return Optional.empty();\n    }\n    ActiveSession session=possibleSession.get();\n    currentSessions.put(session.getId(),slotToUse);\n    SessionId sessionId=session.getId();\n    Capabilities caps=session.getCapabilities();\n    SESSION_ID.accept(span,sessionId);\n    CAPABILITIES.accept(span,caps);\n    SESSION_ID_EVENT.accept(attributeMap,sessionId);\n    CAPABILITIES_EVENT.accept(attributeMap,caps);\n    String downstream=session.getDownstreamDialect().toString();\n    String upstream=session.getUpstreamDialect().toString();\n    String sessionUri=session.getUri().toString();\n    span.setAttribute(AttributeKey.DOWNSTREAM_DIALECT.getKey(),downstream);\n    span.setAttribute(AttributeKey.UPSTREAM_DIALECT.getKey(),upstream);\n    span.setAttribute(AttributeKey.SESSION_URI.getKey(),sessionUri);\n    attributeMap.put(AttributeKey.DOWNSTREAM_DIALECT.getKey(),EventAttribute.setValue(downstream));\n    attributeMap.put(AttributeKey.UPSTREAM_DIALECT.getKey(),EventAttribute.setValue(upstream));\n    attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n    span.addEvent(\"Session created by node\",attributeMap);\n    Session externalSession=createExternalSession(session,externalUri);\n    return Optional.of(new CreateSessionResponse(externalSession,getEncoder(session.getDownstreamDialect()).apply(externalSession)));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 250,
        "startColumnNumber" : 6,
        "endLineNumber" : 250,
        "endColumnNumber" : 95
      },
      "nodeContext" : "attributeMap.put(AttributeKey.SESSION_URI.getKey(),EventAttribute.setValue(sessionUri));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.tracing.AttributeKey"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 183,
    "startColumnNumber" : 15,
    "endLineNumber" : 183,
    "endColumnNumber" : 27
  }, {
    "charLength" : 12,
    "startLineNumber" : 244,
    "startColumnNumber" : 24,
    "endLineNumber" : 244,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 245,
    "startColumnNumber" : 24,
    "endLineNumber" : 245,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 246,
    "startColumnNumber" : 24,
    "endLineNumber" : 246,
    "endColumnNumber" : 36
  }, {
    "charLength" : 12,
    "startLineNumber" : 248,
    "startColumnNumber" : 23,
    "endLineNumber" : 248,
    "endColumnNumber" : 35
  }, {
    "charLength" : 12,
    "startLineNumber" : 249,
    "startColumnNumber" : 23,
    "endLineNumber" : 249,
    "endColumnNumber" : 35
  }, {
    "charLength" : 12,
    "startLineNumber" : 250,
    "startColumnNumber" : 23,
    "endLineNumber" : 250,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  } ]
}