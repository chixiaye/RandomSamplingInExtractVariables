{
  "id" : 52,
  "expression" : "msg",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "msg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 376,
      "startColumnNumber" : 48,
      "endLineNumber" : 376,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 376,
        "startColumnNumber" : 48,
        "endLineNumber" : 376,
        "endColumnNumber" : 61
      },
      "nodeContext" : "msg.getData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 376,
        "startColumnNumber" : 37,
        "endLineNumber" : 376,
        "endColumnNumber" : 62
      },
      "nodeContext" : "new String(msg.getData())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 376,
        "startColumnNumber" : 19,
        "endLineNumber" : 376,
        "endColumnNumber" : 62
      },
      "nodeContext" : "receivedMessage=new String(msg.getData())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 376,
        "startColumnNumber" : 12,
        "endLineNumber" : 376,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String receivedMessage=new String(msg.getData());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 374,
        "startColumnNumber" : 54,
        "endLineNumber" : 380,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  msg=consumer1.receive(1,TimeUnit.SECONDS);\n  String receivedMessage=new String(msg.getData());\n  String expectedMessage=\"my-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer1.acknowledge(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 380,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numMessagesPerBatch; i++) {\n  msg=consumer1.receive(1,TimeUnit.SECONDS);\n  String receivedMessage=new String(msg.getData());\n  String expectedMessage=\"my-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer1.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 331,
        "startColumnNumber" : 95,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4619,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that consumer which doesn't support batch-message: <p> 1. broker disconnects that consumer <p> 2. redeliver all those messages to other supported consumer under the same subscription\n * @param subType\n * @throws Exception\n */\n@Test(dataProvider=\"subType\") public void testUnsupportedBatchMessageConsumer(SubscriptionType subType) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 376,
        "startColumnNumber" : 12,
        "endLineNumber" : 376,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String receivedMessage=new String(msg.getData());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.api.Message<byte[]>"
  }, {
    "nodeContext" : "msg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 379,
      "startColumnNumber" : 34,
      "endLineNumber" : 379,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 379,
        "startColumnNumber" : 12,
        "endLineNumber" : 379,
        "endColumnNumber" : 38
      },
      "nodeContext" : "consumer1.acknowledge(msg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 379,
        "startColumnNumber" : 12,
        "endLineNumber" : 379,
        "endColumnNumber" : 39
      },
      "nodeContext" : "consumer1.acknowledge(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 374,
        "startColumnNumber" : 54,
        "endLineNumber" : 380,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  msg=consumer1.receive(1,TimeUnit.SECONDS);\n  String receivedMessage=new String(msg.getData());\n  String expectedMessage=\"my-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer1.acknowledge(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 380,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numMessagesPerBatch; i++) {\n  msg=consumer1.receive(1,TimeUnit.SECONDS);\n  String receivedMessage=new String(msg.getData());\n  String expectedMessage=\"my-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer1.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 331,
        "startColumnNumber" : 95,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4619,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that consumer which doesn't support batch-message: <p> 1. broker disconnects that consumer <p> 2. redeliver all those messages to other supported consumer under the same subscription\n * @param subType\n * @throws Exception\n */\n@Test(dataProvider=\"subType\") public void testUnsupportedBatchMessageConsumer(SubscriptionType subType) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 379,
        "startColumnNumber" : 12,
        "endLineNumber" : 379,
        "endColumnNumber" : 39
      },
      "nodeContext" : "consumer1.acknowledge(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.api.Message<byte[]>"
  }, {
    "nodeContext" : "msg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 394,
      "startColumnNumber" : 19,
      "endLineNumber" : 394,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 23
      },
      "nodeContext" : "assertNull(msg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 24
      },
      "nodeContext" : "assertNull(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 331,
        "startColumnNumber" : 95,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4619,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that consumer which doesn't support batch-message: <p> 1. broker disconnects that consumer <p> 2. redeliver all those messages to other supported consumer under the same subscription\n * @param subType\n * @throws Exception\n */\n@Test(dataProvider=\"subType\") public void testUnsupportedBatchMessageConsumer(SubscriptionType subType) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 24
      },
      "nodeContext" : "assertNull(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.api.Message<byte[]>"
  }, {
    "nodeContext" : "msg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 409,
      "startColumnNumber" : 48,
      "endLineNumber" : 409,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 409,
        "startColumnNumber" : 48,
        "endLineNumber" : 409,
        "endColumnNumber" : 61
      },
      "nodeContext" : "msg.getData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 409,
        "startColumnNumber" : 37,
        "endLineNumber" : 409,
        "endColumnNumber" : 62
      },
      "nodeContext" : "new String(msg.getData())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 409,
        "startColumnNumber" : 19,
        "endLineNumber" : 409,
        "endColumnNumber" : 62
      },
      "nodeContext" : "receivedMessage=new String(msg.getData())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 409,
        "startColumnNumber" : 12,
        "endLineNumber" : 409,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String receivedMessage=new String(msg.getData());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 407,
        "startColumnNumber" : 54,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  msg=consumer2.receive();\n  String receivedMessage=new String(msg.getData());\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-batch-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer2.acknowledge(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numMessagesPerBatch; i++) {\n  msg=consumer2.receive();\n  String receivedMessage=new String(msg.getData());\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-batch-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer2.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 331,
        "startColumnNumber" : 95,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4619,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that consumer which doesn't support batch-message: <p> 1. broker disconnects that consumer <p> 2. redeliver all those messages to other supported consumer under the same subscription\n * @param subType\n * @throws Exception\n */\n@Test(dataProvider=\"subType\") public void testUnsupportedBatchMessageConsumer(SubscriptionType subType) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 409,
        "startColumnNumber" : 12,
        "endLineNumber" : 409,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String receivedMessage=new String(msg.getData());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.api.Message<byte[]>"
  }, {
    "nodeContext" : "msg",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 413,
      "startColumnNumber" : 34,
      "endLineNumber" : 413,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 413,
        "startColumnNumber" : 12,
        "endLineNumber" : 413,
        "endColumnNumber" : 38
      },
      "nodeContext" : "consumer2.acknowledge(msg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 413,
        "startColumnNumber" : 12,
        "endLineNumber" : 413,
        "endColumnNumber" : 39
      },
      "nodeContext" : "consumer2.acknowledge(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 407,
        "startColumnNumber" : 54,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  msg=consumer2.receive();\n  String receivedMessage=new String(msg.getData());\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-batch-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer2.acknowledge(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 414,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numMessagesPerBatch; i++) {\n  msg=consumer2.receive();\n  String receivedMessage=new String(msg.getData());\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-batch-message-\" + i;\n  testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n  consumer2.acknowledge(msg);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 331,
        "startColumnNumber" : 95,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4619,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 420,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that consumer which doesn't support batch-message: <p> 1. broker disconnects that consumer <p> 2. redeliver all those messages to other supported consumer under the same subscription\n * @param subType\n * @throws Exception\n */\n@Test(dataProvider=\"subType\") public void testUnsupportedBatchMessageConsumer(SubscriptionType subType) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String topicName=\"persistent://my-property/my-ns/my-topic1\";\n  final String subscriptionName=\"my-subscriber-name\" + subType;\n  ConsumerImpl<byte[]> consumer1=(ConsumerImpl<byte[]>)pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  final int numMessagesPerBatch=10;\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).create();\n  Producer<byte[]> batchProducer=pulsarClient.newProducer().topic(topicName).enableBatching(true).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.SECONDS).batchingMaxMessages(numMessagesPerBatch).create();\n  Topic topic=pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  org.apache.pulsar.broker.service.Consumer brokerConsumer=topic.getSubscriptions().get(subscriptionName).getConsumers().get(0);\n  Field cnxField=org.apache.pulsar.broker.service.Consumer.class.getDeclaredField(\"cnx\");\n  cnxField.setAccessible(true);\n  PulsarHandler cnx=(PulsarHandler)cnxField.get(brokerConsumer);\n  Field versionField=PulsarHandler.class.getDeclaredField(\"remoteEndpointProtocolVersion\");\n  versionField.setAccessible(true);\n  versionField.set(cnx,3);\n  MessageId lastNonBatchedMessageId=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-message-\" + i;\n    lastNonBatchedMessageId=producer.send(message.getBytes());\n  }\n  Set<String> messageSet=Sets.newHashSet();\n  Message<byte[]> msg=null;\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer1.receive(1,TimeUnit.SECONDS);\n    String receivedMessage=new String(msg.getData());\n    String expectedMessage=\"my-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer1.acknowledge(msg);\n  }\n  consumer1.setClientCnx(null);\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    String message=\"my-batch-message-\" + i;\n    batchProducer.sendAsync(message.getBytes());\n  }\n  batchProducer.flush();\n  msg=consumer1.receive(100,TimeUnit.MILLISECONDS);\n  assertNull(msg);\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> consumer2=newPulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscriptionType(subType).subscribe();\n  consumer2.seek(lastNonBatchedMessageId);\n  messageSet.clear();\n  for (int i=0; i < numMessagesPerBatch; i++) {\n    msg=consumer2.receive();\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-batch-message-\" + i;\n    testMessageOrderAndDuplicates(messageSet,receivedMessage,expectedMessage);\n    consumer2.acknowledge(msg);\n  }\n  consumer2.close();\n  producer.close();\n  batchProducer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 413,
        "startColumnNumber" : 12,
        "endLineNumber" : 413,
        "endColumnNumber" : 39
      },
      "nodeContext" : "consumer2.acknowledge(msg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.client.api.Message<byte[]>"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 376,
    "startColumnNumber" : 48,
    "endLineNumber" : 376,
    "endColumnNumber" : 51
  }, {
    "charLength" : 3,
    "startLineNumber" : 379,
    "startColumnNumber" : 34,
    "endLineNumber" : 379,
    "endColumnNumber" : 37
  }, {
    "charLength" : 3,
    "startLineNumber" : 394,
    "startColumnNumber" : 19,
    "endLineNumber" : 394,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 409,
    "startColumnNumber" : 48,
    "endLineNumber" : 409,
    "endColumnNumber" : 51
  }, {
    "charLength" : 3,
    "startLineNumber" : 413,
    "startColumnNumber" : 34,
    "endLineNumber" : 413,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}