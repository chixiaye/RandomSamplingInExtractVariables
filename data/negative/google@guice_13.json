{
  "id" : 13,
  "expression" : "n.intValue()",
  "projectName" : "google@guice",
  "commitID" : "ed8825fb8c7cdae7f8e24a8d224344e19f562513",
  "filePath" : "/test/com/google/inject/ConstantConversionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n.intValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 86,
      "startColumnNumber" : 22,
      "endLineNumber" : 86,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertEquals(5,n.intValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertEquals(5,n.intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertEquals(5,n.intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Number n : ns) {\n  assertEquals(5,n.intValue());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 84,
        "startColumnNumber" : 34,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Number n : ns) {\n    assertEquals(5,n.intValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "void checkNumbers(Number... ns){\n  for (  Number n : ns) {\n    assertEquals(5,n.intValue());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 22,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertEquals(5,n.intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 86,
    "startColumnNumber" : 22,
    "endLineNumber" : 86,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}