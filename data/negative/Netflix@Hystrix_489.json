{
  "id" : 489,
  "expression" : "commandAction",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/command/GenericCommand.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "commandAction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 33
      },
      "nodeContext" : "commandAction != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (commandAction != null) {\n  try {\n    return process(new Action(){\n      @Override Object execute(){\n        MetaHolder metaHolder=commandAction.getMetaHolder();\n        Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n        return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n      }\n    }\n);\n  }\n catch (  Throwable e) {\n    LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n    throw new FallbackInvocationException(unwrapCause(e));\n  }\n}\n else {\n  return super.getFallback();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 884,
        "startLineNumber" : 67,
        "startColumnNumber" : 35,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CommandAction commandAction=getFallbackAction();\n  if (commandAction != null) {\n    try {\n      return process(new Action(){\n        @Override Object execute(){\n          MetaHolder metaHolder=commandAction.getMetaHolder();\n          Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n          return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n      throw new FallbackInvocationException(unwrapCause(e));\n    }\n  }\n else {\n    return super.getFallback();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1801,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The fallback is performed whenever a command execution fails. Also a fallback method will be invoked within separate command in the case if fallback method was annotated with HystrixCommand annotation, otherwise current implementation throws RuntimeException and leaves the caller to deal with it (see  {@link super#getFallback()}). The getFallback() is always processed synchronously. Since getFallback() can throw only runtime exceptions thus any exceptions are thrown within getFallback() method are wrapped in  {@link FallbackInvocationException}. A caller gets  {@link com.netflix.hystrix.exception.HystrixRuntimeException}and should call getCause to get original exception that was thrown in getFallback().\n * @return result of invocation of fallback method or RuntimeException\n */\n@Override protected Object getFallback(){\n  final CommandAction commandAction=getFallbackAction();\n  if (commandAction != null) {\n    try {\n      return process(new Action(){\n        @Override Object execute(){\n          MetaHolder metaHolder=commandAction.getMetaHolder();\n          Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n          return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n      throw new FallbackInvocationException(unwrapCause(e));\n    }\n  }\n else {\n    return super.getFallback();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 33
      },
      "nodeContext" : "commandAction != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.contrib.javanica.command.CommandAction"
  }, {
    "nodeContext" : "commandAction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 81,
      "startColumnNumber" : 32,
      "endLineNumber" : 81,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 80,
        "startColumnNumber" : 29,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "FallbackErrorMessageBuilder.create().append(commandAction,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 80,
        "startColumnNumber" : 29,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "FallbackErrorMessageBuilder.create().append(commandAction,e).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 58
      },
      "nodeContext" : "LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 59
      },
      "nodeContext" : "LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 79,
        "startColumnNumber" : 34,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n  throw new FallbackInvocationException(unwrapCause(e));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 79,
        "startColumnNumber" : 14,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Throwable e) {\n  LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n  throw new FallbackInvocationException(unwrapCause(e));\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  return process(new Action(){\n    @Override Object execute(){\n      MetaHolder metaHolder=commandAction.getMetaHolder();\n      Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n      return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n    }\n  }\n);\n}\n catch (Throwable e) {\n  LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n  throw new FallbackInvocationException(unwrapCause(e));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 70,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 719,
        "startLineNumber" : 69,
        "startColumnNumber" : 35,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    return process(new Action(){\n      @Override Object execute(){\n        MetaHolder metaHolder=commandAction.getMetaHolder();\n        Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n        return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n      }\n    }\n);\n  }\n catch (  Throwable e) {\n    LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n    throw new FallbackInvocationException(unwrapCause(e));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (commandAction != null) {\n  try {\n    return process(new Action(){\n      @Override Object execute(){\n        MetaHolder metaHolder=commandAction.getMetaHolder();\n        Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n        return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n      }\n    }\n);\n  }\n catch (  Throwable e) {\n    LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n    throw new FallbackInvocationException(unwrapCause(e));\n  }\n}\n else {\n  return super.getFallback();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 884,
        "startLineNumber" : 67,
        "startColumnNumber" : 35,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CommandAction commandAction=getFallbackAction();\n  if (commandAction != null) {\n    try {\n      return process(new Action(){\n        @Override Object execute(){\n          MetaHolder metaHolder=commandAction.getMetaHolder();\n          Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n          return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n      throw new FallbackInvocationException(unwrapCause(e));\n    }\n  }\n else {\n    return super.getFallback();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1801,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The fallback is performed whenever a command execution fails. Also a fallback method will be invoked within separate command in the case if fallback method was annotated with HystrixCommand annotation, otherwise current implementation throws RuntimeException and leaves the caller to deal with it (see  {@link super#getFallback()}). The getFallback() is always processed synchronously. Since getFallback() can throw only runtime exceptions thus any exceptions are thrown within getFallback() method are wrapped in  {@link FallbackInvocationException}. A caller gets  {@link com.netflix.hystrix.exception.HystrixRuntimeException}and should call getCause to get original exception that was thrown in getFallback().\n * @return result of invocation of fallback method or RuntimeException\n */\n@Override protected Object getFallback(){\n  final CommandAction commandAction=getFallbackAction();\n  if (commandAction != null) {\n    try {\n      return process(new Action(){\n        @Override Object execute(){\n          MetaHolder metaHolder=commandAction.getMetaHolder();\n          Object[] args=createArgsForFallback(metaHolder,getExecutionException());\n          return commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(),args);\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction,e).build());\n      throw new FallbackInvocationException(unwrapCause(e));\n    }\n  }\n else {\n    return super.getFallback();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 80,
        "startColumnNumber" : 29,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "FallbackErrorMessageBuilder.create().append(commandAction,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.contrib.javanica.command.CommandAction"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 81,
    "startColumnNumber" : 32,
    "endLineNumber" : 81,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}