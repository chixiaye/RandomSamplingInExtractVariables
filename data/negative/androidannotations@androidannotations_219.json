{
  "id" : 219,
  "expression" : "call",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/TouchProcessor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "call",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 84,
      "startColumnNumber" : 30,
      "endLineNumber" : 84,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 84,
        "startColumnNumber" : 3,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "listenerMethodBody._return(call)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 3,
        "endLineNumber" : 84,
        "endColumnNumber" : 36
      },
      "nodeContext" : "listenerMethodBody._return(call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 83,
        "startColumnNumber" : 26,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  listenerMethodBody._return(call);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (returnMethodResult) {\n  listenerMethodBody._return(call);\n}\n else {\n  listenerMethodBody.add(call);\n  listenerMethodBody._return(JExpr.TRUE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1781,
        "startLineNumber" : 56,
        "startColumnNumber" : 91,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 276,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder){\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 3,
        "endLineNumber" : 84,
        "endColumnNumber" : 36
      },
      "nodeContext" : "listenerMethodBody._return(call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.JInvocation"
  }, {
    "nodeContext" : "call",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 86,
      "startColumnNumber" : 26,
      "endLineNumber" : 86,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 31
      },
      "nodeContext" : "listenerMethodBody.add(call)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 32
      },
      "nodeContext" : "listenerMethodBody.add(call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 85,
        "startColumnNumber" : 9,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  listenerMethodBody.add(call);\n  listenerMethodBody._return(JExpr.TRUE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (returnMethodResult) {\n  listenerMethodBody._return(call);\n}\n else {\n  listenerMethodBody.add(call);\n  listenerMethodBody._return(JExpr.TRUE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1781,
        "startLineNumber" : 56,
        "startColumnNumber" : 91,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 276,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder){\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 32
      },
      "nodeContext" : "listenerMethodBody.add(call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.JInvocation"
  }, {
    "nodeContext" : "call",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 90,
      "startColumnNumber" : 2,
      "endLineNumber" : 90,
      "endColumnNumber" : 6
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 22
      },
      "nodeContext" : "call.arg(eventParam)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 23
      },
      "nodeContext" : "call.arg(eventParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1781,
        "startLineNumber" : 56,
        "startColumnNumber" : 91,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 276,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder){\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 23
      },
      "nodeContext" : "call.arg(eventParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.JInvocation"
  }, {
    "nodeContext" : "call",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 93,
      "startColumnNumber" : 3,
      "endLineNumber" : 93,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 93,
        "startColumnNumber" : 3,
        "endLineNumber" : 93,
        "endColumnNumber" : 22
      },
      "nodeContext" : "call.arg(viewParam)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 93,
        "startColumnNumber" : 3,
        "endLineNumber" : 93,
        "endColumnNumber" : 23
      },
      "nodeContext" : "call.arg(viewParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 92,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  call.arg(viewParam);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (hasItemParameter) {\n  call.arg(viewParam);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1781,
        "startLineNumber" : 56,
        "startColumnNumber" : 91,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 276,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder){\n  EBeanHolder holder=activitiesHolder.getEnclosingEBeanHolder(element);\n  String methodName=element.getSimpleName().toString();\n  ExecutableElement executableElement=(ExecutableElement)element;\n  List<? extends VariableElement> parameters=executableElement.getParameters();\n  TypeMirror returnType=executableElement.getReturnType();\n  boolean returnMethodResult=returnType.getKind() != TypeKind.VOID;\n  boolean hasItemParameter=parameters.size() == 2;\n  Touch annotation=element.getAnnotation(Touch.class);\n  List<JFieldRef> idsRefs=extractQualifiedIds(element,annotation.value(),\"Touched\",holder);\n  JDefinedClass listenerClass=codeModel.anonymousClass(holder.refClass(\"android.view.View.OnTouchListener\"));\n  JMethod listenerMethod=listenerClass.method(JMod.PUBLIC,codeModel.BOOLEAN,\"onTouch\");\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass motionEventClass=holder.refClass(\"android.view.MotionEvent\");\n  JVar viewParam=listenerMethod.param(viewClass,\"view\");\n  JVar eventParam=listenerMethod.param(motionEventClass,\"event\");\n  JBlock listenerMethodBody=listenerMethod.body();\n  JInvocation call=JExpr.invoke(methodName);\n  if (returnMethodResult) {\n    listenerMethodBody._return(call);\n  }\n else {\n    listenerMethodBody.add(call);\n    listenerMethodBody._return(JExpr.TRUE);\n  }\n  call.arg(eventParam);\n  if (hasItemParameter) {\n    call.arg(viewParam);\n  }\n  for (  JFieldRef idRef : idsRefs) {\n    JBlock block=holder.afterSetContentView.body().block();\n    JInvocation findViewById=JExpr.invoke(\"findViewById\");\n    JVar view=block.decl(viewClass,\"view\",findViewById.arg(idRef));\n    block._if(view.ne(JExpr._null()))._then().invoke(view,\"setOnTouchListener\").arg(JExpr._new(listenerClass));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 93,
        "startColumnNumber" : 3,
        "endLineNumber" : 93,
        "endColumnNumber" : 23
      },
      "nodeContext" : "call.arg(viewParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.JInvocation"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 84,
    "startColumnNumber" : 30,
    "endLineNumber" : 84,
    "endColumnNumber" : 34
  }, {
    "charLength" : 4,
    "startLineNumber" : 86,
    "startColumnNumber" : 26,
    "endLineNumber" : 86,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 90,
    "startColumnNumber" : 2,
    "endLineNumber" : 90,
    "endColumnNumber" : 6
  }, {
    "charLength" : 4,
    "startLineNumber" : 93,
    "startColumnNumber" : 3,
    "endLineNumber" : 93,
    "endColumnNumber" : 7
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}