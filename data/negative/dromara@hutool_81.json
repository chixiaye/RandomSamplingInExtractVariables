{
  "id" : 81,
  "expression" : "\"壹仟贰佰\"",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"壹仟贰佰\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 50,
      "startColumnNumber" : 22,
      "endLineNumber" : 50,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Assert.assertEquals(\"壹仟贰佰\",f1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertEquals(\"壹仟贰佰\",f1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 38,
        "startColumnNumber" : 37,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String f1=NumberChineseFormatter.format(10889.72356,true);\n  Assert.assertEquals(\"壹万零捌佰捌拾玖点柒贰\",f1);\n  f1=NumberChineseFormatter.format(12653,true);\n  Assert.assertEquals(\"壹万贰仟陆佰伍拾叁\",f1);\n  f1=NumberChineseFormatter.format(215.6387,true);\n  Assert.assertEquals(\"贰佰壹拾伍点陆肆\",f1);\n  f1=NumberChineseFormatter.format(1024,true);\n  Assert.assertEquals(\"壹仟零贰拾肆\",f1);\n  f1=NumberChineseFormatter.format(100350089,true);\n  Assert.assertEquals(\"壹亿叁拾伍万零捌拾玖\",f1);\n  f1=NumberChineseFormatter.format(1200,true);\n  Assert.assertEquals(\"壹仟贰佰\",f1);\n  f1=NumberChineseFormatter.format(12,true);\n  Assert.assertEquals(\"壹拾贰\",f1);\n  f1=NumberChineseFormatter.format(0.05,true);\n  Assert.assertEquals(\"零点零伍\",f1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 790,
        "startLineNumber" : 37,
        "startColumnNumber" : 1,
        "endLineNumber" : 55,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void formatTraditionalTest(){\n  String f1=NumberChineseFormatter.format(10889.72356,true);\n  Assert.assertEquals(\"壹万零捌佰捌拾玖点柒贰\",f1);\n  f1=NumberChineseFormatter.format(12653,true);\n  Assert.assertEquals(\"壹万贰仟陆佰伍拾叁\",f1);\n  f1=NumberChineseFormatter.format(215.6387,true);\n  Assert.assertEquals(\"贰佰壹拾伍点陆肆\",f1);\n  f1=NumberChineseFormatter.format(1024,true);\n  Assert.assertEquals(\"壹仟零贰拾肆\",f1);\n  f1=NumberChineseFormatter.format(100350089,true);\n  Assert.assertEquals(\"壹亿叁拾伍万零捌拾玖\",f1);\n  f1=NumberChineseFormatter.format(1200,true);\n  Assert.assertEquals(\"壹仟贰佰\",f1);\n  f1=NumberChineseFormatter.format(12,true);\n  Assert.assertEquals(\"壹拾贰\",f1);\n  f1=NumberChineseFormatter.format(0.05,true);\n  Assert.assertEquals(\"零点零伍\",f1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Assert.assertEquals(\"壹仟贰佰\",f1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 50,
    "startColumnNumber" : 22,
    "endLineNumber" : 50,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}