{
  "id" : 272,
  "expression" : "null",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "cdc587f9c9e62f5f7e7c8f821cb5c6362fa8a386",
  "filePath" : "butterknife/src/main/java/butterknife/Views.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 211,
      "startColumnNumber" : 26,
      "endLineNumber" : 211,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 30
      },
      "nodeContext" : "injections == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (injections == null) {\n  injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n  injectionsByClass.put(enclosingElement,injections);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 211,
        "endColumnNumber" : 30
      },
      "nodeContext" : "injections == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 222,
      "startColumnNumber" : 31,
      "endLineNumber" : 222,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 35
      },
      "nodeContext" : "injectionPoints == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 222,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (injectionPoints == null) {\n  injectionPoints=new LinkedHashSet<InjectionPoint>();\n  injections.put(value,injectionPoints);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2369,
        "startLineNumber" : 177,
        "startColumnNumber" : 77,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 232,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  if (!typeUtils.isSubtype(element.asType(),viewType)) {\n    error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  Set<Modifier> modifiers=element.getModifiers();\n  if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n    error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n    continue;\n  }\n  if (enclosingElement.getKind() != CLASS) {\n    error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n    continue;\n  }\n  if (enclosingElement.getModifiers().contains(PRIVATE)) {\n    error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n    continue;\n  }\n  Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n  if (injections == null) {\n    injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n    injectionsByClass.put(enclosingElement,injections);\n  }\n  String variableName=element.getSimpleName().toString();\n  int value=element.getAnnotation(InjectView.class).value();\n  String type=element.asType().toString();\n  Set<InjectionPoint> injectionPoints=injections.get(value);\n  if (injectionPoints == null) {\n    injectionPoints=new LinkedHashSet<InjectionPoint>();\n    injections.put(value,injectionPoints);\n  }\n  injectionPoints.add(new InjectionPoint(variableName,type));\n  TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n  injectionTargets.add(erasedInjectionType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 235,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 35
      },
      "nodeContext" : "injectionPoints == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 243,
      "startColumnNumber" : 31,
      "endLineNumber" : 243,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 35
      },
      "nodeContext" : "parentClassFqcn != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 245,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parentClassFqcn != null) {\n  injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 235,
        "startColumnNumber" : 42,
        "endLineNumber" : 265,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TypeElement type=injection.getKey();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n    injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n    for (    InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1593,
        "startLineNumber" : 234,
        "startColumnNumber" : 6,
        "endLineNumber" : 265,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n  TypeElement type=injection.getKey();\n  String targetType=type.getQualifiedName().toString();\n  String classPackage=getPackageName(type);\n  String className=getClassName(type,classPackage) + SUFFIX;\n  String classFqcn=classPackage + \".\" + className;\n  String parentClassFqcn=findParentFqcn(type,injectionTargets);\n  StringBuilder injectionBuilder=new StringBuilder();\n  if (parentClassFqcn != null) {\n    injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n  }\n  for (  Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n    injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n    for (    InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n      injectionBuilder.append(injectionPoint).append('\\n');\n    }\n  }\n  String injections=injectionBuilder.toString();\n  try {\n    JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n    Writer writer=jfo.openWriter();\n    writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4559,
        "startLineNumber" : 166,
        "startColumnNumber" : 96,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 541,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 268,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean process(Set<? extends TypeElement> elements,RoundEnvironment env){\n  Elements elementUtils=processingEnv.getElementUtils();\n  Types typeUtils=processingEnv.getTypeUtils();\n  Filer filer=processingEnv.getFiler();\n  TypeMirror viewType=elementUtils.getTypeElement(\"android.view.View\").asType();\n  Map<TypeElement,Map<Integer,Set<InjectionPoint>>> injectionsByClass=new LinkedHashMap<TypeElement,Map<Integer,Set<InjectionPoint>>>();\n  Set<TypeMirror> injectionTargets=new LinkedHashSet<TypeMirror>();\n  for (  Element element : env.getElementsAnnotatedWith(InjectView.class)) {\n    TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n    if (!typeUtils.isSubtype(element.asType(),viewType)) {\n      error(element,\"@InjectView fields must extend from View (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    Set<Modifier> modifiers=element.getModifiers();\n    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {\n      error(element,\"@InjectView fields must not be private or static (%s.%s).\",enclosingElement.getQualifiedName(),element);\n      continue;\n    }\n    if (enclosingElement.getKind() != CLASS) {\n      error(element,\"@InjectView field annotations may only be specified in classes (%s).\",enclosingElement);\n      continue;\n    }\n    if (enclosingElement.getModifiers().contains(PRIVATE)) {\n      error(element,\"@InjectView fields may not be on private classes (%s).\",enclosingElement);\n      continue;\n    }\n    Map<Integer,Set<InjectionPoint>> injections=injectionsByClass.get(enclosingElement);\n    if (injections == null) {\n      injections=new LinkedHashMap<Integer,Set<InjectionPoint>>();\n      injectionsByClass.put(enclosingElement,injections);\n    }\n    String variableName=element.getSimpleName().toString();\n    int value=element.getAnnotation(InjectView.class).value();\n    String type=element.asType().toString();\n    Set<InjectionPoint> injectionPoints=injections.get(value);\n    if (injectionPoints == null) {\n      injectionPoints=new LinkedHashSet<InjectionPoint>();\n      injections.put(value,injectionPoints);\n    }\n    injectionPoints.add(new InjectionPoint(variableName,type));\n    TypeMirror erasedInjectionType=typeUtils.erasure(enclosingElement.asType());\n    injectionTargets.add(erasedInjectionType);\n  }\n  for (  Map.Entry<TypeElement,Map<Integer,Set<InjectionPoint>>> injection : injectionsByClass.entrySet()) {\n    TypeElement type=injection.getKey();\n    String targetType=type.getQualifiedName().toString();\n    String classPackage=getPackageName(type);\n    String className=getClassName(type,classPackage) + SUFFIX;\n    String classFqcn=classPackage + \".\" + className;\n    String parentClassFqcn=findParentFqcn(type,injectionTargets);\n    StringBuilder injectionBuilder=new StringBuilder();\n    if (parentClassFqcn != null) {\n      injectionBuilder.append(String.format(PARENT,parentClassFqcn,SUFFIX)).append('\\n');\n    }\n    for (    Map.Entry<Integer,Set<InjectionPoint>> viewIdInjections : injection.getValue().entrySet()) {\n      injectionBuilder.append(String.format(FINDER,viewIdInjections.getKey())).append('\\n');\n      for (      InjectionPoint injectionPoint : viewIdInjections.getValue()) {\n        injectionBuilder.append(injectionPoint).append('\\n');\n      }\n    }\n    String injections=injectionBuilder.toString();\n    try {\n      JavaFileObject jfo=filer.createSourceFile(classFqcn,type);\n      Writer writer=jfo.openWriter();\n      writer.write(String.format(INJECTOR,classPackage,className,targetType,injections));\n      writer.flush();\n      writer.close();\n    }\n catch (    IOException e) {\n      error(type,\"Unable to write injector for type %s: %s\",type,e.getMessage());\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 35
      },
      "nodeContext" : "parentClassFqcn != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 211,
    "startColumnNumber" : 26,
    "endLineNumber" : 211,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 222,
    "startColumnNumber" : 31,
    "endLineNumber" : 222,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 243,
    "startColumnNumber" : 31,
    "endLineNumber" : 243,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}