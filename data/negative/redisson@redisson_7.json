{
  "id" : 7,
  "expression" : "6",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonMapTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "6",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 100,
      "startColumnNumber" : 19,
      "endLineNumber" : 100,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "map.put(4,6)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 22
      },
      "nodeContext" : "map.put(4,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 96,
        "startColumnNumber" : 34,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RMap<Integer,Integer> map=redisson.getMap(\"simple\");\n  map.put(1,0);\n  map.put(3,5);\n  map.put(4,6);\n  map.put(7,8);\n  Collection<Integer> keys=map.keySet();\n  assertThat(keys).containsOnly(1,3,4,7);\n  for (Iterator<Integer> iterator=map.keySet().iterator(); iterator.hasNext(); ) {\n    Integer value=iterator.next();\n    if (!keys.remove(value)) {\n      Assert.fail();\n    }\n  }\n  assertThat(keys.size()).isEqualTo(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testKeyIterator(){\n  RMap<Integer,Integer> map=redisson.getMap(\"simple\");\n  map.put(1,0);\n  map.put(3,5);\n  map.put(4,6);\n  map.put(7,8);\n  Collection<Integer> keys=map.keySet();\n  assertThat(keys).containsOnly(1,3,4,7);\n  for (Iterator<Integer> iterator=map.keySet().iterator(); iterator.hasNext(); ) {\n    Integer value=iterator.next();\n    if (!keys.remove(value)) {\n      Assert.fail();\n    }\n  }\n  assertThat(keys.size()).isEqualTo(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 22
      },
      "nodeContext" : "map.put(4,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 100,
    "startColumnNumber" : 19,
    "endLineNumber" : 100,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}