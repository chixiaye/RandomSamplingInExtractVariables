{
  "id" : 1,
  "expression" : "manageMem",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/batch/BatchExecNestedLoopJoin.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "manageMem",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 121,
      "startColumnNumber" : 16,
      "endLineNumber" : 121,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ExecNodeUtil.createTwoInputTransformation(leftInputTransform,rightInputTransform,createTransformationName(config),createTransformationDescription(config),operator,InternalTypeInfo.of(getOutputType()),parallelism,manageMem)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return ExecNodeUtil.createTwoInputTransformation(leftInputTransform,rightInputTransform,createTransformationName(config),createTransformationDescription(config),operator,InternalTypeInfo.of(getOutputType()),parallelism,manageMem);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1853,
        "startLineNumber" : 77,
        "startColumnNumber" : 56,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExecEdge leftInputEdge=getInputEdges().get(0);\n  ExecEdge rightInputEdge=getInputEdges().get(1);\n  Transformation<RowData> leftInputTransform=(Transformation<RowData>)leftInputEdge.translateToPlan(planner);\n  Transformation<RowData> rightInputTransform=(Transformation<RowData>)rightInputEdge.translateToPlan(planner);\n  RowType leftType=(RowType)leftInputEdge.getOutputType();\n  RowType rightType=(RowType)rightInputEdge.getOutputType();\n  CodeGenOperatorFactory<RowData> operator=new NestedLoopJoinCodeGenerator(new CodeGeneratorContext(config),singleRowJoin,leftIsBuild,leftType,rightType,(RowType)getOutputType(),joinType,condition).gen();\n  int parallelism=leftInputTransform.getParallelism();\n  if (leftIsBuild) {\n    parallelism=rightInputTransform.getParallelism();\n  }\n  long manageMem=0;\n  if (!singleRowJoin) {\n    manageMem=config.get(ExecutionConfigOptions.TABLE_EXEC_RESOURCE_EXTERNAL_BUFFER_MEMORY).getBytes();\n  }\n  return ExecNodeUtil.createTwoInputTransformation(leftInputTransform,rightInputTransform,createTransformationName(config),createTransformationDescription(config),operator,InternalTypeInfo.of(getOutputType()),parallelism,manageMem);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2017,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") protected Transformation<RowData> translateToPlanInternal(PlannerBase planner,ExecNodeConfig config){\n  ExecEdge leftInputEdge=getInputEdges().get(0);\n  ExecEdge rightInputEdge=getInputEdges().get(1);\n  Transformation<RowData> leftInputTransform=(Transformation<RowData>)leftInputEdge.translateToPlan(planner);\n  Transformation<RowData> rightInputTransform=(Transformation<RowData>)rightInputEdge.translateToPlan(planner);\n  RowType leftType=(RowType)leftInputEdge.getOutputType();\n  RowType rightType=(RowType)rightInputEdge.getOutputType();\n  CodeGenOperatorFactory<RowData> operator=new NestedLoopJoinCodeGenerator(new CodeGeneratorContext(config),singleRowJoin,leftIsBuild,leftType,rightType,(RowType)getOutputType(),joinType,condition).gen();\n  int parallelism=leftInputTransform.getParallelism();\n  if (leftIsBuild) {\n    parallelism=rightInputTransform.getParallelism();\n  }\n  long manageMem=0;\n  if (!singleRowJoin) {\n    manageMem=config.get(ExecutionConfigOptions.TABLE_EXEC_RESOURCE_EXTERNAL_BUFFER_MEMORY).getBytes();\n  }\n  return ExecNodeUtil.createTwoInputTransformation(leftInputTransform,rightInputTransform,createTransformationName(config),createTransformationDescription(config),operator,InternalTypeInfo.of(getOutputType()),parallelism,manageMem);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ExecNodeUtil.createTwoInputTransformation(leftInputTransform,rightInputTransform,createTransformationName(config),createTransformationDescription(config),operator,InternalTypeInfo.of(getOutputType()),parallelism,manageMem)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 121,
    "startColumnNumber" : 16,
    "endLineNumber" : 121,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}