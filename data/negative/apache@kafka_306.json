{
  "id" : 306,
  "expression" : "Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\"))",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/processor/internals/RepartitionOptimizingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 150,
      "startColumnNumber" : 38,
      "endLineNumber" : 150,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 11,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 150,
        "startColumnNumber" : 38,
        "endLineNumber" : 151,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 150,
        "startColumnNumber" : 38,
        "endLineNumber" : 152,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 148,
        "startColumnNumber" : 50,
        "endLineNumber" : 152,
        "endColumnNumber" : 95
      },
      "nodeContext" : "mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 148,
        "startColumnNumber" : 50,
        "endLineNumber" : 153,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 148,
        "startColumnNumber" : 36,
        "endLineNumber" : 153,
        "endColumnNumber" : 49
      },
      "nodeContext" : "countStream=mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 50
      },
      "nodeContext" : "final KStream<String,Long> countStream=mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5562,
        "startLineNumber" : 134,
        "startColumnNumber" : 101,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> sourceStream=builder.stream(INPUT_TOPIC,Consumed.with(Serdes.String(),Serdes.String()).withName(\"sourceStream\"));\n  final KStream<String,String> mappedStream=sourceStream.map((k,v) -> KeyValue.pair(k.toUpperCase(Locale.getDefault()),v),Named.as(\"source-map\"));\n  mappedStream.filter((k,v) -> k.equals(\"B\"),Named.as(\"process-filter\")).mapValues(v -> v.toUpperCase(Locale.getDefault()),Named.as(\"process-mapValues\")).process(() -> new SimpleProcessor(processorValueCollector),Named.as(\"process\"));\n  final KStream<String,Long> countStream=mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"));\n  countStream.to(COUNT_TOPIC,Produced.with(Serdes.String(),Serdes.Long()).withName(\"count-to\"));\n  mappedStream.groupByKey(Grouped.as(\"aggregate-groupByKey\")).aggregate(initializer,aggregator,Named.as(\"aggregate\"),Materialized.<String,Integer>as(Stores.inMemoryKeyValueStore(\"aggregate-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).toStream(Named.as(\"aggregate-toStream\")).to(AGGREGATION_TOPIC,Produced.with(Serdes.String(),Serdes.Integer()).withName(\"reduce-to\"));\n  mappedStream.filter((k,v) -> true,Named.as(\"reduce-filter\")).peek((k,v) -> System.out.println(k + \":\" + v),Named.as(\"reduce-peek\")).groupByKey(Grouped.as(\"reduce-groupByKey\")).reduce(reducer,Named.as(\"reducer\"),Materialized.as(Stores.inMemoryKeyValueStore(\"reduce-store\"))).toStream(Named.as(\"reduce-toStream\")).to(REDUCE_TOPIC,Produced.with(Serdes.String(),Serdes.String()));\n  mappedStream.filter((k,v) -> k.equals(\"A\"),Named.as(\"join-filter\")).join(countStream,(v1,v2) -> v1 + \":\" + v2.toString(),JoinWindows.of(ofMillis(5000)),StreamJoined.<String,String,Long>with(Stores.inMemoryWindowStore(\"join-store\",ofDays(1),ofMillis(10000),true),Stores.inMemoryWindowStore(\"other-join-store\",ofDays(1),ofMillis(10000),true)).withName(\"join\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()).withOtherValueSerde(Serdes.Long())).to(JOINED_TOPIC,Produced.as(\"join-to\"));\n  streamsConfiguration.setProperty(StreamsConfig.TOPOLOGY_OPTIMIZATION_CONFIG,optimizationConfig);\n  final Topology topology=builder.build(streamsConfiguration);\n  topologyTestDriver=new TopologyTestDriver(topology,streamsConfiguration);\n  final TestInputTopic<String,String> inputTopicA=topologyTestDriver.createInputTopic(INPUT_TOPIC,stringSerializer,stringSerializer);\n  final TestOutputTopic<String,Long> countOutputTopic=topologyTestDriver.createOutputTopic(COUNT_TOPIC,stringDeserializer,new LongDeserializer());\n  final TestOutputTopic<String,Integer> aggregationOutputTopic=topologyTestDriver.createOutputTopic(AGGREGATION_TOPIC,stringDeserializer,new IntegerDeserializer());\n  final TestOutputTopic<String,String> reduceOutputTopic=topologyTestDriver.createOutputTopic(REDUCE_TOPIC,stringDeserializer,stringDeserializer);\n  final TestOutputTopic<String,String> joinedOutputTopic=topologyTestDriver.createOutputTopic(JOINED_TOPIC,stringDeserializer,stringDeserializer);\n  inputTopicA.pipeKeyValueList(getKeyValues());\n  final String topologyString=topology.describe().toString();\n  if (optimizationConfig.equals(StreamsConfig.OPTIMIZE)) {\n    assertEquals(EXPECTED_OPTIMIZED_TOPOLOGY,topologyString);\n  }\n else {\n    assertEquals(EXPECTED_UNOPTIMIZED_TOPOLOGY,topologyString);\n  }\n  assertEquals(expectedNumberRepartitionTopics,getCountOfRepartitionTopicsFound(topologyString));\n  assertThat(3,equalTo(processorValueCollector.size()));\n  assertThat(processorValueCollector,equalTo(expectedCollectedProcessorValues));\n  assertThat(countOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedCountKeyValues)));\n  assertThat(aggregationOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedAggKeyValues)));\n  assertThat(reduceOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedReduceKeyValues)));\n  assertThat(joinedOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedJoinKeyValues)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 622,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5659,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void runTest(final String optimizationConfig,final int expectedNumberRepartitionTopics){\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> sourceStream=builder.stream(INPUT_TOPIC,Consumed.with(Serdes.String(),Serdes.String()).withName(\"sourceStream\"));\n  final KStream<String,String> mappedStream=sourceStream.map((k,v) -> KeyValue.pair(k.toUpperCase(Locale.getDefault()),v),Named.as(\"source-map\"));\n  mappedStream.filter((k,v) -> k.equals(\"B\"),Named.as(\"process-filter\")).mapValues(v -> v.toUpperCase(Locale.getDefault()),Named.as(\"process-mapValues\")).process(() -> new SimpleProcessor(processorValueCollector),Named.as(\"process\"));\n  final KStream<String,Long> countStream=mappedStream.groupByKey(Grouped.as(\"count-groupByKey\")).count(Named.as(\"count\"),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream(Named.as(\"count-toStream\"));\n  countStream.to(COUNT_TOPIC,Produced.with(Serdes.String(),Serdes.Long()).withName(\"count-to\"));\n  mappedStream.groupByKey(Grouped.as(\"aggregate-groupByKey\")).aggregate(initializer,aggregator,Named.as(\"aggregate\"),Materialized.<String,Integer>as(Stores.inMemoryKeyValueStore(\"aggregate-store\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Integer())).toStream(Named.as(\"aggregate-toStream\")).to(AGGREGATION_TOPIC,Produced.with(Serdes.String(),Serdes.Integer()).withName(\"reduce-to\"));\n  mappedStream.filter((k,v) -> true,Named.as(\"reduce-filter\")).peek((k,v) -> System.out.println(k + \":\" + v),Named.as(\"reduce-peek\")).groupByKey(Grouped.as(\"reduce-groupByKey\")).reduce(reducer,Named.as(\"reducer\"),Materialized.as(Stores.inMemoryKeyValueStore(\"reduce-store\"))).toStream(Named.as(\"reduce-toStream\")).to(REDUCE_TOPIC,Produced.with(Serdes.String(),Serdes.String()));\n  mappedStream.filter((k,v) -> k.equals(\"A\"),Named.as(\"join-filter\")).join(countStream,(v1,v2) -> v1 + \":\" + v2.toString(),JoinWindows.of(ofMillis(5000)),StreamJoined.<String,String,Long>with(Stores.inMemoryWindowStore(\"join-store\",ofDays(1),ofMillis(10000),true),Stores.inMemoryWindowStore(\"other-join-store\",ofDays(1),ofMillis(10000),true)).withName(\"join\").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()).withOtherValueSerde(Serdes.Long())).to(JOINED_TOPIC,Produced.as(\"join-to\"));\n  streamsConfiguration.setProperty(StreamsConfig.TOPOLOGY_OPTIMIZATION_CONFIG,optimizationConfig);\n  final Topology topology=builder.build(streamsConfiguration);\n  topologyTestDriver=new TopologyTestDriver(topology,streamsConfiguration);\n  final TestInputTopic<String,String> inputTopicA=topologyTestDriver.createInputTopic(INPUT_TOPIC,stringSerializer,stringSerializer);\n  final TestOutputTopic<String,Long> countOutputTopic=topologyTestDriver.createOutputTopic(COUNT_TOPIC,stringDeserializer,new LongDeserializer());\n  final TestOutputTopic<String,Integer> aggregationOutputTopic=topologyTestDriver.createOutputTopic(AGGREGATION_TOPIC,stringDeserializer,new IntegerDeserializer());\n  final TestOutputTopic<String,String> reduceOutputTopic=topologyTestDriver.createOutputTopic(REDUCE_TOPIC,stringDeserializer,stringDeserializer);\n  final TestOutputTopic<String,String> joinedOutputTopic=topologyTestDriver.createOutputTopic(JOINED_TOPIC,stringDeserializer,stringDeserializer);\n  inputTopicA.pipeKeyValueList(getKeyValues());\n  final String topologyString=topology.describe().toString();\n  if (optimizationConfig.equals(StreamsConfig.OPTIMIZE)) {\n    assertEquals(EXPECTED_OPTIMIZED_TOPOLOGY,topologyString);\n  }\n else {\n    assertEquals(EXPECTED_UNOPTIMIZED_TOPOLOGY,topologyString);\n  }\n  assertEquals(expectedNumberRepartitionTopics,getCountOfRepartitionTopicsFound(topologyString));\n  assertThat(3,equalTo(processorValueCollector.size()));\n  assertThat(processorValueCollector,equalTo(expectedCollectedProcessorValues));\n  assertThat(countOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedCountKeyValues)));\n  assertThat(aggregationOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedAggKeyValues)));\n  assertThat(reduceOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedReduceKeyValues)));\n  assertThat(joinedOutputTopic.readKeyValuesToMap(),equalTo(keyValueListToMap(expectedJoinKeyValues)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 635,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 150,
        "startColumnNumber" : 38,
        "endLineNumber" : 151,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"count-store\")).withKeySerde(Serdes.String())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "org.apache.kafka.streams.kstream.Materialized<java.lang.String,java.lang.Long,org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes,byte[]>>"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 150,
    "startColumnNumber" : 38,
    "endLineNumber" : 150,
    "endColumnNumber" : 112
  } ],
  "layoutRelationDataList" : [ ]
}