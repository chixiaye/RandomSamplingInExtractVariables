{
  "id" : 259,
  "expression" : "1",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 82,
      "startColumnNumber" : 25,
      "endLineNumber" : 82,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertEquals(1,counter.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertEquals(1,counter.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!latch.await(1000,TimeUnit.MILLISECONDS)) {\n    fail(\"subscriptions did not receive values\");\n  }\n  assertEquals(1,counter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (!latch.await(1000,TimeUnit.MILLISECONDS)) {\n    fail(\"subscriptions did not receive values\");\n  }\n  assertEquals(1,counter.get());\n}\n  finally {\n  s.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 36,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger counter=new AtomicInteger();\n  ConnectableFlowable<String> o=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    final Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      new Thread(new Runnable(){\n        @Override public void run(){\n          counter.incrementAndGet();\n          observer.onNext(\"one\");\n          observer.onComplete();\n        }\n      }\n).start();\n    }\n  }\n).publish();\n  final CountDownLatch latch=new CountDownLatch(2);\n  o.subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      assertEquals(\"one\",v);\n      latch.countDown();\n    }\n  }\n);\n  o.subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      assertEquals(\"one\",v);\n      latch.countDown();\n    }\n  }\n);\n  Disposable s=o.connect();\n  try {\n    if (!latch.await(1000,TimeUnit.MILLISECONDS)) {\n      fail(\"subscriptions did not receive values\");\n    }\n    assertEquals(1,counter.get());\n  }\n  finally {\n    s.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1604,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPublish() throws InterruptedException {\n  final AtomicInteger counter=new AtomicInteger();\n  ConnectableFlowable<String> o=Flowable.create(new Publisher<String>(){\n    @Override public void subscribe(    final Subscriber<? super String> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      new Thread(new Runnable(){\n        @Override public void run(){\n          counter.incrementAndGet();\n          observer.onNext(\"one\");\n          observer.onComplete();\n        }\n      }\n).start();\n    }\n  }\n).publish();\n  final CountDownLatch latch=new CountDownLatch(2);\n  o.subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      assertEquals(\"one\",v);\n      latch.countDown();\n    }\n  }\n);\n  o.subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      assertEquals(\"one\",v);\n      latch.countDown();\n    }\n  }\n);\n  Disposable s=o.connect();\n  try {\n    if (!latch.await(1000,TimeUnit.MILLISECONDS)) {\n      fail(\"subscriptions did not receive values\");\n    }\n    assertEquals(1,counter.get());\n  }\n  finally {\n    s.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertEquals(1,counter.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 82,
    "startColumnNumber" : 25,
    "endLineNumber" : 82,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}