{
  "id" : 487,
  "expression" : "Math",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoderJni.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 124,
      "startColumnNumber" : 18,
      "endLineNumber" : 124,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 124,
        "startColumnNumber" : 18,
        "endLineNumber" : 124,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Math.min(byteCount,byteBufferData.remaining())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 65
      },
      "nodeContext" : "byteCount=Math.min(byteCount,byteBufferData.remaining())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 66
      },
      "nodeContext" : "byteCount=Math.min(byteCount,byteBufferData.remaining());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 123,
        "startColumnNumber" : 32,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byteCount=Math.min(byteCount,byteBufferData.remaining());\n  int originalLimit=byteBufferData.limit();\n  byteBufferData.limit(byteBufferData.position() + byteCount);\n  target.put(byteBufferData);\n  byteBufferData.limit(originalLimit);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (byteBufferData != null) {\n  byteCount=Math.min(byteCount,byteBufferData.remaining());\n  int originalLimit=byteBufferData.limit();\n  byteBufferData.limit(byteBufferData.position() + byteCount);\n  target.put(byteBufferData);\n  byteBufferData.limit(originalLimit);\n}\n else if (extractorInput != null) {\n  ExtractorInput extractorInput=this.extractorInput;\n  byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n  byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n  int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n  if (read < 4) {\n    read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n  }\n  byteCount=read;\n  target.put(tempBuffer,0,byteCount);\n}\n else {\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 121,
        "startColumnNumber" : 78,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int byteCount=target.remaining();\n  if (byteBufferData != null) {\n    byteCount=Math.min(byteCount,byteBufferData.remaining());\n    int originalLimit=byteBufferData.limit();\n    byteBufferData.limit(byteBufferData.position() + byteCount);\n    target.put(byteBufferData);\n    byteBufferData.limit(originalLimit);\n  }\n else   if (extractorInput != null) {\n    ExtractorInput extractorInput=this.extractorInput;\n    byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n    byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n    int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n    if (read < 4) {\n      read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n    }\n    byteCount=read;\n    target.put(tempBuffer,0,byteCount);\n  }\n else {\n    return -1;\n  }\n  return byteCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1764,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads up to  {@code length} bytes from the data source.<p>This method blocks until at least one byte of data can be read, the end of the input is detected or an exception is thrown.\n * @param target A target {@link ByteBuffer} into which data should be written.\n * @return Returns the number of bytes read, or -1 on failure. If all of the data has already beenread from the source, then 0 is returned.\n */\n@SuppressWarnings(\"unused\") public int read(ByteBuffer target) throws IOException, InterruptedException {\n  int byteCount=target.remaining();\n  if (byteBufferData != null) {\n    byteCount=Math.min(byteCount,byteBufferData.remaining());\n    int originalLimit=byteBufferData.limit();\n    byteBufferData.limit(byteBufferData.position() + byteCount);\n    target.put(byteBufferData);\n    byteBufferData.limit(originalLimit);\n  }\n else   if (extractorInput != null) {\n    ExtractorInput extractorInput=this.extractorInput;\n    byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n    byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n    int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n    if (read < 4) {\n      read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n    }\n    byteCount=read;\n    target.put(tempBuffer,0,byteCount);\n  }\n else {\n    return -1;\n  }\n  return byteCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 66
      },
      "nodeContext" : "byteCount=Math.min(byteCount,byteBufferData.remaining());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 18,
      "endLineNumber" : 132,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 132,
        "startColumnNumber" : 18,
        "endLineNumber" : 132,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Math.min(byteCount,TEMP_BUFFER_SIZE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 55
      },
      "nodeContext" : "byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 745,
        "startLineNumber" : 129,
        "startColumnNumber" : 39,
        "endLineNumber" : 144,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExtractorInput extractorInput=this.extractorInput;\n  byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n  byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n  int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n  if (read < 4) {\n    read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n  }\n  byteCount=read;\n  target.put(tempBuffer,0,byteCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 129,
        "startColumnNumber" : 11,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (extractorInput != null) {\n  ExtractorInput extractorInput=this.extractorInput;\n  byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n  byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n  int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n  if (read < 4) {\n    read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n  }\n  byteCount=read;\n  target.put(tempBuffer,0,byteCount);\n}\n else {\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (byteBufferData != null) {\n  byteCount=Math.min(byteCount,byteBufferData.remaining());\n  int originalLimit=byteBufferData.limit();\n  byteBufferData.limit(byteBufferData.position() + byteCount);\n  target.put(byteBufferData);\n  byteBufferData.limit(originalLimit);\n}\n else if (extractorInput != null) {\n  ExtractorInput extractorInput=this.extractorInput;\n  byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n  byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n  int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n  if (read < 4) {\n    read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n  }\n  byteCount=read;\n  target.put(tempBuffer,0,byteCount);\n}\n else {\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 121,
        "startColumnNumber" : 78,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int byteCount=target.remaining();\n  if (byteBufferData != null) {\n    byteCount=Math.min(byteCount,byteBufferData.remaining());\n    int originalLimit=byteBufferData.limit();\n    byteBufferData.limit(byteBufferData.position() + byteCount);\n    target.put(byteBufferData);\n    byteBufferData.limit(originalLimit);\n  }\n else   if (extractorInput != null) {\n    ExtractorInput extractorInput=this.extractorInput;\n    byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n    byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n    int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n    if (read < 4) {\n      read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n    }\n    byteCount=read;\n    target.put(tempBuffer,0,byteCount);\n  }\n else {\n    return -1;\n  }\n  return byteCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1764,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads up to  {@code length} bytes from the data source.<p>This method blocks until at least one byte of data can be read, the end of the input is detected or an exception is thrown.\n * @param target A target {@link ByteBuffer} into which data should be written.\n * @return Returns the number of bytes read, or -1 on failure. If all of the data has already beenread from the source, then 0 is returned.\n */\n@SuppressWarnings(\"unused\") public int read(ByteBuffer target) throws IOException, InterruptedException {\n  int byteCount=target.remaining();\n  if (byteBufferData != null) {\n    byteCount=Math.min(byteCount,byteBufferData.remaining());\n    int originalLimit=byteBufferData.limit();\n    byteBufferData.limit(byteBufferData.position() + byteCount);\n    target.put(byteBufferData);\n    byteBufferData.limit(originalLimit);\n  }\n else   if (extractorInput != null) {\n    ExtractorInput extractorInput=this.extractorInput;\n    byte[] tempBuffer=Util.castNonNull(this.tempBuffer);\n    byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n    int read=readFromExtractorInput(extractorInput,tempBuffer,0,byteCount);\n    if (read < 4) {\n      read+=readFromExtractorInput(extractorInput,tempBuffer,read,byteCount - read);\n    }\n    byteCount=read;\n    target.put(tempBuffer,0,byteCount);\n  }\n else {\n    return -1;\n  }\n  return byteCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byteCount=Math.min(byteCount,TEMP_BUFFER_SIZE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 124,
    "startColumnNumber" : 18,
    "endLineNumber" : 124,
    "endColumnNumber" : 22
  }, {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 18,
    "endLineNumber" : 132,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}