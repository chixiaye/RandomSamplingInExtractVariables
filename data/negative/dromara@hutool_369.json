{
  "id" : 369,
  "expression" : "propMap.get(columnLabel)",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-db/src/main/java/cn/hutool/db/handler/HandleHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "propMap.get(columnLabel)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 95,
      "startColumnNumber" : 8,
      "endLineNumber" : 95,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 95,
        "startColumnNumber" : 3,
        "endLineNumber" : 95,
        "endColumnNumber" : 32
      },
      "nodeContext" : "pd=propMap.get(columnLabel)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 95,
        "startColumnNumber" : 3,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "pd=propMap.get(columnLabel);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 93,
        "startColumnNumber" : 41,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  columnLabel=meta.getColumnLabel(i);\n  pd=propMap.get(columnLabel);\n  if (null == pd) {\n    pd=propMap.get(StrUtil.toCamelCase(columnLabel));\n  }\n  setter=(null == pd) ? null : pd.getSetter();\n  if (null != setter) {\n    value=getColumnValue(rs,i,meta.getColumnType(i),TypeUtil.getFirstParamType(setter));\n    ReflectUtil.invokeWithCheck(bean,setter,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 456,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=1; i <= columnCount; i++) {\n  columnLabel=meta.getColumnLabel(i);\n  pd=propMap.get(columnLabel);\n  if (null == pd) {\n    pd=propMap.get(StrUtil.toCamelCase(columnLabel));\n  }\n  setter=(null == pd) ? null : pd.getSetter();\n  if (null != setter) {\n    value=getColumnValue(rs,i,meta.getColumnType(i),TypeUtil.getFirstParamType(setter));\n    ReflectUtil.invokeWithCheck(bean,setter,value);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 61,
        "startColumnNumber" : 126,
        "endLineNumber" : 107,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(beanClass,\"Bean Class must be not null !\");\n  if (beanClass.isArray()) {\n    final Class<?> componentType=beanClass.getComponentType();\n    final Object[] result=ArrayUtil.newArray(componentType,columnCount);\n    for (int i=0, j=1; i < columnCount; i++, j++) {\n      result[i]=getColumnValue(rs,j,meta.getColumnType(j),componentType);\n    }\n    return (T)result;\n  }\n else   if (Iterable.class.isAssignableFrom(beanClass)) {\n    final Object[] objRow=handleRow(columnCount,meta,rs,Object[].class);\n    return Convert.convert(beanClass,objRow);\n  }\n else   if (beanClass.isAssignableFrom(Entity.class)) {\n    return (T)handleRow(columnCount,meta,rs);\n  }\n else   if (String.class == beanClass) {\n    final Object[] objRow=handleRow(columnCount,meta,rs,Object[].class);\n    return (T)StrUtil.join(\", \",objRow);\n  }\n  final T bean=ReflectUtil.newInstanceIfPossible(beanClass);\n  final Map<String,PropDesc> propMap=BeanUtil.getBeanDesc(beanClass).getPropMap(true);\n  String columnLabel;\n  PropDesc pd;\n  Method setter;\n  Object value;\n  for (int i=1; i <= columnCount; i++) {\n    columnLabel=meta.getColumnLabel(i);\n    pd=propMap.get(columnLabel);\n    if (null == pd) {\n      pd=propMap.get(StrUtil.toCamelCase(columnLabel));\n    }\n    setter=(null == pd) ? null : pd.getSetter();\n    if (null != setter) {\n      value=getColumnValue(rs,i,meta.getColumnType(i),TypeUtil.getFirstParamType(setter));\n      ReflectUtil.invokeWithCheck(bean,setter,value);\n    }\n  }\n  return bean;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2051,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 107,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 处理单条数据\n * @param < T > Bean类型\n * @param columnCount 列数\n * @param meta ResultSetMetaData\n * @param rs 数据集\n * @param beanClass 目标Bean类型\n * @return 每一行的Entity\n * @throws SQLException SQL执行异常\n * @since 3.3.1\n */\n@SuppressWarnings(\"unchecked\") public static <T>T handleRow(int columnCount,ResultSetMetaData meta,ResultSet rs,Class<T> beanClass) throws SQLException {\n  Assert.notNull(beanClass,\"Bean Class must be not null !\");\n  if (beanClass.isArray()) {\n    final Class<?> componentType=beanClass.getComponentType();\n    final Object[] result=ArrayUtil.newArray(componentType,columnCount);\n    for (int i=0, j=1; i < columnCount; i++, j++) {\n      result[i]=getColumnValue(rs,j,meta.getColumnType(j),componentType);\n    }\n    return (T)result;\n  }\n else   if (Iterable.class.isAssignableFrom(beanClass)) {\n    final Object[] objRow=handleRow(columnCount,meta,rs,Object[].class);\n    return Convert.convert(beanClass,objRow);\n  }\n else   if (beanClass.isAssignableFrom(Entity.class)) {\n    return (T)handleRow(columnCount,meta,rs);\n  }\n else   if (String.class == beanClass) {\n    final Object[] objRow=handleRow(columnCount,meta,rs,Object[].class);\n    return (T)StrUtil.join(\", \",objRow);\n  }\n  final T bean=ReflectUtil.newInstanceIfPossible(beanClass);\n  final Map<String,PropDesc> propMap=BeanUtil.getBeanDesc(beanClass).getPropMap(true);\n  String columnLabel;\n  PropDesc pd;\n  Method setter;\n  Object value;\n  for (int i=1; i <= columnCount; i++) {\n    columnLabel=meta.getColumnLabel(i);\n    pd=propMap.get(columnLabel);\n    if (null == pd) {\n      pd=propMap.get(StrUtil.toCamelCase(columnLabel));\n    }\n    setter=(null == pd) ? null : pd.getSetter();\n    if (null != setter) {\n      value=getColumnValue(rs,i,meta.getColumnType(i),TypeUtil.getFirstParamType(setter));\n      ReflectUtil.invokeWithCheck(bean,setter,value);\n    }\n  }\n  return bean;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 317,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 95,
        "startColumnNumber" : 3,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "pd=propMap.get(columnLabel);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "cn.hutool.core.bean.PropDesc"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 95,
    "startColumnNumber" : 8,
    "endLineNumber" : 95,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}