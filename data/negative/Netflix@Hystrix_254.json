{
  "id" : 254,
  "expression" : "\">>>>> Start: \" + System.currentTimeMillis()",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCommandTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\">>>>> Start: \" + System.currentTimeMillis()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 2473,
      "startColumnNumber" : 27,
      "endLineNumber" : 2473,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 2473,
        "startColumnNumber" : 8,
        "endLineNumber" : 2473,
        "endColumnNumber" : 72
      },
      "nodeContext" : "System.out.println(\">>>>> Start: \" + System.currentTimeMillis())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 2473,
        "startColumnNumber" : 8,
        "endLineNumber" : 2473,
        "endColumnNumber" : 73
      },
      "nodeContext" : "System.out.println(\">>>>> Start: \" + System.currentTimeMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 2434,
        "startColumnNumber" : 65,
        "endLineNumber" : 2486,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HystrixObservableCommand.Setter properties=HystrixObservableCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"TestKey\")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD).withExecutionTimeoutInMilliseconds(50));\n  System.out.println(\">>>>> Begin: \" + System.currentTimeMillis());\n  HystrixObservableCommand<String> command=new HystrixObservableCommand<String>(properties){\n    @Override protected Observable<String> construct(){\n      return Observable.create(new OnSubscribe<String>(){\n        @Override public void call(        Subscriber<? super String> t1){\n          try {\n            Thread.sleep(2000);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n          t1.onNext(\"hello\");\n          t1.onCompleted();\n        }\n      }\n);\n    }\n    @Override protected Observable<String> resumeWithFallback(){\n      if (isResponseTimedOut()) {\n        return Observable.just(\"timed-out\");\n      }\n else {\n        return Observable.just(\"abc\");\n      }\n    }\n  }\n;\n  System.out.println(\">>>>> Start: \" + System.currentTimeMillis());\n  String value=command.observe().toBlocking().single();\n  System.out.println(\">>>>> End: \" + System.currentTimeMillis());\n  assertTrue(command.isResponseTimedOut());\n  assertEquals(\"expected fallback value\",\"timed-out\",value);\n  assertTrue(command.isExecutedInThread());\n  assertNotNull(command.getExecutionException());\n  assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());\n  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2287,
        "startLineNumber" : 2430,
        "startColumnNumber" : 4,
        "endLineNumber" : 2486,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that we can still use thread isolation if desired.\n */\n@Test public void testSynchronousExecutionTimeoutValueViaExecute(){\n  HystrixObservableCommand.Setter properties=HystrixObservableCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"TestKey\")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD).withExecutionTimeoutInMilliseconds(50));\n  System.out.println(\">>>>> Begin: \" + System.currentTimeMillis());\n  HystrixObservableCommand<String> command=new HystrixObservableCommand<String>(properties){\n    @Override protected Observable<String> construct(){\n      return Observable.create(new OnSubscribe<String>(){\n        @Override public void call(        Subscriber<? super String> t1){\n          try {\n            Thread.sleep(2000);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n          t1.onNext(\"hello\");\n          t1.onCompleted();\n        }\n      }\n);\n    }\n    @Override protected Observable<String> resumeWithFallback(){\n      if (isResponseTimedOut()) {\n        return Observable.just(\"timed-out\");\n      }\n else {\n        return Observable.just(\"abc\");\n      }\n    }\n  }\n;\n  System.out.println(\">>>>> Start: \" + System.currentTimeMillis());\n  String value=command.observe().toBlocking().single();\n  System.out.println(\">>>>> End: \" + System.currentTimeMillis());\n  assertTrue(command.isResponseTimedOut());\n  assertEquals(\"expected fallback value\",\"timed-out\",value);\n  assertTrue(command.isExecutedInThread());\n  assertNotNull(command.getExecutionException());\n  assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());\n  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 2473,
        "startColumnNumber" : 8,
        "endLineNumber" : 2473,
        "endColumnNumber" : 73
      },
      "nodeContext" : "System.out.println(\">>>>> Start: \" + System.currentTimeMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 2473,
    "startColumnNumber" : 27,
    "endLineNumber" : 2473,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}