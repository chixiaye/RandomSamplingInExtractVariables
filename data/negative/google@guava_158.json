{
  "id" : 158,
  "expression" : "2",
  "projectName" : "google@guava",
  "commitID" : "78b54f8250067837828e9b7235d7db6f8d728a24",
  "filePath" : "guava-tests/test/com/google/common/collect/AbstractHashFloodingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 204,
      "startColumnNumber" : 14,
      "endLineNumber" : 204,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 204,
        "startColumnNumber" : 14,
        "endLineNumber" : 205,
        "endColumnNumber" : 68
      },
      "nodeContext" : "2 * constructionAsymptotics.applyAsDouble(largeSize)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 204,
        "startColumnNumber" : 14,
        "endLineNumber" : 206,
        "endColumnNumber" : 68
      },
      "nodeContext" : "2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 198,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 198,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 753,
        "startLineNumber" : 188,
        "startColumnNumber" : 50,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  smallCounter.zero();\n  pathway.create(haveSameHashesSmall);\n  long smallOps=smallCounter.total();\n  largeCounter.zero();\n  pathway.create(haveSameHashesLarge);\n  long largeOps=largeCounter.total();\n  double ratio=(double)largeOps / smallOps;\n  assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Construction<T> pathway : constructions) {\n  smallCounter.zero();\n  pathway.create(haveSameHashesSmall);\n  long smallOps=smallCounter.total();\n  largeCounter.zero();\n  pathway.create(haveSameHashesLarge);\n  long largeOps=largeCounter.total();\n  double ratio=(double)largeOps / smallOps;\n  assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 179,
        "startColumnNumber" : 54,
        "endLineNumber" : 209,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CallsCounter smallCounter=new CallsCounter();\n  List<CountsHashCodeAndEquals> haveSameHashesSmall=createAdversarialInput(10,smallCounter);\n  int smallSize=haveSameHashesSmall.size();\n  CallsCounter largeCounter=new CallsCounter();\n  List<CountsHashCodeAndEquals> haveSameHashesLarge=createAdversarialInput(15,largeCounter);\n  int largeSize=haveSameHashesLarge.size();\n  for (  Construction<T> pathway : constructions) {\n    smallCounter.zero();\n    pathway.create(haveSameHashesSmall);\n    long smallOps=smallCounter.total();\n    largeCounter.zero();\n    pathway.create(haveSameHashesLarge);\n    long largeOps=largeCounter.total();\n    double ratio=(double)largeOps / smallOps;\n    assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1289,
        "startLineNumber" : 178,
        "startColumnNumber" : 2,
        "endLineNumber" : 209,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@GwtIncompatible public void testResistsHashFloodingInConstruction(){\n  CallsCounter smallCounter=new CallsCounter();\n  List<CountsHashCodeAndEquals> haveSameHashesSmall=createAdversarialInput(10,smallCounter);\n  int smallSize=haveSameHashesSmall.size();\n  CallsCounter largeCounter=new CallsCounter();\n  List<CountsHashCodeAndEquals> haveSameHashesLarge=createAdversarialInput(15,largeCounter);\n  int largeSize=haveSameHashesLarge.size();\n  for (  Construction<T> pathway : constructions) {\n    smallCounter.zero();\n    pathway.create(haveSameHashesSmall);\n    long smallOps=smallCounter.total();\n    largeCounter.zero();\n    pathway.create(haveSameHashesLarge);\n    long largeOps=largeCounter.total();\n    double ratio=(double)largeOps / smallOps;\n    assertWithMessage(\"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s\" + \" entries\",largeSize,smallSize).that(ratio).isAtMost(2 * constructionAsymptotics.applyAsDouble(largeSize) / constructionAsymptotics.applyAsDouble(smallSize));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 204,
        "startColumnNumber" : 14,
        "endLineNumber" : 205,
        "endColumnNumber" : 68
      },
      "nodeContext" : "2 * constructionAsymptotics.applyAsDouble(largeSize)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 204,
    "startColumnNumber" : 14,
    "endLineNumber" : 204,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}