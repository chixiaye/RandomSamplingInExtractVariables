{
  "id" : 101,
  "expression" : "new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/guice/SegmentMetadataQueryConfigTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 600,
      "startLineNumber" : 45,
      "startColumnNumber" : 8,
      "endLineNumber" : 62,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 63,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 44,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Guice.createInjector(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 44,
        "startColumnNumber" : 13,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "injector=Guice.createInjector(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 6
      },
      "nodeContext" : "Injector injector=Guice.createInjector(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 71,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1873,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerdeSegmentMetadataQueryConfig(){\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 636,
        "startLineNumber" : 44,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Guice.createInjector(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n    binder.install(new ConfigModule());\n    binder.install(new DruidGuiceExtensions());\n    JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n  }\n  @Provides @LazySingleton public ObjectMapper jsonMapper(){\n    return new DefaultObjectMapper();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 66,
      "astHeight" : 10
    },
    "tokenLength" : 31,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 600,
    "startLineNumber" : 45,
    "startColumnNumber" : 8,
    "endLineNumber" : 62,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}