{
  "id" : 59,
  "expression" : "escaper.escape(cp)",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/escape/Escapers.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "escaper.escape(cp)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 220,
      "startColumnNumber" : 24,
      "endLineNumber" : 220,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 220,
        "startColumnNumber" : 11,
        "endLineNumber" : 220,
        "endColumnNumber" : 43
      },
      "nodeContext" : "stringOrNull(escaper.escape(cp))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 220,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 44
      },
      "nodeContext" : "return stringOrNull(escaper.escape(cp));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 219,
        "startColumnNumber" : 74,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return stringOrNull(escaper.escape(cp));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 209,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a string that would replace the given character in the specified escaper, or  {@code null} if no replacement should be made. This method isintended for use in tests through the  {@code EscaperAsserts} class;production users of  {@link UnicodeEscaper} should limit themselves to itspublic interface.\n * @param cp the Unicode code point to escape if necessary\n * @return the replacement string, or {@code null} if no escaping was needed\n */\npublic static String computeReplacement(UnicodeEscaper escaper,int cp){\n  return stringOrNull(escaper.escape(cp));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 22,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 220,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 44
      },
      "nodeContext" : "return stringOrNull(escaper.escape(cp));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "char[]"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 220,
    "startColumnNumber" : 24,
    "endLineNumber" : 220,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}