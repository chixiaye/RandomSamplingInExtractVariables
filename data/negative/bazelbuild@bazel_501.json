{
  "id" : 501,
  "expression" : "false",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/shell/ConsumersTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 60,
      "startColumnNumber" : 46,
      "endLineNumber" : 60,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 52
      },
      "nodeContext" : "outErr.registerInputs(outInput,errInput,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 53
      },
      "nodeContext" : "outErr.registerInputs(outInput,errInput,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 49,
        "startColumnNumber" : 66,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  OutputStream out=new OutputStream(){\n    @Override public void write(    int b) throws IOException {\n      throw new IOException(SECRET_MESSAGE);\n    }\n  }\n;\n  OutErrConsumers outErr=Consumers.createStreamingConsumers(out,out);\n  ByteArrayInputStream outInput=new ByteArrayInputStream(new byte[]{'a'});\n  ByteArrayInputStream errInput=new ByteArrayInputStream(new byte[0]);\n  outErr.registerInputs(outInput,errInput,false);\n  IOException e=assertThrows(IOException.class,() -> outErr.waitForCompletion());\n  assertThat(e).hasMessageThat().isEqualTo(SECRET_MESSAGE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 837,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Tests that if an IOException occurs in an output stream, the exception will be recorded and thrown when we call waitForCompletion.\n */\n@Test public void testAsynchronousIOExceptionInConsumerOutputStream(){\n  OutputStream out=new OutputStream(){\n    @Override public void write(    int b) throws IOException {\n      throw new IOException(SECRET_MESSAGE);\n    }\n  }\n;\n  OutErrConsumers outErr=Consumers.createStreamingConsumers(out,out);\n  ByteArrayInputStream outInput=new ByteArrayInputStream(new byte[]{'a'});\n  ByteArrayInputStream errInput=new ByteArrayInputStream(new byte[0]);\n  outErr.registerInputs(outInput,errInput,false);\n  IOException e=assertThrows(IOException.class,() -> outErr.waitForCompletion());\n  assertThat(e).hasMessageThat().isEqualTo(SECRET_MESSAGE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 53
      },
      "nodeContext" : "outErr.registerInputs(outInput,errInput,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 60,
    "startColumnNumber" : 46,
    "endLineNumber" : 60,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}