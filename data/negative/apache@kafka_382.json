{
  "id" : 382,
  "expression" : "notResetString",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "notResetString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 1029,
      "startColumnNumber" : 16,
      "endLineNumber" : 1029,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 1024,
        "startColumnNumber" : 34,
        "endLineNumber" : 1030,
        "endColumnNumber" : 13
      },
      "nodeContext" : "String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 1024,
        "startColumnNumber" : 25,
        "endLineNumber" : 1030,
        "endColumnNumber" : 13
      },
      "nodeContext" : "format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 1024,
        "startColumnNumber" : 12,
        "endLineNumber" : 1030,
        "endColumnNumber" : 14
      },
      "nodeContext" : "final String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 934,
        "startLineNumber" : 1017,
        "startColumnNumber" : 15,
        "endLineNumber" : 1037,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\n  final String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\n  if (cause == null) {\n    throw new StreamsException(format);\n  }\n else {\n    throw new StreamsException(format,cause);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1204,
        "startLineNumber" : 1009,
        "startColumnNumber" : 8,
        "endLineNumber" : 1037,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (notReset.isEmpty()) {\n  if (!seekToBeginning.isEmpty()) {\n    mainConsumer.seekToBeginning(seekToBeginning);\n  }\n  if (!seekToEnd.isEmpty()) {\n    mainConsumer.seekToEnd(seekToEnd);\n  }\n}\n else {\n  final String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\n  final String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\n  if (cause == null) {\n    throw new StreamsException(format);\n  }\n else {\n    throw new StreamsException(format,cause);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3283,
        "startLineNumber" : 975,
        "startColumnNumber" : 91,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy offsetResetStrategy=topologyMetadata.offsetResetStrategy(partition.topic());\n    if (offsetResetStrategy != null) {\nswitch (offsetResetStrategy) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3370,
        "startLineNumber" : 975,
        "startColumnNumber" : 4,
        "endLineNumber" : 1038,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void resetOffsets(final Set<TopicPartition> partitions,final Exception cause){\n  final Set<String> loggedTopics=new HashSet<>();\n  final Set<TopicPartition> seekToBeginning=new HashSet<>();\n  final Set<TopicPartition> seekToEnd=new HashSet<>();\n  final Set<TopicPartition> notReset=new HashSet<>();\n  for (  final TopicPartition partition : partitions) {\n    final OffsetResetStrategy offsetResetStrategy=topologyMetadata.offsetResetStrategy(partition.topic());\n    if (offsetResetStrategy != null) {\nswitch (offsetResetStrategy) {\ncase EARLIEST:        addToResetList(partition,seekToBeginning,\"Setting topic '{}' to consume from {} offset\",\"earliest\",loggedTopics);\n      break;\ncase LATEST:    addToResetList(partition,seekToEnd,\"Setting topic '{}' to consume from {} offset\",\"latest\",loggedTopics);\n  break;\ncase NONE:if (\"earliest\".equals(originalReset)) {\n  addToResetList(partition,seekToBeginning,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"earliest\",loggedTopics);\n}\n else if (\"latest\".equals(originalReset)) {\n  addToResetList(partition,seekToEnd,\"No custom setting defined for topic '{}' using original config '{}' for offset reset\",\"latest\",loggedTopics);\n}\n else {\n  notReset.add(partition);\n}\nbreak;\ndefault:throw new IllegalStateException(\"Unable to locate topic \" + partition.topic() + \" in the topology\");\n}\n}\n}\nif (notReset.isEmpty()) {\nif (!seekToBeginning.isEmpty()) {\nmainConsumer.seekToBeginning(seekToBeginning);\n}\nif (!seekToEnd.isEmpty()) {\nmainConsumer.seekToEnd(seekToEnd);\n}\n}\n else {\nfinal String notResetString=notReset.stream().map(TopicPartition::topic).distinct().collect(Collectors.joining(\",\"));\nfinal String format=String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString);\nif (cause == null) {\nthrow new StreamsException(format);\n}\n else {\nthrow new StreamsException(format,cause);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 483,
        "startLineNumber" : 1024,
        "startColumnNumber" : 34,
        "endLineNumber" : 1030,
        "endColumnNumber" : 13
      },
      "nodeContext" : "String.format(\"No valid committed offset found for input [%s] and no valid reset policy configured.\" + \" You need to set configuration parameter \\\"auto.offset.reset\\\" or specify a topic specific reset \" + \"policy via StreamsBuilder#stream(..., Consumed.with(Topology.AutoOffsetReset)) or \"+ \"StreamsBuilder#table(..., Consumed.with(Topology.AutoOffsetReset))\",notResetString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 1029,
    "startColumnNumber" : 16,
    "endLineNumber" : 1029,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}