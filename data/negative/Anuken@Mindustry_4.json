{
  "id" : 4,
  "expression" : "\"if(id == \"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/remote/RemoteReadGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"if(id == \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 51,
      "startColumnNumber" : 43,
      "endLineNumber" : 51,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 51,
        "startColumnNumber" : 43,
        "endLineNumber" : 51,
        "endColumnNumber" : 71
      },
      "nodeContext" : "\"if(id == \" + entry.id + \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 72
      },
      "nodeContext" : "readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 73
      },
      "nodeContext" : "readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 49,
        "startColumnNumber" : 24,
        "endLineNumber" : 52,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  started=true;\n  readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!started) {\n  started=true;\n  readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n}\n else {\n  readBlock.nextControlFlow(\"else if(id == \" + entry.id + \")\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3587,
        "startLineNumber" : 47,
        "startColumnNumber" : 40,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!started) {\n    started=true;\n    readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n  }\n else {\n    readBlock.nextControlFlow(\"else if(id == \" + entry.id + \")\");\n  }\n  readBlock.beginControlFlow(\"try\");\n  StringBuilder varResult=new StringBuilder();\n  for (int i=0; i < entry.element.getParameters().size(); i++) {\n    VariableElement var=entry.element.getParameters().get(i);\n    if (!needsPlayer || i != 0) {\n      String typeName=var.asType().toString();\n      String varName=var.getSimpleName().toString();\n      String pname=typeName.equals(\"boolean\") ? \"bool\" : typeName.charAt(0) + \"\";\n      if (BaseProcessor.isPrimitive(typeName)) {\n        readBlock.addStatement(\"$L $L = read.$L()\",typeName,varName,pname);\n      }\n else {\n        String ser=serializers.readers.get(typeName.replace(\"mindustry.gen.\",\"\"),SerializerResolver.locate(entry.element,var.asType(),false));\n        if (ser == null) {\n          BaseProcessor.err(\"No read method to read class type '\" + typeName + \"' in method \"+ entry.targetMethod+ \"; \"+ serializers.readers,var);\n          return;\n        }\n        readBlock.addStatement(typeName + \" \" + varName+ \" = \"+ ser+ \"(read)\");\n      }\n      varResult.append(var.getSimpleName());\n      if (i != entry.element.getParameters().size() - 1)       varResult.append(\", \");\n    }\n else {\n      varResult.append(\"player\");\n      if (i != entry.element.getParameters().size() - 1)       varResult.append(\", \");\n    }\n  }\n  readBlock.addStatement(\"$N.\" + entry.element.getSimpleName() + \"(\"+ varResult.toString()+ \")\",((TypeElement)entry.element.getEnclosingElement()).getQualifiedName().toString());\n  if (entry.forward && entry.where.isServer && needsPlayer) {\n    readBlock.addStatement(packageName + \".\" + entry.className+ \".\"+ entry.element.getSimpleName()+ \"__forward(player.con\"+ (varResult.length() == 0 ? \"\" : \", \")+ varResult.toString()+ \")\");\n  }\n  readBlock.nextControlFlow(\"catch (java.lang.Exception e)\");\n  readBlock.addStatement(\"throw new java.lang.RuntimeException(\\\"Failed to read remote method '\" + entry.element.getSimpleName() + \"'!\\\", e)\");\n  readBlock.endControlFlow();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 331,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3619,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MethodEntry entry : entries) {\n  if (!started) {\n    started=true;\n    readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n  }\n else {\n    readBlock.nextControlFlow(\"else if(id == \" + entry.id + \")\");\n  }\n  readBlock.beginControlFlow(\"try\");\n  StringBuilder varResult=new StringBuilder();\n  for (int i=0; i < entry.element.getParameters().size(); i++) {\n    VariableElement var=entry.element.getParameters().get(i);\n    if (!needsPlayer || i != 0) {\n      String typeName=var.asType().toString();\n      String varName=var.getSimpleName().toString();\n      String pname=typeName.equals(\"boolean\") ? \"bool\" : typeName.charAt(0) + \"\";\n      if (BaseProcessor.isPrimitive(typeName)) {\n        readBlock.addStatement(\"$L $L = read.$L()\",typeName,varName,pname);\n      }\n else {\n        String ser=serializers.readers.get(typeName.replace(\"mindustry.gen.\",\"\"),SerializerResolver.locate(entry.element,var.asType(),false));\n        if (ser == null) {\n          BaseProcessor.err(\"No read method to read class type '\" + typeName + \"' in method \"+ entry.targetMethod+ \"; \"+ serializers.readers,var);\n          return;\n        }\n        readBlock.addStatement(typeName + \" \" + varName+ \" = \"+ ser+ \"(read)\");\n      }\n      varResult.append(var.getSimpleName());\n      if (i != entry.element.getParameters().size() - 1)       varResult.append(\", \");\n    }\n else {\n      varResult.append(\"player\");\n      if (i != entry.element.getParameters().size() - 1)       varResult.append(\", \");\n    }\n  }\n  readBlock.addStatement(\"$N.\" + entry.element.getSimpleName() + \"(\"+ varResult.toString()+ \")\",((TypeElement)entry.element.getEnclosingElement()).getQualifiedName().toString());\n  if (entry.forward && entry.where.isServer && needsPlayer) {\n    readBlock.addStatement(packageName + \".\" + entry.className+ \".\"+ entry.element.getSimpleName()+ \"__forward(player.con\"+ (varResult.length() == 0 ? \"\" : \", \")+ varResult.toString()+ \")\");\n  }\n  readBlock.nextControlFlow(\"catch (java.lang.Exception e)\");\n  readBlock.addStatement(\"throw new java.lang.RuntimeException(\\\"Failed to read remote method '\" + entry.element.getSimpleName() + \"'!\\\", e)\");\n  readBlock.endControlFlow();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 337,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5114,
        "startLineNumber" : 27,
        "startColumnNumber" : 129,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeSpec.Builder classBuilder=TypeSpec.classBuilder(className).addModifiers(Modifier.PUBLIC);\n  classBuilder.addJavadoc(RemoteProcess.autogenWarning);\n  MethodSpec.Builder readMethod=MethodSpec.methodBuilder(\"readPacket\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addParameter(Reads.class,\"read\").addParameter(int.class,\"id\").returns(void.class);\n  if (needsPlayer) {\n    readMethod.addParameter(ClassName.get(packageName,\"Player\"),\"player\");\n  }\n  CodeBlock.Builder readBlock=CodeBlock.builder();\n  boolean started=false;\n  for (  MethodEntry entry : entries) {\n    if (!started) {\n      started=true;\n      readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n    }\n else {\n      readBlock.nextControlFlow(\"else if(id == \" + entry.id + \")\");\n    }\n    readBlock.beginControlFlow(\"try\");\n    StringBuilder varResult=new StringBuilder();\n    for (int i=0; i < entry.element.getParameters().size(); i++) {\n      VariableElement var=entry.element.getParameters().get(i);\n      if (!needsPlayer || i != 0) {\n        String typeName=var.asType().toString();\n        String varName=var.getSimpleName().toString();\n        String pname=typeName.equals(\"boolean\") ? \"bool\" : typeName.charAt(0) + \"\";\n        if (BaseProcessor.isPrimitive(typeName)) {\n          readBlock.addStatement(\"$L $L = read.$L()\",typeName,varName,pname);\n        }\n else {\n          String ser=serializers.readers.get(typeName.replace(\"mindustry.gen.\",\"\"),SerializerResolver.locate(entry.element,var.asType(),false));\n          if (ser == null) {\n            BaseProcessor.err(\"No read method to read class type '\" + typeName + \"' in method \"+ entry.targetMethod+ \"; \"+ serializers.readers,var);\n            return;\n          }\n          readBlock.addStatement(typeName + \" \" + varName+ \" = \"+ ser+ \"(read)\");\n        }\n        varResult.append(var.getSimpleName());\n        if (i != entry.element.getParameters().size() - 1)         varResult.append(\", \");\n      }\n else {\n        varResult.append(\"player\");\n        if (i != entry.element.getParameters().size() - 1)         varResult.append(\", \");\n      }\n    }\n    readBlock.addStatement(\"$N.\" + entry.element.getSimpleName() + \"(\"+ varResult.toString()+ \")\",((TypeElement)entry.element.getEnclosingElement()).getQualifiedName().toString());\n    if (entry.forward && entry.where.isServer && needsPlayer) {\n      readBlock.addStatement(packageName + \".\" + entry.className+ \".\"+ entry.element.getSimpleName()+ \"__forward(player.con\"+ (varResult.length() == 0 ? \"\" : \", \")+ varResult.toString()+ \")\");\n    }\n    readBlock.nextControlFlow(\"catch (java.lang.Exception e)\");\n    readBlock.addStatement(\"throw new java.lang.RuntimeException(\\\"Failed to read remote method '\" + entry.element.getSimpleName() + \"'!\\\", e)\");\n    readBlock.endControlFlow();\n  }\n  if (started) {\n    readBlock.nextControlFlow(\"else\");\n    readBlock.addStatement(\"throw new $1N(\\\"Invalid read method ID: \\\" + id + \\\"\\\")\",RuntimeException.class.getName());\n    readBlock.endControlFlow();\n  }\n  readMethod.addCode(readBlock.build());\n  classBuilder.addMethod(readMethod.build());\n  TypeSpec spec=classBuilder.build();\n  JavaFile.builder(packageName,spec).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 480,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5557,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generates a class for reading remote invoke packets.\n * @param entries List of methods to use.\n * @param className Simple target class name.\n * @param packageName Full target package name.\n * @param needsPlayer Whether this read method requires a reference to the player sender.\n */\npublic void generateFor(Seq<MethodEntry> entries,String className,String packageName,boolean needsPlayer) throws Exception {\n  TypeSpec.Builder classBuilder=TypeSpec.classBuilder(className).addModifiers(Modifier.PUBLIC);\n  classBuilder.addJavadoc(RemoteProcess.autogenWarning);\n  MethodSpec.Builder readMethod=MethodSpec.methodBuilder(\"readPacket\").addModifiers(Modifier.PUBLIC,Modifier.STATIC).addParameter(Reads.class,\"read\").addParameter(int.class,\"id\").returns(void.class);\n  if (needsPlayer) {\n    readMethod.addParameter(ClassName.get(packageName,\"Player\"),\"player\");\n  }\n  CodeBlock.Builder readBlock=CodeBlock.builder();\n  boolean started=false;\n  for (  MethodEntry entry : entries) {\n    if (!started) {\n      started=true;\n      readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n    }\n else {\n      readBlock.nextControlFlow(\"else if(id == \" + entry.id + \")\");\n    }\n    readBlock.beginControlFlow(\"try\");\n    StringBuilder varResult=new StringBuilder();\n    for (int i=0; i < entry.element.getParameters().size(); i++) {\n      VariableElement var=entry.element.getParameters().get(i);\n      if (!needsPlayer || i != 0) {\n        String typeName=var.asType().toString();\n        String varName=var.getSimpleName().toString();\n        String pname=typeName.equals(\"boolean\") ? \"bool\" : typeName.charAt(0) + \"\";\n        if (BaseProcessor.isPrimitive(typeName)) {\n          readBlock.addStatement(\"$L $L = read.$L()\",typeName,varName,pname);\n        }\n else {\n          String ser=serializers.readers.get(typeName.replace(\"mindustry.gen.\",\"\"),SerializerResolver.locate(entry.element,var.asType(),false));\n          if (ser == null) {\n            BaseProcessor.err(\"No read method to read class type '\" + typeName + \"' in method \"+ entry.targetMethod+ \"; \"+ serializers.readers,var);\n            return;\n          }\n          readBlock.addStatement(typeName + \" \" + varName+ \" = \"+ ser+ \"(read)\");\n        }\n        varResult.append(var.getSimpleName());\n        if (i != entry.element.getParameters().size() - 1)         varResult.append(\", \");\n      }\n else {\n        varResult.append(\"player\");\n        if (i != entry.element.getParameters().size() - 1)         varResult.append(\", \");\n      }\n    }\n    readBlock.addStatement(\"$N.\" + entry.element.getSimpleName() + \"(\"+ varResult.toString()+ \")\",((TypeElement)entry.element.getEnclosingElement()).getQualifiedName().toString());\n    if (entry.forward && entry.where.isServer && needsPlayer) {\n      readBlock.addStatement(packageName + \".\" + entry.className+ \".\"+ entry.element.getSimpleName()+ \"__forward(player.con\"+ (varResult.length() == 0 ? \"\" : \", \")+ varResult.toString()+ \")\");\n    }\n    readBlock.nextControlFlow(\"catch (java.lang.Exception e)\");\n    readBlock.addStatement(\"throw new java.lang.RuntimeException(\\\"Failed to read remote method '\" + entry.element.getSimpleName() + \"'!\\\", e)\");\n    readBlock.endControlFlow();\n  }\n  if (started) {\n    readBlock.nextControlFlow(\"else\");\n    readBlock.addStatement(\"throw new $1N(\\\"Invalid read method ID: \\\" + id + \\\"\\\")\",RuntimeException.class.getName());\n    readBlock.endControlFlow();\n  }\n  readMethod.addCode(readBlock.build());\n  classBuilder.addMethod(readMethod.build());\n  TypeSpec spec=classBuilder.build();\n  JavaFile.builder(packageName,spec).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 73
      },
      "nodeContext" : "readBlock.beginControlFlow(\"if(id == \" + entry.id + \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 51,
    "startColumnNumber" : 43,
    "endLineNumber" : 51,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}