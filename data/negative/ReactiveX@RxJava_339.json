{
  "id" : 339,
  "expression" : "new AtomicInteger()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/processors/PublishProcessorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AtomicInteger()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 204,
      "startColumnNumber" : 42,
      "endLineNumber" : 204,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 204,
        "startColumnNumber" : 28,
        "endLineNumber" : 204,
        "endColumnNumber" : 61
      },
      "nodeContext" : "countParent=new AtomicInteger()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 62
      },
      "nodeContext" : "final AtomicInteger countParent=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 201,
        "startColumnNumber" : 38,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNestedSubscribe(){\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 62
      },
      "nodeContext" : "final AtomicInteger countParent=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.atomic.AtomicInteger"
  }, {
    "nodeContext" : "new AtomicInteger()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 205,
      "startColumnNumber" : 44,
      "endLineNumber" : 205,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 205,
        "startColumnNumber" : 28,
        "endLineNumber" : 205,
        "endColumnNumber" : 63
      },
      "nodeContext" : "countChildren=new AtomicInteger()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 64
      },
      "nodeContext" : "final AtomicInteger countChildren=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 201,
        "startColumnNumber" : 38,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNestedSubscribe(){\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 64
      },
      "nodeContext" : "final AtomicInteger countChildren=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.atomic.AtomicInteger"
  }, {
    "nodeContext" : "new AtomicInteger()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 206,
      "startColumnNumber" : 41,
      "endLineNumber" : 206,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 206,
        "startColumnNumber" : 28,
        "endLineNumber" : 206,
        "endColumnNumber" : 60
      },
      "nodeContext" : "countTotal=new AtomicInteger()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 206,
        "startColumnNumber" : 8,
        "endLineNumber" : 206,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final AtomicInteger countTotal=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 201,
        "startColumnNumber" : 38,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNestedSubscribe(){\n  final PublishProcessor<Integer> s=PublishProcessor.create();\n  final AtomicInteger countParent=new AtomicInteger();\n  final AtomicInteger countChildren=new AtomicInteger();\n  final AtomicInteger countTotal=new AtomicInteger();\n  final ArrayList<String> list=new ArrayList<String>();\n  s.flatMap(new Function<Integer,Flowable<String>>(){\n    @Override public Flowable<String> apply(    final Integer v){\n      countParent.incrementAndGet();\n      return s.map(new Function<Integer,String>(){\n        @Override public String apply(        Integer v2){\n          countChildren.incrementAndGet();\n          return \"Parent: \" + v + \" Child: \"+ v2;\n        }\n      }\n);\n    }\n  }\n).subscribe(new Consumer<String>(){\n    @Override public void accept(    String v){\n      countTotal.incrementAndGet();\n      list.add(v);\n    }\n  }\n);\n  for (int i=0; i < 10; i++) {\n    s.onNext(i);\n  }\n  s.onComplete();\n  assertEquals(45,list.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 206,
        "startColumnNumber" : 8,
        "endLineNumber" : 206,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final AtomicInteger countTotal=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.atomic.AtomicInteger"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 204,
    "startColumnNumber" : 42,
    "endLineNumber" : 204,
    "endColumnNumber" : 61
  }, {
    "charLength" : 19,
    "startLineNumber" : 205,
    "startColumnNumber" : 44,
    "endLineNumber" : 205,
    "endColumnNumber" : 63
  }, {
    "charLength" : 19,
    "startLineNumber" : 206,
    "startColumnNumber" : 41,
    "endLineNumber" : 206,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}