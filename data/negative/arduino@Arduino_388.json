{
  "id" : 388,
  "expression" : "(index != -1)",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/EditorListener.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(index != -1)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 447,
      "startColumnNumber" : 15,
      "endLineNumber" : 447,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 447,
        "startColumnNumber" : 15,
        "endLineNumber" : 447,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(index != -1) && (!finished)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 447,
        "startColumnNumber" : 8,
        "endLineNumber" : 457,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((index != -1) && (!finished)) {\n  if (contents[index] == 10) {\n    finished=true;\n    index++;\n  }\n else   if (contents[index] != ' ') {\n    return false;\n  }\n else {\n    index--;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1665,
        "startLineNumber" : 428,
        "startColumnNumber" : 22,
        "endLineNumber" : 470,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (textarea.getSelectionStart() != textarea.getSelectionStop()) {\n    textarea.setSelectedText(\"\");\n  }\n  char contents[]=textarea.getText().toCharArray();\n  int prevCharIndex=textarea.getCaretPosition() - 1;\n  int index=prevCharIndex;\n  boolean finished=false;\n  while ((index != -1) && (!finished)) {\n    if (contents[index] == 10) {\n      finished=true;\n      index++;\n    }\n else     if (contents[index] != ' ') {\n      return false;\n    }\n else {\n      index--;\n    }\n  }\n  if (!finished)   return false;\n  int lineStartIndex=index;\n  int pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);\n  if (pairedSpaceCount == -1)   return false;\n  textarea.setSelectionStart(lineStartIndex);\n  textarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));\n  event.consume();\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1681,
        "startLineNumber" : 428,
        "startColumnNumber" : 6,
        "endLineNumber" : 470,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (autoIndent) {\n  if (textarea.getSelectionStart() != textarea.getSelectionStop()) {\n    textarea.setSelectedText(\"\");\n  }\n  char contents[]=textarea.getText().toCharArray();\n  int prevCharIndex=textarea.getCaretPosition() - 1;\n  int index=prevCharIndex;\n  boolean finished=false;\n  while ((index != -1) && (!finished)) {\n    if (contents[index] == 10) {\n      finished=true;\n      index++;\n    }\n else     if (contents[index] != ' ') {\n      return false;\n    }\n else {\n      index--;\n    }\n  }\n  if (!finished)   return false;\n  int lineStartIndex=index;\n  int pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);\n  if (pairedSpaceCount == -1)   return false;\n  textarea.setSelectionStart(lineStartIndex);\n  textarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));\n  event.consume();\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9215,
        "startLineNumber" : 226,
        "startColumnNumber" : 4,
        "endLineNumber" : 472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch ((int)c) {\ncase 9:  if (textarea.isSelectionActive()) {\n    boolean outdent=(event.getModifiers() & KeyEvent.SHIFT_MASK) != 0;\n    editor.handleIndentOutdent(!outdent);\n  }\n else   if (tabsExpand) {\n    textarea.setSelectedText(tabString);\n    event.consume();\n    return true;\n  }\n else   if (tabsIndent) {\n    char contents[]=textarea.getText().toCharArray();\n    int prevCharIndex=textarea.getCaretPosition() - 1;\n    int lineStart=calcLineStart(prevCharIndex,contents);\n    int lineEnd=lineStart;\n    while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {\n      lineEnd++;\n    }\n    int braceBalance=0;\n    int index=lineStart;\n    while ((index < contents.length) && (contents[index] != 10)) {\n      if (contents[index] == '{') {\n        braceBalance++;\n      }\n else       if (contents[index] == '}') {\n        braceBalance--;\n      }\n      index++;\n    }\n    int where=(braceBalance > 0) ? lineStart : lineEnd;\n    int indent=calcBraceIndent(where,contents);\n    if (indent == -1) {\n      indent=0;\n    }\n else {\n      indent+=tabSize;\n    }\n    int spaceCount=calcSpaceCount(prevCharIndex,contents);\n    textarea.setSelectionStart(lineStart);\n    textarea.setSelectionEnd(lineStart + spaceCount);\n    textarea.setSelectedText(Editor.EMPTY.substring(0,indent));\n    event.consume();\n    return true;\n  }\nbreak;\ncase 10:case 13:if (autoIndent) {\nchar contents[]=textarea.getText().toCharArray();\nint origIndex=textarea.getCaretPosition() - 1;\nint spaceCount=calcSpaceCount(origIndex,contents);\nint index2=origIndex;\nwhile ((index2 >= 0) && Character.isWhitespace(contents[index2])) {\n  index2--;\n}\nif (index2 != -1) {\n  if (contents[index2] == '{') {\n    spaceCount=calcSpaceCount(index2,contents);\n    spaceCount+=tabSize;\n  }\n}\nint index=origIndex + 1;\nint extraCount=0;\nwhile ((index < contents.length) && (contents[index] == ' ')) {\n  extraCount++;\n  index++;\n}\nint braceCount=0;\nwhile ((index < contents.length) && (contents[index] != '\\n')) {\n  if (contents[index] == '}') {\n    braceCount++;\n  }\n  index++;\n}\nspaceCount-=extraCount;\nif (spaceCount < 0) {\n  textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);\n  textarea.setSelectedText(\"\\n\");\n}\n else {\n  String insertion=\"\\n\" + Editor.EMPTY.substring(0,spaceCount);\n  textarea.setSelectedText(insertion);\n}\nif (braceCount > 0) {\n  int sel=textarea.getSelectionStart();\n  if (sel - tabSize >= 0) {\n    textarea.select(sel - tabSize,sel);\n    String s=Editor.EMPTY.substring(0,tabSize);\n    if (textarea.getSelectedText().equals(s)) {\n      textarea.setSelectedText(\"\");\n    }\n else {\n      textarea.select(sel,sel);\n    }\n  }\n}\n}\n else {\ntextarea.setSelectedText(String.valueOf(c));\n}\nevent.consume();\nreturn true;\ncase '}':if (autoIndent) {\nif (textarea.getSelectionStart() != textarea.getSelectionStop()) {\ntextarea.setSelectedText(\"\");\n}\nchar contents[]=textarea.getText().toCharArray();\nint prevCharIndex=textarea.getCaretPosition() - 1;\nint index=prevCharIndex;\nboolean finished=false;\nwhile ((index != -1) && (!finished)) {\nif (contents[index] == 10) {\nfinished=true;\nindex++;\n}\n else if (contents[index] != ' ') {\nreturn false;\n}\n else {\nindex--;\n}\n}\nif (!finished) return false;\nint lineStartIndex=index;\nint pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);\nif (pairedSpaceCount == -1) return false;\ntextarea.setSelectionStart(lineStartIndex);\ntextarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));\nevent.consume();\nreturn true;\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 616,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13123,
        "startLineNumber" : 98,
        "startColumnNumber" : 44,
        "endLineNumber" : 474,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (externalEditor)   return false;\n  char c=event.getKeyChar();\n  int code=event.getKeyCode();\n  Sketch sketch=editor.getSketch();\n  if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {\n    if (code == KeyEvent.VK_LEFT) {\n      sketch.handlePrevCode();\n      return true;\n    }\n else     if (code == KeyEvent.VK_RIGHT) {\n      sketch.handleNextCode();\n      return true;\n    }\n  }\n  if ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0) {\n    if (code == KeyEvent.VK_M) {\n      event.consume();\n      return false;\n    }\n    if (!Character.isISOControl(c)) {\n      return false;\n    }\n  }\n  if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {\n    return false;\n  }\n  if (!editor.getSketch().isModified()) {\n    if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER)|| ((c >= 32) && (c < 128))) {\n      sketch.setModified(true);\n    }\n  }\n  if ((code == KeyEvent.VK_UP) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {\n    char contents[]=textarea.getText().toCharArray();\n    int caretIndex=textarea.getCaretPosition();\n    int index=calcLineStart(caretIndex - 1,contents);\n    index-=2;\n    boolean onlySpaces=true;\n    while (index > 0) {\n      if (contents[index] == 10) {\n        if (onlySpaces) {\n          index++;\n          break;\n        }\n else {\n          onlySpaces=true;\n        }\n      }\n else       if (contents[index] != ' ') {\n        onlySpaces=false;\n      }\n      index--;\n    }\n    if (index < 0)     index=0;\n    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {\n      textarea.setSelectionStart(caretIndex);\n      textarea.setSelectionEnd(index);\n    }\n else {\n      textarea.setCaretPosition(index);\n    }\n    event.consume();\n    return true;\n  }\n else   if ((code == KeyEvent.VK_DOWN) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {\n    char contents[]=textarea.getText().toCharArray();\n    int caretIndex=textarea.getCaretPosition();\n    int index=caretIndex;\n    int lineStart=0;\n    boolean onlySpaces=false;\n    while (index < contents.length) {\n      if (contents[index] == 10) {\n        if (onlySpaces) {\n          index=lineStart;\n          break;\n        }\n else {\n          lineStart=index + 1;\n          onlySpaces=true;\n        }\n      }\n else       if (contents[index] != ' ') {\n        onlySpaces=false;\n      }\n      index++;\n    }\n    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {\n      textarea.setSelectionStart(caretIndex);\n      textarea.setSelectionEnd(index);\n    }\n else {\n      textarea.setCaretPosition(index);\n    }\n    event.consume();\n    return true;\n  }\nswitch ((int)c) {\ncase 9:    if (textarea.isSelectionActive()) {\n      boolean outdent=(event.getModifiers() & KeyEvent.SHIFT_MASK) != 0;\n      editor.handleIndentOutdent(!outdent);\n    }\n else     if (tabsExpand) {\n      textarea.setSelectedText(tabString);\n      event.consume();\n      return true;\n    }\n else     if (tabsIndent) {\n      char contents[]=textarea.getText().toCharArray();\n      int prevCharIndex=textarea.getCaretPosition() - 1;\n      int lineStart=calcLineStart(prevCharIndex,contents);\n      int lineEnd=lineStart;\n      while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {\n        lineEnd++;\n      }\n      int braceBalance=0;\n      int index=lineStart;\n      while ((index < contents.length) && (contents[index] != 10)) {\n        if (contents[index] == '{') {\n          braceBalance++;\n        }\n else         if (contents[index] == '}') {\n          braceBalance--;\n        }\n        index++;\n      }\n      int where=(braceBalance > 0) ? lineStart : lineEnd;\n      int indent=calcBraceIndent(where,contents);\n      if (indent == -1) {\n        indent=0;\n      }\n else {\n        indent+=tabSize;\n      }\n      int spaceCount=calcSpaceCount(prevCharIndex,contents);\n      textarea.setSelectionStart(lineStart);\n      textarea.setSelectionEnd(lineStart + spaceCount);\n      textarea.setSelectedText(Editor.EMPTY.substring(0,indent));\n      event.consume();\n      return true;\n    }\n  break;\ncase 10:case 13:if (autoIndent) {\n  char contents[]=textarea.getText().toCharArray();\n  int origIndex=textarea.getCaretPosition() - 1;\n  int spaceCount=calcSpaceCount(origIndex,contents);\n  int index2=origIndex;\n  while ((index2 >= 0) && Character.isWhitespace(contents[index2])) {\n    index2--;\n  }\n  if (index2 != -1) {\n    if (contents[index2] == '{') {\n      spaceCount=calcSpaceCount(index2,contents);\n      spaceCount+=tabSize;\n    }\n  }\n  int index=origIndex + 1;\n  int extraCount=0;\n  while ((index < contents.length) && (contents[index] == ' ')) {\n    extraCount++;\n    index++;\n  }\n  int braceCount=0;\n  while ((index < contents.length) && (contents[index] != '\\n')) {\n    if (contents[index] == '}') {\n      braceCount++;\n    }\n    index++;\n  }\n  spaceCount-=extraCount;\n  if (spaceCount < 0) {\n    textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);\n    textarea.setSelectedText(\"\\n\");\n  }\n else {\n    String insertion=\"\\n\" + Editor.EMPTY.substring(0,spaceCount);\n    textarea.setSelectedText(insertion);\n  }\n  if (braceCount > 0) {\n    int sel=textarea.getSelectionStart();\n    if (sel - tabSize >= 0) {\n      textarea.select(sel - tabSize,sel);\n      String s=Editor.EMPTY.substring(0,tabSize);\n      if (textarea.getSelectedText().equals(s)) {\n        textarea.setSelectedText(\"\");\n      }\n else {\n        textarea.select(sel,sel);\n      }\n    }\n  }\n}\n else {\n  textarea.setSelectedText(String.valueOf(c));\n}\nevent.consume();\nreturn true;\ncase '}':if (autoIndent) {\nif (textarea.getSelectionStart() != textarea.getSelectionStop()) {\ntextarea.setSelectedText(\"\");\n}\nchar contents[]=textarea.getText().toCharArray();\nint prevCharIndex=textarea.getCaretPosition() - 1;\nint index=prevCharIndex;\nboolean finished=false;\nwhile ((index != -1) && (!finished)) {\nif (contents[index] == 10) {\nfinished=true;\nindex++;\n}\n else if (contents[index] != ' ') {\nreturn false;\n}\n else {\nindex--;\n}\n}\nif (!finished) return false;\nint lineStartIndex=index;\nint pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);\nif (pairedSpaceCount == -1) return false;\ntextarea.setSelectionStart(lineStartIndex);\ntextarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));\nevent.consume();\nreturn true;\n}\nbreak;\n}\nreturn false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1042,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13473,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 474,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Intercepts key pressed events for JEditTextArea. <p/> Called by JEditTextArea inside processKeyEvent(). Note that this won't intercept actual characters, because those are fired on keyTyped().\n * @return true if the event has been handled (to remove it from the queue)\n */\npublic boolean keyPressed(KeyEvent event){\n  if (externalEditor)   return false;\n  char c=event.getKeyChar();\n  int code=event.getKeyCode();\n  Sketch sketch=editor.getSketch();\n  if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {\n    if (code == KeyEvent.VK_LEFT) {\n      sketch.handlePrevCode();\n      return true;\n    }\n else     if (code == KeyEvent.VK_RIGHT) {\n      sketch.handleNextCode();\n      return true;\n    }\n  }\n  if ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0) {\n    if (code == KeyEvent.VK_M) {\n      event.consume();\n      return false;\n    }\n    if (!Character.isISOControl(c)) {\n      return false;\n    }\n  }\n  if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {\n    return false;\n  }\n  if (!editor.getSketch().isModified()) {\n    if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER)|| ((c >= 32) && (c < 128))) {\n      sketch.setModified(true);\n    }\n  }\n  if ((code == KeyEvent.VK_UP) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {\n    char contents[]=textarea.getText().toCharArray();\n    int caretIndex=textarea.getCaretPosition();\n    int index=calcLineStart(caretIndex - 1,contents);\n    index-=2;\n    boolean onlySpaces=true;\n    while (index > 0) {\n      if (contents[index] == 10) {\n        if (onlySpaces) {\n          index++;\n          break;\n        }\n else {\n          onlySpaces=true;\n        }\n      }\n else       if (contents[index] != ' ') {\n        onlySpaces=false;\n      }\n      index--;\n    }\n    if (index < 0)     index=0;\n    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {\n      textarea.setSelectionStart(caretIndex);\n      textarea.setSelectionEnd(index);\n    }\n else {\n      textarea.setCaretPosition(index);\n    }\n    event.consume();\n    return true;\n  }\n else   if ((code == KeyEvent.VK_DOWN) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {\n    char contents[]=textarea.getText().toCharArray();\n    int caretIndex=textarea.getCaretPosition();\n    int index=caretIndex;\n    int lineStart=0;\n    boolean onlySpaces=false;\n    while (index < contents.length) {\n      if (contents[index] == 10) {\n        if (onlySpaces) {\n          index=lineStart;\n          break;\n        }\n else {\n          lineStart=index + 1;\n          onlySpaces=true;\n        }\n      }\n else       if (contents[index] != ' ') {\n        onlySpaces=false;\n      }\n      index++;\n    }\n    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {\n      textarea.setSelectionStart(caretIndex);\n      textarea.setSelectionEnd(index);\n    }\n else {\n      textarea.setCaretPosition(index);\n    }\n    event.consume();\n    return true;\n  }\nswitch ((int)c) {\ncase 9:    if (textarea.isSelectionActive()) {\n      boolean outdent=(event.getModifiers() & KeyEvent.SHIFT_MASK) != 0;\n      editor.handleIndentOutdent(!outdent);\n    }\n else     if (tabsExpand) {\n      textarea.setSelectedText(tabString);\n      event.consume();\n      return true;\n    }\n else     if (tabsIndent) {\n      char contents[]=textarea.getText().toCharArray();\n      int prevCharIndex=textarea.getCaretPosition() - 1;\n      int lineStart=calcLineStart(prevCharIndex,contents);\n      int lineEnd=lineStart;\n      while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {\n        lineEnd++;\n      }\n      int braceBalance=0;\n      int index=lineStart;\n      while ((index < contents.length) && (contents[index] != 10)) {\n        if (contents[index] == '{') {\n          braceBalance++;\n        }\n else         if (contents[index] == '}') {\n          braceBalance--;\n        }\n        index++;\n      }\n      int where=(braceBalance > 0) ? lineStart : lineEnd;\n      int indent=calcBraceIndent(where,contents);\n      if (indent == -1) {\n        indent=0;\n      }\n else {\n        indent+=tabSize;\n      }\n      int spaceCount=calcSpaceCount(prevCharIndex,contents);\n      textarea.setSelectionStart(lineStart);\n      textarea.setSelectionEnd(lineStart + spaceCount);\n      textarea.setSelectedText(Editor.EMPTY.substring(0,indent));\n      event.consume();\n      return true;\n    }\n  break;\ncase 10:case 13:if (autoIndent) {\n  char contents[]=textarea.getText().toCharArray();\n  int origIndex=textarea.getCaretPosition() - 1;\n  int spaceCount=calcSpaceCount(origIndex,contents);\n  int index2=origIndex;\n  while ((index2 >= 0) && Character.isWhitespace(contents[index2])) {\n    index2--;\n  }\n  if (index2 != -1) {\n    if (contents[index2] == '{') {\n      spaceCount=calcSpaceCount(index2,contents);\n      spaceCount+=tabSize;\n    }\n  }\n  int index=origIndex + 1;\n  int extraCount=0;\n  while ((index < contents.length) && (contents[index] == ' ')) {\n    extraCount++;\n    index++;\n  }\n  int braceCount=0;\n  while ((index < contents.length) && (contents[index] != '\\n')) {\n    if (contents[index] == '}') {\n      braceCount++;\n    }\n    index++;\n  }\n  spaceCount-=extraCount;\n  if (spaceCount < 0) {\n    textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);\n    textarea.setSelectedText(\"\\n\");\n  }\n else {\n    String insertion=\"\\n\" + Editor.EMPTY.substring(0,spaceCount);\n    textarea.setSelectedText(insertion);\n  }\n  if (braceCount > 0) {\n    int sel=textarea.getSelectionStart();\n    if (sel - tabSize >= 0) {\n      textarea.select(sel - tabSize,sel);\n      String s=Editor.EMPTY.substring(0,tabSize);\n      if (textarea.getSelectedText().equals(s)) {\n        textarea.setSelectedText(\"\");\n      }\n else {\n        textarea.select(sel,sel);\n      }\n    }\n  }\n}\n else {\n  textarea.setSelectedText(String.valueOf(c));\n}\nevent.consume();\nreturn true;\ncase '}':if (autoIndent) {\nif (textarea.getSelectionStart() != textarea.getSelectionStop()) {\ntextarea.setSelectedText(\"\");\n}\nchar contents[]=textarea.getText().toCharArray();\nint prevCharIndex=textarea.getCaretPosition() - 1;\nint index=prevCharIndex;\nboolean finished=false;\nwhile ((index != -1) && (!finished)) {\nif (contents[index] == 10) {\nfinished=true;\nindex++;\n}\n else if (contents[index] != ' ') {\nreturn false;\n}\n else {\nindex--;\n}\n}\nif (!finished) return false;\nint lineStartIndex=index;\nint pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);\nif (pairedSpaceCount == -1) return false;\ntextarea.setSelectionStart(lineStartIndex);\ntextarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));\nevent.consume();\nreturn true;\n}\nbreak;\n}\nreturn false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1051,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 447,
        "startColumnNumber" : 15,
        "endLineNumber" : 447,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(index != -1) && (!finished)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 447,
    "startColumnNumber" : 15,
    "endLineNumber" : 447,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}