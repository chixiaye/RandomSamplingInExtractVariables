{
  "id" : 13,
  "expression" : "targetDir + \"docker-compose.postgres.volumes.yml\"",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/msa/black-box-tests/src/test/java/org/thingsboard/server/msa/ContainerTestSuite.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetDir + \"docker-compose.postgres.volumes.yml\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 77,
      "startColumnNumber" : 33,
      "endLineNumber" : 77,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 77,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new File(targetDir + \"docker-compose.postgres.volumes.yml\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 78,
        "endColumnNumber" : 73
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 28,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 378,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 79,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 47
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 82,
        "endColumnNumber" : 52
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 83,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 750,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 84,
        "endColumnNumber" : 136
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 85,
        "endColumnNumber" : 134
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1020,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 86,
        "endColumnNumber" : 134
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 87,
        "endColumnNumber" : 147
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1316,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 88,
        "endColumnNumber" : 147
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1464,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 147
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 131,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 1612,
        "startLineNumber" : 74,
        "startColumnNumber" : 32,
        "endLineNumber" : 90,
        "endColumnNumber" : 147
      },
      "nodeContext" : "new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 145,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 147
      },
      "nodeContext" : "testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 147,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1629,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 148
      },
      "nodeContext" : "testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 148,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n  log.info(\"targetDir {}\",targetDir);\n  FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n  replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n    public DockerComposeContainerImpl(    File... composeFiles){\n      super(composeFiles);\n    }\n    @Override public void stop(){\n      super.stop();\n      tryDeleteDir(targetDir);\n    }\n  }\n  testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2704,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n  log.info(\"targetDir {}\",targetDir);\n  FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n  replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n    public DockerComposeContainerImpl(    File... composeFiles){\n      super(composeFiles);\n    }\n    @Override public void stop(){\n      super.stop();\n      tryDeleteDir(targetDir);\n    }\n  }\n  testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n}\n catch (Exception e) {\n  log.error(\"Failed to create test container\",e);\n  fail(\"Failed to create test container\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 248,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 54,
        "startColumnNumber" : 35,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean skipTailChildContainers=Boolean.valueOf(System.getProperty(\"blackBoxTests.skipTailChildContainers\"));\n  try {\n    final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n    log.info(\"targetDir {}\",targetDir);\n    FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n    replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n      public DockerComposeContainerImpl(      File... composeFiles){\n        super(composeFiles);\n      }\n      @Override public void stop(){\n        super.stop();\n        tryDeleteDir(targetDir);\n      }\n    }\n    testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n  }\n catch (  Exception e) {\n    log.error(\"Failed to create test container\",e);\n    fail(\"Failed to create test container\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2879,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (testContainer == null) {\n  boolean skipTailChildContainers=Boolean.valueOf(System.getProperty(\"blackBoxTests.skipTailChildContainers\"));\n  try {\n    final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n    log.info(\"targetDir {}\",targetDir);\n    FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n    replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n      public DockerComposeContainerImpl(      File... composeFiles){\n        super(composeFiles);\n      }\n      @Override public void stop(){\n        super.stop();\n        tryDeleteDir(targetDir);\n      }\n    }\n    testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n  }\n catch (  Exception e) {\n    log.error(\"Failed to create test container\",e);\n    fail(\"Failed to create test container\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 264,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2925,
        "startLineNumber" : 53,
        "startColumnNumber" : 60,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (testContainer == null) {\n    boolean skipTailChildContainers=Boolean.valueOf(System.getProperty(\"blackBoxTests.skipTailChildContainers\"));\n    try {\n      final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n      log.info(\"targetDir {}\",targetDir);\n      FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n      replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n        public DockerComposeContainerImpl(        File... composeFiles){\n          super(composeFiles);\n        }\n        @Override public void stop(){\n          super.stop();\n          tryDeleteDir(targetDir);\n        }\n      }\n      testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n    }\n catch (    Exception e) {\n      log.error(\"Failed to create test container\",e);\n      fail(\"Failed to create test container\");\n    }\n  }\n  return testContainer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2996,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@ClassRule public static DockerComposeContainer getTestContainer(){\n  if (testContainer == null) {\n    boolean skipTailChildContainers=Boolean.valueOf(System.getProperty(\"blackBoxTests.skipTailChildContainers\"));\n    try {\n      final String targetDir=FileUtils.getTempDirectoryPath() + \"/\" + \"ContainerTestSuite-\"+ UUID.randomUUID()+ \"/\";\n      log.info(\"targetDir {}\",targetDir);\n      FileUtils.copyDirectory(new File(SOURCE_DIR),new File(targetDir));\n      replaceInFile(targetDir + \"docker-compose.yml\",\"    container_name: \\\"${LOAD_BALANCER_NAME}\\\"\",\"\",\"container_name\");\nclass DockerComposeContainerImpl<SELF extends DockerComposeContainer<SELF>> extends DockerComposeContainer<SELF> {\n        public DockerComposeContainerImpl(        File... composeFiles){\n          super(composeFiles);\n        }\n        @Override public void stop(){\n          super.stop();\n          tryDeleteDir(targetDir);\n        }\n      }\n      testContainer=new DockerComposeContainerImpl<>(new File(targetDir + \"docker-compose.yml\"),new File(targetDir + \"docker-compose.postgres.yml\"),new File(targetDir + \"docker-compose.postgres.volumes.yml\"),new File(targetDir + \"docker-compose.kafka.yml\")).withPull(false).withLocalCompose(true).withTailChildContainers(!skipTailChildContainers).withEnv(installTb.getEnv()).withEnv(\"LOAD_BALANCER_NAME\",\"\").withExposedService(\"haproxy\",80,Wait.forHttp(\"/swagger-ui.html\").withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core1\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-core2\",Wait.forLogMessage(TB_CORE_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-http-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport1\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400))).waitingFor(\"tb-mqtt-transport2\",Wait.forLogMessage(TRANSPORTS_LOG_REGEXP,1).withStartupTimeout(Duration.ofSeconds(400)));\n    }\n catch (    Exception e) {\n      log.error(\"Failed to create test container\",e);\n      fail(\"Failed to create test container\");\n    }\n  }\n  return testContainer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 77,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new File(targetDir + \"docker-compose.postgres.volumes.yml\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 77,
    "startColumnNumber" : 33,
    "endLineNumber" : 77,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}