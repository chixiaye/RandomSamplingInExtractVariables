{
  "id" : 213,
  "expression" : "legend.mNeededWidth",
  "projectName" : "PhilJay@MPAndroidChart",
  "commitID" : "43046425fc2ed73d0d3f177759706116e02a9053",
  "filePath" : "/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "legend.mNeededWidth",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 303,
      "startColumnNumber" : 63,
      "endLineNumber" : 303,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 303,
        "startColumnNumber" : 63,
        "endLineNumber" : 303,
        "endColumnNumber" : 87
      },
      "nodeContext" : "legend.mNeededWidth / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 303,
        "startColumnNumber" : 23,
        "endLineNumber" : 303,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 303,
        "startColumnNumber" : 16,
        "endLineNumber" : 303,
        "endColumnNumber" : 87
      },
      "nodeContext" : "posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 303,
        "startColumnNumber" : 16,
        "endLineNumber" : 303,
        "endColumnNumber" : 88
      },
      "nodeContext" : "posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7942,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:  posX=mViewPortHandler.contentLeft() + xoffset;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\n  if (legend.getColors()[i] != -2)   posX+=formTextSpaceAndForm;\n  drawLabel(c,posX,posY,legend.getLabel(i));\n  posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\n  posX+=formSize + stackSpace;\n}\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 878,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9037,
        "startLineNumber" : 146,
        "startColumnNumber" : 54,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 997,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9087,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 398,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void renderLegend(Canvas c,Legend legend){\n  if (legend == null || !legend.isEnabled())   return;\n  Typeface tf=legend.getTypeface();\n  if (tf != null)   mLegendLabelPaint.setTypeface(tf);\n  mLegendLabelPaint.setTextSize(legend.getTextSize());\n  mLegendLabelPaint.setColor(legend.getTextColor());\n  String[] labels=legend.getLegendLabels();\n  float formSize=legend.getFormSize();\n  float formTextSpaceAndForm=legend.getFormToTextSpace() + formSize;\n  float stackSpace=legend.getStackSpace();\n  float textDrop=(Utils.calcTextHeight(mLegendLabelPaint,\"AQJ\") + formSize) / 2f;\n  float posX, posY;\n  float stack=0f;\n  boolean wasStacked=false;\n  float yoffset=legend.getYOffset();\n  float xoffset=legend.getXOffset();\nswitch (legend.getPosition()) {\ncase BELOW_CHART_LEFT:    posX=mViewPortHandler.contentLeft() + xoffset;\n  posY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\n  drawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n  if (labels[i] != null) {\n    if (legend.getColors()[i] != -2)     posX+=formTextSpaceAndForm;\n    drawLabel(c,posX,posY,legend.getLabel(i));\n    posX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n  }\n else {\n    posX+=formSize + stackSpace;\n  }\n}\nbreak;\ncase BELOW_CHART_RIGHT:posX=mViewPortHandler.contentRight() - xoffset;\n;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=labels.length - 1; i >= 0; i--) {\nif (labels[i] != null) {\nposX-=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\ndrawLabel(c,posX,posY,legend.getLabel(i));\nif (legend.getColors()[i] != -2) posX-=formTextSpaceAndForm;\n}\n else {\nposX-=stackSpace + formSize;\n}\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\n}\nbreak;\ncase RIGHT_OF_CHART:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_CENTER:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase BELOW_CHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\nposY=mViewPortHandler.getChartHeight() - yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX,posY - legend.mTextHeightMax / 2f,i,legend);\nif (labels[i] != null) {\nif (legend.getColors()[i] != -2) posX+=formTextSpaceAndForm;\ndrawLabel(c,posX,posY,legend.getLabel(i));\nposX+=Utils.calcTextWidth(mLegendLabelPaint,labels[i]) + legend.getXEntrySpace();\n}\n else {\nposX+=formSize + stackSpace;\n}\n}\nbreak;\ncase PIECHART_CENTER:posX=mViewPortHandler.getChartWidth() / 2f - legend.mTextWidthMax / 2f;\nposY=mViewPortHandler.getChartHeight() / 2f - legend.mNeededHeight / 2f;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\ncase RIGHT_OF_CHART_INSIDE:posX=mViewPortHandler.getChartWidth() - legend.mTextWidthMax - xoffset;\nposY=mViewPortHandler.contentTop() + yoffset;\nfor (int i=0; i < labels.length; i++) {\ndrawForm(c,posX + stack,posY,i,legend);\nif (labels[i] != null) {\nif (!wasStacked) {\nfloat x=posX;\nif (legend.getColors()[i] != -2) x+=formTextSpaceAndForm;\ndrawLabel(c,x,posY + legend.mTextHeightMax / 2f,legend.getLabel(i));\nposY+=textDrop;\n}\n else {\nposY+=legend.mTextHeightMax * 3f;\ndrawLabel(c,posX,posY - legend.mTextHeightMax,legend.getLabel(i));\n}\nposY+=legend.getYEntrySpace();\nstack=0f;\n}\n else {\nstack+=formSize + stackSpace;\nwasStacked=true;\n}\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1009,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 303,
        "startColumnNumber" : 16,
        "endLineNumber" : 303,
        "endColumnNumber" : 88
      },
      "nodeContext" : "posX=mViewPortHandler.getChartWidth() / 2f - legend.mNeededWidth / 2f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 303,
    "startColumnNumber" : 63,
    "endLineNumber" : 303,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}