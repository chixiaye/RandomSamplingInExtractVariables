{
  "id" : 89,
  "expression" : "valuesForIn.size()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-db/src/main/java/cn/hutool/db/sql/Condition.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "valuesForIn.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 406,
      "startColumnNumber" : 57,
      "endLineNumber" : 406,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 406,
        "startColumnNumber" : 30,
        "endLineNumber" : 406,
        "endColumnNumber" : 81
      },
      "nodeContext" : "StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 406,
        "startColumnNumber" : 3,
        "endLineNumber" : 406,
        "endColumnNumber" : 82
      },
      "nodeContext" : "conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 406,
        "startColumnNumber" : 3,
        "endLineNumber" : 406,
        "endColumnNumber" : 83
      },
      "nodeContext" : "conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 398,
        "startColumnNumber" : 23,
        "endLineNumber" : 410,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<?> valuesForIn;\n  if (value instanceof CharSequence) {\n    valuesForIn=StrUtil.split((CharSequence)value,',');\n  }\n else {\n    valuesForIn=Arrays.asList(Convert.convert(String[].class,value));\n  }\n  conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n  if (null != paramValues) {\n    paramValues.addAll(valuesForIn);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 398,
        "startColumnNumber" : 2,
        "endLineNumber" : 412,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (isPlaceHolder()) {\n  List<?> valuesForIn;\n  if (value instanceof CharSequence) {\n    valuesForIn=StrUtil.split((CharSequence)value,',');\n  }\n else {\n    valuesForIn=Arrays.asList(Convert.convert(String[].class,value));\n  }\n  conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n  if (null != paramValues) {\n    paramValues.addAll(valuesForIn);\n  }\n}\n else {\n  conditionStrBuilder.append(StrUtil.join(\",\",value));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 611,
        "startLineNumber" : 395,
        "startColumnNumber" : 95,
        "endLineNumber" : 414,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  conditionStrBuilder.append(\" (\");\n  final Object value=this.value;\n  if (isPlaceHolder()) {\n    List<?> valuesForIn;\n    if (value instanceof CharSequence) {\n      valuesForIn=StrUtil.split((CharSequence)value,',');\n    }\n else {\n      valuesForIn=Arrays.asList(Convert.convert(String[].class,value));\n    }\n    conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n    if (null != paramValues) {\n      paramValues.addAll(valuesForIn);\n    }\n  }\n else {\n    conditionStrBuilder.append(StrUtil.join(\",\",value));\n  }\n  conditionStrBuilder.append(')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 877,
        "startLineNumber" : 388,
        "startColumnNumber" : 1,
        "endLineNumber" : 414,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 构建IN语句中的值部分<br> 开头必须加空格，类似：\" (?,?,?)\" 或者 \" (1,2,3,4)\"\n * @param conditionStrBuilder 条件语句构建器\n * @param paramValues         参数集合，用于参数占位符对应参数回填\n */\nprivate void buildValuePartForIN(StringBuilder conditionStrBuilder,List<Object> paramValues){\n  conditionStrBuilder.append(\" (\");\n  final Object value=this.value;\n  if (isPlaceHolder()) {\n    List<?> valuesForIn;\n    if (value instanceof CharSequence) {\n      valuesForIn=StrUtil.split((CharSequence)value,',');\n    }\n else {\n      valuesForIn=Arrays.asList(Convert.convert(String[].class,value));\n    }\n    conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n    if (null != paramValues) {\n      paramValues.addAll(valuesForIn);\n    }\n  }\n else {\n    conditionStrBuilder.append(StrUtil.join(\",\",value));\n  }\n  conditionStrBuilder.append(')');\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 406,
        "startColumnNumber" : 3,
        "endLineNumber" : 406,
        "endColumnNumber" : 83
      },
      "nodeContext" : "conditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\",valuesForIn.size(),\",\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 406,
    "startColumnNumber" : 57,
    "endLineNumber" : 406,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}