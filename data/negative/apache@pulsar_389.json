{
  "id" : 389,
  "expression" : "0",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedCursorTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 119,
      "startColumnNumber" : 37,
      "endLineNumber" : 119,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(entries.size(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(entries.size(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 114,
        "startColumnNumber" : 48,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ManagedLedger ledger=factory.open(\"my_test_ledger\");\n  ManagedCursor c1=ledger.openCursor(\"c1\");\n  List<Entry> entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  ledger.addEntry(\"test\".getBytes(Encoding));\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),1);\n  entries.forEach(e -> e.release());\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  assertEquals(c1.toString(),\"ManagedCursorImpl{ledger=my_test_ledger, name=c1, ackPos=3:-1, readPos=3:1}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=20000) void readFromEmptyLedger() throws Exception {\n  ManagedLedger ledger=factory.open(\"my_test_ledger\");\n  ManagedCursor c1=ledger.openCursor(\"c1\");\n  List<Entry> entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  ledger.addEntry(\"test\".getBytes(Encoding));\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),1);\n  entries.forEach(e -> e.release());\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  assertEquals(c1.toString(),\"ManagedCursorImpl{ledger=my_test_ledger, name=c1, ackPos=3:-1, readPos=3:1}\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(entries.size(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 128,
      "startColumnNumber" : 37,
      "endLineNumber" : 128,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(entries.size(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(entries.size(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 114,
        "startColumnNumber" : 48,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ManagedLedger ledger=factory.open(\"my_test_ledger\");\n  ManagedCursor c1=ledger.openCursor(\"c1\");\n  List<Entry> entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  ledger.addEntry(\"test\".getBytes(Encoding));\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),1);\n  entries.forEach(e -> e.release());\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  assertEquals(c1.toString(),\"ManagedCursorImpl{ledger=my_test_ledger, name=c1, ackPos=3:-1, readPos=3:1}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=20000) void readFromEmptyLedger() throws Exception {\n  ManagedLedger ledger=factory.open(\"my_test_ledger\");\n  ManagedCursor c1=ledger.openCursor(\"c1\");\n  List<Entry> entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  ledger.addEntry(\"test\".getBytes(Encoding));\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),1);\n  entries.forEach(e -> e.release());\n  entries=c1.readEntries(10);\n  assertEquals(entries.size(),0);\n  entries.forEach(e -> e.release());\n  assertEquals(c1.toString(),\"ManagedCursorImpl{ledger=my_test_ledger, name=c1, ackPos=3:-1, readPos=3:1}\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(entries.size(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 119,
    "startColumnNumber" : 37,
    "endLineNumber" : 119,
    "endColumnNumber" : 38
  }, {
    "charLength" : 1,
    "startLineNumber" : 128,
    "startColumnNumber" : 37,
    "endLineNumber" : 128,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}