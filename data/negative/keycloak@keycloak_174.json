{
  "id" : 174,
  "expression" : "AuthenticationSessionAuthNoteUpdateEvent.class",
  "projectName" : "keycloak@keycloak",
  "commitID" : "ebfc24d6c105971f00f86d1c96fc0dc2aed45bf9",
  "filePath" : "testsuite/model/src/test/java/org/keycloak/testsuite/model/infinispan/CacheExpirationTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AuthenticationSessionAuthNoteUpdateEvent.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 56,
      "startColumnNumber" : 108,
      "endLineNumber" : 56,
      "endColumnNumber" : 154
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 56,
        "startColumnNumber" : 80,
        "endLineNumber" : 56,
        "endColumnNumber" : 155
      },
      "nodeContext" : "getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 156
      },
      "nodeContext" : "log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 157
      },
      "nodeContext" : "log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4636,
        "startLineNumber" : 54,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 382,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4697,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCacheExpiration() throws Exception {\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 390,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 157
      },
      "nodeContext" : "log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.keycloak.models.cache.infinispan.events.AuthenticationSessionAuthNoteUpdateEvent>"
  }, {
    "nodeContext" : "AuthenticationSessionAuthNoteUpdateEvent.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 70,
      "startColumnNumber" : 81,
      "endLineNumber" : 70,
      "endColumnNumber" : 127
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 70,
        "startColumnNumber" : 53,
        "endLineNumber" : 70,
        "endColumnNumber" : 128
      },
      "nodeContext" : "getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 145
      },
      "nodeContext" : "assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 146
      },
      "nodeContext" : "assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4636,
        "startLineNumber" : 54,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 382,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4697,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCacheExpiration() throws Exception {\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 390,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 146
      },
      "nodeContext" : "assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.keycloak.models.cache.infinispan.events.AuthenticationSessionAuthNoteUpdateEvent>"
  }, {
    "nodeContext" : "AuthenticationSessionAuthNoteUpdateEvent.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 75,
      "startColumnNumber" : 70,
      "endLineNumber" : 75,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 75,
        "startColumnNumber" : 42,
        "endLineNumber" : 75,
        "endColumnNumber" : 117
      },
      "nodeContext" : "getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 117
      },
      "nodeContext" : "instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 118
      },
      "nodeContext" : "Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4636,
        "startLineNumber" : 54,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 382,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4697,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCacheExpiration() throws Exception {\n  log.debugf(\"Number of previous instances of the class on the heap: %d\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class));\n  log.debug(\"Put two events to the main cache\");\n  inComittedTransaction(session -> {\n    InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n    Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n    cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).forEach((c,me) -> c.remove(me.getKey()));\n    cache.put(\"1-2\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g1\",\"p1\",\"r1\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n    cache.put(\"1-2-3\",AuthenticationSessionAuthNoteUpdateEvent.create(\"g2\",\"p2\",\"r2\",Collections.emptyMap()),20000,TimeUnit.MILLISECONDS);\n  }\n);\n  assumeThat(\"jmap output format unsupported\",getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class),notNullValue());\n  Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n  assertThat(instancesAfterInsertion,greaterThanOrEqualTo(2));\n  int previousInstancesOfClass=instancesAfterInsertion - 2;\n  log.debug(\"Expecting instance count to go down to \" + previousInstancesOfClass);\n  log.debug(\"Starting other nodes and see that they join, receive the data and have their data expired\");\n  inIndependentFactories(NUM_EXTRA_FACTORIES,2 * 60,() -> {\n    log.debug(\"Joining the cluster\");\n    inComittedTransaction(session -> {\n      InfinispanConnectionProvider provider=session.getProvider(InfinispanConnectionProvider.class);\n      Cache<String,Object> cache=provider.getCache(InfinispanConnectionProvider.WORK_CACHE_NAME);\n      log.debug(\"Waiting for caches to join the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (!cache.getAdvancedCache().getDistributionManager().isJoinComplete());\n      String site=CONFIG.scope(\"connectionsInfinispan\",\"default\").get(\"siteName\");\n      log.debug(\"Cluster joined \" + site);\n      log.debug(\"Waiting for cache to receive the two elements within the cluster\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (cache.entrySet().stream().filter(me -> me.getValue() instanceof AuthenticationSessionAuthNoteUpdateEvent).count() != 2);\n      assertThat(cache.get(\"1-2\"),notNullValue());\n      assertThat(cache.get(\"1-2-3\"),notNullValue());\n      log.debug(\"Waiting for garbage collection to collect the entries across all caches in JVM\");\n      do {\n        try {\n          Thread.sleep(1000);\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ex);\n        }\n      }\n while (getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class) > previousInstancesOfClass);\n      log.debug(\"Test completed\");\n    }\n);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 390,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 118
      },
      "nodeContext" : "Integer instancesAfterInsertion=getNumberOfInstancesOfClass(AuthenticationSessionAuthNoteUpdateEvent.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.keycloak.models.cache.infinispan.events.AuthenticationSessionAuthNoteUpdateEvent>"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 56,
    "startColumnNumber" : 108,
    "endLineNumber" : 56,
    "endColumnNumber" : 154
  }, {
    "charLength" : 46,
    "startLineNumber" : 70,
    "startColumnNumber" : 81,
    "endLineNumber" : 70,
    "endColumnNumber" : 127
  }, {
    "charLength" : 46,
    "startLineNumber" : 75,
    "startColumnNumber" : 70,
    "endLineNumber" : 75,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}