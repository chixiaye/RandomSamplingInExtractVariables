{
  "id" : 243,
  "expression" : "segmentToPush",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentPusherTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "segmentToPush",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 112,
      "startColumnNumber" : 60,
      "endLineNumber" : 112,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 112,
        "endColumnNumber" : 89
      },
      "nodeContext" : "pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 112,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 89
      },
      "nodeContext" : "segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 90
      },
      "nodeContext" : "DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  OSS client=EasyMock.createStrictMock(OSS.class);\n  EasyMock.expect(client.putObject(EasyMock.anyObject())).andReturn(new PutObjectResult()).once();\n  EasyMock.replay(client);\n  OssStorageConfig config=new OssStorageConfig();\n  config.setBucket(\"bucket\");\n  config.setPrefix(\"key\");\n  OssDataSegmentPusher pusher=new OssDataSegmentPusher(client,config);\n  File tmp=tempFolder.newFile(\"version.bin\");\n  final byte[] data=new byte[]{0x0,0x0,0x0,0x1};\n  Files.write(data,tmp);\n  final long size=data.length;\n  DataSegment segmentToPush=new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size);\n  DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n  Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n  Assert.assertEquals(1,(int)segment.getBinaryVersion());\n  Assert.assertEquals(\"bucket\",segment.getLoadSpec().get(\"bucket\"));\n  Assert.assertTrue(segment.getLoadSpec().get(\"key\").toString(),Pattern.compile(matcher).matcher(segment.getLoadSpec().get(\"key\").toString()).matches());\n  Assert.assertEquals(\"oss_zip\",segment.getLoadSpec().get(\"type\"));\n  EasyMock.verify(client);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testPushInternal(boolean useUniquePath,String matcher) throws Exception {\n  OSS client=EasyMock.createStrictMock(OSS.class);\n  EasyMock.expect(client.putObject(EasyMock.anyObject())).andReturn(new PutObjectResult()).once();\n  EasyMock.replay(client);\n  OssStorageConfig config=new OssStorageConfig();\n  config.setBucket(\"bucket\");\n  config.setPrefix(\"key\");\n  OssDataSegmentPusher pusher=new OssDataSegmentPusher(client,config);\n  File tmp=tempFolder.newFile(\"version.bin\");\n  final byte[] data=new byte[]{0x0,0x0,0x0,0x1};\n  Files.write(data,tmp);\n  final long size=data.length;\n  DataSegment segmentToPush=new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size);\n  DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n  Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n  Assert.assertEquals(1,(int)segment.getBinaryVersion());\n  Assert.assertEquals(\"bucket\",segment.getLoadSpec().get(\"bucket\"));\n  Assert.assertTrue(segment.getLoadSpec().get(\"key\").toString(),Pattern.compile(matcher).matcher(segment.getLoadSpec().get(\"key\").toString()).matches());\n  Assert.assertEquals(\"oss_zip\",segment.getLoadSpec().get(\"type\"));\n  EasyMock.verify(client);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 90
      },
      "nodeContext" : "DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.timeline.DataSegment"
  }, {
    "nodeContext" : "segmentToPush",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 114,
      "startColumnNumber" : 24,
      "endLineNumber" : 114,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 114,
        "startColumnNumber" : 24,
        "endLineNumber" : 114,
        "endColumnNumber" : 47
      },
      "nodeContext" : "segmentToPush.getSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(segmentToPush.getSize(),segment.getSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  OSS client=EasyMock.createStrictMock(OSS.class);\n  EasyMock.expect(client.putObject(EasyMock.anyObject())).andReturn(new PutObjectResult()).once();\n  EasyMock.replay(client);\n  OssStorageConfig config=new OssStorageConfig();\n  config.setBucket(\"bucket\");\n  config.setPrefix(\"key\");\n  OssDataSegmentPusher pusher=new OssDataSegmentPusher(client,config);\n  File tmp=tempFolder.newFile(\"version.bin\");\n  final byte[] data=new byte[]{0x0,0x0,0x0,0x1};\n  Files.write(data,tmp);\n  final long size=data.length;\n  DataSegment segmentToPush=new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size);\n  DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n  Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n  Assert.assertEquals(1,(int)segment.getBinaryVersion());\n  Assert.assertEquals(\"bucket\",segment.getLoadSpec().get(\"bucket\"));\n  Assert.assertTrue(segment.getLoadSpec().get(\"key\").toString(),Pattern.compile(matcher).matcher(segment.getLoadSpec().get(\"key\").toString()).matches());\n  Assert.assertEquals(\"oss_zip\",segment.getLoadSpec().get(\"type\"));\n  EasyMock.verify(client);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testPushInternal(boolean useUniquePath,String matcher) throws Exception {\n  OSS client=EasyMock.createStrictMock(OSS.class);\n  EasyMock.expect(client.putObject(EasyMock.anyObject())).andReturn(new PutObjectResult()).once();\n  EasyMock.replay(client);\n  OssStorageConfig config=new OssStorageConfig();\n  config.setBucket(\"bucket\");\n  config.setPrefix(\"key\");\n  OssDataSegmentPusher pusher=new OssDataSegmentPusher(client,config);\n  File tmp=tempFolder.newFile(\"version.bin\");\n  final byte[] data=new byte[]{0x0,0x0,0x0,0x1};\n  Files.write(data,tmp);\n  final long size=data.length;\n  DataSegment segmentToPush=new DataSegment(\"foo\",Intervals.of(\"2015/2016\"),\"0\",new HashMap<>(),new ArrayList<>(),new ArrayList<>(),NoneShardSpec.instance(),0,size);\n  DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush,useUniquePath);\n  Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n  Assert.assertEquals(1,(int)segment.getBinaryVersion());\n  Assert.assertEquals(\"bucket\",segment.getLoadSpec().get(\"bucket\"));\n  Assert.assertTrue(segment.getLoadSpec().get(\"key\").toString(),Pattern.compile(matcher).matcher(segment.getLoadSpec().get(\"key\").toString()).matches());\n  Assert.assertEquals(\"oss_zip\",segment.getLoadSpec().get(\"type\"));\n  EasyMock.verify(client);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(segmentToPush.getSize(),segment.getSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.timeline.DataSegment"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 112,
    "startColumnNumber" : 60,
    "endLineNumber" : 112,
    "endColumnNumber" : 73
  }, {
    "charLength" : 13,
    "startLineNumber" : 114,
    "startColumnNumber" : 24,
    "endLineNumber" : 114,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}