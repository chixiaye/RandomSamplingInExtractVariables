{
  "id" : 496,
  "expression" : "jweStr",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/AuthorizationTokenEncryptionTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "jweStr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 193,
      "startColumnNumber" : 29,
      "endLineNumber" : 193,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 193,
        "startColumnNumber" : 29,
        "endLineNumber" : 193,
        "endColumnNumber" : 48
      },
      "nodeContext" : "jweStr.split(\"\\\\.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 193,
        "startColumnNumber" : 21,
        "endLineNumber" : 193,
        "endColumnNumber" : 48
      },
      "nodeContext" : "parts=jweStr.split(\"\\\\.\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 49
      },
      "nodeContext" : "String[] parts=jweStr.split(\"\\\\.\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3126,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  oauth.responseMode(\"jwt\");\n  oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String jweStr=response.getResponse();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String authorizationTokenString=new String(decodedString,\"UTF-8\");\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n  Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n  Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n  Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4113,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  oauth.responseMode(\"jwt\");\n  oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String jweStr=response.getResponse();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String authorizationTokenString=new String(decodedString,\"UTF-8\");\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n  Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n  Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n  Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 339,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4208,
        "startLineNumber" : 166,
        "startColumnNumber" : 125,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource;\n  ClientRepresentation clientRep;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    oauth.responseMode(\"jwt\");\n    oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String jweStr=response.getResponse();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String authorizationTokenString=new String(decodedString,\"UTF-8\");\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n    Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n    Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n    Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4329,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testAuthorizationTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource;\n  ClientRepresentation clientRep;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    oauth.responseMode(\"jwt\");\n    oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String jweStr=response.getResponse();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String authorizationTokenString=new String(decodedString,\"UTF-8\");\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n    Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n    Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n    Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 49
      },
      "nodeContext" : "String[] parts=jweStr.split(\"\\\\.\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "jweStr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 204,
      "startColumnNumber" : 92,
      "endLineNumber" : 204,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 204,
        "startColumnNumber" : 35,
        "endLineNumber" : 204,
        "endColumnNumber" : 138
      },
      "nodeContext" : "TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 204,
        "startColumnNumber" : 19,
        "endLineNumber" : 204,
        "endColumnNumber" : 138
      },
      "nodeContext" : "decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 139
      },
      "nodeContext" : "byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3126,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  oauth.responseMode(\"jwt\");\n  oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String jweStr=response.getResponse();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String authorizationTokenString=new String(decodedString,\"UTF-8\");\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n  Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n  Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n  Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4113,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  oauth.responseMode(\"jwt\");\n  oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String jweStr=response.getResponse();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String authorizationTokenString=new String(decodedString,\"UTF-8\");\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n  Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n  Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n  Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 339,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4208,
        "startLineNumber" : 166,
        "startColumnNumber" : 125,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource;\n  ClientRepresentation clientRep;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    oauth.responseMode(\"jwt\");\n    oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String jweStr=response.getResponse();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String authorizationTokenString=new String(decodedString,\"UTF-8\");\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n    Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n    Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n    Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4329,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testAuthorizationTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource;\n  ClientRepresentation clientRep;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    oauth.responseMode(\"jwt\");\n    oauth.stateParamHardcoded(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\");\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String jweStr=response.getResponse();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String authorizationTokenString=new String(decodedString,\"UTF-8\");\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    AuthorizationResponseToken authorizationToken=oauth.verifyAuthorizationResponseToken(authorizationTokenString);\n    Assert.assertEquals(\"test-app\",authorizationToken.getAudience()[0]);\n    Assert.assertEquals(\"OpenIdConnect.AuthenticationProperties=2302984sdlk\",authorizationToken.getOtherClaims().get(\"state\"));\n    Assert.assertNotNull(authorizationToken.getOtherClaims().get(\"code\"));\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setAuthorizationEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 139
      },
      "nodeContext" : "byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 193,
    "startColumnNumber" : 29,
    "endLineNumber" : 193,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 204,
    "startColumnNumber" : 92,
    "endLineNumber" : 204,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}