{
  "id" : 140,
  "expression" : "tmpV2.set(node.getVolume().Extents())",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/OcclusionCuller.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tmpV2.set(node.getVolume().Extents())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 71,
      "startColumnNumber" : 68,
      "endLineNumber" : 71,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 106
      },
      "nodeContext" : "oclBuffer.queryAABB(tmpV1.set(node.getVolume().Center()),tmpV2.set(node.getVolume().Extents()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return oclBuffer.queryAABB(tmpV1.set(node.getVolume().Center()),tmpV2.set(node.getVolume().Extents()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 70,
        "startColumnNumber" : 43,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return oclBuffer.queryAABB(tmpV1.set(node.getVolume().Center()),tmpV2.set(node.getVolume().Extents()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Callback for  {@link btDbvt#collideOCL}. This method must check if the input node from the broadphase bounding volume tree is completely occluded by an occluder node previously rendered by  {@link #Process(btDbvtNode,float)}. <p> The node may or may not be a leaf node, i.e. may or may not contain a single collision object. If the node is not a leaf (i.e. an internal node), and the node is occluded, the child nodes it contains will not be processed or checked for occlusion, since they are contained in this parent node bounding volume and must therefore also be occluded.\n * @param node A node from the broadphase bounding volume tree.\n * @return False if the node is completely occluded, true otherwise. \n */\n@Override public boolean Descent(btDbvtNode node){\n  return oclBuffer.queryAABB(tmpV1.set(node.getVolume().Center()),tmpV2.set(node.getVolume().Extents()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 32,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 71,
        "startColumnNumber" : 3,
        "endLineNumber" : 71,
        "endColumnNumber" : 107
      },
      "nodeContext" : "return oclBuffer.queryAABB(tmpV1.set(node.getVolume().Center()),tmpV2.set(node.getVolume().Extents()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "com.badlogic.gdx.math.Vector3"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 71,
    "startColumnNumber" : 68,
    "endLineNumber" : 71,
    "endColumnNumber" : 105
  } ],
  "layoutRelationDataList" : [ ]
}