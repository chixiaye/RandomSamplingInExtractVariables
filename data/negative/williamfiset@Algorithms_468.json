{
  "id" : 468,
  "expression" : "i < optimalTour.length",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/TspBruteForce.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < optimalTour.length",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 92,
      "startColumnNumber" : 20,
      "endLineNumber" : 92,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 60
      },
      "nodeContext" : "for (int i=1; i < optimalTour.length; i++) matrix[optimalTour[i - 1]][optimalTour[i]]=edgeCost;\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 83,
        "startColumnNumber" : 41,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  double[][] matrix=new double[n][n];\n  for (  double[] row : matrix)   java.util.Arrays.fill(row,100);\n  int edgeCost=5;\n  int[] optimalTour={2,7,6,1,9,8,5,3,4,0,2};\n  for (int i=1; i < optimalTour.length; i++)   matrix[optimalTour[i - 1]][optimalTour[i]]=edgeCost;\n  int[] bestTour=tsp(matrix);\n  System.out.println(java.util.Arrays.toString(bestTour));\n  double tourCost=computeTourCost(bestTour,matrix);\n  System.out.println(\"Tour cost: \" + tourCost);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=10;\n  double[][] matrix=new double[n][n];\n  for (  double[] row : matrix)   java.util.Arrays.fill(row,100);\n  int edgeCost=5;\n  int[] optimalTour={2,7,6,1,9,8,5,3,4,0,2};\n  for (int i=1; i < optimalTour.length; i++)   matrix[optimalTour[i - 1]][optimalTour[i]]=edgeCost;\n  int[] bestTour=tsp(matrix);\n  System.out.println(java.util.Arrays.toString(bestTour));\n  double tourCost=computeTourCost(bestTour,matrix);\n  System.out.println(\"Tour cost: \" + tourCost);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 60
      },
      "nodeContext" : "for (int i=1; i < optimalTour.length; i++) matrix[optimalTour[i - 1]][optimalTour[i]]=edgeCost;\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 92,
    "startColumnNumber" : 20,
    "endLineNumber" : 92,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}