{
  "id" : 516,
  "expression" : "s.contains(\"bar_-bar\")",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/test/java/jenkins/util/xstream/XStreamDOMTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "s.contains(\"bar_-bar\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 202,
      "startColumnNumber" : 19,
      "endLineNumber" : 202,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertTrue(s.contains(\"bar_-bar\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertTrue(s.contains(\"bar_-bar\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 186,
        "startColumnNumber" : 50,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String input=getTestData(\"XStreamDOMTest.data3.xml\");\n  XStreamDOM dom=XStreamDOM.from(new StringReader(input));\n  List<XStreamDOM> children=dom.getChildren().get(0).getChildren().get(0).getChildren();\n  assertNamesAreEscaped(children);\n  Foo foo=(Foo)xs.fromXML(new StringReader(input));\n  assertNamesAreEscaped(foo.bar.getChildren());\n  StringWriter sw=new StringWriter();\n  dom.writeTo(sw);\n  assertTrue(sw.toString().contains(\"bar_-bar\"));\n  assertTrue(sw.toString().contains(\"zot__bar\"));\n  String s=xs.toXML(foo);\n  assertTrue(s.contains(\"bar_-bar\"));\n  assertTrue(s.contains(\"zot__bar\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Regardless of how we read XML into XStreamDOM, XStreamDOM should retain the raw XML infoset, which means escaped names.\n */\n@Test public void escapeHandling() throws Exception {\n  String input=getTestData(\"XStreamDOMTest.data3.xml\");\n  XStreamDOM dom=XStreamDOM.from(new StringReader(input));\n  List<XStreamDOM> children=dom.getChildren().get(0).getChildren().get(0).getChildren();\n  assertNamesAreEscaped(children);\n  Foo foo=(Foo)xs.fromXML(new StringReader(input));\n  assertNamesAreEscaped(foo.bar.getChildren());\n  StringWriter sw=new StringWriter();\n  dom.writeTo(sw);\n  assertTrue(sw.toString().contains(\"bar_-bar\"));\n  assertTrue(sw.toString().contains(\"zot__bar\"));\n  String s=xs.toXML(foo);\n  assertTrue(s.contains(\"bar_-bar\"));\n  assertTrue(s.contains(\"zot__bar\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertTrue(s.contains(\"bar_-bar\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 202,
    "startColumnNumber" : 19,
    "endLineNumber" : 202,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}