{
  "id" : 434,
  "expression" : "worker",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/initializer/InfinispanCacheInitializer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 157,
      "startColumnNumber" : 20,
      "endLineNumber" : 157,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 105
      },
      "nodeContext" : "worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 106
      },
      "nodeContext" : "worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 153,
        "startColumnNumber" : 49,
        "endLineNumber" : 170,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n  SessionInitializerWorker worker=new SessionInitializerWorker();\n  worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n  completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n    log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n    if (throwable != null) {\n      throw new CacheException(throwable);\n    }\n    results.add(workerResult);\n  }\n);\n  futures.add(completableFuture);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 153,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Integer segment : segments) {\n  SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n  SessionInitializerWorker worker=new SessionInitializerWorker();\n  worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n  completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n    log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n    if (throwable != null) {\n      throw new CacheException(throwable);\n    }\n    results.add(workerResult);\n  }\n);\n  futures.add(completableFuture);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4289,
        "startLineNumber" : 134,
        "startColumnNumber" : 61,
        "endLineNumber" : 222,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (firstTryForSegment) {\n    int nodesCount=transport == null ? 1 : transport.getMembers().size();\n    distributedWorkersCount=processors * nodesCount;\n  }\n  log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n  List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n  if (log.isTraceEnabled()) {\n    log.trace(\"unfinished segments for this iteration: \" + segments);\n  }\n  List<CompletableFuture<Void>> futures=new LinkedList<>();\n  final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n  CompletableFuture<Void> completableFuture=null;\n  for (  Integer segment : segments) {\n    SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n    SessionInitializerWorker worker=new SessionInitializerWorker();\n    worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n    completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n      log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n      if (throwable != null) {\n        throw new CacheException(throwable);\n      }\n      results.add(workerResult);\n    }\n);\n    futures.add(completableFuture);\n  }\n  boolean anyFailure=false;\n  for (  CompletableFuture<Void> future : futures) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException ie) {\n      anyFailure=true;\n      errors++;\n      log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n    }\ncatch (    ExecutionException ee) {\n      anyFailure=true;\n      errors++;\n      log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n    }\n  }\n  for (  SessionLoader.WorkerResult result : results) {\n    if (result.isSuccess()) {\n      state.markSegmentFinished(result.getSegment());\n      if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n        nextResult=result;\n      }\n    }\n else {\n      if (log.isTraceEnabled()) {\n        log.tracef(\"Segment %d failed to compute\",result.getSegment());\n      }\n      anyFailure=true;\n    }\n  }\n  if (errors >= maxErrors) {\n    throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n  }\n  if (!anyFailure) {\n    segmentToLoad+=distributedWorkersCount;\n    firstTryForSegment=true;\n    previousResult=nextResult;\n    nextResult=null;\n    if (log.isTraceEnabled()) {\n      log.debugf(\"New initializer state is: %s\",state);\n    }\n  }\n else {\n    firstTryForSegment=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4338,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (segmentToLoad < state.getSegmentsCount()) {\n  if (firstTryForSegment) {\n    int nodesCount=transport == null ? 1 : transport.getMembers().size();\n    distributedWorkersCount=processors * nodesCount;\n  }\n  log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n  List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n  if (log.isTraceEnabled()) {\n    log.trace(\"unfinished segments for this iteration: \" + segments);\n  }\n  List<CompletableFuture<Void>> futures=new LinkedList<>();\n  final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n  CompletableFuture<Void> completableFuture=null;\n  for (  Integer segment : segments) {\n    SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n    SessionInitializerWorker worker=new SessionInitializerWorker();\n    worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n    completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n      log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n      if (throwable != null) {\n        throw new CacheException(throwable);\n      }\n      results.add(workerResult);\n    }\n);\n    futures.add(completableFuture);\n  }\n  boolean anyFailure=false;\n  for (  CompletableFuture<Void> future : futures) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException ie) {\n      anyFailure=true;\n      errors++;\n      log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n    }\ncatch (    ExecutionException ee) {\n      anyFailure=true;\n      errors++;\n      log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n    }\n  }\n  for (  SessionLoader.WorkerResult result : results) {\n    if (result.isSuccess()) {\n      state.markSegmentFinished(result.getSegment());\n      if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n        nextResult=result;\n      }\n    }\n else {\n      if (log.isTraceEnabled()) {\n        log.tracef(\"Segment %d failed to compute\",result.getSegment());\n      }\n      anyFailure=true;\n    }\n  }\n  if (errors >= maxErrors) {\n    throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n  }\n  if (!anyFailure) {\n    segmentToLoad+=distributedWorkersCount;\n    firstTryForSegment=true;\n    previousResult=nextResult;\n    nextResult=null;\n    if (log.isTraceEnabled()) {\n      log.debugf(\"New initializer state is: %s\",state);\n    }\n  }\n else {\n    firstTryForSegment=false;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 364,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5332,
        "startLineNumber" : 115,
        "startColumnNumber" : 99,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int processors=Runtime.getRuntime().availableProcessors();\n  Transport transport=workCache.getCacheManager().getTransport();\n  ClusterExecutor clusterExecutor=workCache.getCacheManager().executor().singleNodeSubmission(3);\n  int errors=0;\n  int segmentToLoad=0;\n  SessionLoader.WorkerResult previousResult=null;\n  SessionLoader.WorkerResult nextResult=null;\n  int distributedWorkersCount=0;\n  boolean firstTryForSegment=true;\n  while (segmentToLoad < state.getSegmentsCount()) {\n    if (firstTryForSegment) {\n      int nodesCount=transport == null ? 1 : transport.getMembers().size();\n      distributedWorkersCount=processors * nodesCount;\n    }\n    log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n    List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n    if (log.isTraceEnabled()) {\n      log.trace(\"unfinished segments for this iteration: \" + segments);\n    }\n    List<CompletableFuture<Void>> futures=new LinkedList<>();\n    final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n    CompletableFuture<Void> completableFuture=null;\n    for (    Integer segment : segments) {\n      SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n      SessionInitializerWorker worker=new SessionInitializerWorker();\n      worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n      completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n        log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n        if (throwable != null) {\n          throw new CacheException(throwable);\n        }\n        results.add(workerResult);\n      }\n);\n      futures.add(completableFuture);\n    }\n    boolean anyFailure=false;\n    for (    CompletableFuture<Void> future : futures) {\n      try {\n        future.get();\n      }\n catch (      InterruptedException ie) {\n        anyFailure=true;\n        errors++;\n        log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n      }\ncatch (      ExecutionException ee) {\n        anyFailure=true;\n        errors++;\n        log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n      }\n    }\n    for (    SessionLoader.WorkerResult result : results) {\n      if (result.isSuccess()) {\n        state.markSegmentFinished(result.getSegment());\n        if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n          nextResult=result;\n        }\n      }\n else {\n        if (log.isTraceEnabled()) {\n          log.tracef(\"Segment %d failed to compute\",result.getSegment());\n        }\n        anyFailure=true;\n      }\n    }\n    if (errors >= maxErrors) {\n      throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n    }\n    if (!anyFailure) {\n      segmentToLoad+=distributedWorkersCount;\n      firstTryForSegment=true;\n      previousResult=nextResult;\n      nextResult=null;\n      if (log.isTraceEnabled()) {\n        log.debugf(\"New initializer state is: %s\",state);\n      }\n    }\n else {\n      firstTryForSegment=false;\n    }\n  }\n  saveStateToCache(state);\n  this.sessionLoader.afterAllSessionsLoaded(this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 444,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5427,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void startLoadingImpl(InitializerState state,SessionLoader.LoaderContext loaderCtx){\n  int processors=Runtime.getRuntime().availableProcessors();\n  Transport transport=workCache.getCacheManager().getTransport();\n  ClusterExecutor clusterExecutor=workCache.getCacheManager().executor().singleNodeSubmission(3);\n  int errors=0;\n  int segmentToLoad=0;\n  SessionLoader.WorkerResult previousResult=null;\n  SessionLoader.WorkerResult nextResult=null;\n  int distributedWorkersCount=0;\n  boolean firstTryForSegment=true;\n  while (segmentToLoad < state.getSegmentsCount()) {\n    if (firstTryForSegment) {\n      int nodesCount=transport == null ? 1 : transport.getMembers().size();\n      distributedWorkersCount=processors * nodesCount;\n    }\n    log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n    List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n    if (log.isTraceEnabled()) {\n      log.trace(\"unfinished segments for this iteration: \" + segments);\n    }\n    List<CompletableFuture<Void>> futures=new LinkedList<>();\n    final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n    CompletableFuture<Void> completableFuture=null;\n    for (    Integer segment : segments) {\n      SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n      SessionInitializerWorker worker=new SessionInitializerWorker();\n      worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n      completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n        log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n        if (throwable != null) {\n          throw new CacheException(throwable);\n        }\n        results.add(workerResult);\n      }\n);\n      futures.add(completableFuture);\n    }\n    boolean anyFailure=false;\n    for (    CompletableFuture<Void> future : futures) {\n      try {\n        future.get();\n      }\n catch (      InterruptedException ie) {\n        anyFailure=true;\n        errors++;\n        log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n      }\ncatch (      ExecutionException ee) {\n        anyFailure=true;\n        errors++;\n        log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n      }\n    }\n    for (    SessionLoader.WorkerResult result : results) {\n      if (result.isSuccess()) {\n        state.markSegmentFinished(result.getSegment());\n        if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n          nextResult=result;\n        }\n      }\n else {\n        if (log.isTraceEnabled()) {\n          log.tracef(\"Segment %d failed to compute\",result.getSegment());\n        }\n        anyFailure=true;\n      }\n    }\n    if (errors >= maxErrors) {\n      throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n    }\n    if (!anyFailure) {\n      segmentToLoad+=distributedWorkersCount;\n      firstTryForSegment=true;\n      previousResult=nextResult;\n      nextResult=null;\n      if (log.isTraceEnabled()) {\n        log.debugf(\"New initializer state is: %s\",state);\n      }\n    }\n else {\n      firstTryForSegment=false;\n    }\n  }\n  saveStateToCache(state);\n  this.sessionLoader.afterAllSessionsLoaded(this);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 106
      },
      "nodeContext" : "worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.sessions.infinispan.initializer.SessionInitializerWorker"
  }, {
    "nodeContext" : "worker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 159,
      "startColumnNumber" : 71,
      "endLineNumber" : 159,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 159,
        "startColumnNumber" : 40,
        "endLineNumber" : 167,
        "endColumnNumber" : 22
      },
      "nodeContext" : "clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n  log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n  if (throwable != null) {\n    throw new CacheException(throwable);\n  }\n  results.add(workerResult);\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 159,
        "startColumnNumber" : 20,
        "endLineNumber" : 167,
        "endColumnNumber" : 22
      },
      "nodeContext" : "completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n  log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n  if (throwable != null) {\n    throw new CacheException(throwable);\n  }\n  results.add(workerResult);\n}\n)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 159,
        "startColumnNumber" : 20,
        "endLineNumber" : 167,
        "endColumnNumber" : 23
      },
      "nodeContext" : "completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n  log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n  if (throwable != null) {\n    throw new CacheException(throwable);\n  }\n  results.add(workerResult);\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 153,
        "startColumnNumber" : 49,
        "endLineNumber" : 170,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n  SessionInitializerWorker worker=new SessionInitializerWorker();\n  worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n  completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n    log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n    if (throwable != null) {\n      throw new CacheException(throwable);\n    }\n    results.add(workerResult);\n  }\n);\n  futures.add(completableFuture);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 153,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Integer segment : segments) {\n  SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n  SessionInitializerWorker worker=new SessionInitializerWorker();\n  worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n  completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n    log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n    if (throwable != null) {\n      throw new CacheException(throwable);\n    }\n    results.add(workerResult);\n  }\n);\n  futures.add(completableFuture);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4289,
        "startLineNumber" : 134,
        "startColumnNumber" : 61,
        "endLineNumber" : 222,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (firstTryForSegment) {\n    int nodesCount=transport == null ? 1 : transport.getMembers().size();\n    distributedWorkersCount=processors * nodesCount;\n  }\n  log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n  List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n  if (log.isTraceEnabled()) {\n    log.trace(\"unfinished segments for this iteration: \" + segments);\n  }\n  List<CompletableFuture<Void>> futures=new LinkedList<>();\n  final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n  CompletableFuture<Void> completableFuture=null;\n  for (  Integer segment : segments) {\n    SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n    SessionInitializerWorker worker=new SessionInitializerWorker();\n    worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n    completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n      log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n      if (throwable != null) {\n        throw new CacheException(throwable);\n      }\n      results.add(workerResult);\n    }\n);\n    futures.add(completableFuture);\n  }\n  boolean anyFailure=false;\n  for (  CompletableFuture<Void> future : futures) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException ie) {\n      anyFailure=true;\n      errors++;\n      log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n    }\ncatch (    ExecutionException ee) {\n      anyFailure=true;\n      errors++;\n      log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n    }\n  }\n  for (  SessionLoader.WorkerResult result : results) {\n    if (result.isSuccess()) {\n      state.markSegmentFinished(result.getSegment());\n      if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n        nextResult=result;\n      }\n    }\n else {\n      if (log.isTraceEnabled()) {\n        log.tracef(\"Segment %d failed to compute\",result.getSegment());\n      }\n      anyFailure=true;\n    }\n  }\n  if (errors >= maxErrors) {\n    throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n  }\n  if (!anyFailure) {\n    segmentToLoad+=distributedWorkersCount;\n    firstTryForSegment=true;\n    previousResult=nextResult;\n    nextResult=null;\n    if (log.isTraceEnabled()) {\n      log.debugf(\"New initializer state is: %s\",state);\n    }\n  }\n else {\n    firstTryForSegment=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4338,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (segmentToLoad < state.getSegmentsCount()) {\n  if (firstTryForSegment) {\n    int nodesCount=transport == null ? 1 : transport.getMembers().size();\n    distributedWorkersCount=processors * nodesCount;\n  }\n  log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n  List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n  if (log.isTraceEnabled()) {\n    log.trace(\"unfinished segments for this iteration: \" + segments);\n  }\n  List<CompletableFuture<Void>> futures=new LinkedList<>();\n  final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n  CompletableFuture<Void> completableFuture=null;\n  for (  Integer segment : segments) {\n    SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n    SessionInitializerWorker worker=new SessionInitializerWorker();\n    worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n    completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n      log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n      if (throwable != null) {\n        throw new CacheException(throwable);\n      }\n      results.add(workerResult);\n    }\n);\n    futures.add(completableFuture);\n  }\n  boolean anyFailure=false;\n  for (  CompletableFuture<Void> future : futures) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException ie) {\n      anyFailure=true;\n      errors++;\n      log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n    }\ncatch (    ExecutionException ee) {\n      anyFailure=true;\n      errors++;\n      log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n    }\n  }\n  for (  SessionLoader.WorkerResult result : results) {\n    if (result.isSuccess()) {\n      state.markSegmentFinished(result.getSegment());\n      if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n        nextResult=result;\n      }\n    }\n else {\n      if (log.isTraceEnabled()) {\n        log.tracef(\"Segment %d failed to compute\",result.getSegment());\n      }\n      anyFailure=true;\n    }\n  }\n  if (errors >= maxErrors) {\n    throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n  }\n  if (!anyFailure) {\n    segmentToLoad+=distributedWorkersCount;\n    firstTryForSegment=true;\n    previousResult=nextResult;\n    nextResult=null;\n    if (log.isTraceEnabled()) {\n      log.debugf(\"New initializer state is: %s\",state);\n    }\n  }\n else {\n    firstTryForSegment=false;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 364,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5332,
        "startLineNumber" : 115,
        "startColumnNumber" : 99,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int processors=Runtime.getRuntime().availableProcessors();\n  Transport transport=workCache.getCacheManager().getTransport();\n  ClusterExecutor clusterExecutor=workCache.getCacheManager().executor().singleNodeSubmission(3);\n  int errors=0;\n  int segmentToLoad=0;\n  SessionLoader.WorkerResult previousResult=null;\n  SessionLoader.WorkerResult nextResult=null;\n  int distributedWorkersCount=0;\n  boolean firstTryForSegment=true;\n  while (segmentToLoad < state.getSegmentsCount()) {\n    if (firstTryForSegment) {\n      int nodesCount=transport == null ? 1 : transport.getMembers().size();\n      distributedWorkersCount=processors * nodesCount;\n    }\n    log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n    List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n    if (log.isTraceEnabled()) {\n      log.trace(\"unfinished segments for this iteration: \" + segments);\n    }\n    List<CompletableFuture<Void>> futures=new LinkedList<>();\n    final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n    CompletableFuture<Void> completableFuture=null;\n    for (    Integer segment : segments) {\n      SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n      SessionInitializerWorker worker=new SessionInitializerWorker();\n      worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n      completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n        log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n        if (throwable != null) {\n          throw new CacheException(throwable);\n        }\n        results.add(workerResult);\n      }\n);\n      futures.add(completableFuture);\n    }\n    boolean anyFailure=false;\n    for (    CompletableFuture<Void> future : futures) {\n      try {\n        future.get();\n      }\n catch (      InterruptedException ie) {\n        anyFailure=true;\n        errors++;\n        log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n      }\ncatch (      ExecutionException ee) {\n        anyFailure=true;\n        errors++;\n        log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n      }\n    }\n    for (    SessionLoader.WorkerResult result : results) {\n      if (result.isSuccess()) {\n        state.markSegmentFinished(result.getSegment());\n        if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n          nextResult=result;\n        }\n      }\n else {\n        if (log.isTraceEnabled()) {\n          log.tracef(\"Segment %d failed to compute\",result.getSegment());\n        }\n        anyFailure=true;\n      }\n    }\n    if (errors >= maxErrors) {\n      throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n    }\n    if (!anyFailure) {\n      segmentToLoad+=distributedWorkersCount;\n      firstTryForSegment=true;\n      previousResult=nextResult;\n      nextResult=null;\n      if (log.isTraceEnabled()) {\n        log.debugf(\"New initializer state is: %s\",state);\n      }\n    }\n else {\n      firstTryForSegment=false;\n    }\n  }\n  saveStateToCache(state);\n  this.sessionLoader.afterAllSessionsLoaded(this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 444,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5427,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void startLoadingImpl(InitializerState state,SessionLoader.LoaderContext loaderCtx){\n  int processors=Runtime.getRuntime().availableProcessors();\n  Transport transport=workCache.getCacheManager().getTransport();\n  ClusterExecutor clusterExecutor=workCache.getCacheManager().executor().singleNodeSubmission(3);\n  int errors=0;\n  int segmentToLoad=0;\n  SessionLoader.WorkerResult previousResult=null;\n  SessionLoader.WorkerResult nextResult=null;\n  int distributedWorkersCount=0;\n  boolean firstTryForSegment=true;\n  while (segmentToLoad < state.getSegmentsCount()) {\n    if (firstTryForSegment) {\n      int nodesCount=transport == null ? 1 : transport.getMembers().size();\n      distributedWorkersCount=processors * nodesCount;\n    }\n    log.debugf(\"Starting next iteration with %d workers\",distributedWorkersCount);\n    List<Integer> segments=state.getSegmentsToLoad(segmentToLoad,distributedWorkersCount);\n    if (log.isTraceEnabled()) {\n      log.trace(\"unfinished segments for this iteration: \" + segments);\n    }\n    List<CompletableFuture<Void>> futures=new LinkedList<>();\n    final Queue<SessionLoader.WorkerResult> results=new ConcurrentLinkedQueue<>();\n    CompletableFuture<Void> completableFuture=null;\n    for (    Integer segment : segments) {\n      SessionLoader.WorkerContext workerCtx=sessionLoader.computeWorkerContext(loaderCtx,segment,segment - segmentToLoad,previousResult);\n      SessionInitializerWorker worker=new SessionInitializerWorker();\n      worker.setWorkerEnvironment(loaderCtx,workerCtx,sessionLoader,workCache.getName());\n      completableFuture=clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n        log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n        if (throwable != null) {\n          throw new CacheException(throwable);\n        }\n        results.add(workerResult);\n      }\n);\n      futures.add(completableFuture);\n    }\n    boolean anyFailure=false;\n    for (    CompletableFuture<Void> future : futures) {\n      try {\n        future.get();\n      }\n catch (      InterruptedException ie) {\n        anyFailure=true;\n        errors++;\n        log.error(\"Interruped exception when computed future. Errors: \" + errors,ie);\n      }\ncatch (      ExecutionException ee) {\n        anyFailure=true;\n        errors++;\n        log.error(\"ExecutionException when computed future. Errors: \" + errors,ee);\n      }\n    }\n    for (    SessionLoader.WorkerResult result : results) {\n      if (result.isSuccess()) {\n        state.markSegmentFinished(result.getSegment());\n        if (result.getSegment() == segmentToLoad + distributedWorkersCount - 1) {\n          nextResult=result;\n        }\n      }\n else {\n        if (log.isTraceEnabled()) {\n          log.tracef(\"Segment %d failed to compute\",result.getSegment());\n        }\n        anyFailure=true;\n      }\n    }\n    if (errors >= maxErrors) {\n      throw new RuntimeException(\"Maximum count of worker errors occured. Limit was \" + maxErrors + \". See server.log for details\");\n    }\n    if (!anyFailure) {\n      segmentToLoad+=distributedWorkersCount;\n      firstTryForSegment=true;\n      previousResult=nextResult;\n      nextResult=null;\n      if (log.isTraceEnabled()) {\n        log.debugf(\"New initializer state is: %s\",state);\n      }\n    }\n else {\n      firstTryForSegment=false;\n    }\n  }\n  saveStateToCache(state);\n  this.sessionLoader.afterAllSessionsLoaded(this);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 159,
        "startColumnNumber" : 40,
        "endLineNumber" : 167,
        "endColumnNumber" : 22
      },
      "nodeContext" : "clusterExecutor.submitConsumer(worker,(address,workerResult,throwable) -> {\n  log.tracef(\"Calling triConsumer on address %s, throwable message: %s, segment: %s\",address,throwable == null ? \"null\" : throwable.getMessage(),workerResult == null ? null : workerResult.getSegment());\n  if (throwable != null) {\n    throw new CacheException(throwable);\n  }\n  results.add(workerResult);\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.sessions.infinispan.initializer.SessionInitializerWorker"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 157,
    "startColumnNumber" : 20,
    "endLineNumber" : 157,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 159,
    "startColumnNumber" : 71,
    "endLineNumber" : 159,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}