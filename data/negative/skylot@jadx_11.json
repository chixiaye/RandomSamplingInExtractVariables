{
  "id" : 11,
  "expression" : "passes",
  "projectName" : "skylot@jadx",
  "commitID" : "cf79a519d3f7fbd6d260eeaead449b473ce76698",
  "filePath" : "jadx-core/src/test/java/jadx/tests/functional/JadxVisitorsOrderTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "passes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 36,
      "startColumnNumber" : 45,
      "endLineNumber" : 36,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 36,
        "startColumnNumber" : 45,
        "endLineNumber" : 36,
        "endColumnNumber" : 58
      },
      "nodeContext" : "passes.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 29,
        "endLineNumber" : 36,
        "endColumnNumber" : 59
      },
      "nodeContext" : "new ArrayList<>(passes.size())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 36,
        "startColumnNumber" : 17,
        "endLineNumber" : 36,
        "endColumnNumber" : 59
      },
      "nodeContext" : "classList=new ArrayList<>(passes.size())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 60
      },
      "nodeContext" : "List<Class<?>> classList=new ArrayList<>(passes.size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 60
      },
      "nodeContext" : "List<Class<?>> classList=new ArrayList<>(passes.size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<jadx.core.dex.visitors.IDexTreeVisitor>"
  }, {
    "nodeContext" : "passes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 37,
      "startColumnNumber" : 30,
      "endLineNumber" : 37,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (IDexTreeVisitor pass : passes) {\n  classList.add(pass.getClass());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (IDexTreeVisitor pass : passes) {\n  classList.add(pass.getClass());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<jadx.core.dex.visitors.IDexTreeVisitor>"
  }, {
    "nodeContext" : "passes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 44,
      "startColumnNumber" : 22,
      "endLineNumber" : 44,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 44,
        "startColumnNumber" : 22,
        "endLineNumber" : 44,
        "endColumnNumber" : 35
      },
      "nodeContext" : "passes.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 18,
        "endLineNumber" : 44,
        "endColumnNumber" : 35
      },
      "nodeContext" : "i < passes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 18,
        "endLineNumber" : 44,
        "endColumnNumber" : 35
      },
      "nodeContext" : "i < passes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<jadx.core.dex.visitors.IDexTreeVisitor>"
  }, {
    "nodeContext" : "passes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 45,
      "startColumnNumber" : 26,
      "endLineNumber" : 45,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 45,
        "startColumnNumber" : 26,
        "endLineNumber" : 45,
        "endColumnNumber" : 39
      },
      "nodeContext" : "passes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 45,
        "startColumnNumber" : 19,
        "endLineNumber" : 45,
        "endColumnNumber" : 39
      },
      "nodeContext" : "pass=passes.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 45,
        "startColumnNumber" : 3,
        "endLineNumber" : 45,
        "endColumnNumber" : 40
      },
      "nodeContext" : "IDexTreeVisitor pass=passes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 978,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < passes.size(); i++) {\n  IDexTreeVisitor pass=passes.get(i);\n  Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n  JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n  if (info == null) {\n    LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n    continue;\n  }\n  boolean firstOccurrence=passClsSet.add(passClass);\n  String passName=passClass.getSimpleName();\n  if (firstOccurrence && !names.add(passName)) {\n    errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n    if (classList.indexOf(cls) < i) {\n      errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n    }\n  }\n  for (  Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n    if (classList.indexOf(cls) > i) {\n      errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 35,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static List<String> check(List<IDexTreeVisitor> passes){\n  List<Class<?>> classList=new ArrayList<>(passes.size());\n  for (  IDexTreeVisitor pass : passes) {\n    classList.add(pass.getClass());\n  }\n  List<String> errors=new ArrayList<>();\n  Set<String> names=new HashSet<>();\n  Set<Class> passClsSet=new HashSet<>();\n  for (int i=0; i < passes.size(); i++) {\n    IDexTreeVisitor pass=passes.get(i);\n    Class<? extends IDexTreeVisitor> passClass=pass.getClass();\n    JadxVisitor info=passClass.getAnnotation(JadxVisitor.class);\n    if (info == null) {\n      LOG.warn(\"No JadxVisitor annotation for visitor: {}\",passClass.getName());\n      continue;\n    }\n    boolean firstOccurrence=passClsSet.add(passClass);\n    String passName=passClass.getSimpleName();\n    if (firstOccurrence && !names.add(passName)) {\n      errors.add(\"Visitor name conflict: \" + passName + \", class: \"+ passClass.getName());\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runBefore()) {\n      if (classList.indexOf(cls) < i) {\n        errors.add(\"Pass \" + passName + \" must be before \"+ cls.getSimpleName());\n      }\n    }\n    for (    Class<? extends IDexTreeVisitor> cls : info.runAfter()) {\n      if (classList.indexOf(cls) > i) {\n        errors.add(\"Pass \" + passName + \" must be after \"+ cls.getSimpleName());\n      }\n    }\n  }\n  return errors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 45,
        "startColumnNumber" : 3,
        "endLineNumber" : 45,
        "endColumnNumber" : 40
      },
      "nodeContext" : "IDexTreeVisitor pass=passes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<jadx.core.dex.visitors.IDexTreeVisitor>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 36,
    "startColumnNumber" : 45,
    "endLineNumber" : 36,
    "endColumnNumber" : 51
  }, {
    "charLength" : 6,
    "startLineNumber" : 37,
    "startColumnNumber" : 30,
    "endLineNumber" : 37,
    "endColumnNumber" : 36
  }, {
    "charLength" : 6,
    "startLineNumber" : 44,
    "startColumnNumber" : 22,
    "endLineNumber" : 44,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 45,
    "startColumnNumber" : 26,
    "endLineNumber" : 45,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}