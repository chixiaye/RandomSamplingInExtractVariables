{
  "id" : 3,
  "expression" : "new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\")",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 83,
      "startLineNumber" : 83,
      "startColumnNumber" : 10,
      "endLineNumber" : 84,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 23
      },
      "nodeContext" : "throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 82,
        "startColumnNumber" : 56,
        "endLineNumber" : 85,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 85,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n  throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 81,
        "startColumnNumber" : 38,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n    throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n  }\n  throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\"Invalid token\",ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (HttpClientErrorException ex) {\n  if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n    throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n  }\n  throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\"Invalid token\",ex);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  URI uri=getPermissionsUri(applicationId);\n  RequestEntity<?> request=RequestEntity.get(uri).header(\"Authorization\",\"bearer \" + token).build();\n  Map<?,?> body=this.restTemplate.exchange(request,Map.class).getBody();\n  if (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n    return AccessLevel.FULL;\n  }\n  return AccessLevel.RESTRICTED;\n}\n catch (HttpClientErrorException ex) {\n  if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n    throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n  }\n  throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\"Invalid token\",ex);\n}\ncatch (HttpServerErrorException ex) {\n  throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\"Cloud controller not reachable\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 70,
        "startColumnNumber" : 45,
        "endLineNumber" : 93,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    URI uri=getPermissionsUri(applicationId);\n    RequestEntity<?> request=RequestEntity.get(uri).header(\"Authorization\",\"bearer \" + token).build();\n    Map<?,?> body=this.restTemplate.exchange(request,Map.class).getBody();\n    if (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n      return AccessLevel.FULL;\n    }\n    return AccessLevel.RESTRICTED;\n  }\n catch (  HttpClientErrorException ex) {\n    if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n      throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n    }\n    throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\"Invalid token\",ex);\n  }\ncatch (  HttpServerErrorException ex) {\n    throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\"Cloud controller not reachable\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1253,
        "startLineNumber" : 62,
        "startColumnNumber" : 1,
        "endLineNumber" : 93,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Return the access level that should be granted to the given token.\n * @param token the token\n * @param applicationId the cloud foundry application ID\n * @return the access level that should be granted\n * @throws CloudFoundryAuthorizationException if the token is not authorized\n */\npublic AccessLevel getAccessLevel(String token,String applicationId) throws CloudFoundryAuthorizationException {\n  try {\n    URI uri=getPermissionsUri(applicationId);\n    RequestEntity<?> request=RequestEntity.get(uri).header(\"Authorization\",\"bearer \" + token).build();\n    Map<?,?> body=this.restTemplate.exchange(request,Map.class).getBody();\n    if (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n      return AccessLevel.FULL;\n    }\n    return AccessLevel.RESTRICTED;\n  }\n catch (  HttpClientErrorException ex) {\n    if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n      throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n    }\n    throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\"Invalid token\",ex);\n  }\ncatch (  HttpServerErrorException ex) {\n    throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\"Cloud controller not reachable\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 23
      },
      "nodeContext" : "throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\"Access denied\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryAuthorizationException"
  } ],
  "positionList" : [ {
    "charLength" : 83,
    "startLineNumber" : 83,
    "startColumnNumber" : 10,
    "endLineNumber" : 84,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}