{
  "id" : 91,
  "expression" : "new java.util.Iterator<T>(){\n  @Override public boolean hasNext(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    return root != null && !stack.isEmpty();\n  }\n  @Override public T next(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    Node node=stack.pop();\n    if (node.right != null)     stack.push(node.right);\n    if (node.left != null)     stack.push(node.left);\n    return node.data;\n  }\n  @Override public void remove(){\n    throw new UnsupportedOperationException();\n  }\n}\n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new java.util.Iterator<T>(){\n  @Override public boolean hasNext(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    return root != null && !stack.isEmpty();\n  }\n  @Override public T next(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    Node node=stack.pop();\n    if (node.right != null)     stack.push(node.right);\n    if (node.left != null)     stack.push(node.left);\n    return node.data;\n  }\n  @Override public void remove(){\n    throw new UnsupportedOperationException();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 662,
      "startLineNumber" : 240,
      "startColumnNumber" : 11,
      "endLineNumber" : 260,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 108,
    "astHeight" : 11,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new java.util.Iterator<T>(){\n  @Override public boolean hasNext(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    return root != null && !stack.isEmpty();\n  }\n  @Override public T next(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    Node node=stack.pop();\n    if (node.right != null)     stack.push(node.right);\n    if (node.left != null)     stack.push(node.left);\n    return node.data;\n  }\n  @Override public void remove(){\n    throw new UnsupportedOperationException();\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 109,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 814,
        "startLineNumber" : 234,
        "startColumnNumber" : 52,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int expectedNodeCount=nodeCount;\n  final java.util.Stack<Node> stack=new java.util.Stack<>();\n  stack.push(root);\n  return new java.util.Iterator<T>(){\n    @Override public boolean hasNext(){\n      if (expectedNodeCount != nodeCount)       throw new java.util.ConcurrentModificationException();\n      return root != null && !stack.isEmpty();\n    }\n    @Override public T next(){\n      if (expectedNodeCount != nodeCount)       throw new java.util.ConcurrentModificationException();\n      Node node=stack.pop();\n      if (node.right != null)       stack.push(node.right);\n      if (node.left != null)       stack.push(node.left);\n      return node.data;\n    }\n    @Override public void remove(){\n      throw new UnsupportedOperationException();\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 261,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private java.util.Iterator<T> preOrderTraversal(){\n  final int expectedNodeCount=nodeCount;\n  final java.util.Stack<Node> stack=new java.util.Stack<>();\n  stack.push(root);\n  return new java.util.Iterator<T>(){\n    @Override public boolean hasNext(){\n      if (expectedNodeCount != nodeCount)       throw new java.util.ConcurrentModificationException();\n      return root != null && !stack.isEmpty();\n    }\n    @Override public T next(){\n      if (expectedNodeCount != nodeCount)       throw new java.util.ConcurrentModificationException();\n      Node node=stack.pop();\n      if (node.right != null)       stack.push(node.right);\n      if (node.left != null)       stack.push(node.left);\n      return node.data;\n    }\n    @Override public void remove(){\n      throw new UnsupportedOperationException();\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new java.util.Iterator<T>(){\n  @Override public boolean hasNext(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    return root != null && !stack.isEmpty();\n  }\n  @Override public T next(){\n    if (expectedNodeCount != nodeCount)     throw new java.util.ConcurrentModificationException();\n    Node node=stack.pop();\n    if (node.right != null)     stack.push(node.right);\n    if (node.left != null)     stack.push(node.left);\n    return node.data;\n  }\n  @Override public void remove(){\n    throw new UnsupportedOperationException();\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 109,
      "astHeight" : 12
    },
    "tokenLength" : 50,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 662,
    "startLineNumber" : 240,
    "startColumnNumber" : 11,
    "endLineNumber" : 260,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}