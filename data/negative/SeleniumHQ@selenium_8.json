{
  "id" : 8,
  "expression" : "config.get(SESSION_QUEUER_SECTION,\"host\")",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/sessionqueue/config/NewSessionQueuerOptions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.get(SESSION_QUEUER_SECTION,\"host\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 40,
      "startColumnNumber" : 25,
      "endLineNumber" : 40,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 40,
        "startColumnNumber" : 25,
        "endLineNumber" : 46,
        "endColumnNumber" : 6
      },
      "nodeContext" : "config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n  try {\n    return new URI(str);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 40,
        "startColumnNumber" : 18,
        "endLineNumber" : 46,
        "endColumnNumber" : 6
      },
      "nodeContext" : "host=config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n  try {\n    return new URI(str);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 33,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Optional<URI> host=config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n  try {\n    return new URI(str);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 39,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 38,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Optional<URI> host=config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSION_QUEUER_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSION_QUEUER_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session queuer server\");\n  }\n  try {\n    return new URI(\"http\",null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public URI getSessionQueuerUri(){\n  Optional<URI> host=config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n    try {\n      return new URI(str);\n    }\n catch (    URISyntaxException e) {\n      throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n    }\n  }\n);\n  if (host.isPresent()) {\n    return host.get();\n  }\n  Optional<Integer> port=config.getInt(SESSION_QUEUER_SECTION,\"port\");\n  Optional<String> hostname=config.get(SESSION_QUEUER_SECTION,\"hostname\");\n  if (!(port.isPresent() && hostname.isPresent())) {\n    throw new ConfigException(\"Unable to determine host and port for the session queuer server\");\n  }\n  try {\n    return new URI(\"http\",null,hostname.get(),port.get(),\"\",null,null);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server uri configured through host (%s) and port (%d) is not a valid URI\",hostname.get(),port.get());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 40,
        "startColumnNumber" : 25,
        "endLineNumber" : 46,
        "endColumnNumber" : 6
      },
      "nodeContext" : "config.get(SESSION_QUEUER_SECTION,\"host\").map(str -> {\n  try {\n    return new URI(str);\n  }\n catch (  URISyntaxException e) {\n    throw new ConfigException(\"Session queuer server URI is not a valid URI: \" + str);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 10
    },
    "tokenLength" : 6,
    "type" : "java.util.Optional<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 40,
    "startColumnNumber" : 25,
    "endLineNumber" : 40,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}