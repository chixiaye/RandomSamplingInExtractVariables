{
  "id" : 6,
  "expression" : "responsePromise",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/RedissonRemoteService.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responsePromise",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 407,
      "startColumnNumber" : 8,
      "endLineNumber" : 407,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 437,
        "endColumnNumber" : 10
      },
      "nodeContext" : "responsePromise.onComplete((result,e) -> {\n  if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n    long timeout=60 * 1000;\n    if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n      timeout=request.getOptions().getExecutionTimeoutInMillis();\n    }\n    RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n    try {\n      RFuture<Void> clientsFuture=queue.putAsync(result);\n      queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n      clientsFuture.onComplete((res,exc) -> {\n        if (exc != null) {\n          if (exc instanceof RedissonShutdownException) {\n            return;\n          }\n          log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n        }\n        resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n      }\n);\n    }\n catch (    Exception ex) {\n      log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n    }\n  }\n else {\n    resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 146,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 437,
        "endColumnNumber" : 11
      },
      "nodeContext" : "responsePromise.onComplete((result,e) -> {\n  if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n    long timeout=60 * 1000;\n    if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n      timeout=request.getOptions().getExecutionTimeoutInMillis();\n    }\n    RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n    try {\n      RFuture<Void> clientsFuture=queue.putAsync(result);\n      queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n      clientsFuture.onComplete((res,exc) -> {\n        if (exc != null) {\n          if (exc instanceof RedissonShutdownException) {\n            return;\n          }\n          log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n        }\n        resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n      }\n);\n    }\n catch (    Exception ex) {\n      log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n    }\n  }\n else {\n    resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 147,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3381,
        "startLineNumber" : 394,
        "startColumnNumber" : 81,
        "endLineNumber" : 469,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RemoteServiceMethod method=Arrays.stream(remoteInterface.getMethods()).filter(m -> m.getName().equals(request.getMethodName()) && Arrays.equals(getMethodSignature(m),request.getSignature())).map(m -> new RemoteServiceMethod(m,bean)).findFirst().get();\n  String responseName=getResponseQueueName(request.getExecutorId());\n  RPromise<RRemoteServiceResponse> responsePromise=new RedissonPromise<>();\n  RPromise<RemoteServiceCancelRequest> cancelRequestFuture=new RedissonPromise<>();\n  scheduleCheck(cancelRequestMapName,new RequestId(request.getId()),cancelRequestFuture);\n  responsePromise.onComplete((result,e) -> {\n    if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n      long timeout=60 * 1000;\n      if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n        timeout=request.getOptions().getExecutionTimeoutInMillis();\n      }\n      RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n      try {\n        RFuture<Void> clientsFuture=queue.putAsync(result);\n        queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n        clientsFuture.onComplete((res,exc) -> {\n          if (exc != null) {\n            if (exc instanceof RedissonShutdownException) {\n              return;\n            }\n            log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n          }\n          resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n        }\n);\n      }\n catch (      Exception ex) {\n        log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n      }\n    }\n else {\n      resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n    }\n  }\n);\n  java.util.concurrent.Future<?> submitFuture=executor.submit(() -> {\n    if (commandExecutor.getConnectionManager().isShuttingDown()) {\n      return;\n    }\n    invokeMethod(request,method,cancelRequestFuture,responsePromise);\n  }\n);\n  cancelRequestFuture.onComplete((r,e) -> {\n    if (e != null) {\n      return;\n    }\n    boolean res=submitFuture.cancel(r.isMayInterruptIfRunning());\n    if (res) {\n      RemoteServiceCancelResponse response=new RemoteServiceCancelResponse(request.getId(),true);\n      if (!responsePromise.trySuccess(response)) {\n        response=new RemoteServiceCancelResponse(request.getId(),false);\n      }\n      if (r.isSendResponse()) {\n        RMap<String,RemoteServiceCancelResponse> map=getMap(cancelResponseMapName);\n        map.fastPutAsync(request.getId(),response);\n        map.expireAsync(60,TimeUnit.SECONDS);\n      }\n    }\n  }\n);\n  return responsePromise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3583,
        "startLineNumber" : 393,
        "startColumnNumber" : 4,
        "endLineNumber" : 469,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private <T>RFuture<RRemoteServiceResponse> executeMethod(Class<T> remoteInterface,RBlockingQueue<String> requestQueue,ExecutorService executor,RemoteServiceRequest request,Object bean){\n  RemoteServiceMethod method=Arrays.stream(remoteInterface.getMethods()).filter(m -> m.getName().equals(request.getMethodName()) && Arrays.equals(getMethodSignature(m),request.getSignature())).map(m -> new RemoteServiceMethod(m,bean)).findFirst().get();\n  String responseName=getResponseQueueName(request.getExecutorId());\n  RPromise<RRemoteServiceResponse> responsePromise=new RedissonPromise<>();\n  RPromise<RemoteServiceCancelRequest> cancelRequestFuture=new RedissonPromise<>();\n  scheduleCheck(cancelRequestMapName,new RequestId(request.getId()),cancelRequestFuture);\n  responsePromise.onComplete((result,e) -> {\n    if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n      long timeout=60 * 1000;\n      if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n        timeout=request.getOptions().getExecutionTimeoutInMillis();\n      }\n      RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n      try {\n        RFuture<Void> clientsFuture=queue.putAsync(result);\n        queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n        clientsFuture.onComplete((res,exc) -> {\n          if (exc != null) {\n            if (exc instanceof RedissonShutdownException) {\n              return;\n            }\n            log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n          }\n          resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n        }\n);\n      }\n catch (      Exception ex) {\n        log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n      }\n    }\n else {\n      resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n    }\n  }\n);\n  java.util.concurrent.Future<?> submitFuture=executor.submit(() -> {\n    if (commandExecutor.getConnectionManager().isShuttingDown()) {\n      return;\n    }\n    invokeMethod(request,method,cancelRequestFuture,responsePromise);\n  }\n);\n  cancelRequestFuture.onComplete((r,e) -> {\n    if (e != null) {\n      return;\n    }\n    boolean res=submitFuture.cancel(r.isMayInterruptIfRunning());\n    if (res) {\n      RemoteServiceCancelResponse response=new RemoteServiceCancelResponse(request.getId(),true);\n      if (!responsePromise.trySuccess(response)) {\n        response=new RemoteServiceCancelResponse(request.getId(),false);\n      }\n      if (r.isSendResponse()) {\n        RMap<String,RemoteServiceCancelResponse> map=getMap(cancelResponseMapName);\n        map.fastPutAsync(request.getId(),response);\n        map.expireAsync(60,TimeUnit.SECONDS);\n      }\n    }\n  }\n);\n  return responsePromise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 407,
        "startColumnNumber" : 8,
        "endLineNumber" : 437,
        "endColumnNumber" : 10
      },
      "nodeContext" : "responsePromise.onComplete((result,e) -> {\n  if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n    long timeout=60 * 1000;\n    if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n      timeout=request.getOptions().getExecutionTimeoutInMillis();\n    }\n    RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n    try {\n      RFuture<Void> clientsFuture=queue.putAsync(result);\n      queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n      clientsFuture.onComplete((res,exc) -> {\n        if (exc != null) {\n          if (exc instanceof RedissonShutdownException) {\n            return;\n          }\n          log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n        }\n        resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n      }\n);\n    }\n catch (    Exception ex) {\n      log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n    }\n  }\n else {\n    resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 146,
      "astHeight" : 17
    },
    "tokenLength" : 1,
    "type" : "org.redisson.misc.RPromise<org.redisson.remote.RRemoteServiceResponse>"
  }, {
    "nodeContext" : "responsePromise",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 468,
      "startColumnNumber" : 15,
      "endLineNumber" : 468,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 468,
        "startColumnNumber" : 8,
        "endLineNumber" : 468,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return responsePromise;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3381,
        "startLineNumber" : 394,
        "startColumnNumber" : 81,
        "endLineNumber" : 469,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RemoteServiceMethod method=Arrays.stream(remoteInterface.getMethods()).filter(m -> m.getName().equals(request.getMethodName()) && Arrays.equals(getMethodSignature(m),request.getSignature())).map(m -> new RemoteServiceMethod(m,bean)).findFirst().get();\n  String responseName=getResponseQueueName(request.getExecutorId());\n  RPromise<RRemoteServiceResponse> responsePromise=new RedissonPromise<>();\n  RPromise<RemoteServiceCancelRequest> cancelRequestFuture=new RedissonPromise<>();\n  scheduleCheck(cancelRequestMapName,new RequestId(request.getId()),cancelRequestFuture);\n  responsePromise.onComplete((result,e) -> {\n    if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n      long timeout=60 * 1000;\n      if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n        timeout=request.getOptions().getExecutionTimeoutInMillis();\n      }\n      RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n      try {\n        RFuture<Void> clientsFuture=queue.putAsync(result);\n        queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n        clientsFuture.onComplete((res,exc) -> {\n          if (exc != null) {\n            if (exc instanceof RedissonShutdownException) {\n              return;\n            }\n            log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n          }\n          resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n        }\n);\n      }\n catch (      Exception ex) {\n        log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n      }\n    }\n else {\n      resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n    }\n  }\n);\n  java.util.concurrent.Future<?> submitFuture=executor.submit(() -> {\n    if (commandExecutor.getConnectionManager().isShuttingDown()) {\n      return;\n    }\n    invokeMethod(request,method,cancelRequestFuture,responsePromise);\n  }\n);\n  cancelRequestFuture.onComplete((r,e) -> {\n    if (e != null) {\n      return;\n    }\n    boolean res=submitFuture.cancel(r.isMayInterruptIfRunning());\n    if (res) {\n      RemoteServiceCancelResponse response=new RemoteServiceCancelResponse(request.getId(),true);\n      if (!responsePromise.trySuccess(response)) {\n        response=new RemoteServiceCancelResponse(request.getId(),false);\n      }\n      if (r.isSendResponse()) {\n        RMap<String,RemoteServiceCancelResponse> map=getMap(cancelResponseMapName);\n        map.fastPutAsync(request.getId(),response);\n        map.expireAsync(60,TimeUnit.SECONDS);\n      }\n    }\n  }\n);\n  return responsePromise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3583,
        "startLineNumber" : 393,
        "startColumnNumber" : 4,
        "endLineNumber" : 469,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private <T>RFuture<RRemoteServiceResponse> executeMethod(Class<T> remoteInterface,RBlockingQueue<String> requestQueue,ExecutorService executor,RemoteServiceRequest request,Object bean){\n  RemoteServiceMethod method=Arrays.stream(remoteInterface.getMethods()).filter(m -> m.getName().equals(request.getMethodName()) && Arrays.equals(getMethodSignature(m),request.getSignature())).map(m -> new RemoteServiceMethod(m,bean)).findFirst().get();\n  String responseName=getResponseQueueName(request.getExecutorId());\n  RPromise<RRemoteServiceResponse> responsePromise=new RedissonPromise<>();\n  RPromise<RemoteServiceCancelRequest> cancelRequestFuture=new RedissonPromise<>();\n  scheduleCheck(cancelRequestMapName,new RequestId(request.getId()),cancelRequestFuture);\n  responsePromise.onComplete((result,e) -> {\n    if (request.getOptions().isResultExpected() || result instanceof RemoteServiceCancelResponse) {\n      long timeout=60 * 1000;\n      if (request.getOptions().getExecutionTimeoutInMillis() != null) {\n        timeout=request.getOptions().getExecutionTimeoutInMillis();\n      }\n      RBlockingQueueAsync<RRemoteServiceResponse> queue=getBlockingQueue(responseName,codec);\n      try {\n        RFuture<Void> clientsFuture=queue.putAsync(result);\n        queue.expireAsync(timeout,TimeUnit.MILLISECONDS);\n        clientsFuture.onComplete((res,exc) -> {\n          if (exc != null) {\n            if (exc instanceof RedissonShutdownException) {\n              return;\n            }\n            log.error(\"Can't send response: \" + result + \" for request: \"+ request,exc);\n          }\n          resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n        }\n);\n      }\n catch (      Exception ex) {\n        log.error(\"Can't send response: \" + result + \" for request: \"+ request,e);\n      }\n    }\n else {\n      resubscribe(remoteInterface,requestQueue,executor,method.getBean());\n    }\n  }\n);\n  java.util.concurrent.Future<?> submitFuture=executor.submit(() -> {\n    if (commandExecutor.getConnectionManager().isShuttingDown()) {\n      return;\n    }\n    invokeMethod(request,method,cancelRequestFuture,responsePromise);\n  }\n);\n  cancelRequestFuture.onComplete((r,e) -> {\n    if (e != null) {\n      return;\n    }\n    boolean res=submitFuture.cancel(r.isMayInterruptIfRunning());\n    if (res) {\n      RemoteServiceCancelResponse response=new RemoteServiceCancelResponse(request.getId(),true);\n      if (!responsePromise.trySuccess(response)) {\n        response=new RemoteServiceCancelResponse(request.getId(),false);\n      }\n      if (r.isSendResponse()) {\n        RMap<String,RemoteServiceCancelResponse> map=getMap(cancelResponseMapName);\n        map.fastPutAsync(request.getId(),response);\n        map.expireAsync(60,TimeUnit.SECONDS);\n      }\n    }\n  }\n);\n  return responsePromise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 468,
        "startColumnNumber" : 8,
        "endLineNumber" : 468,
        "endColumnNumber" : 31
      },
      "nodeContext" : "return responsePromise;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.redisson.misc.RPromise<org.redisson.remote.RRemoteServiceResponse>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 407,
    "startColumnNumber" : 8,
    "endLineNumber" : 407,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 468,
    "startColumnNumber" : 15,
    "endLineNumber" : 468,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}