{
  "id" : 360,
  "expression" : "aspect",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "3cf2bca27c7ba05ad5c456f648dbda720bf40042",
  "filePath" : "src/main/java/com/google/devtools/build/lib/skyframe/AspectFunction.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 265,
      "startColumnNumber" : 10,
      "endLineNumber" : 265,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 261,
        "startColumnNumber" : 13,
        "endLineNumber" : 268,
        "endColumnNumber" : 27
      },
      "nodeContext" : "createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 261,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 260,
        "startColumnNumber" : 49,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (AliasProvider.isAlias(associatedTarget)) {\n  return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 261,
        "startColumnNumber" : 13,
        "endLineNumber" : 268,
        "endColumnNumber" : 27
      },
      "nodeContext" : "createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 290,
      "startColumnNumber" : 13,
      "endLineNumber" : 290,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 290,
        "startColumnNumber" : 13,
        "endLineNumber" : 291,
        "endColumnNumber" : 28
      },
      "nodeContext" : "aspect.getDefinition()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 290,
        "startColumnNumber" : 13,
        "endLineNumber" : 292,
        "endColumnNumber" : 35
      },
      "nodeContext" : "aspect.getDefinition().getRequiredProviders()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 290,
        "startColumnNumber" : 13,
        "endLineNumber" : 293,
        "endColumnNumber" : 89
      },
      "nodeContext" : "aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 290,
        "startColumnNumber" : 12,
        "endLineNumber" : 293,
        "endColumnNumber" : 89
      },
      "nodeContext" : "!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 290,
        "startColumnNumber" : 8,
        "endLineNumber" : 301,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n  return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 289,
        "startColumnNumber" : 34,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n    return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (target instanceof Rule) {\n  if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n    return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 288,
        "startColumnNumber" : 38,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (target instanceof Rule) {\n    if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n      return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 288,
        "startColumnNumber" : 4,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (checkRuleAdvertisedProviders) {\n  if (target instanceof Rule) {\n    if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n      return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 290,
        "startColumnNumber" : 13,
        "endLineNumber" : 291,
        "endColumnNumber" : 28
      },
      "nodeContext" : "aspect.getDefinition()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 296,
      "startColumnNumber" : 14,
      "endLineNumber" : 296,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 294,
        "startColumnNumber" : 17,
        "endLineNumber" : 300,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 294,
        "startColumnNumber" : 10,
        "endLineNumber" : 300,
        "endColumnNumber" : 39
      },
      "nodeContext" : "return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 293,
        "startColumnNumber" : 91,
        "endLineNumber" : 301,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 290,
        "startColumnNumber" : 8,
        "endLineNumber" : 301,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n  return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 289,
        "startColumnNumber" : 34,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n    return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 289,
        "startColumnNumber" : 6,
        "endLineNumber" : 302,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (target instanceof Rule) {\n  if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n    return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 288,
        "startColumnNumber" : 38,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (target instanceof Rule) {\n    if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n      return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 288,
        "startColumnNumber" : 4,
        "endLineNumber" : 303,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (checkRuleAdvertisedProviders) {\n  if (target instanceof Rule) {\n    if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n      return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 294,
        "startColumnNumber" : 17,
        "endLineNumber" : 300,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 307,
      "startColumnNumber" : 47,
      "endLineNumber" : 307,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 307,
        "startColumnNumber" : 30,
        "endLineNumber" : 307,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ImmutableList.of(aspect)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 307,
        "startColumnNumber" : 6,
        "endLineNumber" : 307,
        "endColumnNumber" : 54
      },
      "nodeContext" : "topologicalAspectPath=ImmutableList.of(aspect)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 307,
        "startColumnNumber" : 6,
        "endLineNumber" : 307,
        "endColumnNumber" : 55
      },
      "nodeContext" : "topologicalAspectPath=ImmutableList.of(aspect);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 306,
        "startColumnNumber" : 37,
        "endLineNumber" : 308,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  topologicalAspectPath=ImmutableList.of(aspect);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key.getBaseKeys().isEmpty()) {\n  topologicalAspectPath=ImmutableList.of(aspect);\n}\n else {\n  LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n  collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n  Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n  for (  AspectKey aspectKey : orderedKeys) {\n    AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n    topologicalAspectPathBuilder.add(aspectValue.getAspect());\n  }\n  topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n  List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n  try {\n    associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n  }\n catch (  DuplicateException e) {\n    env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 307,
        "startColumnNumber" : 6,
        "endLineNumber" : 307,
        "endColumnNumber" : 55
      },
      "nodeContext" : "topologicalAspectPath=ImmutableList.of(aspect);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 321,
      "startColumnNumber" : 63,
      "endLineNumber" : 321,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 321,
        "startColumnNumber" : 30,
        "endLineNumber" : 321,
        "endColumnNumber" : 70
      },
      "nodeContext" : "topologicalAspectPathBuilder.add(aspect)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 321,
        "startColumnNumber" : 30,
        "endLineNumber" : 321,
        "endColumnNumber" : 78
      },
      "nodeContext" : "topologicalAspectPathBuilder.add(aspect).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 321,
        "startColumnNumber" : 6,
        "endLineNumber" : 321,
        "endColumnNumber" : 78
      },
      "nodeContext" : "topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 321,
        "startColumnNumber" : 6,
        "endLineNumber" : 321,
        "endColumnNumber" : 79
      },
      "nodeContext" : "topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 308,
        "startColumnNumber" : 11,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n  collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n  Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n  for (  AspectKey aspectKey : orderedKeys) {\n    AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n    topologicalAspectPathBuilder.add(aspectValue.getAspect());\n  }\n  topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n  List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n  try {\n    associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n  }\n catch (  DuplicateException e) {\n    env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key.getBaseKeys().isEmpty()) {\n  topologicalAspectPath=ImmutableList.of(aspect);\n}\n else {\n  LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n  collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n  Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n  for (  AspectKey aspectKey : orderedKeys) {\n    AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n    topologicalAspectPathBuilder.add(aspectValue.getAspect());\n  }\n  topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n  List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n  try {\n    associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n  }\n catch (  DuplicateException e) {\n    env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 321,
        "startColumnNumber" : 6,
        "endLineNumber" : 321,
        "endColumnNumber" : 79
      },
      "nodeContext" : "topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 343,
      "startColumnNumber" : 48,
      "endLineNumber" : 343,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 343,
        "startColumnNumber" : 10,
        "endLineNumber" : 343,
        "endColumnNumber" : 70
      },
      "nodeContext" : "getUnloadedToolchainContext(env,key,aspect,configuration)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 342,
        "startColumnNumber" : 31,
        "endLineNumber" : 343,
        "endColumnNumber" : 70
      },
      "nodeContext" : "unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 342,
        "startColumnNumber" : 6,
        "endLineNumber" : 343,
        "endColumnNumber" : 71
      },
      "nodeContext" : "UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5707,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n catch (DependencyEvaluationException e) {\n  if (!e.depReportedOwnError()) {\n    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n  }\n  if (e.getCause() instanceof ConfiguredValueCreationException) {\n    ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n  }\n else   if (e.getCause() instanceof InconsistentAspectOrderException) {\n    InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n    env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else   if (e.getCause() instanceof TransitionException) {\n    TransitionException cause=(TransitionException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else {\n    InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n  }\n}\ncatch (AspectCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ConfiguredValueCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ToolchainException e) {\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 343,
        "startColumnNumber" : 10,
        "endLineNumber" : 343,
        "endColumnNumber" : 70
      },
      "nodeContext" : "getUnloadedToolchainContext(env,key,aspect,configuration)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 377,
      "startColumnNumber" : 60,
      "endLineNumber" : 377,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 377,
        "startColumnNumber" : 60,
        "endLineNumber" : 377,
        "endColumnNumber" : 82
      },
      "nodeContext" : "aspect.getDefinition()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 377,
        "startColumnNumber" : 16,
        "endLineNumber" : 377,
        "endColumnNumber" : 83
      },
      "nodeContext" : "shouldUseToolchainTransition(configuration,aspect.getDefinition())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 366,
        "startColumnNumber" : 12,
        "endLineNumber" : 381,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 365,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 37
      },
      "nodeContext" : "depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 365,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 38
      },
      "nodeContext" : "depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 364,
        "startColumnNumber" : 10,
        "endLineNumber" : 382,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 364,
        "startColumnNumber" : 6,
        "endLineNumber" : 385,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n}\n catch (ConfiguredValueCreationException e) {\n  throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5707,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n catch (DependencyEvaluationException e) {\n  if (!e.depReportedOwnError()) {\n    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n  }\n  if (e.getCause() instanceof ConfiguredValueCreationException) {\n    ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n  }\n else   if (e.getCause() instanceof InconsistentAspectOrderException) {\n    InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n    env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else   if (e.getCause() instanceof TransitionException) {\n    TransitionException cause=(TransitionException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else {\n    InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n  }\n}\ncatch (AspectCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ConfiguredValueCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ToolchainException e) {\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 377,
        "startColumnNumber" : 16,
        "endLineNumber" : 377,
        "endColumnNumber" : 83
      },
      "nodeContext" : "shouldUseToolchainTransition(configuration,aspect.getDefinition())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 403,
      "startColumnNumber" : 43,
      "endLineNumber" : 403,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 403,
        "startColumnNumber" : 43,
        "endLineNumber" : 403,
        "endColumnNumber" : 65
      },
      "nodeContext" : "aspect.getDescriptor()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 403,
        "startColumnNumber" : 43,
        "endLineNumber" : 403,
        "endColumnNumber" : 82
      },
      "nodeContext" : "aspect.getDescriptor().getDescription()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 91
      },
      "nodeContext" : "String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 401,
        "startColumnNumber" : 15,
        "endLineNumber" : 403,
        "endColumnNumber" : 91
      },
      "nodeContext" : "targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 401,
        "startColumnNumber" : 8,
        "endLineNumber" : 403,
        "endColumnNumber" : 92
      },
      "nodeContext" : "String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 400,
        "startColumnNumber" : 44,
        "endLineNumber" : 410,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n  toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 495,
        "startLineNumber" : 400,
        "startColumnNumber" : 6,
        "endLineNumber" : 410,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (unloadedToolchainContext != null) {\n  String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n  toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5707,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n catch (DependencyEvaluationException e) {\n  if (!e.depReportedOwnError()) {\n    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n  }\n  if (e.getCause() instanceof ConfiguredValueCreationException) {\n    ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n  }\n else   if (e.getCause() instanceof InconsistentAspectOrderException) {\n    InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n    env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else   if (e.getCause() instanceof TransitionException) {\n    TransitionException cause=(TransitionException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else {\n    InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n  }\n}\ncatch (AspectCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ConfiguredValueCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ToolchainException e) {\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 403,
        "startColumnNumber" : 43,
        "endLineNumber" : 403,
        "endColumnNumber" : 82
      },
      "nodeContext" : "aspect.getDescriptor().getDescription()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  }, {
    "nodeContext" : "aspect",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 416,
      "startColumnNumber" : 10,
      "endLineNumber" : 416,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 412,
        "startColumnNumber" : 13,
        "endLineNumber" : 424,
        "endColumnNumber" : 53
      },
      "nodeContext" : "createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 412,
        "startColumnNumber" : 6,
        "endLineNumber" : 424,
        "endColumnNumber" : 54
      },
      "nodeContext" : "return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5707,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n catch (DependencyEvaluationException e) {\n  if (!e.depReportedOwnError()) {\n    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n  }\n  if (e.getCause() instanceof ConfiguredValueCreationException) {\n    ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n  }\n else   if (e.getCause() instanceof InconsistentAspectOrderException) {\n    InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n    env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else   if (e.getCause() instanceof TransitionException) {\n    TransitionException cause=(TransitionException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else {\n    InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n  }\n}\ncatch (AspectCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ConfiguredValueCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ToolchainException e) {\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 412,
        "startColumnNumber" : 13,
        "endLineNumber" : 424,
        "endColumnNumber" : 53
      },
      "nodeContext" : "createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.Aspect"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 265,
    "startColumnNumber" : 10,
    "endLineNumber" : 265,
    "endColumnNumber" : 16
  }, {
    "charLength" : 6,
    "startLineNumber" : 290,
    "startColumnNumber" : 13,
    "endLineNumber" : 290,
    "endColumnNumber" : 19
  }, {
    "charLength" : 6,
    "startLineNumber" : 296,
    "startColumnNumber" : 14,
    "endLineNumber" : 296,
    "endColumnNumber" : 20
  }, {
    "charLength" : 6,
    "startLineNumber" : 307,
    "startColumnNumber" : 47,
    "endLineNumber" : 307,
    "endColumnNumber" : 53
  }, {
    "charLength" : 6,
    "startLineNumber" : 321,
    "startColumnNumber" : 63,
    "endLineNumber" : 321,
    "endColumnNumber" : 69
  }, {
    "charLength" : 6,
    "startLineNumber" : 343,
    "startColumnNumber" : 48,
    "endLineNumber" : 343,
    "endColumnNumber" : 54
  }, {
    "charLength" : 6,
    "startLineNumber" : 377,
    "startColumnNumber" : 60,
    "endLineNumber" : 377,
    "endColumnNumber" : 66
  }, {
    "charLength" : 6,
    "startLineNumber" : 403,
    "startColumnNumber" : 43,
    "endLineNumber" : 403,
    "endColumnNumber" : 49
  }, {
    "charLength" : 6,
    "startLineNumber" : 416,
    "startColumnNumber" : 10,
    "endLineNumber" : 416,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  } ]
}