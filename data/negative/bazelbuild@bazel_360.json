{
  "id" : 360,
  "expression" : "method.documented()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/docgen/starlark/StarlarkBuiltinDoc.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.documented()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 80,
      "startColumnNumber" : 9,
      "endLineNumber" : 80,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 28
      },
      "nodeContext" : "!method.documented()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!method.documented()) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 79,
        "startColumnNumber" : 54,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!method.documented()) {\n    return;\n  }\n  String shortName=method.getName();\n  Collection<StarlarkJavaMethodDoc> overloads=javaMethods.get(shortName);\n  if (!overloads.isEmpty()) {\n    method.setOverloaded(true);\n    if (overloads.size() == 1) {\n      Iterables.getOnlyElement(overloads).setOverloaded(true);\n    }\n  }\n  javaMethods.put(shortName,method);\n  StarlarkMethodDoc prev=methodMap.put(method.getName(),method);\n  if (prev != null && !prev.getMethod().equals(method.getMethod())) {\n    throw new IllegalStateException(String.format(\"Starlark type '%s' (%s) has distinct overloads of %s: %s, %s\",module.name(),classObject,method.getName(),method.getMethod(),prev.getMethod()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void addMethod(StarlarkJavaMethodDoc method){\n  if (!method.documented()) {\n    return;\n  }\n  String shortName=method.getName();\n  Collection<StarlarkJavaMethodDoc> overloads=javaMethods.get(shortName);\n  if (!overloads.isEmpty()) {\n    method.setOverloaded(true);\n    if (overloads.size() == 1) {\n      Iterables.getOnlyElement(overloads).setOverloaded(true);\n    }\n  }\n  javaMethods.put(shortName,method);\n  StarlarkMethodDoc prev=methodMap.put(method.getName(),method);\n  if (prev != null && !prev.getMethod().equals(method.getMethod())) {\n    throw new IllegalStateException(String.format(\"Starlark type '%s' (%s) has distinct overloads of %s: %s, %s\",module.name(),classObject,method.getName(),method.getMethod(),prev.getMethod()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 28
      },
      "nodeContext" : "!method.documented()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 80,
    "startColumnNumber" : 9,
    "endLineNumber" : 80,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}