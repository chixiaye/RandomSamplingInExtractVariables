{
  "id" : 216,
  "expression" : "entry.getKey().getSimpleName().toString()",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/RoboGuiceProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getKey().getSimpleName().toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 262,
      "startColumnNumber" : 24,
      "endLineNumber" : 262,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 262,
        "startColumnNumber" : 9,
        "endLineNumber" : 262,
        "endColumnNumber" : 66
      },
      "nodeContext" : "\"value\".equals(entry.getKey().getSimpleName().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 262,
        "startColumnNumber" : 5,
        "endLineNumber" : 275,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n  action=entry.getValue();\n  @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n  List<String> listenerClasses=new ArrayList<String>();\n  for (  Object value : values) {\n    listenerClasses.add(value.toString());\n  }\n  return listenerClasses;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 261,
        "startColumnNumber" : 131,
        "endLineNumber" : 277,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n    action=entry.getValue();\n    @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n    List<String> listenerClasses=new ArrayList<String>();\n    for (    Object value : values) {\n      listenerClasses.add(value.toString());\n    }\n    return listenerClasses;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 277,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n  if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n    action=entry.getValue();\n    @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n    List<String> listenerClasses=new ArrayList<String>();\n    for (    Object value : values) {\n      listenerClasses.add(value.toString());\n    }\n    return listenerClasses;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 260,
        "startColumnNumber" : 79,
        "endLineNumber" : 278,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  for (  Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n    if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n      action=entry.getValue();\n      @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n      List<String> listenerClasses=new ArrayList<String>();\n      for (      Object value : values) {\n        listenerClasses.add(value.toString());\n      }\n      return listenerClasses;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 260,
        "startColumnNumber" : 3,
        "endLineNumber" : 278,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (annotationName.equals(annotationMirror.getAnnotationType().toString())) {\n  for (  Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n    if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n      action=entry.getValue();\n      @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n      List<String> listenerClasses=new ArrayList<String>();\n      for (      Object value : values) {\n        listenerClasses.add(value.toString());\n      }\n      return listenerClasses;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 626,
        "startLineNumber" : 259,
        "startColumnNumber" : 62,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (annotationName.equals(annotationMirror.getAnnotationType().toString())) {\n    for (    Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n      if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n        action=entry.getValue();\n        @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n        List<String> listenerClasses=new ArrayList<String>();\n        for (        Object value : values) {\n          listenerClasses.add(value.toString());\n        }\n        return listenerClasses;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (AnnotationMirror annotationMirror : annotationMirrors) {\n  if (annotationName.equals(annotationMirror.getAnnotationType().toString())) {\n    for (    Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n      if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n        action=entry.getValue();\n        @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n        List<String> listenerClasses=new ArrayList<String>();\n        for (        Object value : values) {\n          listenerClasses.add(value.toString());\n        }\n        return listenerClasses;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 253,
        "startColumnNumber" : 70,
        "endLineNumber" : 281,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<? extends AnnotationMirror> annotationMirrors=activityElement.getAnnotationMirrors();\n  String annotationName=RoboGuice.class.getName();\n  AnnotationValue action=null;\n  for (  AnnotationMirror annotationMirror : annotationMirrors) {\n    if (annotationName.equals(annotationMirror.getAnnotationType().toString())) {\n      for (      Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n        if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n          action=entry.getValue();\n          @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n          List<String> listenerClasses=new ArrayList<String>();\n          for (          Object value : values) {\n            listenerClasses.add(value.toString());\n          }\n          return listenerClasses;\n        }\n      }\n    }\n  }\n  return new ArrayList<String>(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 253,
        "startColumnNumber" : 1,
        "endLineNumber" : 281,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<String> extractListenerClasses(Element activityElement){\n  List<? extends AnnotationMirror> annotationMirrors=activityElement.getAnnotationMirrors();\n  String annotationName=RoboGuice.class.getName();\n  AnnotationValue action=null;\n  for (  AnnotationMirror annotationMirror : annotationMirrors) {\n    if (annotationName.equals(annotationMirror.getAnnotationType().toString())) {\n      for (      Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n        if (\"value\".equals(entry.getKey().getSimpleName().toString())) {\n          action=entry.getValue();\n          @SuppressWarnings(\"unchecked\") List<Object> values=(List<Object>)action.getValue();\n          List<String> listenerClasses=new ArrayList<String>();\n          for (          Object value : values) {\n            listenerClasses.add(value.toString());\n          }\n          return listenerClasses;\n        }\n      }\n    }\n  }\n  return new ArrayList<String>(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 262,
        "startColumnNumber" : 9,
        "endLineNumber" : 262,
        "endColumnNumber" : 66
      },
      "nodeContext" : "\"value\".equals(entry.getKey().getSimpleName().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 262,
    "startColumnNumber" : 24,
    "endLineNumber" : 262,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}