{
  "id" : 435,
  "expression" : "arr1.size() == 1 && arr2.size() == 0",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/commander/src/test/java/com/iluwatar/commander/RetryTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arr1.size() == 1 && arr2.size() == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 64,
      "startColumnNumber" : 15,
      "endLineNumber" : 64,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertTrue(arr1.size() == 1 && arr2.size() == 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertTrue(arr1.size() == 1 && arr2.size() == 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1112,
        "startLineNumber" : 37,
        "startColumnNumber" : 21,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Retry.Operation op=(l) -> {\n    if (!l.isEmpty()) {\n      throw l.remove(0);\n    }\n  }\n;\n  Retry.HandleErrorIssue<Order> handleError=(o,e) -> {\n  }\n;\n  var r1=new Retry<>(op,handleError,3,30000,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n  var r2=new Retry<>(op,handleError,3,30000,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n  var user=new User(\"Jim\",\"ABCD\");\n  var order=new Order(user,\"book\",10f);\n  var arr1=new ArrayList<>(List.of(new ItemUnavailableException(),new DatabaseUnavailableException()));\n  try {\n    r1.perform(arr1,order);\n  }\n catch (  Exception e1) {\n    e1.printStackTrace();\n  }\n  var arr2=new ArrayList<>(List.of(new DatabaseUnavailableException(),new ItemUnavailableException()));\n  try {\n    r2.perform(arr2,order);\n  }\n catch (  Exception e1) {\n    e1.printStackTrace();\n  }\n  assertTrue(arr1.size() == 1 && arr2.size() == 0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test void performTest(){\n  Retry.Operation op=(l) -> {\n    if (!l.isEmpty()) {\n      throw l.remove(0);\n    }\n  }\n;\n  Retry.HandleErrorIssue<Order> handleError=(o,e) -> {\n  }\n;\n  var r1=new Retry<>(op,handleError,3,30000,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n  var r2=new Retry<>(op,handleError,3,30000,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n  var user=new User(\"Jim\",\"ABCD\");\n  var order=new Order(user,\"book\",10f);\n  var arr1=new ArrayList<>(List.of(new ItemUnavailableException(),new DatabaseUnavailableException()));\n  try {\n    r1.perform(arr1,order);\n  }\n catch (  Exception e1) {\n    e1.printStackTrace();\n  }\n  var arr2=new ArrayList<>(List.of(new DatabaseUnavailableException(),new ItemUnavailableException()));\n  try {\n    r2.perform(arr2,order);\n  }\n catch (  Exception e1) {\n    e1.printStackTrace();\n  }\n  assertTrue(arr1.size() == 1 && arr2.size() == 0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertTrue(arr1.size() == 1 && arr2.size() == 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 64,
    "startColumnNumber" : 15,
    "endLineNumber" : 64,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}