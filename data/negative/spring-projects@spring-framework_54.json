{
  "id" : 54,
  "expression" : "l.size()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "l.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 331,
      "startColumnNumber" : 26,
      "endLineNumber" : 331,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 35
      },
      "nodeContext" : "sb.append(\"[\").append(l.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 48
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 326,
        "startColumnNumber" : 59,
        "endLineNumber" : 341,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object,true));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.getClass().getComponentType().isArray()) {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object,true));\n  }\n  sb.append(\"}\");\n}\n else {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 297,
        "startColumnNumber" : 3,
        "endLineNumber" : 357,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.getClass().getComponentType().isPrimitive()) {\n  Class<?> primitiveType=value.getClass().getComponentType();\n  if (primitiveType == Integer.TYPE) {\n    int[] l=(int[])value;\n    sb.append(\"int[\").append(l.length).append(\"]{\");\n    for (int j=0; j < l.length; j++) {\n      if (j > 0) {\n        sb.append(\",\");\n      }\n      sb.append(stringValueOf(l[j]));\n    }\n    sb.append(\"}\");\n  }\n else   if (primitiveType == Long.TYPE) {\n    long[] l=(long[])value;\n    sb.append(\"long[\").append(l.length).append(\"]{\");\n    for (int j=0; j < l.length; j++) {\n      if (j > 0) {\n        sb.append(\",\");\n      }\n      sb.append(stringValueOf(l[j]));\n    }\n    sb.append(\"}\");\n  }\n else {\n    throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n  }\n}\n else if (value.getClass().getComponentType().isArray()) {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object,true));\n  }\n  sb.append(\"}\");\n}\n else {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1760,
        "startLineNumber" : 295,
        "startColumnNumber" : 34,
        "endLineNumber" : 359,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder();\n  if (value.getClass().getComponentType().isPrimitive()) {\n    Class<?> primitiveType=value.getClass().getComponentType();\n    if (primitiveType == Integer.TYPE) {\n      int[] l=(int[])value;\n      sb.append(\"int[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else     if (primitiveType == Long.TYPE) {\n      long[] l=(long[])value;\n      sb.append(\"long[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else {\n      throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n    }\n  }\n else   if (value.getClass().getComponentType().isArray()) {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object,true));\n    }\n    sb.append(\"}\");\n  }\n else {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object));\n    }\n    sb.append(\"}\");\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 295,
        "startColumnNumber" : 2,
        "endLineNumber" : 362,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (value.getClass().isArray()) {\n  StringBuilder sb=new StringBuilder();\n  if (value.getClass().getComponentType().isPrimitive()) {\n    Class<?> primitiveType=value.getClass().getComponentType();\n    if (primitiveType == Integer.TYPE) {\n      int[] l=(int[])value;\n      sb.append(\"int[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else     if (primitiveType == Long.TYPE) {\n      long[] l=(long[])value;\n      sb.append(\"long[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else {\n      throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n    }\n  }\n else   if (value.getClass().getComponentType().isArray()) {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object,true));\n    }\n    sb.append(\"}\");\n  }\n else {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object));\n    }\n    sb.append(\"}\");\n  }\n  return sb.toString();\n}\n else {\n  return value.toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 369,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 290,
        "startColumnNumber" : 71,
        "endLineNumber" : 363,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (value == null) {\n    return \"null\";\n  }\n  if (value.getClass().isArray()) {\n    StringBuilder sb=new StringBuilder();\n    if (value.getClass().getComponentType().isPrimitive()) {\n      Class<?> primitiveType=value.getClass().getComponentType();\n      if (primitiveType == Integer.TYPE) {\n        int[] l=(int[])value;\n        sb.append(\"int[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else       if (primitiveType == Long.TYPE) {\n        long[] l=(long[])value;\n        sb.append(\"long[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else {\n        throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n      }\n    }\n else     if (value.getClass().getComponentType().isArray()) {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object,true));\n      }\n      sb.append(\"}\");\n    }\n else {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object));\n      }\n      sb.append(\"}\");\n    }\n    return sb.toString();\n  }\n else {\n    return value.toString();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2127,
        "startLineNumber" : 285,
        "startColumnNumber" : 1,
        "endLineNumber" : 363,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Produce a nice string representation of the input object.\n * @param value object to be formatted\n * @return a nice string\n */\nprotected static String stringValueOf(Object value,boolean isNested){\n  if (value == null) {\n    return \"null\";\n  }\n  if (value.getClass().isArray()) {\n    StringBuilder sb=new StringBuilder();\n    if (value.getClass().getComponentType().isPrimitive()) {\n      Class<?> primitiveType=value.getClass().getComponentType();\n      if (primitiveType == Integer.TYPE) {\n        int[] l=(int[])value;\n        sb.append(\"int[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else       if (primitiveType == Long.TYPE) {\n        long[] l=(long[])value;\n        sb.append(\"long[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else {\n        throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n      }\n    }\n else     if (value.getClass().getComponentType().isArray()) {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object,true));\n      }\n      sb.append(\"}\");\n    }\n else {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object));\n      }\n      sb.append(\"}\");\n    }\n    return sb.toString();\n  }\n else {\n    return value.toString();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "l.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 347,
      "startColumnNumber" : 26,
      "endLineNumber" : 347,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 35
      },
      "nodeContext" : "sb.append(\"[\").append(l.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 48
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 342,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.getClass().getComponentType().isArray()) {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object,true));\n  }\n  sb.append(\"}\");\n}\n else {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 297,
        "startColumnNumber" : 3,
        "endLineNumber" : 357,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.getClass().getComponentType().isPrimitive()) {\n  Class<?> primitiveType=value.getClass().getComponentType();\n  if (primitiveType == Integer.TYPE) {\n    int[] l=(int[])value;\n    sb.append(\"int[\").append(l.length).append(\"]{\");\n    for (int j=0; j < l.length; j++) {\n      if (j > 0) {\n        sb.append(\",\");\n      }\n      sb.append(stringValueOf(l[j]));\n    }\n    sb.append(\"}\");\n  }\n else   if (primitiveType == Long.TYPE) {\n    long[] l=(long[])value;\n    sb.append(\"long[\").append(l.length).append(\"]{\");\n    for (int j=0; j < l.length; j++) {\n      if (j > 0) {\n        sb.append(\",\");\n      }\n      sb.append(stringValueOf(l[j]));\n    }\n    sb.append(\"}\");\n  }\n else {\n    throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n  }\n}\n else if (value.getClass().getComponentType().isArray()) {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object,true));\n  }\n  sb.append(\"}\");\n}\n else {\n  List<Object> l=Arrays.asList((Object[])value);\n  if (!isNested) {\n    sb.append(value.getClass().getComponentType().getName());\n  }\n  sb.append(\"[\").append(l.size()).append(\"]{\");\n  int i=0;\n  for (  Object object : l) {\n    if (i > 0) {\n      sb.append(\",\");\n    }\n    i++;\n    sb.append(stringValueOf(object));\n  }\n  sb.append(\"}\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1760,
        "startLineNumber" : 295,
        "startColumnNumber" : 34,
        "endLineNumber" : 359,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder();\n  if (value.getClass().getComponentType().isPrimitive()) {\n    Class<?> primitiveType=value.getClass().getComponentType();\n    if (primitiveType == Integer.TYPE) {\n      int[] l=(int[])value;\n      sb.append(\"int[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else     if (primitiveType == Long.TYPE) {\n      long[] l=(long[])value;\n      sb.append(\"long[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else {\n      throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n    }\n  }\n else   if (value.getClass().getComponentType().isArray()) {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object,true));\n    }\n    sb.append(\"}\");\n  }\n else {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object));\n    }\n    sb.append(\"}\");\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 295,
        "startColumnNumber" : 2,
        "endLineNumber" : 362,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (value.getClass().isArray()) {\n  StringBuilder sb=new StringBuilder();\n  if (value.getClass().getComponentType().isPrimitive()) {\n    Class<?> primitiveType=value.getClass().getComponentType();\n    if (primitiveType == Integer.TYPE) {\n      int[] l=(int[])value;\n      sb.append(\"int[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else     if (primitiveType == Long.TYPE) {\n      long[] l=(long[])value;\n      sb.append(\"long[\").append(l.length).append(\"]{\");\n      for (int j=0; j < l.length; j++) {\n        if (j > 0) {\n          sb.append(\",\");\n        }\n        sb.append(stringValueOf(l[j]));\n      }\n      sb.append(\"}\");\n    }\n else {\n      throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n    }\n  }\n else   if (value.getClass().getComponentType().isArray()) {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object,true));\n    }\n    sb.append(\"}\");\n  }\n else {\n    List<Object> l=Arrays.asList((Object[])value);\n    if (!isNested) {\n      sb.append(value.getClass().getComponentType().getName());\n    }\n    sb.append(\"[\").append(l.size()).append(\"]{\");\n    int i=0;\n    for (    Object object : l) {\n      if (i > 0) {\n        sb.append(\",\");\n      }\n      i++;\n      sb.append(stringValueOf(object));\n    }\n    sb.append(\"}\");\n  }\n  return sb.toString();\n}\n else {\n  return value.toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 369,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 290,
        "startColumnNumber" : 71,
        "endLineNumber" : 363,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (value == null) {\n    return \"null\";\n  }\n  if (value.getClass().isArray()) {\n    StringBuilder sb=new StringBuilder();\n    if (value.getClass().getComponentType().isPrimitive()) {\n      Class<?> primitiveType=value.getClass().getComponentType();\n      if (primitiveType == Integer.TYPE) {\n        int[] l=(int[])value;\n        sb.append(\"int[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else       if (primitiveType == Long.TYPE) {\n        long[] l=(long[])value;\n        sb.append(\"long[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else {\n        throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n      }\n    }\n else     if (value.getClass().getComponentType().isArray()) {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object,true));\n      }\n      sb.append(\"}\");\n    }\n else {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object));\n      }\n      sb.append(\"}\");\n    }\n    return sb.toString();\n  }\n else {\n    return value.toString();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2127,
        "startLineNumber" : 285,
        "startColumnNumber" : 1,
        "endLineNumber" : 363,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Produce a nice string representation of the input object.\n * @param value object to be formatted\n * @return a nice string\n */\nprotected static String stringValueOf(Object value,boolean isNested){\n  if (value == null) {\n    return \"null\";\n  }\n  if (value.getClass().isArray()) {\n    StringBuilder sb=new StringBuilder();\n    if (value.getClass().getComponentType().isPrimitive()) {\n      Class<?> primitiveType=value.getClass().getComponentType();\n      if (primitiveType == Integer.TYPE) {\n        int[] l=(int[])value;\n        sb.append(\"int[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else       if (primitiveType == Long.TYPE) {\n        long[] l=(long[])value;\n        sb.append(\"long[\").append(l.length).append(\"]{\");\n        for (int j=0; j < l.length; j++) {\n          if (j > 0) {\n            sb.append(\",\");\n          }\n          sb.append(stringValueOf(l[j]));\n        }\n        sb.append(\"}\");\n      }\n else {\n        throw new RuntimeException(\"Please implement support for type \" + primitiveType.getName() + \" in ExpressionTestCase.stringValueOf()\");\n      }\n    }\n else     if (value.getClass().getComponentType().isArray()) {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object,true));\n      }\n      sb.append(\"}\");\n    }\n else {\n      List<Object> l=Arrays.asList((Object[])value);\n      if (!isNested) {\n        sb.append(value.getClass().getComponentType().getName());\n      }\n      sb.append(\"[\").append(l.size()).append(\"]{\");\n      int i=0;\n      for (      Object object : l) {\n        if (i > 0) {\n          sb.append(\",\");\n        }\n        i++;\n        sb.append(stringValueOf(object));\n      }\n      sb.append(\"}\");\n    }\n    return sb.toString();\n  }\n else {\n    return value.toString();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sb.append(\"[\").append(l.size()).append(\"]{\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 331,
    "startColumnNumber" : 26,
    "endLineNumber" : 331,
    "endColumnNumber" : 34
  }, {
    "charLength" : 8,
    "startLineNumber" : 347,
    "startColumnNumber" : 26,
    "endLineNumber" : 347,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}