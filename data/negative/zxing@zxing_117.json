{
  "id" : 117,
  "expression" : "dataRegionRow * (dataRegionSizeRows + 2)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/datamatrix/decoder/BitMatrixParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dataRegionRow * (dataRegionSizeRows + 2)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 425,
      "startColumnNumber" : 30,
      "endLineNumber" : 425,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 425,
        "startColumnNumber" : 30,
        "endLineNumber" : 425,
        "endColumnNumber" : 74
      },
      "nodeContext" : "dataRegionRow * (dataRegionSizeRows + 2) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 425,
        "startColumnNumber" : 30,
        "endLineNumber" : 425,
        "endColumnNumber" : 78
      },
      "nodeContext" : "dataRegionRow * (dataRegionSizeRows + 2) + 1 + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 425,
        "startColumnNumber" : 14,
        "endLineNumber" : 425,
        "endColumnNumber" : 78
      },
      "nodeContext" : "readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 425,
        "startColumnNumber" : 10,
        "endLineNumber" : 425,
        "endColumnNumber" : 79
      },
      "nodeContext" : "int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 424,
        "startColumnNumber" : 53,
        "endLineNumber" : 434,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n  int writeRowOffset=dataRegionRowOffset + i;\n  for (int j=0; j < dataRegionSizeColumns; ++j) {\n    int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n    if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n      int writeColumnOffset=dataRegionColumnOffset + j;\n      bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 424,
        "startColumnNumber" : 8,
        "endLineNumber" : 434,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < dataRegionSizeRows; ++i) {\n  int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n  int writeRowOffset=dataRegionRowOffset + i;\n  for (int j=0; j < dataRegionSizeColumns; ++j) {\n    int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n    if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n      int writeColumnOffset=dataRegionColumnOffset + j;\n      bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 691,
        "startLineNumber" : 422,
        "startColumnNumber" : 98,
        "endLineNumber" : 435,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n  for (int i=0; i < dataRegionSizeRows; ++i) {\n    int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n    int writeRowOffset=dataRegionRowOffset + i;\n    for (int j=0; j < dataRegionSizeColumns; ++j) {\n      int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n      if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n        int writeColumnOffset=dataRegionColumnOffset + j;\n        bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 422,
        "startColumnNumber" : 6,
        "endLineNumber" : 435,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n  int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n  for (int i=0; i < dataRegionSizeRows; ++i) {\n    int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n    int writeRowOffset=dataRegionRowOffset + i;\n    for (int j=0; j < dataRegionSizeColumns; ++j) {\n      int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n      if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n        int writeColumnOffset=dataRegionColumnOffset + j;\n        bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 420,
        "startColumnNumber" : 84,
        "endLineNumber" : 436,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int dataRegionRowOffset=dataRegionRow * dataRegionSizeRows;\n  for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n    int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n    for (int i=0; i < dataRegionSizeRows; ++i) {\n      int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n      int writeRowOffset=dataRegionRowOffset + i;\n      for (int j=0; j < dataRegionSizeColumns; ++j) {\n        int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n        if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n          int writeColumnOffset=dataRegionColumnOffset + j;\n          bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 420,
        "startColumnNumber" : 4,
        "endLineNumber" : 436,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int dataRegionRow=0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {\n  int dataRegionRowOffset=dataRegionRow * dataRegionSizeRows;\n  for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n    int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n    for (int i=0; i < dataRegionSizeRows; ++i) {\n      int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n      int writeRowOffset=dataRegionRowOffset + i;\n      for (int j=0; j < dataRegionSizeColumns; ++j) {\n        int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n        if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n          int writeColumnOffset=dataRegionColumnOffset + j;\n          bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1819,
        "startLineNumber" : 402,
        "startColumnNumber" : 51,
        "endLineNumber" : 438,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int symbolSizeRows=version.getSymbolSizeRows();\n  int symbolSizeColumns=version.getSymbolSizeColumns();\n  if (bitMatrix.getHeight() != symbolSizeRows) {\n    throw new IllegalArgumentException(\"Dimension of bitMarix must match the version size\");\n  }\n  int dataRegionSizeRows=version.getDataRegionSizeRows();\n  int dataRegionSizeColumns=version.getDataRegionSizeColumns();\n  int numDataRegionsRow=symbolSizeRows / dataRegionSizeRows;\n  int numDataRegionsColumn=symbolSizeColumns / dataRegionSizeColumns;\n  int sizeDataRegionRow=numDataRegionsRow * dataRegionSizeRows;\n  int sizeDataRegionColumn=numDataRegionsColumn * dataRegionSizeColumns;\n  BitMatrix bitMatrixWithoutAlignment=new BitMatrix(sizeDataRegionColumn,sizeDataRegionRow);\n  for (int dataRegionRow=0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {\n    int dataRegionRowOffset=dataRegionRow * dataRegionSizeRows;\n    for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n      int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n      for (int i=0; i < dataRegionSizeRows; ++i) {\n        int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n        int writeRowOffset=dataRegionRowOffset + i;\n        for (int j=0; j < dataRegionSizeColumns; ++j) {\n          int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n          if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n            int writeColumnOffset=dataRegionColumnOffset + j;\n            bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n          }\n        }\n      }\n    }\n  }\n  return bitMatrixWithoutAlignment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2130,
        "startLineNumber" : 395,
        "startColumnNumber" : 2,
        "endLineNumber" : 438,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>Extracts the data region from a  {@link BitMatrix} that containsalignment patterns.</p>\n * @param bitMatrix Original {@link BitMatrix} with alignment patterns\n * @return BitMatrix that has the alignment patterns removed\n */\nBitMatrix extractDataRegion(BitMatrix bitMatrix){\n  int symbolSizeRows=version.getSymbolSizeRows();\n  int symbolSizeColumns=version.getSymbolSizeColumns();\n  if (bitMatrix.getHeight() != symbolSizeRows) {\n    throw new IllegalArgumentException(\"Dimension of bitMarix must match the version size\");\n  }\n  int dataRegionSizeRows=version.getDataRegionSizeRows();\n  int dataRegionSizeColumns=version.getDataRegionSizeColumns();\n  int numDataRegionsRow=symbolSizeRows / dataRegionSizeRows;\n  int numDataRegionsColumn=symbolSizeColumns / dataRegionSizeColumns;\n  int sizeDataRegionRow=numDataRegionsRow * dataRegionSizeRows;\n  int sizeDataRegionColumn=numDataRegionsColumn * dataRegionSizeColumns;\n  BitMatrix bitMatrixWithoutAlignment=new BitMatrix(sizeDataRegionColumn,sizeDataRegionRow);\n  for (int dataRegionRow=0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {\n    int dataRegionRowOffset=dataRegionRow * dataRegionSizeRows;\n    for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n      int dataRegionColumnOffset=dataRegionColumn * dataRegionSizeColumns;\n      for (int i=0; i < dataRegionSizeRows; ++i) {\n        int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n        int writeRowOffset=dataRegionRowOffset + i;\n        for (int j=0; j < dataRegionSizeColumns; ++j) {\n          int readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n          if (bitMatrix.get(readColumnOffset,readRowOffset)) {\n            int writeColumnOffset=dataRegionColumnOffset + j;\n            bitMatrixWithoutAlignment.set(writeColumnOffset,writeRowOffset);\n          }\n        }\n      }\n    }\n  }\n  return bitMatrixWithoutAlignment;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 207,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 425,
        "startColumnNumber" : 10,
        "endLineNumber" : 425,
        "endColumnNumber" : 79
      },
      "nodeContext" : "int readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 425,
    "startColumnNumber" : 30,
    "endLineNumber" : 425,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}