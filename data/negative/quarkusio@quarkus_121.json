{
  "id" : 121,
  "expression" : "config.console",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.console",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 251,
      "startColumnNumber" : 12,
      "endLineNumber" : 251,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 33
      },
      "nodeContext" : "config.console.enable",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config.console.enable) {\n  final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n  errorManager=consoleHandler.getErrorManager();\n  handlers.add(consoleHandler);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 33
      },
      "nodeContext" : "config.console.enable",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.ConsoleConfig"
  }, {
    "nodeContext" : "config.console",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 252,
      "startColumnNumber" : 67,
      "endLineNumber" : 252,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 252,
        "startColumnNumber" : 43,
        "endLineNumber" : 254,
        "endColumnNumber" : 94
      },
      "nodeContext" : "configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 252,
        "startColumnNumber" : 26,
        "endLineNumber" : 254,
        "endColumnNumber" : 94
      },
      "nodeContext" : "consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 254,
        "endColumnNumber" : 95
      },
      "nodeContext" : "final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 251,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n  errorManager=consoleHandler.getErrorManager();\n  handlers.add(consoleHandler);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config.console.enable) {\n  final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n  errorManager=consoleHandler.getErrorManager();\n  handlers.add(consoleHandler);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 252,
        "startColumnNumber" : 43,
        "endLineNumber" : 254,
        "endColumnNumber" : 94
      },
      "nodeContext" : "configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.ConsoleConfig"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 251,
    "startColumnNumber" : 12,
    "endLineNumber" : 251,
    "endColumnNumber" : 26
  }, {
    "charLength" : 14,
    "startLineNumber" : 252,
    "startColumnNumber" : 67,
    "endLineNumber" : 252,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}