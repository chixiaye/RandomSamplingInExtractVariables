{
  "id" : 354,
  "expression" : "interceptor",
  "projectName" : "apache@pulsar",
  "commitID" : "4f23767fcdc96e02d25837350891c14a13705b45",
  "filePath" : "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "interceptor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 176,
      "startColumnNumber" : 24,
      "endLineNumber" : 176,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 35
      },
      "nodeContext" : "null != interceptor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != interceptor) {\n  interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3453,
        "startLineNumber" : 111,
        "startColumnNumber" : 76,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Entry entry=entries.get(i);\n  if (entry == null) {\n    continue;\n  }\n  ByteBuf metadataAndPayload=entry.getDataBuffer();\n  int entryWrapperIndex=i + entryWrapperOffset;\n  MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n  msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n  if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n    if (Markers.isTxnMarker(msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n else     if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n      subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n  }\n else   if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n    PositionImpl pos=(PositionImpl)entry.getPosition();\n    if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n      processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n    }\n    entries.set(i,null);\n    entry.release();\n    subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n    continue;\n  }\n else   if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n    entries.set(i,null);\n    entry.release();\n    continue;\n  }\n  int batchSize=msgMetadata.getNumMessagesInBatch();\n  totalMessages+=batchSize;\n  totalBytes+=metadataAndPayload.readableBytes();\n  totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n  batchSizes.setBatchSize(i,batchSize);\n  long[] ackSet=null;\n  if (indexesAcks != null && cursor != null) {\n    ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n    if (ackSet != null) {\n      indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n    }\n else {\n      indexesAcks.setIndexesAcks(i,null);\n    }\n  }\n  BrokerInterceptor interceptor=subscription.interceptor();\n  if (null != interceptor) {\n    interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3521,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n  Entry entry=entries.get(i);\n  if (entry == null) {\n    continue;\n  }\n  ByteBuf metadataAndPayload=entry.getDataBuffer();\n  int entryWrapperIndex=i + entryWrapperOffset;\n  MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n  msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n  if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n    if (Markers.isTxnMarker(msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n else     if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n      subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n  }\n else   if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n    PositionImpl pos=(PositionImpl)entry.getPosition();\n    if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n      processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n    }\n    entries.set(i,null);\n    entry.release();\n    subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n    continue;\n  }\n else   if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n    entries.set(i,null);\n    entry.release();\n    continue;\n  }\n  int batchSize=msgMetadata.getNumMessagesInBatch();\n  totalMessages+=batchSize;\n  totalBytes+=metadataAndPayload.readableBytes();\n  totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n  batchSizes.setBatchSize(i,batchSize);\n  long[] ackSet=null;\n  if (indexesAcks != null && cursor != null) {\n    ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n    if (ackSet != null) {\n      indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n    }\n else {\n      indexesAcks.setIndexesAcks(i,null);\n    }\n  }\n  BrokerInterceptor interceptor=subscription.interceptor();\n  if (null != interceptor) {\n    interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 358,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3814,
        "startLineNumber" : 107,
        "startColumnNumber" : 92,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int totalMessages=0;\n  long totalBytes=0;\n  int totalChunkedMessages=0;\n  for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n    Entry entry=entries.get(i);\n    if (entry == null) {\n      continue;\n    }\n    ByteBuf metadataAndPayload=entry.getDataBuffer();\n    int entryWrapperIndex=i + entryWrapperOffset;\n    MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n    msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n    if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n      if (Markers.isTxnMarker(msgMetadata)) {\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n else       if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n        subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n    }\n else     if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n      PositionImpl pos=(PositionImpl)entry.getPosition();\n      if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n        processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n      }\n      entries.set(i,null);\n      entry.release();\n      subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n      continue;\n    }\n else     if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n    int batchSize=msgMetadata.getNumMessagesInBatch();\n    totalMessages+=batchSize;\n    totalBytes+=metadataAndPayload.readableBytes();\n    totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n    batchSizes.setBatchSize(i,batchSize);\n    long[] ackSet=null;\n    if (indexesAcks != null && cursor != null) {\n      ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n      if (ackSet != null) {\n        indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n      }\n else {\n        indexesAcks.setIndexesAcks(i,null);\n      }\n    }\n    BrokerInterceptor interceptor=subscription.interceptor();\n    if (null != interceptor) {\n      interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n    }\n  }\n  sendMessageInfo.setTotalMessages(totalMessages);\n  sendMessageInfo.setTotalBytes(totalBytes);\n  sendMessageInfo.setTotalChunkedMessages(totalChunkedMessages);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4101,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void filterEntriesForConsumer(Optional<EntryWrapper[]> entryWrapper,int entryWrapperOffset,List<Entry> entries,EntryBatchSizes batchSizes,SendMessageInfo sendMessageInfo,EntryBatchIndexesAcks indexesAcks,ManagedCursor cursor,boolean isReplayRead){\n  int totalMessages=0;\n  long totalBytes=0;\n  int totalChunkedMessages=0;\n  for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n    Entry entry=entries.get(i);\n    if (entry == null) {\n      continue;\n    }\n    ByteBuf metadataAndPayload=entry.getDataBuffer();\n    int entryWrapperIndex=i + entryWrapperOffset;\n    MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n    msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n    if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n      if (Markers.isTxnMarker(msgMetadata)) {\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n else       if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n        subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n    }\n else     if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n      PositionImpl pos=(PositionImpl)entry.getPosition();\n      if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n        processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n      }\n      entries.set(i,null);\n      entry.release();\n      subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n      continue;\n    }\n else     if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n    int batchSize=msgMetadata.getNumMessagesInBatch();\n    totalMessages+=batchSize;\n    totalBytes+=metadataAndPayload.readableBytes();\n    totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n    batchSizes.setBatchSize(i,batchSize);\n    long[] ackSet=null;\n    if (indexesAcks != null && cursor != null) {\n      ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n      if (ackSet != null) {\n        indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n      }\n else {\n        indexesAcks.setIndexesAcks(i,null);\n      }\n    }\n    BrokerInterceptor interceptor=subscription.interceptor();\n    if (null != interceptor) {\n      interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n    }\n  }\n  sendMessageInfo.setTotalMessages(totalMessages);\n  sendMessageInfo.setTotalBytes(totalBytes);\n  sendMessageInfo.setTotalChunkedMessages(totalChunkedMessages);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 431,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 35
      },
      "nodeContext" : "null != interceptor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.intercept.BrokerInterceptor"
  }, {
    "nodeContext" : "interceptor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 177,
      "startColumnNumber" : 16,
      "endLineNumber" : 177,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 87
      },
      "nodeContext" : "interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 88
      },
      "nodeContext" : "interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 176,
        "startColumnNumber" : 37,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != interceptor) {\n  interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3453,
        "startLineNumber" : 111,
        "startColumnNumber" : 76,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Entry entry=entries.get(i);\n  if (entry == null) {\n    continue;\n  }\n  ByteBuf metadataAndPayload=entry.getDataBuffer();\n  int entryWrapperIndex=i + entryWrapperOffset;\n  MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n  msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n  if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n    if (Markers.isTxnMarker(msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n else     if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n      subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n  }\n else   if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n    PositionImpl pos=(PositionImpl)entry.getPosition();\n    if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n      processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n    }\n    entries.set(i,null);\n    entry.release();\n    subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n    continue;\n  }\n else   if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n    entries.set(i,null);\n    entry.release();\n    continue;\n  }\n  int batchSize=msgMetadata.getNumMessagesInBatch();\n  totalMessages+=batchSize;\n  totalBytes+=metadataAndPayload.readableBytes();\n  totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n  batchSizes.setBatchSize(i,batchSize);\n  long[] ackSet=null;\n  if (indexesAcks != null && cursor != null) {\n    ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n    if (ackSet != null) {\n      indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n    }\n else {\n      indexesAcks.setIndexesAcks(i,null);\n    }\n  }\n  BrokerInterceptor interceptor=subscription.interceptor();\n  if (null != interceptor) {\n    interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3521,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n  Entry entry=entries.get(i);\n  if (entry == null) {\n    continue;\n  }\n  ByteBuf metadataAndPayload=entry.getDataBuffer();\n  int entryWrapperIndex=i + entryWrapperOffset;\n  MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n  msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n  if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n    if (Markers.isTxnMarker(msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n else     if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n      subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n  }\n else   if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n    PositionImpl pos=(PositionImpl)entry.getPosition();\n    if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n      processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n    }\n    entries.set(i,null);\n    entry.release();\n    subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n    continue;\n  }\n else   if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n    entries.set(i,null);\n    entry.release();\n    continue;\n  }\n  int batchSize=msgMetadata.getNumMessagesInBatch();\n  totalMessages+=batchSize;\n  totalBytes+=metadataAndPayload.readableBytes();\n  totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n  batchSizes.setBatchSize(i,batchSize);\n  long[] ackSet=null;\n  if (indexesAcks != null && cursor != null) {\n    ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n    if (ackSet != null) {\n      indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n    }\n else {\n      indexesAcks.setIndexesAcks(i,null);\n    }\n  }\n  BrokerInterceptor interceptor=subscription.interceptor();\n  if (null != interceptor) {\n    interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 358,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3814,
        "startLineNumber" : 107,
        "startColumnNumber" : 92,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int totalMessages=0;\n  long totalBytes=0;\n  int totalChunkedMessages=0;\n  for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n    Entry entry=entries.get(i);\n    if (entry == null) {\n      continue;\n    }\n    ByteBuf metadataAndPayload=entry.getDataBuffer();\n    int entryWrapperIndex=i + entryWrapperOffset;\n    MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n    msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n    if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n      if (Markers.isTxnMarker(msgMetadata)) {\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n else       if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n        subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n    }\n else     if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n      PositionImpl pos=(PositionImpl)entry.getPosition();\n      if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n        processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n      }\n      entries.set(i,null);\n      entry.release();\n      subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n      continue;\n    }\n else     if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n    int batchSize=msgMetadata.getNumMessagesInBatch();\n    totalMessages+=batchSize;\n    totalBytes+=metadataAndPayload.readableBytes();\n    totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n    batchSizes.setBatchSize(i,batchSize);\n    long[] ackSet=null;\n    if (indexesAcks != null && cursor != null) {\n      ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n      if (ackSet != null) {\n        indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n      }\n else {\n        indexesAcks.setIndexesAcks(i,null);\n      }\n    }\n    BrokerInterceptor interceptor=subscription.interceptor();\n    if (null != interceptor) {\n      interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n    }\n  }\n  sendMessageInfo.setTotalMessages(totalMessages);\n  sendMessageInfo.setTotalBytes(totalBytes);\n  sendMessageInfo.setTotalChunkedMessages(totalChunkedMessages);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4101,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void filterEntriesForConsumer(Optional<EntryWrapper[]> entryWrapper,int entryWrapperOffset,List<Entry> entries,EntryBatchSizes batchSizes,SendMessageInfo sendMessageInfo,EntryBatchIndexesAcks indexesAcks,ManagedCursor cursor,boolean isReplayRead){\n  int totalMessages=0;\n  long totalBytes=0;\n  int totalChunkedMessages=0;\n  for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {\n    Entry entry=entries.get(i);\n    if (entry == null) {\n      continue;\n    }\n    ByteBuf metadataAndPayload=entry.getDataBuffer();\n    int entryWrapperIndex=i + entryWrapperOffset;\n    MessageMetadata msgMetadata=entryWrapper.isPresent() && entryWrapper.get()[entryWrapperIndex] != null ? entryWrapper.get()[entryWrapperIndex].getMetadata() : null;\n    msgMetadata=msgMetadata == null ? Commands.peekMessageMetadata(metadataAndPayload,subscription.toString(),-1) : msgMetadata;\n    if (!isReplayRead && msgMetadata != null && msgMetadata.hasTxnidMostBits() && msgMetadata.hasTxnidLeastBits()) {\n      if (Markers.isTxnMarker(msgMetadata)) {\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n else       if (((PersistentTopic)subscription.getTopic()).isTxnAborted(new TxnID(msgMetadata.getTxnidMostBits(),msgMetadata.getTxnidLeastBits()))) {\n        subscription.acknowledgeMessage(Collections.singletonList(entry.getPosition()),AckType.Individual,Collections.emptyMap());\n        entries.set(i,null);\n        entry.release();\n        continue;\n      }\n    }\n else     if (msgMetadata == null || Markers.isServerOnlyMarker(msgMetadata)) {\n      PositionImpl pos=(PositionImpl)entry.getPosition();\n      if (Markers.isReplicatedSubscriptionSnapshotMarker(msgMetadata)) {\n        processReplicatedSubscriptionSnapshot(pos,metadataAndPayload);\n      }\n      entries.set(i,null);\n      entry.release();\n      subscription.acknowledgeMessage(Collections.singletonList(pos),AckType.Individual,Collections.emptyMap());\n      continue;\n    }\n else     if (msgMetadata.hasDeliverAtTime() && trackDelayedDelivery(entry.getLedgerId(),entry.getEntryId(),msgMetadata)) {\n      entries.set(i,null);\n      entry.release();\n      continue;\n    }\n    int batchSize=msgMetadata.getNumMessagesInBatch();\n    totalMessages+=batchSize;\n    totalBytes+=metadataAndPayload.readableBytes();\n    totalChunkedMessages+=msgMetadata.hasChunkId() ? 1 : 0;\n    batchSizes.setBatchSize(i,batchSize);\n    long[] ackSet=null;\n    if (indexesAcks != null && cursor != null) {\n      ackSet=cursor.getDeletedBatchIndexesAsLongArray(PositionImpl.get(entry.getLedgerId(),entry.getEntryId()));\n      if (ackSet != null) {\n        indexesAcks.setIndexesAcks(i,Pair.of(batchSize,ackSet));\n      }\n else {\n        indexesAcks.setIndexesAcks(i,null);\n      }\n    }\n    BrokerInterceptor interceptor=subscription.interceptor();\n    if (null != interceptor) {\n      interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n    }\n  }\n  sendMessageInfo.setTotalMessages(totalMessages);\n  sendMessageInfo.setTotalBytes(totalBytes);\n  sendMessageInfo.setTotalChunkedMessages(totalChunkedMessages);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 431,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 177,
        "endColumnNumber" : 88
      },
      "nodeContext" : "interceptor.beforeSendMessage(subscription,entry,ackSet,msgMetadata);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.intercept.BrokerInterceptor"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 176,
    "startColumnNumber" : 24,
    "endLineNumber" : 176,
    "endColumnNumber" : 35
  }, {
    "charLength" : 11,
    "startLineNumber" : 177,
    "startColumnNumber" : 16,
    "endLineNumber" : 177,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}