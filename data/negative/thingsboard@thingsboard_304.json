{
  "id" : 304,
  "expression" : "this::checkInactivityAndReportActivity",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/common/transport/transport-api/src/main/java/org/thingsboard/server/common/transport/service/DefaultTransportService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this::checkInactivityAndReportActivity",
    "nodeType" : "ExpressionMethodReference",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 211,
      "startColumnNumber" : 43,
      "endLineNumber" : 211,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 177
      },
      "nodeContext" : "this.scheduler.scheduleAtFixedRate(this::checkInactivityAndReportActivity,new Random().nextInt((int)sessionReportTimeout),sessionReportTimeout,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 178
      },
      "nodeContext" : "this.scheduler.scheduleAtFixedRate(this::checkInactivityAndReportActivity,new Random().nextInt((int)sessionReportTimeout),sessionReportTimeout,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2647,
        "startLineNumber" : 206,
        "startColumnNumber" : 23,
        "endLineNumber" : 248,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.ruleEngineProducerStats=statsFactory.createMessagesStats(StatsType.RULE_ENGINE.getName() + \".producer\");\n  this.tbCoreProducerStats=statsFactory.createMessagesStats(StatsType.CORE.getName() + \".producer\");\n  this.transportApiStats=statsFactory.createMessagesStats(StatsType.TRANSPORT.getName() + \".producer\");\n  this.transportCallbackExecutor=ThingsBoardExecutors.newWorkStealingPool(20,getClass());\n  this.scheduler.scheduleAtFixedRate(this::checkInactivityAndReportActivity,new Random().nextInt((int)sessionReportTimeout),sessionReportTimeout,TimeUnit.MILLISECONDS);\n  transportApiRequestTemplate=queueProvider.createTransportApiRequestTemplate();\n  transportApiRequestTemplate.setMessagesStats(transportApiStats);\n  ruleEngineMsgProducer=producerProvider.getRuleEngineMsgProducer();\n  tbCoreMsgProducer=producerProvider.getTbCoreMsgProducer();\n  transportNotificationsConsumer=queueProvider.createTransportNotificationsConsumer();\n  TopicPartitionInfo tpi=partitionService.getNotificationsTopic(ServiceType.TB_TRANSPORT,serviceInfoProvider.getServiceId());\n  transportNotificationsConsumer.subscribe(Collections.singleton(tpi));\n  transportApiRequestTemplate.init();\n  mainConsumerExecutor=Executors.newSingleThreadExecutor(ThingsBoardThreadFactory.forName(\"transport-consumer\"));\n  mainConsumerExecutor.execute(() -> {\n    while (!stopped) {\n      try {\n        List<TbProtoQueueMsg<ToTransportMsg>> records=transportNotificationsConsumer.poll(notificationsPollDuration);\n        if (records.size() == 0) {\n          continue;\n        }\n        records.forEach(record -> {\n          try {\n            processToTransportMsg(record.getValue());\n          }\n catch (          Throwable e) {\n            log.warn(\"Failed to process the notification.\",e);\n          }\n        }\n);\n        transportNotificationsConsumer.commit();\n      }\n catch (      Exception e) {\n        if (!stopped) {\n          log.warn(\"Failed to obtain messages from queue.\",e);\n          try {\n            Thread.sleep(notificationsPollDuration);\n          }\n catch (          InterruptedException e2) {\n            log.trace(\"Failed to wait until the server has capacity to handle new requests\",e2);\n          }\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2685,
        "startLineNumber" : 205,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@PostConstruct public void init(){\n  this.ruleEngineProducerStats=statsFactory.createMessagesStats(StatsType.RULE_ENGINE.getName() + \".producer\");\n  this.tbCoreProducerStats=statsFactory.createMessagesStats(StatsType.CORE.getName() + \".producer\");\n  this.transportApiStats=statsFactory.createMessagesStats(StatsType.TRANSPORT.getName() + \".producer\");\n  this.transportCallbackExecutor=ThingsBoardExecutors.newWorkStealingPool(20,getClass());\n  this.scheduler.scheduleAtFixedRate(this::checkInactivityAndReportActivity,new Random().nextInt((int)sessionReportTimeout),sessionReportTimeout,TimeUnit.MILLISECONDS);\n  transportApiRequestTemplate=queueProvider.createTransportApiRequestTemplate();\n  transportApiRequestTemplate.setMessagesStats(transportApiStats);\n  ruleEngineMsgProducer=producerProvider.getRuleEngineMsgProducer();\n  tbCoreMsgProducer=producerProvider.getTbCoreMsgProducer();\n  transportNotificationsConsumer=queueProvider.createTransportNotificationsConsumer();\n  TopicPartitionInfo tpi=partitionService.getNotificationsTopic(ServiceType.TB_TRANSPORT,serviceInfoProvider.getServiceId());\n  transportNotificationsConsumer.subscribe(Collections.singleton(tpi));\n  transportApiRequestTemplate.init();\n  mainConsumerExecutor=Executors.newSingleThreadExecutor(ThingsBoardThreadFactory.forName(\"transport-consumer\"));\n  mainConsumerExecutor.execute(() -> {\n    while (!stopped) {\n      try {\n        List<TbProtoQueueMsg<ToTransportMsg>> records=transportNotificationsConsumer.poll(notificationsPollDuration);\n        if (records.size() == 0) {\n          continue;\n        }\n        records.forEach(record -> {\n          try {\n            processToTransportMsg(record.getValue());\n          }\n catch (          Throwable e) {\n            log.warn(\"Failed to process the notification.\",e);\n          }\n        }\n);\n        transportNotificationsConsumer.commit();\n      }\n catch (      Exception e) {\n        if (!stopped) {\n          log.warn(\"Failed to obtain messages from queue.\",e);\n          try {\n            Thread.sleep(notificationsPollDuration);\n          }\n catch (          InterruptedException e2) {\n            log.trace(\"Failed to wait until the server has capacity to handle new requests\",e2);\n          }\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 178
      },
      "nodeContext" : "this.scheduler.scheduleAtFixedRate(this::checkInactivityAndReportActivity,new Random().nextInt((int)sessionReportTimeout),sessionReportTimeout,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 211,
    "startColumnNumber" : 43,
    "endLineNumber" : 211,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}