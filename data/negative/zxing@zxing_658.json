{
  "id" : 658,
  "expression" : "2",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "core/src/com/google/zxing/pdf417/detector/Detector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 298,
      "startColumnNumber" : 25,
      "endLineNumber" : 298,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 298,
        "endColumnNumber" : 27
      },
      "nodeContext" : "vertices[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 298,
        "endColumnNumber" : 34
      },
      "nodeContext" : "vertices[2].getX()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 298,
        "startColumnNumber" : 10,
        "endLineNumber" : 298,
        "endColumnNumber" : 34
      },
      "nodeContext" : "v2x=vertices[2].getX()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 298,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 35
      },
      "nodeContext" : "float v2x=vertices[2].getX();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2023,
        "startLineNumber" : 294,
        "startColumnNumber" : 90,
        "endLineNumber" : 353,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float v0x=vertices[0].getX();\n  float v0y=vertices[0].getY();\n  float v2x=vertices[2].getX();\n  float v2y=vertices[2].getY();\n  float v4x=vertices[4].getX();\n  float v4y=vertices[4].getY();\n  float v6x=vertices[6].getX();\n  float v6y=vertices[6].getY();\n  float skew=v4y - v6y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v6x - v0x;\n    float deltay=v6y - v0y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v4x - v0x) * deltax / delta2;\n    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v2x - v4x;\n    float deltay=v2y - v4y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v2x - v6x) * deltax / delta2;\n    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);\n  }\n  float v1x=vertices[1].getX();\n  float v1y=vertices[1].getY();\n  float v3x=vertices[3].getX();\n  float v3y=vertices[3].getY();\n  float v5x=vertices[5].getX();\n  float v5y=vertices[5].getY();\n  float v7x=vertices[7].getX();\n  float v7y=vertices[7].getY();\n  skew=v7y - v5y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v7x - v1x;\n    float deltay=v7y - v1y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v5x - v1x) * deltax / delta2;\n    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v3x - v5x;\n    float deltay=v3y - v5y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v3x - v7x) * deltax / delta2;\n    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2518,
        "startLineNumber" : 286,
        "startColumnNumber" : 2,
        "endLineNumber" : 353,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Because we scan horizontally to detect the start and stop patterns, the vertical component of the codeword coordinates will be slightly wrong if there is any skew or rotation in the image. This method moves those points back onto the edges of the theoretically perfect bounding quadrilateral if needed.\n * @param vertices The eight vertices located by findVertices().\n */\nprivate static void correctCodeWordVertices(ResultPoint[] vertices,boolean upsideDown){\n  float v0x=vertices[0].getX();\n  float v0y=vertices[0].getY();\n  float v2x=vertices[2].getX();\n  float v2y=vertices[2].getY();\n  float v4x=vertices[4].getX();\n  float v4y=vertices[4].getY();\n  float v6x=vertices[6].getX();\n  float v6y=vertices[6].getY();\n  float skew=v4y - v6y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v6x - v0x;\n    float deltay=v6y - v0y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v4x - v0x) * deltax / delta2;\n    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v2x - v4x;\n    float deltay=v2y - v4y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v2x - v6x) * deltax / delta2;\n    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);\n  }\n  float v1x=vertices[1].getX();\n  float v1y=vertices[1].getY();\n  float v3x=vertices[3].getX();\n  float v3y=vertices[3].getY();\n  float v5x=vertices[5].getX();\n  float v5y=vertices[5].getY();\n  float v7x=vertices[7].getX();\n  float v7y=vertices[7].getY();\n  skew=v7y - v5y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v7x - v1x;\n    float deltay=v7y - v1y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v5x - v1x) * deltax / delta2;\n    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v3x - v5x;\n    float deltay=v3y - v5y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v3x - v7x) * deltax / delta2;\n    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 431,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 298,
        "startColumnNumber" : 4,
        "endLineNumber" : 298,
        "endColumnNumber" : 35
      },
      "nodeContext" : "float v2x=vertices[2].getX();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 299,
      "startColumnNumber" : 25,
      "endLineNumber" : 299,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 299,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 27
      },
      "nodeContext" : "vertices[2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 299,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 34
      },
      "nodeContext" : "vertices[2].getY()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 299,
        "startColumnNumber" : 10,
        "endLineNumber" : 299,
        "endColumnNumber" : 34
      },
      "nodeContext" : "v2y=vertices[2].getY()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 299,
        "startColumnNumber" : 4,
        "endLineNumber" : 299,
        "endColumnNumber" : 35
      },
      "nodeContext" : "float v2y=vertices[2].getY();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2023,
        "startLineNumber" : 294,
        "startColumnNumber" : 90,
        "endLineNumber" : 353,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float v0x=vertices[0].getX();\n  float v0y=vertices[0].getY();\n  float v2x=vertices[2].getX();\n  float v2y=vertices[2].getY();\n  float v4x=vertices[4].getX();\n  float v4y=vertices[4].getY();\n  float v6x=vertices[6].getX();\n  float v6y=vertices[6].getY();\n  float skew=v4y - v6y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v6x - v0x;\n    float deltay=v6y - v0y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v4x - v0x) * deltax / delta2;\n    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v2x - v4x;\n    float deltay=v2y - v4y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v2x - v6x) * deltax / delta2;\n    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);\n  }\n  float v1x=vertices[1].getX();\n  float v1y=vertices[1].getY();\n  float v3x=vertices[3].getX();\n  float v3y=vertices[3].getY();\n  float v5x=vertices[5].getX();\n  float v5y=vertices[5].getY();\n  float v7x=vertices[7].getX();\n  float v7y=vertices[7].getY();\n  skew=v7y - v5y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v7x - v1x;\n    float deltay=v7y - v1y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v5x - v1x) * deltax / delta2;\n    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v3x - v5x;\n    float deltay=v3y - v5y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v3x - v7x) * deltax / delta2;\n    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 416,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2518,
        "startLineNumber" : 286,
        "startColumnNumber" : 2,
        "endLineNumber" : 353,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Because we scan horizontally to detect the start and stop patterns, the vertical component of the codeword coordinates will be slightly wrong if there is any skew or rotation in the image. This method moves those points back onto the edges of the theoretically perfect bounding quadrilateral if needed.\n * @param vertices The eight vertices located by findVertices().\n */\nprivate static void correctCodeWordVertices(ResultPoint[] vertices,boolean upsideDown){\n  float v0x=vertices[0].getX();\n  float v0y=vertices[0].getY();\n  float v2x=vertices[2].getX();\n  float v2y=vertices[2].getY();\n  float v4x=vertices[4].getX();\n  float v4y=vertices[4].getY();\n  float v6x=vertices[6].getX();\n  float v6y=vertices[6].getY();\n  float skew=v4y - v6y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v6x - v0x;\n    float deltay=v6y - v0y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v4x - v0x) * deltax / delta2;\n    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v2x - v4x;\n    float deltay=v2y - v4y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v2x - v6x) * deltax / delta2;\n    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);\n  }\n  float v1x=vertices[1].getX();\n  float v1y=vertices[1].getY();\n  float v3x=vertices[3].getX();\n  float v3y=vertices[3].getY();\n  float v5x=vertices[5].getX();\n  float v5y=vertices[5].getY();\n  float v7x=vertices[7].getX();\n  float v7y=vertices[7].getY();\n  skew=v7y - v5y;\n  if (upsideDown) {\n    skew=-skew;\n  }\n  if (skew > SKEW_THRESHOLD) {\n    float deltax=v7x - v1x;\n    float deltay=v7y - v1y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v5x - v1x) * deltax / delta2;\n    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);\n  }\n else   if (-skew > SKEW_THRESHOLD) {\n    float deltax=v3x - v5x;\n    float deltay=v3y - v5y;\n    float delta2=deltax * deltax + deltay * deltay;\n    float correction=(v3x - v7x) * deltax / delta2;\n    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 431,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 299,
        "startColumnNumber" : 4,
        "endLineNumber" : 299,
        "endColumnNumber" : 35
      },
      "nodeContext" : "float v2y=vertices[2].getY();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 298,
    "startColumnNumber" : 25,
    "endLineNumber" : 298,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 299,
    "startColumnNumber" : 25,
    "endLineNumber" : 299,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}