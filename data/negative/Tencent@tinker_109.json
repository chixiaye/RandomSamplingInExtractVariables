{
  "id" : 109,
  "expression" : "new Task(){\n  @Override public void perform(){\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n}\n",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Task(){\n  @Override public void perform(){\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 219,
      "startLineNumber" : 181,
      "startColumnNumber" : 39,
      "endLineNumber" : 186,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 17,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 18
      },
      "nodeContext" : "switchPayloadTasks.add(new Task(){\n  @Override public void perform(){\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 19
      },
      "nodeContext" : "switchPayloadTasks.add(new Task(){\n  @Override public void perform(){\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 180,
        "startColumnNumber" : 98,
        "endLineNumber" : 187,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  switchPayloadTasks.add(new Task(){\n    @Override public void perform(){\n      convertAndSetInstruction(location,codeAddressToIndex,instruction);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (opcode == Opcode.PACKED_SWITCH_PAYLOAD || opcode == Opcode.SPARSE_SWITCH_PAYLOAD) {\n  switchPayloadTasks.add(new Task(){\n    @Override public void perform(){\n      convertAndSetInstruction(location,codeAddressToIndex,instruction);\n    }\n  }\n);\n}\n else {\n  convertAndSetInstruction(location,codeAddressToIndex,instruction);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 177,
        "startColumnNumber" : 85,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final MethodLocation location=instructionList.get(index);\n  final Opcode opcode=instruction.getOpcode();\n  if (opcode == Opcode.PACKED_SWITCH_PAYLOAD || opcode == Opcode.SPARSE_SWITCH_PAYLOAD) {\n    switchPayloadTasks.add(new Task(){\n      @Override public void perform(){\n        convertAndSetInstruction(location,codeAddressToIndex,instruction);\n      }\n    }\n);\n  }\n else {\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n  index++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Instruction instruction : methodImplementation.getInstructions()) {\n  final MethodLocation location=instructionList.get(index);\n  final Opcode opcode=instruction.getOpcode();\n  if (opcode == Opcode.PACKED_SWITCH_PAYLOAD || opcode == Opcode.SPARSE_SWITCH_PAYLOAD) {\n    switchPayloadTasks.add(new Task(){\n      @Override public void perform(){\n        convertAndSetInstruction(location,codeAddressToIndex,instruction);\n      }\n    }\n);\n  }\n else {\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n  index++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 73,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2994,
        "startLineNumber" : 153,
        "startColumnNumber" : 121,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.dexBuilder=dexBuilder;\n  this.registerCount=methodImplementation.getRegisterCount();\n  int codeAddress=0;\n  int index=0;\n  for (  Instruction instruction : methodImplementation.getInstructions()) {\n    codeAddress+=instruction.getCodeUnits();\n    index++;\n    instructionList.add(new MethodLocation(null,codeAddress,index));\n  }\n  final int[] codeAddressToIndex=new int[codeAddress + 1];\n  Arrays.fill(codeAddressToIndex,-1);\n  for (int i=0; i < instructionList.size(); i++) {\n    codeAddressToIndex[instructionList.get(i).codeAddress]=i;\n  }\n  List<Task> switchPayloadTasks=Lists.newArrayList();\n  index=0;\n  for (  final Instruction instruction : methodImplementation.getInstructions()) {\n    final MethodLocation location=instructionList.get(index);\n    final Opcode opcode=instruction.getOpcode();\n    if (opcode == Opcode.PACKED_SWITCH_PAYLOAD || opcode == Opcode.SPARSE_SWITCH_PAYLOAD) {\n      switchPayloadTasks.add(new Task(){\n        @Override public void perform(){\n          convertAndSetInstruction(location,codeAddressToIndex,instruction);\n        }\n      }\n);\n    }\n else {\n      convertAndSetInstruction(location,codeAddressToIndex,instruction);\n    }\n    index++;\n  }\n  for (  Task switchPayloadTask : switchPayloadTasks) {\n    switchPayloadTask.perform();\n  }\n  for (  DebugItem debugItem : methodImplementation.getDebugItems()) {\n    int debugCodeAddress=debugItem.getCodeAddress();\n    int locationIndex=mapCodeAddressToIndex(codeAddressToIndex,debugCodeAddress);\n    MethodLocation debugLocation=instructionList.get(locationIndex);\n    BuilderDebugItem builderDebugItem=convertDebugItem(debugItem);\n    debugLocation.getDebugItems().add(builderDebugItem);\n    builderDebugItem.location=debugLocation;\n  }\n  for (  TryBlock<? extends ExceptionHandler> tryBlock : methodImplementation.getTryBlocks()) {\n    Label startLabel=newLabel(codeAddressToIndex,tryBlock.getStartCodeAddress());\n    Label endLabel=newLabel(codeAddressToIndex,tryBlock.getStartCodeAddress() + tryBlock.getCodeUnitCount());\n    for (    ExceptionHandler exceptionHandler : tryBlock.getExceptionHandlers()) {\n      tryBlocks.add(new BuilderTryBlock(startLabel,endLabel,(TypeReference)convertReference(exceptionHandler.getExceptionTypeReference()),newLabel(codeAddressToIndex,exceptionHandler.getHandlerCodeAddress())));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3111,
        "startLineNumber" : 153,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public BuilderMutableMethodImplementation(DexBuilder dexBuilder,@Nonnull MethodImplementation methodImplementation){\n  this.dexBuilder=dexBuilder;\n  this.registerCount=methodImplementation.getRegisterCount();\n  int codeAddress=0;\n  int index=0;\n  for (  Instruction instruction : methodImplementation.getInstructions()) {\n    codeAddress+=instruction.getCodeUnits();\n    index++;\n    instructionList.add(new MethodLocation(null,codeAddress,index));\n  }\n  final int[] codeAddressToIndex=new int[codeAddress + 1];\n  Arrays.fill(codeAddressToIndex,-1);\n  for (int i=0; i < instructionList.size(); i++) {\n    codeAddressToIndex[instructionList.get(i).codeAddress]=i;\n  }\n  List<Task> switchPayloadTasks=Lists.newArrayList();\n  index=0;\n  for (  final Instruction instruction : methodImplementation.getInstructions()) {\n    final MethodLocation location=instructionList.get(index);\n    final Opcode opcode=instruction.getOpcode();\n    if (opcode == Opcode.PACKED_SWITCH_PAYLOAD || opcode == Opcode.SPARSE_SWITCH_PAYLOAD) {\n      switchPayloadTasks.add(new Task(){\n        @Override public void perform(){\n          convertAndSetInstruction(location,codeAddressToIndex,instruction);\n        }\n      }\n);\n    }\n else {\n      convertAndSetInstruction(location,codeAddressToIndex,instruction);\n    }\n    index++;\n  }\n  for (  Task switchPayloadTask : switchPayloadTasks) {\n    switchPayloadTask.perform();\n  }\n  for (  DebugItem debugItem : methodImplementation.getDebugItems()) {\n    int debugCodeAddress=debugItem.getCodeAddress();\n    int locationIndex=mapCodeAddressToIndex(codeAddressToIndex,debugCodeAddress);\n    MethodLocation debugLocation=instructionList.get(locationIndex);\n    BuilderDebugItem builderDebugItem=convertDebugItem(debugItem);\n    debugLocation.getDebugItems().add(builderDebugItem);\n    builderDebugItem.location=debugLocation;\n  }\n  for (  TryBlock<? extends ExceptionHandler> tryBlock : methodImplementation.getTryBlocks()) {\n    Label startLabel=newLabel(codeAddressToIndex,tryBlock.getStartCodeAddress());\n    Label endLabel=newLabel(codeAddressToIndex,tryBlock.getStartCodeAddress() + tryBlock.getCodeUnitCount());\n    for (    ExceptionHandler exceptionHandler : tryBlock.getExceptionHandlers()) {\n      tryBlocks.add(new BuilderTryBlock(startLabel,endLabel,(TypeReference)convertReference(exceptionHandler.getExceptionTypeReference()),newLabel(codeAddressToIndex,exceptionHandler.getHandlerCodeAddress())));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 181,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 19
      },
      "nodeContext" : "switchPayloadTasks.add(new Task(){\n  @Override public void perform(){\n    convertAndSetInstruction(location,codeAddressToIndex,instruction);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    },
    "tokenLength" : 7,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 219,
    "startLineNumber" : 181,
    "startColumnNumber" : 39,
    "endLineNumber" : 186,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}