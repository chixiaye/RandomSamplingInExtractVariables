{
  "id" : 172,
  "expression" : "a.timestamp - skew.skew",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "a.timestamp - skew.skew",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 88,
      "startColumnNumber" : 51,
      "endLineNumber" : 88,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 88,
        "startColumnNumber" : 27,
        "endLineNumber" : 88,
        "endColumnNumber" : 75
      },
      "nodeContext" : "a.toBuilder().timestamp(a.timestamp - skew.skew)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 88,
        "startColumnNumber" : 27,
        "endLineNumber" : 88,
        "endColumnNumber" : 83
      },
      "nodeContext" : "a.toBuilder().timestamp(a.timestamp - skew.skew).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 84
      },
      "nodeContext" : "annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 85
      },
      "nodeContext" : "annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 86,
        "startColumnNumber" : 49,
        "endLineNumber" : 89,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (annotations == null)   annotations=new ArrayList<>(span.annotations);\n  annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (skew.endpoint.ipv4 == a.endpoint.ipv4) {\n  if (annotations == null)   annotations=new ArrayList<>(span.annotations);\n  annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 83,
        "startColumnNumber" : 71,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Annotation a=span.annotations.get(i);\n  if (a.endpoint == null)   continue;\n  if (skew.endpoint.ipv4 == a.endpoint.ipv4) {\n    if (annotations == null)     annotations=new ArrayList<>(span.annotations);\n    annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0, length=span.annotations.size(); i < length; i++) {\n  Annotation a=span.annotations.get(i);\n  if (a.endpoint == null)   continue;\n  if (skew.endpoint.ipv4 == a.endpoint.ipv4) {\n    if (annotations == null)     annotations=new ArrayList<>(span.annotations);\n    annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 81,
        "startColumnNumber" : 58,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Annotation> annotations=null;\n  for (int i=0, length=span.annotations.size(); i < length; i++) {\n    Annotation a=span.annotations.get(i);\n    if (a.endpoint == null)     continue;\n    if (skew.endpoint.ipv4 == a.endpoint.ipv4) {\n      if (annotations == null)       annotations=new ArrayList<>(span.annotations);\n      annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n    }\n  }\n  if (annotations != null) {\n    return span.toBuilder().timestamp(annotations.get(0).timestamp).annotations(annotations).build();\n  }\n  for (int i=0, length=span.binaryAnnotations.size(); i < length; i++) {\n    BinaryAnnotation b=span.binaryAnnotations.get(i);\n    if (b.endpoint == null)     continue;\n    if (b.key.equals(Constants.LOCAL_COMPONENT) && skew.endpoint.ipv4 == b.endpoint.ipv4) {\n      return span.toBuilder().timestamp(span.timestamp - skew.skew).build();\n    }\n  }\n  return span;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If any annotation has an IP with skew associated, adjust accordingly. \n */\nstatic Span adjustTimestamps(Span span,ClockSkew skew){\n  List<Annotation> annotations=null;\n  for (int i=0, length=span.annotations.size(); i < length; i++) {\n    Annotation a=span.annotations.get(i);\n    if (a.endpoint == null)     continue;\n    if (skew.endpoint.ipv4 == a.endpoint.ipv4) {\n      if (annotations == null)       annotations=new ArrayList<>(span.annotations);\n      annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n    }\n  }\n  if (annotations != null) {\n    return span.toBuilder().timestamp(annotations.get(0).timestamp).annotations(annotations).build();\n  }\n  for (int i=0, length=span.binaryAnnotations.size(); i < length; i++) {\n    BinaryAnnotation b=span.binaryAnnotations.get(i);\n    if (b.endpoint == null)     continue;\n    if (b.key.equals(Constants.LOCAL_COMPONENT) && skew.endpoint.ipv4 == b.endpoint.ipv4) {\n      return span.toBuilder().timestamp(span.timestamp - skew.skew).build();\n    }\n  }\n  return span;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 85
      },
      "nodeContext" : "annotations.set(i,a.toBuilder().timestamp(a.timestamp - skew.skew).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 88,
    "startColumnNumber" : 51,
    "endLineNumber" : 88,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}