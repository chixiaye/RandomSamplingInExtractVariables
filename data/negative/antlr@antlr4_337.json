{
  "id" : 337,
  "expression" : "ioe",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ioe",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 198,
      "startColumnNumber" : 31,
      "endLineNumber" : 198,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 198,
        "startColumnNumber" : 10,
        "endLineNumber" : 198,
        "endColumnNumber" : 35
      },
      "nodeContext" : "new RuntimeException(ioe)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 36
      },
      "nodeContext" : "throw new RuntimeException(ioe);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 197,
        "startColumnNumber" : 27,
        "endLineNumber" : 199,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw new RuntimeException(ioe);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 197,
        "startColumnNumber" : 3,
        "endLineNumber" : 199,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (IOException ioe) {\n  throw new RuntimeException(ioe);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 164,
        "startColumnNumber" : 3,
        "endLineNumber" : 199,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  int c=nextChar();\n  if (c > Character.MAX_VALUE || c == IntStream.EOF) {\n    add(c);\n  }\n else {\n    char ch=(char)c;\n    if (Character.isLowSurrogate(ch)) {\n      throw new RuntimeException(\"Invalid UTF-16 (low surrogate with no preceding high surrogate)\");\n    }\n else     if (Character.isHighSurrogate(ch)) {\n      int lowSurrogate=nextChar();\n      if (lowSurrogate > Character.MAX_VALUE) {\n        throw new RuntimeException(\"Invalid UTF-16 (high surrogate followed by code point > U+FFFF\");\n      }\n else       if (lowSurrogate == IntStream.EOF) {\n        throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate at end of file)\");\n      }\n else {\n        char lowSurrogateChar=(char)lowSurrogate;\n        if (Character.isLowSurrogate(lowSurrogateChar)) {\n          add(Character.toCodePoint(ch,lowSurrogateChar));\n        }\n else {\n          throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate\");\n        }\n      }\n    }\n else {\n      add(c);\n    }\n  }\n}\n catch (IOException ioe) {\n  throw new RuntimeException(ioe);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 124,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1230,
        "startLineNumber" : 159,
        "startColumnNumber" : 26,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n    return i;\n  }\n  try {\n    int c=nextChar();\n    if (c > Character.MAX_VALUE || c == IntStream.EOF) {\n      add(c);\n    }\n else {\n      char ch=(char)c;\n      if (Character.isLowSurrogate(ch)) {\n        throw new RuntimeException(\"Invalid UTF-16 (low surrogate with no preceding high surrogate)\");\n      }\n else       if (Character.isHighSurrogate(ch)) {\n        int lowSurrogate=nextChar();\n        if (lowSurrogate > Character.MAX_VALUE) {\n          throw new RuntimeException(\"Invalid UTF-16 (high surrogate followed by code point > U+FFFF\");\n        }\n else         if (lowSurrogate == IntStream.EOF) {\n          throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate at end of file)\");\n        }\n else {\n          char lowSurrogateChar=(char)lowSurrogate;\n          if (Character.isLowSurrogate(lowSurrogateChar)) {\n            add(Character.toCodePoint(ch,lowSurrogateChar));\n          }\n else {\n            throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate\");\n          }\n        }\n      }\n else {\n        add(c);\n      }\n    }\n  }\n catch (  IOException ioe) {\n    throw new RuntimeException(ioe);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 200,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n    return i;\n  }\n  try {\n    int c=nextChar();\n    if (c > Character.MAX_VALUE || c == IntStream.EOF) {\n      add(c);\n    }\n else {\n      char ch=(char)c;\n      if (Character.isLowSurrogate(ch)) {\n        throw new RuntimeException(\"Invalid UTF-16 (low surrogate with no preceding high surrogate)\");\n      }\n else       if (Character.isHighSurrogate(ch)) {\n        int lowSurrogate=nextChar();\n        if (lowSurrogate > Character.MAX_VALUE) {\n          throw new RuntimeException(\"Invalid UTF-16 (high surrogate followed by code point > U+FFFF\");\n        }\n else         if (lowSurrogate == IntStream.EOF) {\n          throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate at end of file)\");\n        }\n else {\n          char lowSurrogateChar=(char)lowSurrogate;\n          if (Character.isLowSurrogate(lowSurrogateChar)) {\n            add(Character.toCodePoint(ch,lowSurrogateChar));\n          }\n else {\n            throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate\");\n          }\n        }\n      }\n else {\n        add(c);\n      }\n    }\n  }\n catch (  IOException ioe) {\n    throw new RuntimeException(ioe);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 157,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 158,
        "startColumnNumber" : 27,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  for (int i=0; i < n; i++) {\n    if (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n      return i;\n    }\n    try {\n      int c=nextChar();\n      if (c > Character.MAX_VALUE || c == IntStream.EOF) {\n        add(c);\n      }\n else {\n        char ch=(char)c;\n        if (Character.isLowSurrogate(ch)) {\n          throw new RuntimeException(\"Invalid UTF-16 (low surrogate with no preceding high surrogate)\");\n        }\n else         if (Character.isHighSurrogate(ch)) {\n          int lowSurrogate=nextChar();\n          if (lowSurrogate > Character.MAX_VALUE) {\n            throw new RuntimeException(\"Invalid UTF-16 (high surrogate followed by code point > U+FFFF\");\n          }\n else           if (lowSurrogate == IntStream.EOF) {\n            throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate at end of file)\");\n          }\n else {\n            char lowSurrogateChar=(char)lowSurrogate;\n            if (Character.isLowSurrogate(lowSurrogateChar)) {\n              add(Character.toCodePoint(ch,lowSurrogateChar));\n            }\n else {\n              throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate\");\n            }\n          }\n        }\n else {\n          add(c);\n        }\n      }\n    }\n catch (    IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n  return n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1543,
        "startLineNumber" : 153,
        "startColumnNumber" : 1,
        "endLineNumber" : 203,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Add  {@code n} characters to the buffer. Returns the number of charactersactually added to the buffer. If the return value is less than  {@code n}, then EOF was reached before  {@code n} characters could be added.\n */\nprotected int fill(int n){\n  for (int i=0; i < n; i++) {\n    if (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n      return i;\n    }\n    try {\n      int c=nextChar();\n      if (c > Character.MAX_VALUE || c == IntStream.EOF) {\n        add(c);\n      }\n else {\n        char ch=(char)c;\n        if (Character.isLowSurrogate(ch)) {\n          throw new RuntimeException(\"Invalid UTF-16 (low surrogate with no preceding high surrogate)\");\n        }\n else         if (Character.isHighSurrogate(ch)) {\n          int lowSurrogate=nextChar();\n          if (lowSurrogate > Character.MAX_VALUE) {\n            throw new RuntimeException(\"Invalid UTF-16 (high surrogate followed by code point > U+FFFF\");\n          }\n else           if (lowSurrogate == IntStream.EOF) {\n            throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate at end of file)\");\n          }\n else {\n            char lowSurrogateChar=(char)lowSurrogate;\n            if (Character.isLowSurrogate(lowSurrogateChar)) {\n              add(Character.toCodePoint(ch,lowSurrogateChar));\n            }\n else {\n              throw new RuntimeException(\"Invalid UTF-16 (dangling high surrogate\");\n            }\n          }\n        }\n else {\n          add(c);\n        }\n      }\n    }\n catch (    IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n  return n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 36
      },
      "nodeContext" : "throw new RuntimeException(ioe);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 198,
    "startColumnNumber" : 31,
    "endLineNumber" : 198,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}