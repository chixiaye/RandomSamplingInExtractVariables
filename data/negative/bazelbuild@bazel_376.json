{
  "id" : 376,
  "expression" : "associatedTarget",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "3cf2bca27c7ba05ad5c456f648dbda720bf40042",
  "filePath" : "src/main/java/com/google/devtools/build/lib/skyframe/AspectFunction.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 228,
      "startColumnNumber" : 50,
      "endLineNumber" : 228,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 228,
        "startColumnNumber" : 50,
        "endLineNumber" : 228,
        "endColumnNumber" : 88
      },
      "nodeContext" : "associatedTarget.getConfigurationKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 228,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 228,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 231,
      "startColumnNumber" : 8,
      "endLineNumber" : 231,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 227,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 25
      },
      "nodeContext" : "Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 247,
      "startColumnNumber" : 33,
      "endLineNumber" : 247,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 247,
        "startColumnNumber" : 33,
        "endLineNumber" : 247,
        "endColumnNumber" : 68
      },
      "nodeContext" : "associatedTarget.getOriginalLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 247,
        "startColumnNumber" : 33,
        "endLineNumber" : 247,
        "endColumnNumber" : 91
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().getPackageIdentifier()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 92
      },
      "nodeContext" : "PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 246,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 93
      },
      "nodeContext" : "env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 247,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 244,
        "startColumnNumber" : 17,
        "endLineNumber" : 247,
        "endColumnNumber" : 93
      },
      "nodeContext" : "val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 247,
        "endColumnNumber" : 94
      },
      "nodeContext" : "PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 92
      },
      "nodeContext" : "PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 255,
      "startColumnNumber" : 35,
      "endLineNumber" : 255,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 255,
        "startColumnNumber" : 35,
        "endLineNumber" : 255,
        "endColumnNumber" : 70
      },
      "nodeContext" : "associatedTarget.getOriginalLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 255,
        "startColumnNumber" : 35,
        "endLineNumber" : 255,
        "endColumnNumber" : 80
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 255,
        "startColumnNumber" : 15,
        "endLineNumber" : 255,
        "endColumnNumber" : 81
      },
      "nodeContext" : "targetPkg.getTarget(associatedTarget.getOriginalLabel().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 255,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 81
      },
      "nodeContext" : "target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 255,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 82
      },
      "nodeContext" : "target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 254,
        "startColumnNumber" : 4,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n}\n catch (NoSuchTargetException e) {\n  throw new IllegalStateException(\"Name already verified\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 255,
        "startColumnNumber" : 6,
        "endLineNumber" : 255,
        "endColumnNumber" : 82
      },
      "nodeContext" : "target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 260,
      "startColumnNumber" : 30,
      "endLineNumber" : 260,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 47
      },
      "nodeContext" : "AliasProvider.isAlias(associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (AliasProvider.isAlias(associatedTarget)) {\n  return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 47
      },
      "nodeContext" : "AliasProvider.isAlias(associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 268,
      "startColumnNumber" : 10,
      "endLineNumber" : 268,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 261,
        "startColumnNumber" : 13,
        "endLineNumber" : 268,
        "endColumnNumber" : 27
      },
      "nodeContext" : "createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 261,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 260,
        "startColumnNumber" : 49,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (AliasProvider.isAlias(associatedTarget)) {\n  return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 261,
        "startColumnNumber" : 13,
        "endLineNumber" : 268,
        "endColumnNumber" : 27
      },
      "nodeContext" : "createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 273,
      "startColumnNumber" : 8,
      "endLineNumber" : 273,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 43
      },
      "nodeContext" : "associatedTarget.getOriginalLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 79
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 79
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 273,
      "startColumnNumber" : 51,
      "endLineNumber" : 273,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 273,
        "startColumnNumber" : 51,
        "endLineNumber" : 273,
        "endColumnNumber" : 78
      },
      "nodeContext" : "associatedTarget.getLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 79
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 273,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 79
      },
      "nodeContext" : "associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 275,
      "startColumnNumber" : 8,
      "endLineNumber" : 275,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 43
      },
      "nodeContext" : "associatedTarget.getOriginalLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 275,
        "endColumnNumber" : 43
      },
      "nodeContext" : "associatedTarget.getOriginalLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 276,
      "startColumnNumber" : 8,
      "endLineNumber" : 276,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 276,
        "startColumnNumber" : 8,
        "endLineNumber" : 276,
        "endColumnNumber" : 35
      },
      "nodeContext" : "associatedTarget.getLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 272,
        "startColumnNumber" : 4,
        "endLineNumber" : 276,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 276,
        "startColumnNumber" : 8,
        "endLineNumber" : 276,
        "endColumnNumber" : 35
      },
      "nodeContext" : "associatedTarget.getLabel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 327,
      "startColumnNumber" : 53,
      "endLineNumber" : 327,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 327,
        "startColumnNumber" : 27,
        "endLineNumber" : 327,
        "endColumnNumber" : 95
      },
      "nodeContext" : "MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 95
      },
      "nodeContext" : "associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 96
      },
      "nodeContext" : "associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 326,
        "startColumnNumber" : 10,
        "endLineNumber" : 328,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 326,
        "startColumnNumber" : 6,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n}\n catch (DuplicateException e) {\n  env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 308,
        "startColumnNumber" : 11,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n  collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n  Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n  for (  AspectKey aspectKey : orderedKeys) {\n    AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n    topologicalAspectPathBuilder.add(aspectValue.getAspect());\n  }\n  topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n  List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n  try {\n    associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n  }\n catch (  DuplicateException e) {\n    env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 333,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (key.getBaseKeys().isEmpty()) {\n  topologicalAspectPath=ImmutableList.of(aspect);\n}\n else {\n  LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n  collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n  Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n  for (  AspectKey aspectKey : orderedKeys) {\n    AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n    topologicalAspectPathBuilder.add(aspectValue.getAspect());\n  }\n  topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n  List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n  try {\n    associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n  }\n catch (  DuplicateException e) {\n    env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 327,
        "startColumnNumber" : 8,
        "endLineNumber" : 327,
        "endColumnNumber" : 96
      },
      "nodeContext" : "associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  }, {
    "nodeContext" : "associatedTarget",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 419,
      "startColumnNumber" : 14,
      "endLineNumber" : 419,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 418,
        "startColumnNumber" : 10,
        "endLineNumber" : 419,
        "endColumnNumber" : 80
      },
      "nodeContext" : "new ConfiguredTargetAndData(associatedTarget,target,configuration,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 412,
        "startColumnNumber" : 13,
        "endLineNumber" : 424,
        "endColumnNumber" : 53
      },
      "nodeContext" : "createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 412,
        "startColumnNumber" : 6,
        "endLineNumber" : 424,
        "endColumnNumber" : 54
      },
      "nodeContext" : "return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3399,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 425,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5707,
        "startLineNumber" : 341,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n  if (env.valuesMissing()) {\n    return null;\n  }\n  NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n  ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n  if (configConditions == null) {\n    return null;\n  }\n  OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n  try {\n    depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n  }\n  if (depValueMap == null) {\n    return null;\n  }\n  if (!transitiveRootCauses.isEmpty()) {\n    NestedSet<Cause> causes=transitiveRootCauses.build();\n    throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n  }\n  ResolvedToolchainContext toolchainContext=null;\n  if (unloadedToolchainContext != null) {\n    String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n    toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n  }\n  return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n}\n catch (DependencyEvaluationException e) {\n  if (!e.depReportedOwnError()) {\n    env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n  }\n  if (e.getCause() instanceof ConfiguredValueCreationException) {\n    ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n  }\n else   if (e.getCause() instanceof InconsistentAspectOrderException) {\n    InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n    env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else   if (e.getCause() instanceof TransitionException) {\n    TransitionException cause=(TransitionException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n  }\n else {\n    InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n    throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n  }\n}\ncatch (AspectCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ConfiguredValueCreationException e) {\n  throw new AspectFunctionException(e);\n}\ncatch (ToolchainException e) {\n  throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 446,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 14121,
        "startLineNumber" : 136,
        "startColumnNumber" : 59,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 14260,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 463,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public SkyValue compute(SkyKey skyKey,Environment env) throws AspectFunctionException, InterruptedException {\n  AspectKey key=(AspectKey)skyKey.argument();\n  StarlarkAspectClass starlarkAspectClass;\n  ConfiguredAspectFactory aspectFactory=null;\n  Aspect aspect=null;\n  SkyKey packageKey=PackageValue.key(key.getLabel().getPackageIdentifier());\n  SkyKey baseConfiguredTargetKey=key.getBaseConfiguredTargetKey();\n  SkyKey configurationKey=key.getConfigurationKey();\n  SkyKey bzlLoadKey;\n  if (key.getAspectClass() instanceof NativeAspectClass) {\n    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();\n    starlarkAspectClass=null;\n    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;\n    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());\n    bzlLoadKey=null;\n  }\n else {\n    Preconditions.checkState(key.getAspectClass() instanceof StarlarkAspectClass,\"Unknown aspect class: %s\",key);\n    starlarkAspectClass=(StarlarkAspectClass)key.getAspectClass();\n    bzlLoadKey=bzlLoadKeyForStarlarkAspect(starlarkAspectClass);\n  }\n  Set<SkyKey> keys;\n  if (configurationKey == null) {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,bzlLoadKey);\n  }\n else {\n    keys=bzlLoadKey == null ? ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey) : ImmutableSet.of(packageKey,baseConfiguredTargetKey,configurationKey,bzlLoadKey);\n  }\n  Map<SkyKey,ValueOrException2<BzlLoadFailedException,ConfiguredValueCreationException>> baseValues=env.getValuesOrThrow(keys,BzlLoadFailedException.class,ConfiguredValueCreationException.class);\n  if (starlarkAspectClass != null) {\n    StarlarkDefinedAspect starlarkAspect;\n    try {\n      starlarkAspect=loadStarlarkAspect(starlarkAspectClass,baseValues.get(bzlLoadKey));\n    }\n catch (    AspectCreationException e) {\n      env.getListener().handle(Event.error(e.getMessage()));\n      throw new AspectFunctionException(e);\n    }\n    if (starlarkAspect == null) {\n      return null;\n    }\n    aspectFactory=new StarlarkAspectFactory(starlarkAspect);\n    aspect=Aspect.forStarlark(starlarkAspect.getAspectClass(),starlarkAspect.getDefinition(key.getParameters()),key.getParameters());\n  }\n  PackageValue packageValue;\n  try {\n    packageValue=(PackageValue)baseValues.get(packageKey).get();\n  }\n catch (  ConfiguredValueCreationException|BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  if (packageValue == null) {\n    return null;\n  }\n  if (packageValue.getPackage().containsErrors()) {\n    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));\n  }\n  if (env.valuesMissing()) {\n    return null;\n  }\n  ConfiguredTargetValue baseConfiguredTargetValue;\n  try {\n    baseConfiguredTargetValue=(ConfiguredTargetValue)baseValues.get(baseConfiguredTargetKey).get();\n  }\n catch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),e.getRootCauses(),e.getDetailedExitCode()));\n  }\ncatch (  BzlLoadFailedException e) {\n    throw new IllegalStateException(e);\n  }\n  ConfiguredTarget associatedTarget=baseConfiguredTargetValue.getConfiguredTarget();\n  Preconditions.checkState(Objects.equals(key.getConfigurationKey(),associatedTarget.getConfigurationKey()),\"Aspect not in same configuration as associated target: %s, %s\",key,associatedTarget);\n  BuildConfigurationValue configuration;\n  if (configurationKey == null) {\n    configuration=null;\n  }\n else {\n    try {\n      configuration=(BuildConfigurationValue)baseValues.get(configurationKey).get();\n    }\n catch (    ConfiguredValueCreationException|BzlLoadFailedException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n  PackageValue val=(PackageValue)env.getValue(PackageValue.key(associatedTarget.getOriginalLabel().getPackageIdentifier()));\n  if (val == null) {\n    return null;\n  }\n  Package targetPkg=val.getPackage();\n  Target target;\n  try {\n    target=targetPkg.getTarget(associatedTarget.getOriginalLabel().getName());\n  }\n catch (  NoSuchTargetException e) {\n    throw new IllegalStateException(\"Name already verified\",e);\n  }\n  if (AliasProvider.isAlias(associatedTarget)) {\n    return createAliasAspect(env,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),new TargetAndConfiguration(target,configuration),aspect,key,configuration,associatedTarget);\n  }\n  Preconditions.checkState(associatedTarget.getOriginalLabel().equals(associatedTarget.getLabel()),\"Non-alias %s should have matching label but found %s\",associatedTarget.getOriginalLabel(),associatedTarget.getLabel());\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  boolean checkRuleAdvertisedProviders=starlarkSemantics.getBool(BuildLanguageOptions.INCOMPATIBLE_TOP_LEVEL_ASPECTS_REQUIRE_PROVIDERS);\n  if (checkRuleAdvertisedProviders) {\n    if (target instanceof Rule) {\n      if (!aspect.getDefinition().getRequiredProviders().isSatisfiedBy(((Rule)target).getRuleClassObject().getAdvertisedProviders())) {\n        return new AspectValue(key,aspect,target.getLocation(),ConfiguredAspect.forNonapplicableTarget(),NestedSetBuilder.emptySet(Order.STABLE_ORDER));\n      }\n    }\n  }\n  ImmutableList<Aspect> topologicalAspectPath;\n  if (key.getBaseKeys().isEmpty()) {\n    topologicalAspectPath=ImmutableList.of(aspect);\n  }\n else {\n    LinkedHashSet<AspectKey> orderedKeys=new LinkedHashSet<>();\n    collectAspectKeysInTopologicalOrder(key.getBaseKeys(),orderedKeys);\n    Map<SkyKey,SkyValue> aspectValues=env.getValues(orderedKeys);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    ImmutableList.Builder<Aspect> topologicalAspectPathBuilder=ImmutableList.builderWithExpectedSize(orderedKeys.size() + 1);\n    for (    AspectKey aspectKey : orderedKeys) {\n      AspectValue aspectValue=(AspectValue)aspectValues.get(aspectKey);\n      topologicalAspectPathBuilder.add(aspectValue.getAspect());\n    }\n    topologicalAspectPath=topologicalAspectPathBuilder.add(aspect).build();\n    List<ConfiguredAspect> directlyRequiredAspects=Lists.transform(key.getBaseKeys(),k -> ((AspectValue)aspectValues.get(k)).getConfiguredAspect());\n    try {\n      associatedTarget=MergedConfiguredTarget.of(associatedTarget,directlyRequiredAspects);\n    }\n catch (    DuplicateException e) {\n      env.getListener().handle(Event.error(target.getLocation(),e.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(e.getMessage(),target.getLabel(),configuration));\n    }\n  }\n  SkyframeDependencyResolver resolver=new SkyframeDependencyResolver(env);\n  NestedSetBuilder<Package> transitivePackagesForPackageRootResolution=storeTransitivePackagesForPackageRootResolution ? NestedSetBuilder.stableOrder() : null;\n  TargetAndConfiguration originalTargetAndConfiguration=new TargetAndConfiguration(target,configuration);\n  try {\n    UnloadedToolchainContext unloadedToolchainContext=getUnloadedToolchainContext(env,key,aspect,configuration);\n    if (env.valuesMissing()) {\n      return null;\n    }\n    NestedSetBuilder<Cause> transitiveRootCauses=NestedSetBuilder.stableOrder();\n    ConfigConditions configConditions=ConfiguredTargetFunction.getConfigConditions(env,originalTargetAndConfiguration,transitivePackagesForPackageRootResolution,unloadedToolchainContext == null ? null : unloadedToolchainContext.targetPlatform(),transitiveRootCauses);\n    if (configConditions == null) {\n      return null;\n    }\n    OrderedSetMultimap<DependencyKind,ConfiguredTargetAndData> depValueMap;\n    try {\n      depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndConfiguration,topologicalAspectPath,configConditions.asProviders(),unloadedToolchainContext == null ? null : ToolchainCollection.builder().addDefaultContext(unloadedToolchainContext).build(),shouldUseToolchainTransition(configuration,aspect.getDefinition()),ruleClassProvider,buildViewProvider.getSkyframeBuildView().getHostConfiguration(),transitivePackagesForPackageRootResolution,transitiveRootCauses);\n    }\n catch (    ConfiguredValueCreationException e) {\n      throw new AspectCreationException(e.getMessage(),key.getLabel(),configuration,e.getDetailedExitCode());\n    }\n    if (depValueMap == null) {\n      return null;\n    }\n    if (!transitiveRootCauses.isEmpty()) {\n      NestedSet<Cause> causes=transitiveRootCauses.build();\n      throw new AspectFunctionException(new AspectCreationException(\"Loading failed\",causes,ConfiguredTargetFunction.getPrioritizedDetailedExitCode(causes)));\n    }\n    ResolvedToolchainContext toolchainContext=null;\n    if (unloadedToolchainContext != null) {\n      String targetDescription=String.format(\"aspect %s applied to %s\",aspect.getDescriptor().getDescription(),target);\n      toolchainContext=ResolvedToolchainContext.load(unloadedToolchainContext,targetDescription,depValueMap.get(DependencyKind.defaultExecGroupToolchain()));\n    }\n    return createAspect(env,key,topologicalAspectPath,aspect,aspectFactory,new ConfiguredTargetAndData(associatedTarget,target,configuration,null),configuration,configConditions,toolchainContext,depValueMap,transitivePackagesForPackageRootResolution);\n  }\n catch (  DependencyEvaluationException e) {\n    if (!e.depReportedOwnError()) {\n      env.getListener().handle(Event.error(e.getLocation(),e.getMessage()));\n    }\n    if (e.getCause() instanceof ConfiguredValueCreationException) {\n      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getRootCauses(),cause.getDetailedExitCode()));\n    }\n else     if (e.getCause() instanceof InconsistentAspectOrderException) {\n      InconsistentAspectOrderException cause=(InconsistentAspectOrderException)e.getCause();\n      env.getListener().handle(Event.error(cause.getLocation(),cause.getMessage()));\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else     if (e.getCause() instanceof TransitionException) {\n      TransitionException cause=(TransitionException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration));\n    }\n else {\n      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();\n      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),key.getLabel(),configuration,cause.getDetailedExitCode()));\n    }\n  }\ncatch (  AspectCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ConfiguredValueCreationException e) {\n    throw new AspectFunctionException(e);\n  }\ncatch (  ToolchainException e) {\n    throw new AspectFunctionException(new AspectCreationException(e.getMessage(),new LabelCause(key.getLabel(),e.getDetailedExitCode())));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 418,
        "startColumnNumber" : 10,
        "endLineNumber" : 419,
        "endColumnNumber" : 80
      },
      "nodeContext" : "new ConfiguredTargetAndData(associatedTarget,target,configuration,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.analysis.ConfiguredTarget"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 228,
    "startColumnNumber" : 50,
    "endLineNumber" : 228,
    "endColumnNumber" : 66
  }, {
    "charLength" : 16,
    "startLineNumber" : 231,
    "startColumnNumber" : 8,
    "endLineNumber" : 231,
    "endColumnNumber" : 24
  }, {
    "charLength" : 16,
    "startLineNumber" : 247,
    "startColumnNumber" : 33,
    "endLineNumber" : 247,
    "endColumnNumber" : 49
  }, {
    "charLength" : 16,
    "startLineNumber" : 255,
    "startColumnNumber" : 35,
    "endLineNumber" : 255,
    "endColumnNumber" : 51
  }, {
    "charLength" : 16,
    "startLineNumber" : 260,
    "startColumnNumber" : 30,
    "endLineNumber" : 260,
    "endColumnNumber" : 46
  }, {
    "charLength" : 16,
    "startLineNumber" : 268,
    "startColumnNumber" : 10,
    "endLineNumber" : 268,
    "endColumnNumber" : 26
  }, {
    "charLength" : 16,
    "startLineNumber" : 273,
    "startColumnNumber" : 8,
    "endLineNumber" : 273,
    "endColumnNumber" : 24
  }, {
    "charLength" : 16,
    "startLineNumber" : 273,
    "startColumnNumber" : 51,
    "endLineNumber" : 273,
    "endColumnNumber" : 67
  }, {
    "charLength" : 16,
    "startLineNumber" : 275,
    "startColumnNumber" : 8,
    "endLineNumber" : 275,
    "endColumnNumber" : 24
  }, {
    "charLength" : 16,
    "startLineNumber" : 276,
    "startColumnNumber" : 8,
    "endLineNumber" : 276,
    "endColumnNumber" : 24
  }, {
    "charLength" : 16,
    "startLineNumber" : 327,
    "startColumnNumber" : 53,
    "endLineNumber" : 327,
    "endColumnNumber" : 69
  }, {
    "charLength" : 16,
    "startLineNumber" : 419,
    "startColumnNumber" : 14,
    "endLineNumber" : 419,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 5
  } ]
}