{
  "id" : 311,
  "expression" : "new EurekaIdentityHeaderFilter(identity)",
  "projectName" : "Netflix@eureka",
  "commitID" : "295f257424f0952b17a6903940bbd4e2f2fced03",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new EurekaIdentityHeaderFilter(identity)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 117,
      "startColumnNumber" : 40,
      "endLineNumber" : 117,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 81
      },
      "nodeContext" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 82
      },
      "nodeContext" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4046,
        "startLineNumber" : 73,
        "startColumnNumber" : 72,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemoteRegionRegistry(String regionName,URL remoteRegionURL){\n  this.remoteRegionURL=remoteRegionURL;\n  this.fetchRegistryTimer=Monitors.newTimer(this.remoteRegionURL.toString() + \"_\" + \"FetchRegistry\");\n  String jerseyClientName;\n  if (remoteRegionURL.getProtocol().equals(\"http\")) {\n    jerseyClientName=\"Discovery-RemoteRegionClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());\n  }\n else {\n    jerseyClientName=\"Discovery-RemoteRegionSecureClient-\" + regionName;\n    discoveryJerseyClient=EurekaJerseyClient.createSSLJerseyClient(jerseyClientName,EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());\n  }\n  discoveryApacheClient=discoveryJerseyClient.getClient();\n  if (EUREKA_SERVER_CONFIG.shouldGZipContentFromRemoteRegion()) {\n    discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));\n  }\n  String ip=null;\n  try {\n    ip=InetAddress.getLocalHost().getHostAddress();\n  }\n catch (  UnknownHostException e) {\n    logger.warn(\"Cannot find localhost ip\",e);\n  }\n  EurekaServerIdentity identity=new EurekaServerIdentity(ip);\n  discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n  applications.set(new Applications());\n  try {\n    if (fetchRegistry()) {\n      this.readyForServingData=true;\n    }\n else {\n      logger.warn(\"Failed to fetch remote registry. This means this eureka server is not ready for serving \" + \"traffic.\");\n    }\n  }\n catch (  Throwable e) {\n    logger.error(\"Problem fetching registry information :\",e);\n  }\n  remoteRegionCacheRefreshTimer.schedule(new TimerTask(){\n    @Override public void run(){\n      try {\n        if (fetchRegistry()) {\n          readyForServingData=true;\n        }\n else {\n          logger.warn(\"Failed to fetch remote registry. This means this eureka server is not \" + \"ready for serving traffic.\");\n        }\n      }\n catch (      Throwable e) {\n        logger.error(\"Error getting from remote registry :\",e);\n      }\n    }\n  }\n,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000,EUREKA_SERVER_CONFIG.getRemoteRegionRegistryFetchInterval() * 1000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 82
      },
      "nodeContext" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.netflix.discovery.EurekaIdentityHeaderFilter"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 117,
    "startColumnNumber" : 40,
    "endLineNumber" : 117,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}