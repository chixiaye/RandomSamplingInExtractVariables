{
  "id" : 424,
  "expression" : "new SampleData()",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/DataCarrierTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SampleData()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 61,
      "startColumnNumber" : 42,
      "endLineNumber" : 61,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 61,
        "startColumnNumber" : 42,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "new SampleData().setName(\"a\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 61,
        "startColumnNumber" : 26,
        "endLineNumber" : 61,
        "endColumnNumber" : 72
      },
      "nodeContext" : "carrier.produce(new SampleData().setName(\"a\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProduce() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.SampleData"
  }, {
    "nodeContext" : "new SampleData()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 62,
      "startColumnNumber" : 42,
      "endLineNumber" : 62,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 62,
        "startColumnNumber" : 42,
        "endLineNumber" : 62,
        "endColumnNumber" : 71
      },
      "nodeContext" : "new SampleData().setName(\"b\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 62,
        "startColumnNumber" : 26,
        "endLineNumber" : 62,
        "endColumnNumber" : 72
      },
      "nodeContext" : "carrier.produce(new SampleData().setName(\"b\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProduce() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.SampleData"
  }, {
    "nodeContext" : "new SampleData()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 63,
      "startColumnNumber" : 42,
      "endLineNumber" : 63,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 63,
        "startColumnNumber" : 42,
        "endLineNumber" : 63,
        "endColumnNumber" : 71
      },
      "nodeContext" : "new SampleData().setName(\"c\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 63,
        "startColumnNumber" : 26,
        "endLineNumber" : 63,
        "endColumnNumber" : 72
      },
      "nodeContext" : "carrier.produce(new SampleData().setName(\"c\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProduce() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.SampleData"
  }, {
    "nodeContext" : "new SampleData()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 64,
      "startColumnNumber" : 42,
      "endLineNumber" : 64,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 64,
        "startColumnNumber" : 42,
        "endLineNumber" : 64,
        "endColumnNumber" : 71
      },
      "nodeContext" : "new SampleData().setName(\"d\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 64,
        "startColumnNumber" : 26,
        "endLineNumber" : 64,
        "endColumnNumber" : 72
      },
      "nodeContext" : "carrier.produce(new SampleData().setName(\"d\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProduce() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<SampleData>(2,100);\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"a\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"b\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"c\")));\n  Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  QueueBuffer<SampleData> buffer1=channels.getBuffer(0);\n  List result=new ArrayList();\n  buffer1.obtain(result);\n  Assert.assertEquals(2,result.size());\n  QueueBuffer<SampleData> buffer2=channels.getBuffer(1);\n  buffer2.obtain(result);\n  Assert.assertEquals(4,result.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertTrue(carrier.produce(new SampleData().setName(\"d\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.SampleData"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 61,
    "startColumnNumber" : 42,
    "endLineNumber" : 61,
    "endColumnNumber" : 58
  }, {
    "charLength" : 16,
    "startLineNumber" : 62,
    "startColumnNumber" : 42,
    "endLineNumber" : 62,
    "endColumnNumber" : 58
  }, {
    "charLength" : 16,
    "startLineNumber" : 63,
    "startColumnNumber" : 42,
    "endLineNumber" : 63,
    "endColumnNumber" : 58
  }, {
    "charLength" : 16,
    "startLineNumber" : 64,
    "startColumnNumber" : 42,
    "endLineNumber" : 64,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}