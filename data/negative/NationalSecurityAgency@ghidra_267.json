{
  "id" : 267,
  "expression" : "startLevel.parent()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/GraphFunctionCalls/src/main/java/functioncalls/graph/FcgEdge.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "startLevel.parent()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 50,
      "startColumnNumber" : 20,
      "endLineNumber" : 50,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 50,
        "startColumnNumber" : 11,
        "endLineNumber" : 50,
        "endColumnNumber" : 39
      },
      "nodeContext" : "parent=startLevel.parent()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 40
      },
      "nodeContext" : "FcgLevel parent=startLevel.parent();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 42,
        "startColumnNumber" : 31,
        "endLineNumber" : 57,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  FcgLevel startLevel=getStart().getLevel();\n  FcgLevel endLevel=getEnd().getLevel();\n  if (startLevel.isSource() || endLevel.isSource()) {\n    return true;\n  }\n  FcgLevel parent=startLevel.parent();\n  if (parent.equals(endLevel)) {\n    return true;\n  }\n  FcgLevel child=startLevel.child();\n  return child.equals(endLevel);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 674,
        "startLineNumber" : 36,
        "startColumnNumber" : 1,
        "endLineNumber" : 57,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns true if this edge is a direct edge from a lower level.  Any other edges are  considered indirect and are less important in the graph.\n * @return true if this edge is a direct edge from a lower level\n */\npublic boolean isDirectEdge(){\n  FcgLevel startLevel=getStart().getLevel();\n  FcgLevel endLevel=getEnd().getLevel();\n  if (startLevel.isSource() || endLevel.isSource()) {\n    return true;\n  }\n  FcgLevel parent=startLevel.parent();\n  if (parent.equals(endLevel)) {\n    return true;\n  }\n  FcgLevel child=startLevel.child();\n  return child.equals(endLevel);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 40
      },
      "nodeContext" : "FcgLevel parent=startLevel.parent();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "functioncalls.graph.FcgLevel"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 50,
    "startColumnNumber" : 20,
    "endLineNumber" : 50,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}