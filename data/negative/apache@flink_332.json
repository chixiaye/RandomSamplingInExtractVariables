{
  "id" : 332,
  "expression" : "trim(fromString(\"  hello \"),true,true,fromString(\" \"))",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-runtime/src/test/java/org/apache/flink/table/data/BinaryStringDataTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "trim(fromString(\"  hello \"),true,true,fromString(\" \"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 335,
      "startColumnNumber" : 19,
      "endLineNumber" : 335,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 335,
        "startColumnNumber" : 8,
        "endLineNumber" : 335,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 335,
        "startColumnNumber" : 8,
        "endLineNumber" : 336,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \"))).isEqualTo(fromString(\"hello\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 335,
        "startColumnNumber" : 8,
        "endLineNumber" : 336,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \"))).isEqualTo(fromString(\"hello\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 326,
        "startColumnNumber" : 24,
        "endLineNumber" : 381,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(fromString(\"1\").trim()).isEqualTo(fromString(\"1\"));\n  assertThat(fromString(\"  hello \").trim()).isEqualTo(fromString(\"hello\"));\n  assertThat(trimLeft(fromString(\"  hello \"))).isEqualTo(fromString(\"hello \"));\n  assertThat(trimRight(fromString(\"  hello \"))).isEqualTo(fromString(\"  hello\"));\n  assertThat(trim(fromString(\"  hello \"),false,false,fromString(\" \"))).isEqualTo(fromString(\"  hello \"));\n  assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \"))).isEqualTo(fromString(\"hello\"));\n  assertThat(trim(fromString(\"  hello \"),true,false,fromString(\" \"))).isEqualTo(fromString(\"hello \"));\n  assertThat(trim(fromString(\"  hello \"),false,true,fromString(\" \"))).isEqualTo(fromString(\"  hello\"));\n  assertThat(trim(fromString(\"xxxhellox\"),true,true,fromString(\"x\"))).isEqualTo(fromString(\"hello\"));\n  assertThat(trim(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"ell\"));\n  assertThat(trimLeft(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"ellox\"));\n  assertThat(trimRight(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"xxxhell\"));\n  assertThat(empty.trim()).isEqualTo(empty);\n  assertThat(fromString(\"  \").trim()).isEqualTo(empty);\n  assertThat(trimLeft(fromString(\"  \"))).isEqualTo(empty);\n  assertThat(trimRight(fromString(\"  \"))).isEqualTo(empty);\n  assertThat(fromString(\"  数据砖头 \").trim()).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimLeft(fromString(\"  数据砖头 \"))).isEqualTo(fromString(\"数据砖头 \"));\n  assertThat(trimRight(fromString(\"  数据砖头 \"))).isEqualTo(fromString(\"  数据砖头\"));\n  assertThat(fromString(\"数据砖头\").trim()).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimLeft(fromString(\"数据砖头\"))).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimRight(fromString(\"数据砖头\"))).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trim(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\",\"));\n  assertThat(trimLeft(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\", 岁岁年年\"));\n  assertThat(trimRight(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\"年年岁岁,\"));\n  char[] charsLessThan0x20=new char[10];\n  Arrays.fill(charsLessThan0x20,(char)(' ' - 1));\n  String stringStartingWithSpace=new String(charsLessThan0x20) + \"hello\" + new String(charsLessThan0x20);\n  assertThat(fromString(stringStartingWithSpace).trim()).isEqualTo(fromString(stringStartingWithSpace));\n  assertThat(trimLeft(fromString(stringStartingWithSpace))).isEqualTo(fromString(stringStartingWithSpace));\n  assertThat(trimRight(fromString(stringStartingWithSpace))).isEqualTo(fromString(stringStartingWithSpace));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 435,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3072,
        "startLineNumber" : 325,
        "startColumnNumber" : 4,
        "endLineNumber" : 381,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void trims(){\n  assertThat(fromString(\"1\").trim()).isEqualTo(fromString(\"1\"));\n  assertThat(fromString(\"  hello \").trim()).isEqualTo(fromString(\"hello\"));\n  assertThat(trimLeft(fromString(\"  hello \"))).isEqualTo(fromString(\"hello \"));\n  assertThat(trimRight(fromString(\"  hello \"))).isEqualTo(fromString(\"  hello\"));\n  assertThat(trim(fromString(\"  hello \"),false,false,fromString(\" \"))).isEqualTo(fromString(\"  hello \"));\n  assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \"))).isEqualTo(fromString(\"hello\"));\n  assertThat(trim(fromString(\"  hello \"),true,false,fromString(\" \"))).isEqualTo(fromString(\"hello \"));\n  assertThat(trim(fromString(\"  hello \"),false,true,fromString(\" \"))).isEqualTo(fromString(\"  hello\"));\n  assertThat(trim(fromString(\"xxxhellox\"),true,true,fromString(\"x\"))).isEqualTo(fromString(\"hello\"));\n  assertThat(trim(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"ell\"));\n  assertThat(trimLeft(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"ellox\"));\n  assertThat(trimRight(fromString(\"xxxhellox\"),fromString(\"xoh\"))).isEqualTo(fromString(\"xxxhell\"));\n  assertThat(empty.trim()).isEqualTo(empty);\n  assertThat(fromString(\"  \").trim()).isEqualTo(empty);\n  assertThat(trimLeft(fromString(\"  \"))).isEqualTo(empty);\n  assertThat(trimRight(fromString(\"  \"))).isEqualTo(empty);\n  assertThat(fromString(\"  数据砖头 \").trim()).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimLeft(fromString(\"  数据砖头 \"))).isEqualTo(fromString(\"数据砖头 \"));\n  assertThat(trimRight(fromString(\"  数据砖头 \"))).isEqualTo(fromString(\"  数据砖头\"));\n  assertThat(fromString(\"数据砖头\").trim()).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimLeft(fromString(\"数据砖头\"))).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trimRight(fromString(\"数据砖头\"))).isEqualTo(fromString(\"数据砖头\"));\n  assertThat(trim(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\",\"));\n  assertThat(trimLeft(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\", 岁岁年年\"));\n  assertThat(trimRight(fromString(\"年年岁岁, 岁岁年年\"),fromString(\"年岁 \"))).isEqualTo(fromString(\"年年岁岁,\"));\n  char[] charsLessThan0x20=new char[10];\n  Arrays.fill(charsLessThan0x20,(char)(' ' - 1));\n  String stringStartingWithSpace=new String(charsLessThan0x20) + \"hello\" + new String(charsLessThan0x20);\n  assertThat(fromString(stringStartingWithSpace).trim()).isEqualTo(fromString(stringStartingWithSpace));\n  assertThat(trimLeft(fromString(stringStartingWithSpace))).isEqualTo(fromString(stringStartingWithSpace));\n  assertThat(trimRight(fromString(stringStartingWithSpace))).isEqualTo(fromString(stringStartingWithSpace));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 441,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 335,
        "startColumnNumber" : 8,
        "endLineNumber" : 335,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertThat(trim(fromString(\"  hello \"),true,true,fromString(\" \")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "org.apache.flink.table.data.binary.BinaryStringData"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 335,
    "startColumnNumber" : 19,
    "endLineNumber" : 335,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}