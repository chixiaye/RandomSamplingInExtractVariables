{
  "id" : 278,
  "expression" : "cloudBlobItemPrefixWithOnlyCloudBlobs2",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cloudBlobItemPrefixWithOnlyCloudBlobs2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 174,
      "startColumnNumber" : 20,
      "endLineNumber" : 174,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 174,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 72
      },
      "nodeContext" : "cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 73
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 89
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5831,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5947,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_next_prefixesWithMultipleBlobsAndSomeDirectories_returnsExpectedBlobs() throws Exception {\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 90
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.storage.azure.blob.ListBlobItemHolder"
  }, {
    "nodeContext" : "cloudBlobItemPrefixWithOnlyCloudBlobs2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 175,
      "startColumnNumber" : 20,
      "endLineNumber" : 175,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 175,
        "startColumnNumber" : 20,
        "endLineNumber" : 175,
        "endColumnNumber" : 73
      },
      "nodeContext" : "cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 48
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 59
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 60
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5831,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5947,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_next_prefixesWithMultipleBlobsAndSomeDirectories_returnsExpectedBlobs() throws Exception {\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 74
      },
      "nodeContext" : "EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.storage.azure.blob.ListBlobItemHolder"
  }, {
    "nodeContext" : "cloudBlobItemPrefixWithOnlyCloudBlobs2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 178,
      "startColumnNumber" : 8,
      "endLineNumber" : 178,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 47
      },
      "nodeContext" : "EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 48
      },
      "nodeContext" : "EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5831,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5947,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_next_prefixesWithMultipleBlobsAndSomeDirectories_returnsExpectedBlobs() throws Exception {\n  EasyMock.expect(config.getMaxTries()).andReturn(MAX_TRIES).atLeastOnce();\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs1).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithOnlyCloudBlobs2).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n  EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(cloudBlobDruidPrefixWithCloudBlobsAndDirectories).anyTimes();\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n  EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(directoryItemPrefixWithCloudBlobsAndDirectories3);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2=new ArrayList<>();\n  resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs=new ArrayList<>();\n  ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories=new ArrayList<>();\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n  resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getContinuationToken()).andReturn(resultContinuationPrefixOnlyCloudBlobs);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2.getResults()).andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken()).andReturn(nullResultContinuationToken);\n  EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults()).andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andThrow(RETRYABLE_EXCEPTION);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs1);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_ONLY_CLOUD_BLOBS,resultContinuationPrefixOnlyCloudBlobs,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixOnlyAndFailLessThanMaxTriesCloudBlobs2);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_NO_BLOBS,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithNoBlobs);\n  EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(CONTAINER1,PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,nullResultContinuationToken,MAX_LISTING_LENGTH)).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n  replayAll();\n  azureCloudBlobIterator=new AzureCloudBlobIterator(storage,blobItemDruidFactory,config,PREFIXES,MAX_LISTING_LENGTH);\n  List<CloudBlobHolder> expectedBlobItems=ImmutableList.of(cloudBlobDruidPrefixWithOnlyCloudBlobs1,cloudBlobDruidPrefixWithOnlyCloudBlobs2,cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n  List<CloudBlobHolder> actualBlobItems=new ArrayList<>();\n  while (azureCloudBlobIterator.hasNext()) {\n    actualBlobItems.add(azureCloudBlobIterator.next());\n  }\n  Assert.assertEquals(expectedBlobItems.size(),actualBlobItems.size());\n  Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 47
      },
      "nodeContext" : "EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(cloudBlobItemPrefixWithOnlyCloudBlobs2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.storage.azure.blob.ListBlobItemHolder"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 174,
    "startColumnNumber" : 20,
    "endLineNumber" : 174,
    "endColumnNumber" : 58
  }, {
    "charLength" : 38,
    "startLineNumber" : 175,
    "startColumnNumber" : 20,
    "endLineNumber" : 175,
    "endColumnNumber" : 58
  }, {
    "charLength" : 38,
    "startLineNumber" : 178,
    "startColumnNumber" : 8,
    "endLineNumber" : 178,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}