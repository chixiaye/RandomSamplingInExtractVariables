{
  "id" : 230,
  "expression" : "ImmutableList",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/services/src/main/java/org/apache/druid/cli/CliMiddleManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ImmutableList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 109,
      "startColumnNumber" : 11,
      "endLineNumber" : 109,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 4092,
        "startLineNumber" : 109,
        "startColumnNumber" : 11,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "ImmutableList.of(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/middlemanager\");\n    binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n    binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n    binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n    IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n    JsonConfigProvider.bind(binder,\"druid.indexer.task\",TaskConfig.class);\n    JsonConfigProvider.bind(binder,\"druid.worker\",WorkerConfig.class);\n    binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);\n    binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);\n    binder.bind(IndexingServiceClient.class).to(HttpIndexingServiceClient.class).in(LazySingleton.class);\n    binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){\n    }\n).toProvider(Providers.of(null));\n    binder.bind(ShuffleClient.class).toProvider(Providers.of(null));\n    binder.bind(ChatHandlerProvider.class).toProvider(Providers.of(new NoopChatHandlerProvider()));\n    PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(RowIngestionMetersFactory.class),Key.get(DropwizardRowIngestionMetersFactory.class));\n    final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder=PolyBind.optionBinder(binder,Key.get(RowIngestionMetersFactory.class));\n    rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    binder.bind(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    bindWorkerManagementClasses(binder,isZkEnabled);\n    binder.bind(JettyServerInitializer.class).to(MiddleManagerJettyServerInitializer.class).in(LazySingleton.class);\n    binder.bind(AppenderatorsManager.class).to(DummyForInjectionAppenderatorsManager.class).in(LazySingleton.class);\n    LifecycleModule.register(binder,Server.class);\n    bindNodeRoleAndAnnouncer(binder,DiscoverySideEffectsProvider.builder(NodeRole.MIDDLE_MANAGER).serviceClasses(ImmutableList.of(WorkerNodeService.class)).build());\n    Jerseys.addResource(binder,SelfDiscoveryResource.class);\n    LifecycleModule.registerKey(binder,Key.get(SelfDiscoveryResource.class));\n  }\n  @Provides @LazySingleton public Worker getWorker(  @Self DruidNode node,  WorkerConfig config){\n    return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion(),config.getCategory());\n  }\n  @Provides @LazySingleton public WorkerNodeService getWorkerNodeService(  WorkerConfig workerConfig){\n    return new WorkerNodeService(workerConfig.getIp(),workerConfig.getCapacity(),workerConfig.getVersion(),workerConfig.getCategory());\n  }\n}\n,new ShuffleModule(),new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new IndexingServiceTuningConfigModule(),new InputSourceModule(),new LookupSerdeModule())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4100,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return ImmutableList.of(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/middlemanager\");\n    binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n    binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n    binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n    IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n    JsonConfigProvider.bind(binder,\"druid.indexer.task\",TaskConfig.class);\n    JsonConfigProvider.bind(binder,\"druid.worker\",WorkerConfig.class);\n    binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);\n    binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);\n    binder.bind(IndexingServiceClient.class).to(HttpIndexingServiceClient.class).in(LazySingleton.class);\n    binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){\n    }\n).toProvider(Providers.of(null));\n    binder.bind(ShuffleClient.class).toProvider(Providers.of(null));\n    binder.bind(ChatHandlerProvider.class).toProvider(Providers.of(new NoopChatHandlerProvider()));\n    PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(RowIngestionMetersFactory.class),Key.get(DropwizardRowIngestionMetersFactory.class));\n    final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder=PolyBind.optionBinder(binder,Key.get(RowIngestionMetersFactory.class));\n    rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    binder.bind(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    bindWorkerManagementClasses(binder,isZkEnabled);\n    binder.bind(JettyServerInitializer.class).to(MiddleManagerJettyServerInitializer.class).in(LazySingleton.class);\n    binder.bind(AppenderatorsManager.class).to(DummyForInjectionAppenderatorsManager.class).in(LazySingleton.class);\n    LifecycleModule.register(binder,Server.class);\n    bindNodeRoleAndAnnouncer(binder,DiscoverySideEffectsProvider.builder(NodeRole.MIDDLE_MANAGER).serviceClasses(ImmutableList.of(WorkerNodeService.class)).build());\n    Jerseys.addResource(binder,SelfDiscoveryResource.class);\n    LifecycleModule.registerKey(binder,Key.get(SelfDiscoveryResource.class));\n  }\n  @Provides @LazySingleton public Worker getWorker(  @Self DruidNode node,  WorkerConfig config){\n    return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion(),config.getCategory());\n  }\n  @Provides @LazySingleton public WorkerNodeService getWorkerNodeService(  WorkerConfig workerConfig){\n    return new WorkerNodeService(workerConfig.getIp(),workerConfig.getCapacity(),workerConfig.getVersion(),workerConfig.getCategory());\n  }\n}\n,new ShuffleModule(),new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new IndexingServiceTuningConfigModule(),new InputSourceModule(),new LookupSerdeModule());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 427,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4110,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 205,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return ImmutableList.of(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/middlemanager\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n      binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n      IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n      JsonConfigProvider.bind(binder,\"druid.indexer.task\",TaskConfig.class);\n      JsonConfigProvider.bind(binder,\"druid.worker\",WorkerConfig.class);\n      binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);\n      binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);\n      binder.bind(IndexingServiceClient.class).to(HttpIndexingServiceClient.class).in(LazySingleton.class);\n      binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){\n      }\n).toProvider(Providers.of(null));\n      binder.bind(ShuffleClient.class).toProvider(Providers.of(null));\n      binder.bind(ChatHandlerProvider.class).toProvider(Providers.of(new NoopChatHandlerProvider()));\n      PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(RowIngestionMetersFactory.class),Key.get(DropwizardRowIngestionMetersFactory.class));\n      final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder=PolyBind.optionBinder(binder,Key.get(RowIngestionMetersFactory.class));\n      rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n      binder.bind(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n      bindWorkerManagementClasses(binder,isZkEnabled);\n      binder.bind(JettyServerInitializer.class).to(MiddleManagerJettyServerInitializer.class).in(LazySingleton.class);\n      binder.bind(AppenderatorsManager.class).to(DummyForInjectionAppenderatorsManager.class).in(LazySingleton.class);\n      LifecycleModule.register(binder,Server.class);\n      bindNodeRoleAndAnnouncer(binder,DiscoverySideEffectsProvider.builder(NodeRole.MIDDLE_MANAGER).serviceClasses(ImmutableList.of(WorkerNodeService.class)).build());\n      Jerseys.addResource(binder,SelfDiscoveryResource.class);\n      LifecycleModule.registerKey(binder,Key.get(SelfDiscoveryResource.class));\n    }\n    @Provides @LazySingleton public Worker getWorker(    @Self DruidNode node,    WorkerConfig config){\n      return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion(),config.getCategory());\n    }\n    @Provides @LazySingleton public WorkerNodeService getWorkerNodeService(    WorkerConfig workerConfig){\n      return new WorkerNodeService(workerConfig.getIp(),workerConfig.getCapacity(),workerConfig.getVersion(),workerConfig.getCategory());\n    }\n  }\n,new ShuffleModule(),new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new IndexingServiceTuningConfigModule(),new InputSourceModule(),new LookupSerdeModule());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4170,
        "startLineNumber" : 106,
        "startColumnNumber" : 2,
        "endLineNumber" : 205,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected List<? extends Module> getModules(){\n  return ImmutableList.of(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/middlemanager\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n      binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n      IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n      JsonConfigProvider.bind(binder,\"druid.indexer.task\",TaskConfig.class);\n      JsonConfigProvider.bind(binder,\"druid.worker\",WorkerConfig.class);\n      binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);\n      binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);\n      binder.bind(IndexingServiceClient.class).to(HttpIndexingServiceClient.class).in(LazySingleton.class);\n      binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){\n      }\n).toProvider(Providers.of(null));\n      binder.bind(ShuffleClient.class).toProvider(Providers.of(null));\n      binder.bind(ChatHandlerProvider.class).toProvider(Providers.of(new NoopChatHandlerProvider()));\n      PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(RowIngestionMetersFactory.class),Key.get(DropwizardRowIngestionMetersFactory.class));\n      final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder=PolyBind.optionBinder(binder,Key.get(RowIngestionMetersFactory.class));\n      rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n      binder.bind(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n      bindWorkerManagementClasses(binder,isZkEnabled);\n      binder.bind(JettyServerInitializer.class).to(MiddleManagerJettyServerInitializer.class).in(LazySingleton.class);\n      binder.bind(AppenderatorsManager.class).to(DummyForInjectionAppenderatorsManager.class).in(LazySingleton.class);\n      LifecycleModule.register(binder,Server.class);\n      bindNodeRoleAndAnnouncer(binder,DiscoverySideEffectsProvider.builder(NodeRole.MIDDLE_MANAGER).serviceClasses(ImmutableList.of(WorkerNodeService.class)).build());\n      Jerseys.addResource(binder,SelfDiscoveryResource.class);\n      LifecycleModule.registerKey(binder,Key.get(SelfDiscoveryResource.class));\n    }\n    @Provides @LazySingleton public Worker getWorker(    @Self DruidNode node,    WorkerConfig config){\n      return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion(),config.getCategory());\n    }\n    @Provides @LazySingleton public WorkerNodeService getWorkerNodeService(    WorkerConfig workerConfig){\n      return new WorkerNodeService(workerConfig.getIp(),workerConfig.getCapacity(),workerConfig.getVersion(),workerConfig.getCategory());\n    }\n  }\n,new ShuffleModule(),new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new IndexingServiceTuningConfigModule(),new InputSourceModule(),new LookupSerdeModule());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 439,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 4092,
        "startLineNumber" : 109,
        "startColumnNumber" : 11,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "ImmutableList.of(new Module(){\n  @Override public void configure(  Binder binder){\n    binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/middlemanager\");\n    binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n    binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n    binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n    IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n    JsonConfigProvider.bind(binder,\"druid.indexer.task\",TaskConfig.class);\n    JsonConfigProvider.bind(binder,\"druid.worker\",WorkerConfig.class);\n    binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);\n    binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);\n    binder.bind(IndexingServiceClient.class).to(HttpIndexingServiceClient.class).in(LazySingleton.class);\n    binder.bind(new TypeLiteral<IndexTaskClientFactory<ParallelIndexSupervisorTaskClient>>(){\n    }\n).toProvider(Providers.of(null));\n    binder.bind(ShuffleClient.class).toProvider(Providers.of(null));\n    binder.bind(ChatHandlerProvider.class).toProvider(Providers.of(new NoopChatHandlerProvider()));\n    PolyBind.createChoice(binder,\"druid.indexer.task.rowIngestionMeters.type\",Key.get(RowIngestionMetersFactory.class),Key.get(DropwizardRowIngestionMetersFactory.class));\n    final MapBinder<String,RowIngestionMetersFactory> rowIngestionMetersHandlerProviderBinder=PolyBind.optionBinder(binder,Key.get(RowIngestionMetersFactory.class));\n    rowIngestionMetersHandlerProviderBinder.addBinding(\"dropwizard\").to(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    binder.bind(DropwizardRowIngestionMetersFactory.class).in(LazySingleton.class);\n    bindWorkerManagementClasses(binder,isZkEnabled);\n    binder.bind(JettyServerInitializer.class).to(MiddleManagerJettyServerInitializer.class).in(LazySingleton.class);\n    binder.bind(AppenderatorsManager.class).to(DummyForInjectionAppenderatorsManager.class).in(LazySingleton.class);\n    LifecycleModule.register(binder,Server.class);\n    bindNodeRoleAndAnnouncer(binder,DiscoverySideEffectsProvider.builder(NodeRole.MIDDLE_MANAGER).serviceClasses(ImmutableList.of(WorkerNodeService.class)).build());\n    Jerseys.addResource(binder,SelfDiscoveryResource.class);\n    LifecycleModule.registerKey(binder,Key.get(SelfDiscoveryResource.class));\n  }\n  @Provides @LazySingleton public Worker getWorker(  @Self DruidNode node,  WorkerConfig config){\n    return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion(),config.getCategory());\n  }\n  @Provides @LazySingleton public WorkerNodeService getWorkerNodeService(  WorkerConfig workerConfig){\n    return new WorkerNodeService(workerConfig.getIp(),workerConfig.getCapacity(),workerConfig.getVersion(),workerConfig.getCategory());\n  }\n}\n,new ShuffleModule(),new IndexingServiceFirehoseModule(),new IndexingServiceInputSourceModule(),new IndexingServiceTaskLogsModule(),new IndexingServiceTuningConfigModule(),new InputSourceModule(),new LookupSerdeModule())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 426,
      "astHeight" : 13
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 109,
    "startColumnNumber" : 11,
    "endLineNumber" : 109,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}