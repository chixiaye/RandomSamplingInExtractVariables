{
  "id" : 530,
  "expression" : "supportingFiles",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "60bc5081636471431fdfa9e64670fc29c03e9dd8",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/KotlinClientCodegen.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 378,
      "startColumnNumber" : 16,
      "endLineNumber" : 378,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 378,
        "startColumnNumber" : 16,
        "endLineNumber" : 378,
        "endColumnNumber" : 105
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 378,
        "startColumnNumber" : 16,
        "endLineNumber" : 378,
        "endColumnNumber" : 106
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 377,
        "startColumnNumber" : 33,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 377,
        "startColumnNumber" : 12,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasOAuthMethods) {\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 378,
        "startColumnNumber" : 16,
        "endLineNumber" : 378,
        "endColumnNumber" : 106
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  }, {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 379,
      "startColumnNumber" : 16,
      "endLineNumber" : 379,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 379,
        "startColumnNumber" : 16,
        "endLineNumber" : 379,
        "endColumnNumber" : 113
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 379,
        "startColumnNumber" : 16,
        "endLineNumber" : 379,
        "endColumnNumber" : 114
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 377,
        "startColumnNumber" : 33,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 377,
        "startColumnNumber" : 12,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasOAuthMethods) {\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 379,
        "startColumnNumber" : 16,
        "endLineNumber" : 379,
        "endColumnNumber" : 114
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  }, {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 380,
      "startColumnNumber" : 16,
      "endLineNumber" : 380,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 380,
        "startColumnNumber" : 16,
        "endLineNumber" : 380,
        "endColumnNumber" : 129
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 380,
        "startColumnNumber" : 16,
        "endLineNumber" : 380,
        "endColumnNumber" : 130
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 377,
        "startColumnNumber" : 33,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 377,
        "startColumnNumber" : 12,
        "endLineNumber" : 381,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasOAuthMethods) {\n  supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n  supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 380,
        "startColumnNumber" : 16,
        "endLineNumber" : 380,
        "endColumnNumber" : 130
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  }, {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 384,
      "startColumnNumber" : 16,
      "endLineNumber" : 384,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 384,
        "startColumnNumber" : 16,
        "endLineNumber" : 384,
        "endColumnNumber" : 115
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 384,
        "startColumnNumber" : 16,
        "endLineNumber" : 384,
        "endColumnNumber" : 116
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 383,
        "startColumnNumber" : 75,
        "endLineNumber" : 385,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 383,
        "startColumnNumber" : 12,
        "endLineNumber" : 385,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n  supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 384,
        "startColumnNumber" : 16,
        "endLineNumber" : 384,
        "endColumnNumber" : 116
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  }, {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 388,
      "startColumnNumber" : 16,
      "endLineNumber" : 388,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 388,
        "startColumnNumber" : 16,
        "endLineNumber" : 388,
        "endColumnNumber" : 123
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 388,
        "startColumnNumber" : 16,
        "endLineNumber" : 388,
        "endColumnNumber" : 124
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 387,
        "startColumnNumber" : 60,
        "endLineNumber" : 389,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 387,
        "startColumnNumber" : 12,
        "endLineNumber" : 389,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n  supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 388,
        "startColumnNumber" : 16,
        "endLineNumber" : 388,
        "endColumnNumber" : 124
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  }, {
    "nodeContext" : "supportingFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 392,
      "startColumnNumber" : 16,
      "endLineNumber" : 392,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 392,
        "endColumnNumber" : 121
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 392,
        "endColumnNumber" : 122
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 391,
        "startColumnNumber" : 59,
        "endLineNumber" : 393,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 391,
        "startColumnNumber" : 12,
        "endLineNumber" : 393,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n  supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 374,
        "startColumnNumber" : 36,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (usesRetrofit2Library()) {\n  boolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\n  if (hasOAuthMethods) {\n    supportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\n    supportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n  }\n  if (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBearerMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n  }\n  if (ProcessUtils.hasHttpBasicMethods(openAPI)) {\n    supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 286,
        "startColumnNumber" : 30,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4545,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  if (MULTIPLATFORM.equals(getLibrary())) {\n    sourceFolder=\"src/commonMain/kotlin\";\n  }\n  boolean hasRx=additionalProperties.containsKey(USE_RX_JAVA);\n  boolean hasRx2=additionalProperties.containsKey(USE_RX_JAVA2);\n  boolean hasRx3=additionalProperties.containsKey(USE_RX_JAVA3);\n  boolean hasCoroutines=additionalProperties.containsKey(USE_COROUTINES);\n  int optionCount=0;\n  if (hasRx) {\n    optionCount++;\n  }\n  if (hasRx2) {\n    optionCount++;\n  }\n  if (hasRx3) {\n    optionCount++;\n  }\n  if (hasCoroutines) {\n    optionCount++;\n  }\n  boolean hasConflict=optionCount > 1;\n  if (hasConflict) {\n    LOGGER.warn(\"You specified RxJava versions 1 and 2 and 3 or Coroutines together, please choose one of them.\");\n  }\n else   if (hasRx) {\n    this.setUseRxJava(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA).toString()));\n  }\n else   if (hasRx2) {\n    this.setUseRxJava2(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA2).toString()));\n  }\n else   if (hasRx3) {\n    this.setUseRxJava3(Boolean.parseBoolean(additionalProperties.get(USE_RX_JAVA3).toString()));\n  }\n else   if (hasCoroutines) {\n    this.setUseCoroutines(Boolean.parseBoolean(additionalProperties.get(USE_COROUTINES).toString()));\n  }\n  if (!hasRx && !hasRx2 && !hasRx3&& !hasCoroutines) {\n    setDoNotUseRxAndCoroutines(true);\n    additionalProperties.put(DO_NOT_USE_RX_AND_COROUTINES,true);\n  }\n  final String infrastructureFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"infrastructure\").replace(\".\",\"/\");\n  authFolder=(sourceFolder + File.separator + packageName+ File.separator+ \"auth\").replace(\".\",\"/\");\n  if (additionalProperties.containsKey(DATE_LIBRARY)) {\n    setDateLibrary(additionalProperties.get(DATE_LIBRARY).toString());\n  }\n  if (additionalProperties.containsKey(REQUEST_DATE_CONVERTER)) {\n    setRequestDateConverter(additionalProperties.get(REQUEST_DATE_CONVERTER).toString());\n  }\n  commonSupportingFiles();\nswitch (getLibrary()) {\ncase JVM_OKHTTP3:case JVM_OKHTTP4:    processJVMOkHttpLibrary(infrastructureFolder);\n  break;\ncase JVM_RETROFIT2:processJVMRetrofit2Library(infrastructureFolder);\nbreak;\ncase MULTIPLATFORM:processMultiplatformLibrary(infrastructureFolder);\nbreak;\ndefault:break;\n}\nprocessDateLibrary();\nprocessRequestDateConverter();\nif (additionalProperties.containsKey(COLLECTION_TYPE)) {\nsetCollectionType(additionalProperties.get(COLLECTION_TYPE).toString());\n}\nif (CollectionType.LIST.value.equals(collectionType)) {\ntypeMapping.put(\"array\",\"kotlin.collections.List\");\ntypeMapping.put(\"list\",\"kotlin.collections.List\");\nadditionalProperties.put(\"isList\",true);\n}\nif (usesRetrofit2Library()) {\nboolean hasOAuthMethods=ProcessUtils.hasOAuthMethods(openAPI);\nif (hasOAuthMethods) {\nsupportingFiles.add(new SupportingFile(\"auth/OAuth.kt.mustache\",authFolder,\"OAuth.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthFlow.kt.mustache\",authFolder,\"OAuthFlow.kt\"));\nsupportingFiles.add(new SupportingFile(\"auth/OAuthOkHttpClient.kt.mustache\",authFolder,\"OAuthOkHttpClient.kt\"));\n}\nif (hasOAuthMethods || ProcessUtils.hasApiKeyMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/ApiKeyAuth.kt.mustache\",authFolder,\"ApiKeyAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBearerMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBearerAuth.kt.mustache\",authFolder,\"HttpBearerAuth.kt\"));\n}\nif (ProcessUtils.hasHttpBasicMethods(openAPI)) {\nsupportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 392,
        "startColumnNumber" : 16,
        "endLineNumber" : 392,
        "endColumnNumber" : 122
      },
      "nodeContext" : "supportingFiles.add(new SupportingFile(\"auth/HttpBasicAuth.kt.mustache\",authFolder,\"HttpBasicAuth.kt\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openapitools.codegen.SupportingFile>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 378,
    "startColumnNumber" : 16,
    "endLineNumber" : 378,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 379,
    "startColumnNumber" : 16,
    "endLineNumber" : 379,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 380,
    "startColumnNumber" : 16,
    "endLineNumber" : 380,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 384,
    "startColumnNumber" : 16,
    "endLineNumber" : 384,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 388,
    "startColumnNumber" : 16,
    "endLineNumber" : 388,
    "endColumnNumber" : 31
  }, {
    "charLength" : 15,
    "startLineNumber" : 392,
    "startColumnNumber" : 16,
    "endLineNumber" : 392,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}