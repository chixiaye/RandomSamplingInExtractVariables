{
  "id" : 34,
  "expression" : "bits[bitsOffset]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/common/BitMatrix.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bits[bitsOffset]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 215,
      "startColumnNumber" : 39,
      "endLineNumber" : 215,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 215,
        "startColumnNumber" : 39,
        "endLineNumber" : 215,
        "endColumnNumber" : 60
      },
      "nodeContext" : "bits[bitsOffset] == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 215,
        "startColumnNumber" : 11,
        "endLineNumber" : 215,
        "endColumnNumber" : 60
      },
      "nodeContext" : "bitsOffset < bits.length && bits[bitsOffset] == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 215,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (bitsOffset < bits.length && bits[bitsOffset] == 0) {\n  bitsOffset++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 213,
        "startColumnNumber" : 33,
        "endLineNumber" : 231,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int bitsOffset=0;\n  while (bitsOffset < bits.length && bits[bitsOffset] == 0) {\n    bitsOffset++;\n  }\n  if (bitsOffset == bits.length) {\n    return null;\n  }\n  int y=bitsOffset / rowSize;\n  int x=(bitsOffset % rowSize) << 5;\n  int theBits=bits[bitsOffset];\n  int bit=0;\n  while ((theBits << (31 - bit)) == 0) {\n    bit++;\n  }\n  x+=bit;\n  return new int[]{x,y};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This is useful in detecting a corner of a 'pure' barcode.\n * @return {x,y} coordinate of top-left-most 1 bit, or null if it is all white\n */\npublic int[] getTopLeftOnBit(){\n  int bitsOffset=0;\n  while (bitsOffset < bits.length && bits[bitsOffset] == 0) {\n    bitsOffset++;\n  }\n  if (bitsOffset == bits.length) {\n    return null;\n  }\n  int y=bitsOffset / rowSize;\n  int x=(bitsOffset % rowSize) << 5;\n  int theBits=bits[bitsOffset];\n  int bit=0;\n  while ((theBits << (31 - bit)) == 0) {\n    bit++;\n  }\n  x+=bit;\n  return new int[]{x,y};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 215,
        "startColumnNumber" : 11,
        "endLineNumber" : 215,
        "endColumnNumber" : 60
      },
      "nodeContext" : "bitsOffset < bits.length && bits[bitsOffset] == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "bits[bitsOffset]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 224,
      "startColumnNumber" : 18,
      "endLineNumber" : 224,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 224,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 34
      },
      "nodeContext" : "theBits=bits[bitsOffset]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 35
      },
      "nodeContext" : "int theBits=bits[bitsOffset];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 213,
        "startColumnNumber" : 33,
        "endLineNumber" : 231,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int bitsOffset=0;\n  while (bitsOffset < bits.length && bits[bitsOffset] == 0) {\n    bitsOffset++;\n  }\n  if (bitsOffset == bits.length) {\n    return null;\n  }\n  int y=bitsOffset / rowSize;\n  int x=(bitsOffset % rowSize) << 5;\n  int theBits=bits[bitsOffset];\n  int bit=0;\n  while ((theBits << (31 - bit)) == 0) {\n    bit++;\n  }\n  x+=bit;\n  return new int[]{x,y};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This is useful in detecting a corner of a 'pure' barcode.\n * @return {x,y} coordinate of top-left-most 1 bit, or null if it is all white\n */\npublic int[] getTopLeftOnBit(){\n  int bitsOffset=0;\n  while (bitsOffset < bits.length && bits[bitsOffset] == 0) {\n    bitsOffset++;\n  }\n  if (bitsOffset == bits.length) {\n    return null;\n  }\n  int y=bitsOffset / rowSize;\n  int x=(bitsOffset % rowSize) << 5;\n  int theBits=bits[bitsOffset];\n  int bit=0;\n  while ((theBits << (31 - bit)) == 0) {\n    bit++;\n  }\n  x+=bit;\n  return new int[]{x,y};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 35
      },
      "nodeContext" : "int theBits=bits[bitsOffset];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 215,
    "startColumnNumber" : 39,
    "endLineNumber" : 215,
    "endColumnNumber" : 55
  }, {
    "charLength" : 16,
    "startLineNumber" : 224,
    "startColumnNumber" : 18,
    "endLineNumber" : 224,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}