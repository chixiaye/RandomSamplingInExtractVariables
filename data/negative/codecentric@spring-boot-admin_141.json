{
  "id" : 141,
  "expression" : "\"Application registered itself as {}\"",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "aae9cc788bb4d307c3feb18ccfb4d428ae7d3788",
  "filePath" : "spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/services/SpringBootAdminRegistrator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Application registered itself as {}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 60,
      "startColumnNumber" : 16,
      "endLineNumber" : 60,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 74
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 75
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 62,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  LOGGER.info(\"Application registered itself as {}\",response.getBody());\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 59,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n  LOGGER.info(\"Application registered itself as {}\",response.getBody());\n  return true;\n}\n else if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n  LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n}\n else {\n  LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n  if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n    LOGGER.info(\"Application registered itself as {}\",response.getBody());\n    return true;\n  }\n else   if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n    LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n  }\n else {\n    LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 720,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n  if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n    LOGGER.info(\"Application registered itself as {}\",response.getBody());\n    return true;\n  }\n else   if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n    LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n  }\n else {\n    LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n  }\n}\n catch (Exception ex) {\n  LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",app,adminUrl,ex.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 52,
        "startColumnNumber" : 27,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Application app=createApplication();\n  String adminUrl=adminProps.getUrl() + '/' + adminProps.getContextPath();\n  try {\n    ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n    if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      return true;\n    }\n else     if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n      LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n    }\n else {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n    }\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",app,adminUrl,ex.getMessage());\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Registers the client application at spring-boot-admin-server.\n * @return true if successful\n */\npublic boolean register(){\n  Application app=createApplication();\n  String adminUrl=adminProps.getUrl() + '/' + adminProps.getContextPath();\n  try {\n    ResponseEntity<Application> response=template.postForEntity(adminUrl,app,Application.class);\n    if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      return true;\n    }\n else     if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {\n      LOGGER.warn(\"Application failed to registered itself as {} because of conflict in registry.\",app);\n    }\n else {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}\",app,response.toString());\n    }\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",app,adminUrl,ex.getMessage());\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 75
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 60,
    "startColumnNumber" : 16,
    "endLineNumber" : 60,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}