{
  "id" : 590,
  "expression" : "ModelUtils",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppPistacheServerCodegen.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 384,
      "startColumnNumber" : 12,
      "endLineNumber" : 384,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 384,
        "startColumnNumber" : 12,
        "endLineNumber" : 384,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ModelUtils.isStringSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 384,
        "startColumnNumber" : 12,
        "endLineNumber" : 384,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ModelUtils.isStringSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 390,
      "startColumnNumber" : 19,
      "endLineNumber" : 390,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 390,
        "startColumnNumber" : 19,
        "endLineNumber" : 390,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ModelUtils.isBooleanSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 390,
        "startColumnNumber" : 19,
        "endLineNumber" : 390,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ModelUtils.isBooleanSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 396,
      "startColumnNumber" : 19,
      "endLineNumber" : 396,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 396,
        "startColumnNumber" : 19,
        "endLineNumber" : 396,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ModelUtils.isDateSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 396,
        "startColumnNumber" : 19,
        "endLineNumber" : 396,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ModelUtils.isDateSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 402,
      "startColumnNumber" : 19,
      "endLineNumber" : 402,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 402,
        "startColumnNumber" : 19,
        "endLineNumber" : 402,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ModelUtils.isDateTimeSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 402,
        "startColumnNumber" : 19,
        "endLineNumber" : 402,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ModelUtils.isDateTimeSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 408,
      "startColumnNumber" : 19,
      "endLineNumber" : 408,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 408,
        "startColumnNumber" : 19,
        "endLineNumber" : 408,
        "endColumnNumber" : 47
      },
      "nodeContext" : "ModelUtils.isNumberSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 408,
        "startColumnNumber" : 19,
        "endLineNumber" : 408,
        "endColumnNumber" : 47
      },
      "nodeContext" : "ModelUtils.isNumberSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 409,
      "startColumnNumber" : 16,
      "endLineNumber" : 409,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ModelUtils.isFloatSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 409,
        "startColumnNumber" : 12,
        "endLineNumber" : 429,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isFloatSchema(p)) {\n  if (p.getDefault() != null) {\n    String defaultStr=p.getDefault().toString();\n    if (defaultStr.indexOf('.') < 0) {\n      return defaultStr + \".0f\";\n    }\n else {\n      return defaultStr + \"f\";\n    }\n  }\n else {\n    return \"0.0f\";\n  }\n}\n else {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"0.0\";\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 924,
        "startLineNumber" : 408,
        "startColumnNumber" : 49,
        "endLineNumber" : 430,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ModelUtils.isFloatSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 430,
      "startColumnNumber" : 19,
      "endLineNumber" : 430,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 430,
        "startColumnNumber" : 19,
        "endLineNumber" : 430,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ModelUtils.isIntegerSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 430,
        "startColumnNumber" : 19,
        "endLineNumber" : 430,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ModelUtils.isIntegerSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 431,
      "startColumnNumber" : 16,
      "endLineNumber" : 431,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 431,
        "startColumnNumber" : 16,
        "endLineNumber" : 431,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ModelUtils.isLongSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 431,
        "startColumnNumber" : 12,
        "endLineNumber" : 443,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isLongSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString() + \"L\";\n  }\n else {\n    return \"0L\";\n  }\n}\n else {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"0\";\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 430,
        "startColumnNumber" : 50,
        "endLineNumber" : 444,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 431,
        "startColumnNumber" : 16,
        "endLineNumber" : 431,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ModelUtils.isLongSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 444,
      "startColumnNumber" : 19,
      "endLineNumber" : 444,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 444,
        "startColumnNumber" : 19,
        "endLineNumber" : 444,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ModelUtils.isByteArraySchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 444,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 444,
        "startColumnNumber" : 19,
        "endLineNumber" : 444,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ModelUtils.isByteArraySchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 450,
      "startColumnNumber" : 19,
      "endLineNumber" : 450,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 450,
        "startColumnNumber" : 19,
        "endLineNumber" : 450,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ModelUtils.isMapSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 668,
        "startLineNumber" : 450,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 444,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 450,
        "startColumnNumber" : 19,
        "endLineNumber" : 450,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ModelUtils.isMapSchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 453,
      "startColumnNumber" : 19,
      "endLineNumber" : 453,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 453,
        "startColumnNumber" : 19,
        "endLineNumber" : 453,
        "endColumnNumber" : 46
      },
      "nodeContext" : "ModelUtils.isArraySchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 453,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 668,
        "startLineNumber" : 450,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 444,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 453,
        "startColumnNumber" : 19,
        "endLineNumber" : 453,
        "endColumnNumber" : 46
      },
      "nodeContext" : "ModelUtils.isArraySchema(p)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  }, {
    "nodeContext" : "ModelUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 461,
      "startColumnNumber" : 53,
      "endLineNumber" : 461,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 461,
        "startColumnNumber" : 53,
        "endLineNumber" : 461,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ModelUtils.getSimpleRef(p.get$ref())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 461,
        "startColumnNumber" : 41,
        "endLineNumber" : 461,
        "endColumnNumber" : 90
      },
      "nodeContext" : "toModelName(ModelUtils.getSimpleRef(p.get$ref()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 461,
        "startColumnNumber" : 19,
        "endLineNumber" : 461,
        "endColumnNumber" : 98
      },
      "nodeContext" : "\"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 461,
        "startColumnNumber" : 12,
        "endLineNumber" : 461,
        "endColumnNumber" : 99
      },
      "nodeContext" : "return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 460,
        "startColumnNumber" : 54,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 460,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 453,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 668,
        "startLineNumber" : 450,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 444,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2367,
        "startLineNumber" : 408,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 402,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2813,
        "startLineNumber" : 396,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3024,
        "startLineNumber" : 390,
        "startColumnNumber" : 15,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3247,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 462,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isBooleanSchema(p)) {\n  if (p.getDefault() != null) {\n    return p.getDefault().toString();\n  }\n else {\n    return \"false\";\n  }\n}\n else if (ModelUtils.isDateSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isDateTimeSchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isNumberSchema(p)) {\n  if (ModelUtils.isFloatSchema(p)) {\n    if (p.getDefault() != null) {\n      String defaultStr=p.getDefault().toString();\n      if (defaultStr.indexOf('.') < 0) {\n        return defaultStr + \".0f\";\n      }\n else {\n        return defaultStr + \"f\";\n      }\n    }\n else {\n      return \"0.0f\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0.0\";\n    }\n  }\n}\n else if (ModelUtils.isIntegerSchema(p)) {\n  if (ModelUtils.isLongSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString() + \"L\";\n    }\n else {\n      return \"0L\";\n    }\n  }\n else {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"0\";\n    }\n  }\n}\n else if (ModelUtils.isByteArraySchema(p)) {\n  if (p.getDefault() != null) {\n    return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n  }\n else {\n    return \"\\\"\\\"\";\n  }\n}\n else if (ModelUtils.isMapSchema(p)) {\n  String inner=getSchemaType(getAdditionalProperties(p));\n  return \"std::map<std::string, \" + inner + \">()\";\n}\n else if (ModelUtils.isArraySchema(p)) {\n  ArraySchema ap=(ArraySchema)p;\n  String inner=getSchemaType(ap.getItems());\n  if (!languageSpecificPrimitives.contains(inner)) {\n    inner=\"std::shared_ptr<\" + inner + \">\";\n  }\n  return \"std::vector<\" + inner + \">()\";\n}\n else if (!StringUtils.isEmpty(p.get$ref())) {\n  return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 383,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 382,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String toDefaultValue(Schema p){\n  if (ModelUtils.isStringSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isBooleanSchema(p)) {\n    if (p.getDefault() != null) {\n      return p.getDefault().toString();\n    }\n else {\n      return \"false\";\n    }\n  }\n else   if (ModelUtils.isDateSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isDateTimeSchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isNumberSchema(p)) {\n    if (ModelUtils.isFloatSchema(p)) {\n      if (p.getDefault() != null) {\n        String defaultStr=p.getDefault().toString();\n        if (defaultStr.indexOf('.') < 0) {\n          return defaultStr + \".0f\";\n        }\n else {\n          return defaultStr + \"f\";\n        }\n      }\n else {\n        return \"0.0f\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0.0\";\n      }\n    }\n  }\n else   if (ModelUtils.isIntegerSchema(p)) {\n    if (ModelUtils.isLongSchema(p)) {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString() + \"L\";\n      }\n else {\n        return \"0L\";\n      }\n    }\n else {\n      if (p.getDefault() != null) {\n        return p.getDefault().toString();\n      }\n else {\n        return \"0\";\n      }\n    }\n  }\n else   if (ModelUtils.isByteArraySchema(p)) {\n    if (p.getDefault() != null) {\n      return \"\\\"\" + p.getDefault().toString() + \"\\\"\";\n    }\n else {\n      return \"\\\"\\\"\";\n    }\n  }\n else   if (ModelUtils.isMapSchema(p)) {\n    String inner=getSchemaType(getAdditionalProperties(p));\n    return \"std::map<std::string, \" + inner + \">()\";\n  }\n else   if (ModelUtils.isArraySchema(p)) {\n    ArraySchema ap=(ArraySchema)p;\n    String inner=getSchemaType(ap.getItems());\n    if (!languageSpecificPrimitives.contains(inner)) {\n      inner=\"std::shared_ptr<\" + inner + \">\";\n    }\n    return \"std::vector<\" + inner + \">()\";\n  }\n else   if (!StringUtils.isEmpty(p.get$ref())) {\n    return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n  }\n  return \"nullptr\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 461,
        "startColumnNumber" : 12,
        "endLineNumber" : 461,
        "endColumnNumber" : 99
      },
      "nodeContext" : "return \"std::make_shared<\" + toModelName(ModelUtils.getSimpleRef(p.get$ref())) + \">()\";\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.openapitools.codegen.utils.ModelUtils"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 384,
    "startColumnNumber" : 12,
    "endLineNumber" : 384,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 390,
    "startColumnNumber" : 19,
    "endLineNumber" : 390,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 396,
    "startColumnNumber" : 19,
    "endLineNumber" : 396,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 402,
    "startColumnNumber" : 19,
    "endLineNumber" : 402,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 408,
    "startColumnNumber" : 19,
    "endLineNumber" : 408,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 409,
    "startColumnNumber" : 16,
    "endLineNumber" : 409,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 430,
    "startColumnNumber" : 19,
    "endLineNumber" : 430,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 431,
    "startColumnNumber" : 16,
    "endLineNumber" : 431,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 444,
    "startColumnNumber" : 19,
    "endLineNumber" : 444,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 450,
    "startColumnNumber" : 19,
    "endLineNumber" : 450,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 453,
    "startColumnNumber" : 19,
    "endLineNumber" : 453,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 461,
    "startColumnNumber" : 53,
    "endLineNumber" : 461,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 6
  } ]
}