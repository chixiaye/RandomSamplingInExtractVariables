{
  "id" : 437,
  "expression" : "optFiles",
  "projectName" : "Tencent@tinker",
  "commitID" : "40c15bbab73f52238c63408df2772e45075ef921",
  "filePath" : "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 86,
      "startColumnNumber" : 12,
      "endLineNumber" : 86,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 30
      },
      "nodeContext" : "optFiles.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (optFiles.isEmpty()) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 30
      },
      "nodeContext" : "optFiles.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  }, {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 90,
      "startColumnNumber" : 19,
      "endLineNumber" : 90,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 90,
        "startColumnNumber" : 19,
        "endLineNumber" : 90,
        "endColumnNumber" : 34
      },
      "nodeContext" : "optFiles.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 19,
        "endLineNumber" : 90,
        "endColumnNumber" : 38
      },
      "nodeContext" : "optFiles.size() * 6",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 38
      },
      "nodeContext" : "size=optFiles.size() * 6",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int size=optFiles.size() * 6;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int size=optFiles.size() * 6;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  }, {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 94,
      "startColumnNumber" : 63,
      "endLineNumber" : 94,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 94,
        "startColumnNumber" : 63,
        "endLineNumber" : 94,
        "endColumnNumber" : 78
      },
      "nodeContext" : "optFiles.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 85
      },
      "nodeContext" : "TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 86
      },
      "nodeContext" : "TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 86
      },
      "nodeContext" : "TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  }, {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 97,
      "startColumnNumber" : 36,
      "endLineNumber" : 97,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "checkAllDexOptFile(optFiles,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!checkAllDexOptFile(optFiles,i + 1)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!checkAllDexOptFile(optFiles,i + 1)) {\n  try {\n    Thread.sleep(WAIT_ASYN_OAT_TIME);\n  }\n catch (  InterruptedException e) {\n    TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 308,
        "startLineNumber" : 96,
        "startColumnNumber" : 39,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!checkAllDexOptFile(optFiles,i + 1)) {\n    try {\n      Thread.sleep(WAIT_ASYN_OAT_TIME);\n    }\n catch (    InterruptedException e) {\n      TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (!checkAllDexOptFile(optFiles,i + 1)) {\n    try {\n      Thread.sleep(WAIT_ASYN_OAT_TIME);\n    }\n catch (    InterruptedException e) {\n      TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!checkAllDexOptFile(optFiles,i + 1)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  }, {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 107,
      "startColumnNumber" : 25,
      "endLineNumber" : 107,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File file : optFiles) {\n  TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n  if (!SharePatchFileUtil.isLegalFile(file)) {\n    TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n    failDexFiles.add(file);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File file : optFiles) {\n  TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n  if (!SharePatchFileUtil.isLegalFile(file)) {\n    TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n    failDexFiles.add(file);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  }, {
    "nodeContext" : "optFiles",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 122,
      "startColumnNumber" : 29,
      "endLineNumber" : 122,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 122,
        "startColumnNumber" : 12,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (File file : optFiles) {\n  TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n  int returnType;\n  try {\n    returnType=ShareElfFile.getFileTypeByMagic(file);\n  }\n catch (  IOException e) {\n    continue;\n  }\n  if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n    ShareElfFile elfFile=null;\n    try {\n      elfFile=new ShareElfFile(file);\n    }\n catch (    Throwable e) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n      failDexFiles.add(file);\n      lastThrowable=e;\n    }\n finally {\n      if (elfFile != null) {\n        try {\n          elfFile.close();\n        }\n catch (        IOException ignore) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1742,
        "startLineNumber" : 120,
        "startColumnNumber" : 41,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Throwable lastThrowable=null;\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n    int returnType;\n    try {\n      returnType=ShareElfFile.getFileTypeByMagic(file);\n    }\n catch (    IOException e) {\n      continue;\n    }\n    if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n      ShareElfFile elfFile=null;\n      try {\n        elfFile=new ShareElfFile(file);\n      }\n catch (      Throwable e) {\n        TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n        failDexFiles.add(file);\n        lastThrowable=e;\n      }\n finally {\n        if (elfFile != null) {\n          try {\n            elfFile.close();\n          }\n catch (          IOException ignore) {\n          }\n        }\n      }\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1775,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Build.VERSION.SDK_INT >= 21) {\n  Throwable lastThrowable=null;\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n    int returnType;\n    try {\n      returnType=ShareElfFile.getFileTypeByMagic(file);\n    }\n catch (    IOException e) {\n      continue;\n    }\n    if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n      ShareElfFile elfFile=null;\n      try {\n        elfFile=new ShareElfFile(file);\n      }\n catch (      Throwable e) {\n        TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n        failDexFiles.add(file);\n        lastThrowable=e;\n      }\n finally {\n        if (elfFile != null) {\n          try {\n            elfFile.close();\n          }\n catch (          IOException ignore) {\n          }\n        }\n      }\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 157,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1198,
        "startLineNumber" : 122,
        "startColumnNumber" : 12,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (File file : optFiles) {\n  TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n  int returnType;\n  try {\n    returnType=ShareElfFile.getFileTypeByMagic(file);\n  }\n catch (  IOException e) {\n    continue;\n  }\n  if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n    ShareElfFile elfFile=null;\n    try {\n      elfFile=new ShareElfFile(file);\n    }\n catch (    Throwable e) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n      failDexFiles.add(file);\n      lastThrowable=e;\n    }\n finally {\n      if (elfFile != null) {\n        try {\n          elfFile.close();\n        }\n catch (        IOException ignore) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<java.io.File>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 86,
    "startColumnNumber" : 12,
    "endLineNumber" : 86,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 90,
    "startColumnNumber" : 19,
    "endLineNumber" : 90,
    "endColumnNumber" : 27
  }, {
    "charLength" : 8,
    "startLineNumber" : 94,
    "startColumnNumber" : 63,
    "endLineNumber" : 94,
    "endColumnNumber" : 71
  }, {
    "charLength" : 8,
    "startLineNumber" : 97,
    "startColumnNumber" : 36,
    "endLineNumber" : 97,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 107,
    "startColumnNumber" : 25,
    "endLineNumber" : 107,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 122,
    "startColumnNumber" : 29,
    "endLineNumber" : 122,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}