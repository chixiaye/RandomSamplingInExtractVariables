{
  "id" : 395,
  "expression" : "createUser(realmResource().users(),user)",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/other/jpa-performance/src/test/java/org/keycloak/testsuite/user/ManyUsersTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createUser(realmResource().users(),user)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 180,
      "startColumnNumber" : 45,
      "endLineNumber" : 180,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 180,
        "startColumnNumber" : 31,
        "endLineNumber" : 180,
        "endColumnNumber" : 86
      },
      "nodeContext" : "createdUser=createUser(realmResource().users(),user)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 87
      },
      "nodeContext" : "UserRepresentation createdUser=createUser(realmResource().users(),user);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 178,
        "startColumnNumber" : 46,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  refreshTokenIfMinValidityExpired();\n  UserRepresentation createdUser=createUser(realmResource().users(),user);\n  if (READ_USER_AFTER_CREATE) {\n    UserRepresentation returned=realmResource().users().get(createdUser.getId()).toRepresentation();\n    Assert.assertEquals(returned.getId(),createdUser.getId());\n  }\n  if (CREATE_SOCIAL_LINKS) {\n    List<FederatedIdentityRepresentation> fedIdentities=realmResource().users().get(createdUser.getId()).getFederatedIdentity();\n  }\n  if (++i % BATCH == 0) {\n    usersTimer.reset();\n    log.info(\"Created users: \" + i + \" / \"+ users.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 935,
        "startLineNumber" : 178,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (UserRepresentation user : users) {\n  refreshTokenIfMinValidityExpired();\n  UserRepresentation createdUser=createUser(realmResource().users(),user);\n  if (READ_USER_AFTER_CREATE) {\n    UserRepresentation returned=realmResource().users().get(createdUser.getId()).toRepresentation();\n    Assert.assertEquals(returned.getId(),createdUser.getId());\n  }\n  if (CREATE_SOCIAL_LINKS) {\n    List<FederatedIdentityRepresentation> fedIdentities=realmResource().users().get(createdUser.getId()).getFederatedIdentity();\n  }\n  if (++i % BATCH == 0) {\n    usersTimer.reset();\n    log.info(\"Created users: \" + i + \" / \"+ users.size());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3026,
        "startLineNumber" : 170,
        "startColumnNumber" : 47,
        "endLineNumber" : 245,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RealmRepresentation realm=realmResource().toRepresentation();\n  realm.setUsers(users);\n  realmTimer.reset(\"create \" + users.size() + \" users\");\n  usersTimer.reset(\"create \" + BATCH + \" users\");\n  int i=0;\n  for (  UserRepresentation user : users) {\n    refreshTokenIfMinValidityExpired();\n    UserRepresentation createdUser=createUser(realmResource().users(),user);\n    if (READ_USER_AFTER_CREATE) {\n      UserRepresentation returned=realmResource().users().get(createdUser.getId()).toRepresentation();\n      Assert.assertEquals(returned.getId(),createdUser.getId());\n    }\n    if (CREATE_SOCIAL_LINKS) {\n      List<FederatedIdentityRepresentation> fedIdentities=realmResource().users().get(createdUser.getId()).getFederatedIdentity();\n    }\n    if (++i % BATCH == 0) {\n      usersTimer.reset();\n      log.info(\"Created users: \" + i + \" / \"+ users.size());\n    }\n  }\n  if (i % BATCH != 0) {\n    usersTimer.reset();\n    log.info(\"Created users: \" + i + \" / \"+ users.size());\n  }\n  if (REIMPORT) {\n    realmTimer.reset(\"save realm with \" + users.size() + \" users\");\n    File realmFile=new File(PROJECT_BUILD_DIRECTORY,REALM + \".json\");\n    JsonSerialization.writeValueToStream(new BufferedOutputStream(new FileOutputStream(realmFile)),realm);\n    realmTimer.reset(\"delete realm with \" + users.size() + \" users\");\n    realmResource().remove();\n    try {\n      realmResource().toRepresentation();\n      fail(\"realm not deleted\");\n    }\n catch (    Exception ex) {\n      log.debug(\"realm deleted\");\n    }\n    realmTimer.reset(\"re-import realm with \" + realm.getUsers().size() + \" users\");\n    realmsResouce().create(realm);\n    realmTimer.reset(\"load \" + realm.getUsers().size() + \" users\");\n    users=realmResource().users().search(\"\",0,-1);\n  }\n  realmTimer.reset(\"delete \" + users.size() + \" users\");\n  usersTimer.reset(\"delete \" + BATCH + \" users\",false);\n  i=0;\n  for (  UserRepresentation user : users) {\n    refreshTokenIfMinValidityExpired();\n    realmResource().users().get(user.getId()).remove();\n    if (++i % BATCH == 0) {\n      usersTimer.reset();\n      log.info(\"Deleted users: \" + i + \" / \"+ users.size());\n    }\n  }\n  if (i % BATCH != 0) {\n    usersTimer.reset();\n    log.info(\"Deleted users: \" + i + \" / \"+ users.size());\n  }\n  realmTimer.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 367,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 245,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void manyUsers() throws IOException {\n  RealmRepresentation realm=realmResource().toRepresentation();\n  realm.setUsers(users);\n  realmTimer.reset(\"create \" + users.size() + \" users\");\n  usersTimer.reset(\"create \" + BATCH + \" users\");\n  int i=0;\n  for (  UserRepresentation user : users) {\n    refreshTokenIfMinValidityExpired();\n    UserRepresentation createdUser=createUser(realmResource().users(),user);\n    if (READ_USER_AFTER_CREATE) {\n      UserRepresentation returned=realmResource().users().get(createdUser.getId()).toRepresentation();\n      Assert.assertEquals(returned.getId(),createdUser.getId());\n    }\n    if (CREATE_SOCIAL_LINKS) {\n      List<FederatedIdentityRepresentation> fedIdentities=realmResource().users().get(createdUser.getId()).getFederatedIdentity();\n    }\n    if (++i % BATCH == 0) {\n      usersTimer.reset();\n      log.info(\"Created users: \" + i + \" / \"+ users.size());\n    }\n  }\n  if (i % BATCH != 0) {\n    usersTimer.reset();\n    log.info(\"Created users: \" + i + \" / \"+ users.size());\n  }\n  if (REIMPORT) {\n    realmTimer.reset(\"save realm with \" + users.size() + \" users\");\n    File realmFile=new File(PROJECT_BUILD_DIRECTORY,REALM + \".json\");\n    JsonSerialization.writeValueToStream(new BufferedOutputStream(new FileOutputStream(realmFile)),realm);\n    realmTimer.reset(\"delete realm with \" + users.size() + \" users\");\n    realmResource().remove();\n    try {\n      realmResource().toRepresentation();\n      fail(\"realm not deleted\");\n    }\n catch (    Exception ex) {\n      log.debug(\"realm deleted\");\n    }\n    realmTimer.reset(\"re-import realm with \" + realm.getUsers().size() + \" users\");\n    realmsResouce().create(realm);\n    realmTimer.reset(\"load \" + realm.getUsers().size() + \" users\");\n    users=realmResource().users().search(\"\",0,-1);\n  }\n  realmTimer.reset(\"delete \" + users.size() + \" users\");\n  usersTimer.reset(\"delete \" + BATCH + \" users\",false);\n  i=0;\n  for (  UserRepresentation user : users) {\n    refreshTokenIfMinValidityExpired();\n    realmResource().users().get(user.getId()).remove();\n    if (++i % BATCH == 0) {\n      usersTimer.reset();\n      log.info(\"Deleted users: \" + i + \" / \"+ users.size());\n    }\n  }\n  if (i % BATCH != 0) {\n    usersTimer.reset();\n    log.info(\"Deleted users: \" + i + \" / \"+ users.size());\n  }\n  realmTimer.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 375,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 87
      },
      "nodeContext" : "UserRepresentation createdUser=createUser(realmResource().users(),user);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "org.keycloak.representations.idm.UserRepresentation"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 180,
    "startColumnNumber" : 45,
    "endLineNumber" : 180,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}