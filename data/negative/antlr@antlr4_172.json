{
  "id" : 172,
  "expression" : "stderrOut",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/BaseJavaTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stderrOut",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 367,
      "startColumnNumber" : 36,
      "endLineNumber" : 367,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 367,
        "startColumnNumber" : 20,
        "endLineNumber" : 367,
        "endColumnNumber" : 46
      },
      "nodeContext" : "new PrintStream(stderrOut)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 367,
        "startColumnNumber" : 6,
        "endLineNumber" : 367,
        "endColumnNumber" : 47
      },
      "nodeContext" : "System.setErr(new PrintStream(stderrOut))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 367,
        "startColumnNumber" : 6,
        "endLineNumber" : 367,
        "endColumnNumber" : 48
      },
      "nodeContext" : "System.setErr(new PrintStream(stderrOut));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 366,
        "startColumnNumber" : 9,
        "endLineNumber" : 371,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  System.setErr(new PrintStream(stderrOut));\n  stdoutVacuum.start();\n  stderrVacuum.start();\n  mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 366,
        "startColumnNumber" : 5,
        "endLineNumber" : 374,
        "endColumnNumber" : 6
      },
      "nodeContext" : "try {\n  System.setErr(new PrintStream(stderrOut));\n  stdoutVacuum.start();\n  stderrVacuum.start();\n  mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n}\n  finally {\n  System.setErr(originalErr);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 46,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 364,
        "startColumnNumber" : 8,
        "endLineNumber" : 375,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PrintStream originalErr=System.err;\n  try {\n    System.setErr(new PrintStream(stderrOut));\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n  }\n  finally {\n    System.setErr(originalErr);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 364,
        "startColumnNumber" : 4,
        "endLineNumber" : 378,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  PrintStream originalErr=System.err;\n  try {\n    System.setErr(new PrintStream(stderrOut));\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n  }\n  finally {\n    System.setErr(originalErr);\n  }\n}\n  finally {\n  System.setOut(originalOut);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 62,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1518,
        "startLineNumber" : 351,
        "startColumnNumber" : 7,
        "endLineNumber" : 392,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n  final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n  final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n  PipedInputStream stdoutIn=new PipedInputStream();\n  PipedInputStream stderrIn=new PipedInputStream();\n  PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n  PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n  StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n  StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n  PrintStream originalOut=System.out;\n  System.setOut(new PrintStream(stdoutOut));\n  try {\n    PrintStream originalErr=System.err;\n    try {\n      System.setErr(new PrintStream(stderrOut));\n      stdoutVacuum.start();\n      stderrVacuum.start();\n      mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n    }\n  finally {\n      System.setErr(originalErr);\n    }\n  }\n  finally {\n    System.setOut(originalOut);\n  }\n  stdoutOut.close();\n  stderrOut.close();\n  stdoutVacuum.join();\n  stderrVacuum.join();\n  String output=stdoutVacuum.toString();\n  if (output.length() == 0) {\n    output=null;\n  }\n  if (stderrVacuum.toString().length() > 0) {\n    setParseErrors(stderrVacuum.toString());\n  }\n  return output;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1592,
        "startLineNumber" : 351,
        "startColumnNumber" : 3,
        "endLineNumber" : 395,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n  final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n  final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n  PipedInputStream stdoutIn=new PipedInputStream();\n  PipedInputStream stderrIn=new PipedInputStream();\n  PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n  PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n  StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n  StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n  PrintStream originalOut=System.out;\n  System.setOut(new PrintStream(stdoutOut));\n  try {\n    PrintStream originalErr=System.err;\n    try {\n      System.setErr(new PrintStream(stderrOut));\n      stdoutVacuum.start();\n      stderrVacuum.start();\n      mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n    }\n  finally {\n      System.setErr(originalErr);\n    }\n  }\n  finally {\n    System.setOut(originalOut);\n  }\n  stdoutOut.close();\n  stderrOut.close();\n  stdoutVacuum.join();\n  stderrVacuum.join();\n  String output=stdoutVacuum.toString();\n  if (output.length() == 0) {\n    output=null;\n  }\n  if (stderrVacuum.toString().length() > 0) {\n    setParseErrors(stderrVacuum.toString());\n  }\n  return output;\n}\n catch (Exception ex) {\n  throw new RuntimeException(ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 250,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1603,
        "startLineNumber" : 350,
        "startColumnNumber" : 28,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n    final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n    final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n    PipedInputStream stdoutIn=new PipedInputStream();\n    PipedInputStream stderrIn=new PipedInputStream();\n    PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n    PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n    StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n    StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n    PrintStream originalOut=System.out;\n    System.setOut(new PrintStream(stdoutOut));\n    try {\n      PrintStream originalErr=System.err;\n      try {\n        System.setErr(new PrintStream(stderrOut));\n        stdoutVacuum.start();\n        stderrVacuum.start();\n        mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n      }\n  finally {\n        System.setErr(originalErr);\n      }\n    }\n  finally {\n      System.setOut(originalOut);\n    }\n    stdoutOut.close();\n    stderrOut.close();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1629,
        "startLineNumber" : 350,
        "startColumnNumber" : 2,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (TEST_IN_SAME_PROCESS) {\n  try {\n    ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n    final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n    final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n    PipedInputStream stdoutIn=new PipedInputStream();\n    PipedInputStream stderrIn=new PipedInputStream();\n    PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n    PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n    StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n    StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n    PrintStream originalOut=System.out;\n    System.setOut(new PrintStream(stdoutOut));\n    try {\n      PrintStream originalErr=System.err;\n      try {\n        System.setErr(new PrintStream(stderrOut));\n        stdoutVacuum.start();\n        stderrVacuum.start();\n        mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n      }\n  finally {\n        System.setErr(originalErr);\n      }\n    }\n  finally {\n      System.setOut(originalOut);\n    }\n    stdoutOut.close();\n    stderrOut.close();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 253,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2673,
        "startLineNumber" : 349,
        "startColumnNumber" : 43,
        "endLineNumber" : 429,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (TEST_IN_SAME_PROCESS) {\n    try {\n      ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n      final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n      final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n      PipedInputStream stdoutIn=new PipedInputStream();\n      PipedInputStream stderrIn=new PipedInputStream();\n      PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n      PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n      StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n      StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n      PrintStream originalOut=System.out;\n      System.setOut(new PrintStream(stdoutOut));\n      try {\n        PrintStream originalErr=System.err;\n        try {\n          System.setErr(new PrintStream(stderrOut));\n          stdoutVacuum.start();\n          stderrVacuum.start();\n          mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n        }\n  finally {\n          System.setErr(originalErr);\n        }\n      }\n  finally {\n        System.setOut(originalOut);\n      }\n      stdoutOut.close();\n      stderrOut.close();\n      stdoutVacuum.join();\n      stderrVacuum.join();\n      String output=stdoutVacuum.toString();\n      if (output.length() == 0) {\n        output=null;\n      }\n      if (stderrVacuum.toString().length() > 0) {\n        setParseErrors(stderrVacuum.toString());\n      }\n      return output;\n    }\n catch (    Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n  try {\n    String[] args=new String[]{\"java\",\"-classpath\",getTempDirPath() + PATH_SEP + CLASSPATH,\"-Dfile.encoding=UTF-8\",className,new File(getTempTestDir(),\"input\").getAbsolutePath()};\n    Process process=Runtime.getRuntime().exec(args,null,getTempTestDir());\n    StreamVacuum stdoutVacuum=new StreamVacuum(process.getInputStream());\n    StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    process.waitFor();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception e) {\n    System.err.println(\"can't exec recognizer\");\n    e.printStackTrace(System.err);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2715,
        "startLineNumber" : 349,
        "startColumnNumber" : 1,
        "endLineNumber" : 429,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String execClass(String className){\n  if (TEST_IN_SAME_PROCESS) {\n    try {\n      ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n      final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n      final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n      PipedInputStream stdoutIn=new PipedInputStream();\n      PipedInputStream stderrIn=new PipedInputStream();\n      PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n      PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n      StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n      StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n      PrintStream originalOut=System.out;\n      System.setOut(new PrintStream(stdoutOut));\n      try {\n        PrintStream originalErr=System.err;\n        try {\n          System.setErr(new PrintStream(stderrOut));\n          stdoutVacuum.start();\n          stderrVacuum.start();\n          mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n        }\n  finally {\n          System.setErr(originalErr);\n        }\n      }\n  finally {\n        System.setOut(originalOut);\n      }\n      stdoutOut.close();\n      stderrOut.close();\n      stdoutVacuum.join();\n      stderrVacuum.join();\n      String output=stdoutVacuum.toString();\n      if (output.length() == 0) {\n        output=null;\n      }\n      if (stderrVacuum.toString().length() > 0) {\n        setParseErrors(stderrVacuum.toString());\n      }\n      return output;\n    }\n catch (    Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n  try {\n    String[] args=new String[]{\"java\",\"-classpath\",getTempDirPath() + PATH_SEP + CLASSPATH,\"-Dfile.encoding=UTF-8\",className,new File(getTempTestDir(),\"input\").getAbsolutePath()};\n    Process process=Runtime.getRuntime().exec(args,null,getTempTestDir());\n    StreamVacuum stdoutVacuum=new StreamVacuum(process.getInputStream());\n    StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    process.waitFor();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception e) {\n    System.err.println(\"can't exec recognizer\");\n    e.printStackTrace(System.err);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 367,
        "startColumnNumber" : 6,
        "endLineNumber" : 367,
        "endColumnNumber" : 48
      },
      "nodeContext" : "System.setErr(new PrintStream(stderrOut));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.PipedOutputStream"
  }, {
    "nodeContext" : "stderrOut",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 381,
      "startColumnNumber" : 4,
      "endLineNumber" : 381,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 381,
        "startColumnNumber" : 4,
        "endLineNumber" : 381,
        "endColumnNumber" : 21
      },
      "nodeContext" : "stderrOut.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 381,
        "startColumnNumber" : 4,
        "endLineNumber" : 381,
        "endColumnNumber" : 22
      },
      "nodeContext" : "stderrOut.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1518,
        "startLineNumber" : 351,
        "startColumnNumber" : 7,
        "endLineNumber" : 392,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n  final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n  final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n  PipedInputStream stdoutIn=new PipedInputStream();\n  PipedInputStream stderrIn=new PipedInputStream();\n  PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n  PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n  StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n  StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n  PrintStream originalOut=System.out;\n  System.setOut(new PrintStream(stdoutOut));\n  try {\n    PrintStream originalErr=System.err;\n    try {\n      System.setErr(new PrintStream(stderrOut));\n      stdoutVacuum.start();\n      stderrVacuum.start();\n      mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n    }\n  finally {\n      System.setErr(originalErr);\n    }\n  }\n  finally {\n    System.setOut(originalOut);\n  }\n  stdoutOut.close();\n  stderrOut.close();\n  stdoutVacuum.join();\n  stderrVacuum.join();\n  String output=stdoutVacuum.toString();\n  if (output.length() == 0) {\n    output=null;\n  }\n  if (stderrVacuum.toString().length() > 0) {\n    setParseErrors(stderrVacuum.toString());\n  }\n  return output;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1592,
        "startLineNumber" : 351,
        "startColumnNumber" : 3,
        "endLineNumber" : 395,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n  final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n  final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n  PipedInputStream stdoutIn=new PipedInputStream();\n  PipedInputStream stderrIn=new PipedInputStream();\n  PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n  PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n  StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n  StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n  PrintStream originalOut=System.out;\n  System.setOut(new PrintStream(stdoutOut));\n  try {\n    PrintStream originalErr=System.err;\n    try {\n      System.setErr(new PrintStream(stderrOut));\n      stdoutVacuum.start();\n      stderrVacuum.start();\n      mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n    }\n  finally {\n      System.setErr(originalErr);\n    }\n  }\n  finally {\n    System.setOut(originalOut);\n  }\n  stdoutOut.close();\n  stderrOut.close();\n  stdoutVacuum.join();\n  stderrVacuum.join();\n  String output=stdoutVacuum.toString();\n  if (output.length() == 0) {\n    output=null;\n  }\n  if (stderrVacuum.toString().length() > 0) {\n    setParseErrors(stderrVacuum.toString());\n  }\n  return output;\n}\n catch (Exception ex) {\n  throw new RuntimeException(ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 250,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1603,
        "startLineNumber" : 350,
        "startColumnNumber" : 28,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n    final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n    final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n    PipedInputStream stdoutIn=new PipedInputStream();\n    PipedInputStream stderrIn=new PipedInputStream();\n    PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n    PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n    StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n    StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n    PrintStream originalOut=System.out;\n    System.setOut(new PrintStream(stdoutOut));\n    try {\n      PrintStream originalErr=System.err;\n      try {\n        System.setErr(new PrintStream(stderrOut));\n        stdoutVacuum.start();\n        stderrVacuum.start();\n        mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n      }\n  finally {\n        System.setErr(originalErr);\n      }\n    }\n  finally {\n      System.setOut(originalOut);\n    }\n    stdoutOut.close();\n    stderrOut.close();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1629,
        "startLineNumber" : 350,
        "startColumnNumber" : 2,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (TEST_IN_SAME_PROCESS) {\n  try {\n    ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n    final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n    final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n    PipedInputStream stdoutIn=new PipedInputStream();\n    PipedInputStream stderrIn=new PipedInputStream();\n    PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n    PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n    StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n    StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n    PrintStream originalOut=System.out;\n    System.setOut(new PrintStream(stdoutOut));\n    try {\n      PrintStream originalErr=System.err;\n      try {\n        System.setErr(new PrintStream(stderrOut));\n        stdoutVacuum.start();\n        stderrVacuum.start();\n        mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n      }\n  finally {\n        System.setErr(originalErr);\n      }\n    }\n  finally {\n      System.setOut(originalOut);\n    }\n    stdoutOut.close();\n    stderrOut.close();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 253,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2673,
        "startLineNumber" : 349,
        "startColumnNumber" : 43,
        "endLineNumber" : 429,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (TEST_IN_SAME_PROCESS) {\n    try {\n      ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n      final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n      final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n      PipedInputStream stdoutIn=new PipedInputStream();\n      PipedInputStream stderrIn=new PipedInputStream();\n      PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n      PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n      StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n      StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n      PrintStream originalOut=System.out;\n      System.setOut(new PrintStream(stdoutOut));\n      try {\n        PrintStream originalErr=System.err;\n        try {\n          System.setErr(new PrintStream(stderrOut));\n          stdoutVacuum.start();\n          stderrVacuum.start();\n          mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n        }\n  finally {\n          System.setErr(originalErr);\n        }\n      }\n  finally {\n        System.setOut(originalOut);\n      }\n      stdoutOut.close();\n      stderrOut.close();\n      stdoutVacuum.join();\n      stderrVacuum.join();\n      String output=stdoutVacuum.toString();\n      if (output.length() == 0) {\n        output=null;\n      }\n      if (stderrVacuum.toString().length() > 0) {\n        setParseErrors(stderrVacuum.toString());\n      }\n      return output;\n    }\n catch (    Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n  try {\n    String[] args=new String[]{\"java\",\"-classpath\",getTempDirPath() + PATH_SEP + CLASSPATH,\"-Dfile.encoding=UTF-8\",className,new File(getTempTestDir(),\"input\").getAbsolutePath()};\n    Process process=Runtime.getRuntime().exec(args,null,getTempTestDir());\n    StreamVacuum stdoutVacuum=new StreamVacuum(process.getInputStream());\n    StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    process.waitFor();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception e) {\n    System.err.println(\"can't exec recognizer\");\n    e.printStackTrace(System.err);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 400,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2715,
        "startLineNumber" : 349,
        "startColumnNumber" : 1,
        "endLineNumber" : 429,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String execClass(String className){\n  if (TEST_IN_SAME_PROCESS) {\n    try {\n      ClassLoader loader=new URLClassLoader(new URL[]{getTempTestDir().toURI().toURL()},ClassLoader.getSystemClassLoader());\n      final Class<?> mainClass=(Class<?>)loader.loadClass(className);\n      final Method mainMethod=mainClass.getDeclaredMethod(\"main\",String[].class);\n      PipedInputStream stdoutIn=new PipedInputStream();\n      PipedInputStream stderrIn=new PipedInputStream();\n      PipedOutputStream stdoutOut=new PipedOutputStream(stdoutIn);\n      PipedOutputStream stderrOut=new PipedOutputStream(stderrIn);\n      StreamVacuum stdoutVacuum=new StreamVacuum(stdoutIn);\n      StreamVacuum stderrVacuum=new StreamVacuum(stderrIn);\n      PrintStream originalOut=System.out;\n      System.setOut(new PrintStream(stdoutOut));\n      try {\n        PrintStream originalErr=System.err;\n        try {\n          System.setErr(new PrintStream(stderrOut));\n          stdoutVacuum.start();\n          stderrVacuum.start();\n          mainMethod.invoke(null,(Object)new String[]{new File(getTempTestDir(),\"input\").getAbsolutePath()});\n        }\n  finally {\n          System.setErr(originalErr);\n        }\n      }\n  finally {\n        System.setOut(originalOut);\n      }\n      stdoutOut.close();\n      stderrOut.close();\n      stdoutVacuum.join();\n      stderrVacuum.join();\n      String output=stdoutVacuum.toString();\n      if (output.length() == 0) {\n        output=null;\n      }\n      if (stderrVacuum.toString().length() > 0) {\n        setParseErrors(stderrVacuum.toString());\n      }\n      return output;\n    }\n catch (    Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n  try {\n    String[] args=new String[]{\"java\",\"-classpath\",getTempDirPath() + PATH_SEP + CLASSPATH,\"-Dfile.encoding=UTF-8\",className,new File(getTempTestDir(),\"input\").getAbsolutePath()};\n    Process process=Runtime.getRuntime().exec(args,null,getTempTestDir());\n    StreamVacuum stdoutVacuum=new StreamVacuum(process.getInputStream());\n    StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n    stdoutVacuum.start();\n    stderrVacuum.start();\n    process.waitFor();\n    stdoutVacuum.join();\n    stderrVacuum.join();\n    String output=stdoutVacuum.toString();\n    if (output.length() == 0) {\n      output=null;\n    }\n    if (stderrVacuum.toString().length() > 0) {\n      setParseErrors(stderrVacuum.toString());\n    }\n    return output;\n  }\n catch (  Exception e) {\n    System.err.println(\"can't exec recognizer\");\n    e.printStackTrace(System.err);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 381,
        "startColumnNumber" : 4,
        "endLineNumber" : 381,
        "endColumnNumber" : 22
      },
      "nodeContext" : "stderrOut.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.PipedOutputStream"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 367,
    "startColumnNumber" : 36,
    "endLineNumber" : 367,
    "endColumnNumber" : 45
  }, {
    "charLength" : 9,
    "startLineNumber" : 381,
    "startColumnNumber" : 4,
    "endLineNumber" : 381,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}