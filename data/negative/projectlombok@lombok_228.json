{
  "id" : 228,
  "expression" : "staticConstructorName",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "staticConstructorName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 58,
      "startColumnNumber" : 88,
      "endLineNumber" : 58,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 132
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 42,
        "startColumnNumber" : 109,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Data.class);\n  JavacNode typeNode=annotationNode.up();\n  JCClassDecl typeDecl=null;\n  if (typeNode.get() instanceof JCClassDecl)   typeDecl=(JCClassDecl)typeNode.get();\n  long flags=typeDecl == null ? 0 : typeDecl.mods.flags;\n  boolean notAClass=(flags & (Flags.INTERFACE | Flags.ENUM | Flags.ANNOTATION)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  String staticConstructorName=annotation.getInstance().staticConstructor();\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 42,
        "startColumnNumber" : 1,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Data> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Data.class);\n  JavacNode typeNode=annotationNode.up();\n  JCClassDecl typeDecl=null;\n  if (typeNode.get() instanceof JCClassDecl)   typeDecl=(JCClassDecl)typeNode.get();\n  long flags=typeDecl == null ? 0 : typeDecl.mods.flags;\n  boolean notAClass=(flags & (Flags.INTERFACE | Flags.ENUM | Flags.ANNOTATION)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  String staticConstructorName=annotation.getInstance().staticConstructor();\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 58,
    "startColumnNumber" : 88,
    "endLineNumber" : 58,
    "endColumnNumber" : 109
  } ],
  "layoutRelationDataList" : [ ]
}