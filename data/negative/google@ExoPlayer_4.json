{
  "id" : 4,
  "expression" : "0",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 57,
      "startColumnNumber" : 39,
      "endLineNumber" : 57,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 44
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 45
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 45
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 58,
      "startColumnNumber" : 24,
      "endLineNumber" : 58,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 26
      },
      "nodeContext" : "scratch.setPosition(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 27
      },
      "nodeContext" : "scratch.setPosition(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 27
      },
      "nodeContext" : "scratch.setPosition(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 73,
      "startColumnNumber" : 39,
      "endLineNumber" : 73,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 45
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "input.peekFully(scratch.getData(),0,16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 74,
      "startColumnNumber" : 24,
      "endLineNumber" : 74,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 26
      },
      "nodeContext" : "scratch.setPosition(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 27
      },
      "nodeContext" : "scratch.setPosition(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 27
      },
      "nodeContext" : "scratch.setPosition(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 84,
      "startColumnNumber" : 20,
      "endLineNumber" : 84,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "bytesLeft > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytesLeft > 0) {\n  extraData=new byte[bytesLeft];\n  input.peekFully(extraData,0,bytesLeft);\n}\n else {\n  extraData=Util.EMPTY_BYTE_ARRAY;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "bytesLeft > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 86,
      "startColumnNumber" : 33,
      "endLineNumber" : 86,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 46
      },
      "nodeContext" : "input.peekFully(extraData,0,bytesLeft)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 47
      },
      "nodeContext" : "input.peekFully(extraData,0,bytesLeft);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 84,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  extraData=new byte[bytesLeft];\n  input.peekFully(extraData,0,bytesLeft);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytesLeft > 0) {\n  extraData=new byte[bytesLeft];\n  input.peekFully(extraData,0,bytesLeft);\n}\n else {\n  extraData=Util.EMPTY_BYTE_ARRAY;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.getData(),0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.getData(),0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 47
      },
      "nodeContext" : "input.peekFully(extraData,0,bytesLeft);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 57,
    "startColumnNumber" : 39,
    "endLineNumber" : 57,
    "endColumnNumber" : 40
  }, {
    "charLength" : 1,
    "startLineNumber" : 58,
    "startColumnNumber" : 24,
    "endLineNumber" : 58,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 73,
    "startColumnNumber" : 39,
    "endLineNumber" : 73,
    "endColumnNumber" : 40
  }, {
    "charLength" : 1,
    "startLineNumber" : 74,
    "startColumnNumber" : 24,
    "endLineNumber" : 74,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 84,
    "startColumnNumber" : 20,
    "endLineNumber" : 84,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 86,
    "startColumnNumber" : 33,
    "endLineNumber" : 86,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}