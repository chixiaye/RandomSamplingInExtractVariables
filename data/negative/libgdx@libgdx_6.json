{
  "id" : 6,
  "expression" : "systemLineSeparator",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/utils/Base64Coder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "systemLineSeparator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 100,
      "startColumnNumber" : 43,
      "endLineNumber" : 100,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 100,
        "startColumnNumber" : 9,
        "endLineNumber" : 100,
        "endColumnNumber" : 87
      },
      "nodeContext" : "encodeLines(in,0,in.length,76,systemLineSeparator,regularMap.encodingMap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 88
      },
      "nodeContext" : "return encodeLines(in,0,in.length,76,systemLineSeparator,regularMap.encodingMap);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 99,
        "startColumnNumber" : 46,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  return encodeLines(in,0,in.length,76,systemLineSeparator,regularMap.encodingMap);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 95,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Encodes a byte array into Base64 format and breaks the output into lines of 76 characters. This method is compatible with <code>sun.misc.BASE64Encoder.encodeBuffer(byte[])</code>.\n * @param in An array containing the data bytes to be encoded.\n * @return A String containing the Base64 encoded data, broken into lines. \n */\npublic static String encodeLines(byte[] in){\n  return encodeLines(in,0,in.length,76,systemLineSeparator,regularMap.encodingMap);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 26,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 88
      },
      "nodeContext" : "return encodeLines(in,0,in.length,76,systemLineSeparator,regularMap.encodingMap);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 100,
    "startColumnNumber" : 43,
    "endLineNumber" : 100,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}