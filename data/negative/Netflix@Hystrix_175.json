{
  "id" : 175,
  "expression" : "NUM",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCollapserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "NUM",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 265,
      "startColumnNumber" : 28,
      "endLineNumber" : 265,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 265,
        "startColumnNumber" : 24,
        "endLineNumber" : 265,
        "endColumnNumber" : 31
      },
      "nodeContext" : "i < NUM",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 265,
        "startColumnNumber" : 8,
        "endLineNumber" : 268,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < NUM; i++) {\n  MyCollapser c=new MyCollapser(\"5\",true);\n  observables.add(c.toObservable());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 261,
        "startColumnNumber" : 78,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int NUM=10;\n  List<Observable<Integer>> observables=new ArrayList<Observable<Integer>>();\n  for (int i=0; i < NUM; i++) {\n    MyCollapser c=new MyCollapser(\"5\",true);\n    observables.add(c.toObservable());\n  }\n  List<TestSubscriber<Integer>> subscribers=new ArrayList<TestSubscriber<Integer>>();\n  for (  final Observable<Integer> o : observables) {\n    final TestSubscriber<Integer> sub=new TestSubscriber<Integer>();\n    subscribers.add(sub);\n    o.subscribe(sub);\n  }\n  Thread.sleep(100);\n  for (  TestSubscriber<Integer> sub : subscribers) {\n    sub.awaitTerminalEvent(1000,TimeUnit.MILLISECONDS);\n    System.out.println(\"Subscriber received : \" + sub.getOnNextEvents());\n    sub.assertNoErrors();\n    sub.assertValues(5);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 287,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDuplicateArgumentsWithRequestCachingOn() throws Exception {\n  final int NUM=10;\n  List<Observable<Integer>> observables=new ArrayList<Observable<Integer>>();\n  for (int i=0; i < NUM; i++) {\n    MyCollapser c=new MyCollapser(\"5\",true);\n    observables.add(c.toObservable());\n  }\n  List<TestSubscriber<Integer>> subscribers=new ArrayList<TestSubscriber<Integer>>();\n  for (  final Observable<Integer> o : observables) {\n    final TestSubscriber<Integer> sub=new TestSubscriber<Integer>();\n    subscribers.add(sub);\n    o.subscribe(sub);\n  }\n  Thread.sleep(100);\n  for (  TestSubscriber<Integer> sub : subscribers) {\n    sub.awaitTerminalEvent(1000,TimeUnit.MILLISECONDS);\n    System.out.println(\"Subscriber received : \" + sub.getOnNextEvents());\n    sub.assertNoErrors();\n    sub.assertValues(5);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 265,
        "startColumnNumber" : 24,
        "endLineNumber" : 265,
        "endColumnNumber" : 31
      },
      "nodeContext" : "i < NUM",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 265,
    "startColumnNumber" : 28,
    "endLineNumber" : 265,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}