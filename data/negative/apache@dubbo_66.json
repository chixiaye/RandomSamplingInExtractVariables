{
  "id" : 66,
  "expression" : "buf",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocolTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 107,
      "startColumnNumber" : 12,
      "endLineNumber" : 107,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 27
      },
      "nodeContext" : "buf.append('A')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 28
      },
      "nodeContext" : "buf.append('A');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 28
      },
      "nodeContext" : "for (int i=0; i < 1024 * 32 + 32; i++) buf.append('A');\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 86,
        "startColumnNumber" : 53,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1930,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDubboProtocol() throws Exception {\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 28
      },
      "nodeContext" : "buf.append('A');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuffer"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 108,
      "startColumnNumber" : 48,
      "endLineNumber" : 108,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 108,
        "startColumnNumber" : 48,
        "endLineNumber" : 108,
        "endColumnNumber" : 62
      },
      "nodeContext" : "buf.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 108,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 63
      },
      "nodeContext" : "service.stringLength(buf.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 64
      },
      "nodeContext" : "System.out.println(service.stringLength(buf.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 65
      },
      "nodeContext" : "System.out.println(service.stringLength(buf.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 86,
        "startColumnNumber" : 53,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1930,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDubboProtocol() throws Exception {\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 65
      },
      "nodeContext" : "System.out.println(service.stringLength(buf.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuffer"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 113,
      "startColumnNumber" : 32,
      "endLineNumber" : 113,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 113,
        "startColumnNumber" : 32,
        "endLineNumber" : 113,
        "endColumnNumber" : 46
      },
      "nodeContext" : "buf.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 113,
        "startColumnNumber" : 21,
        "endLineNumber" : 113,
        "endColumnNumber" : 47
      },
      "nodeContext" : "echo.$echo(buf.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 86,
        "startColumnNumber" : 53,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1930,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDubboProtocol() throws Exception {\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuffer"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 113,
      "startColumnNumber" : 49,
      "endLineNumber" : 113,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 113,
        "startColumnNumber" : 49,
        "endLineNumber" : 113,
        "endColumnNumber" : 63
      },
      "nodeContext" : "buf.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 86,
        "startColumnNumber" : 53,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1930,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDubboProtocol() throws Exception {\n  DemoService service=new DemoServiceImpl();\n  int port=NetUtils.getAvailablePort();\n  protocol.export(proxy.getInvoker(service,DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName())));\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()).addParameter(\"timeout\",3000L)));\n  assertEquals(service.enumlength(new Type[]{}),Type.Lower);\n  assertEquals(service.getSize(null),-1);\n  assertEquals(service.getSize(new String[]{\"\",\"\",\"\"}),3);\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"aa\",\"bb\");\n  Set<String> set=service.keys(map);\n  assertEquals(set.size(),1);\n  assertEquals(set.iterator().next(),\"aa\");\n  service.invoke(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"\",\"invoke\");\n  service=proxy.getProxy(protocol.refer(DemoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < 1024 * 32 + 32; i++)   buf.append('A');\n  System.out.println(service.stringLength(buf.toString()));\n  EchoService echo=proxy.getProxy(protocol.refer(EchoService.class,URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\"+ DemoService.class.getName()+ \"?client=netty\").addParameter(\"timeout\",3000L)));\n  assertEquals(echo.$echo(buf.toString()),buf.toString());\n  assertEquals(echo.$echo(\"test\"),\"test\");\n  assertEquals(echo.$echo(\"abcdefg\"),\"abcdefg\");\n  assertEquals(echo.$echo(1234),1234);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(echo.$echo(buf.toString()),buf.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuffer"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 107,
    "startColumnNumber" : 12,
    "endLineNumber" : 107,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 108,
    "startColumnNumber" : 48,
    "endLineNumber" : 108,
    "endColumnNumber" : 51
  }, {
    "charLength" : 3,
    "startLineNumber" : 113,
    "startColumnNumber" : 32,
    "endLineNumber" : 113,
    "endColumnNumber" : 35
  }, {
    "charLength" : 3,
    "startLineNumber" : 113,
    "startColumnNumber" : 49,
    "endLineNumber" : 113,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  } ]
}