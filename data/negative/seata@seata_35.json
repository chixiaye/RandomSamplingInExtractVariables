{
  "id" : 35,
  "expression" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\")",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/common/src/main/java/io/seata/common/util/StringUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 156,
      "startColumnNumber" : 19,
      "endLineNumber" : 156,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 156,
        "startColumnNumber" : 19,
        "endLineNumber" : 156,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 77
      },
      "nodeContext" : "return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 155,
        "startColumnNumber" : 31,
        "endLineNumber" : 157,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 157,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (obj instanceof Date) {\n  return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1854,
        "startLineNumber" : 142,
        "startColumnNumber" : 45,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (obj == null) {\n    return \"null\";\n  }\n  if (obj.getClass().isPrimitive()) {\n    return String.valueOf(obj);\n  }\n  if (obj instanceof String) {\n    return (String)obj;\n  }\n  if (obj instanceof Number || obj instanceof Character || obj instanceof Boolean) {\n    return String.valueOf(obj);\n  }\n  if (obj instanceof Date) {\n    return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n  }\n  if (obj instanceof Collection) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(\"[\");\n    if (!((Collection)obj).isEmpty()) {\n      for (      Object o : (Collection)obj) {\n        sb.append(toString(o)).append(\",\");\n      }\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    sb.append(\"]\");\n    return sb.toString();\n  }\n  if (obj instanceof Map) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(\"{\");\n    if (!((Map)obj).isEmpty()) {\n      for (      Object k : ((Map)obj).keySet()) {\n        Object v=((Map)obj).get(k);\n        sb.append(toString(k)).append(\"->\").append(toString(v)).append(\",\");\n      }\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    sb.append(\"}\");\n  }\n  StringBuilder sb=new StringBuilder();\n  Field[] fields=obj.getClass().getDeclaredFields();\n  for (  Field field : fields) {\n    field.setAccessible(true);\n    sb.append(field.getName());\n    sb.append(\"=\");\n    try {\n      Object f=field.get(obj);\n      sb.append(toString(f));\n    }\n catch (    Exception e) {\n    }\n    sb.append(\";\");\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Object.toString()\n * @param obj the obj\n * @return string\n */\npublic static String toString(Object obj){\n  if (obj == null) {\n    return \"null\";\n  }\n  if (obj.getClass().isPrimitive()) {\n    return String.valueOf(obj);\n  }\n  if (obj instanceof String) {\n    return (String)obj;\n  }\n  if (obj instanceof Number || obj instanceof Character || obj instanceof Boolean) {\n    return String.valueOf(obj);\n  }\n  if (obj instanceof Date) {\n    return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n  }\n  if (obj instanceof Collection) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(\"[\");\n    if (!((Collection)obj).isEmpty()) {\n      for (      Object o : (Collection)obj) {\n        sb.append(toString(o)).append(\",\");\n      }\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    sb.append(\"]\");\n    return sb.toString();\n  }\n  if (obj instanceof Map) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(\"{\");\n    if (!((Map)obj).isEmpty()) {\n      for (      Object k : ((Map)obj).keySet()) {\n        Object v=((Map)obj).get(k);\n        sb.append(toString(k)).append(\"->\").append(toString(v)).append(\",\");\n      }\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    sb.append(\"}\");\n  }\n  StringBuilder sb=new StringBuilder();\n  Field[] fields=obj.getClass().getDeclaredFields();\n  for (  Field field : fields) {\n    field.setAccessible(true);\n    sb.append(field.getName());\n    sb.append(\"=\");\n    try {\n      Object f=field.get(obj);\n      sb.append(toString(f));\n    }\n catch (    Exception e) {\n    }\n    sb.append(\";\");\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 77
      },
      "nodeContext" : "return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").format(obj);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.text.SimpleDateFormat"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 156,
    "startColumnNumber" : 19,
    "endLineNumber" : 156,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}