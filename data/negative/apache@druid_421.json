{
  "id" : 421,
  "expression" : "0",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/client/CachingClusteredClientPerfTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 98,
      "startColumnNumber" : 18,
      "endLineNumber" : 98,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 98,
        "startColumnNumber" : 13,
        "endLineNumber" : 98,
        "endColumnNumber" : 19
      },
      "nodeContext" : "ii=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 98,
        "startColumnNumber" : 9,
        "endLineNumber" : 98,
        "endColumnNumber" : 19
      },
      "nodeContext" : "int ii=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int ii=0; ii < segmentCount; ii++) {\n  segmentDescriptors.add(new SegmentDescriptor(interval,\"1\",ii));\n  DataSegment segment=makeDataSegment(\"test\",interval,\"1\",ii);\n  dataSegments.add(segment);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2960,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 151,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int segmentCount=30_000;\n  final Interval interval=Intervals.of(\"2021-02-13/2021-02-14\");\n  final List<SegmentDescriptor> segmentDescriptors=new ArrayList<>(segmentCount);\n  final List<DataSegment> dataSegments=new ArrayList<>(segmentCount);\n  final VersionedIntervalTimeline<String,ServerSelector> timeline=new VersionedIntervalTimeline<>(Ordering.natural());\n  final DruidServer server=new DruidServer(\"server\",\"localhost:9000\",null,Long.MAX_VALUE,ServerType.HISTORICAL,DruidServer.DEFAULT_TIER,DruidServer.DEFAULT_PRIORITY);\n  for (int ii=0; ii < segmentCount; ii++) {\n    segmentDescriptors.add(new SegmentDescriptor(interval,\"1\",ii));\n    DataSegment segment=makeDataSegment(\"test\",interval,\"1\",ii);\n    dataSegments.add(segment);\n  }\n  timeline.addAll(Iterators.transform(dataSegments.iterator(),segment -> {\n    ServerSelector ss=new ServerSelector(segment,new HighestPriorityTierSelectorStrategy(new RandomServerSelectorStrategy()));\n    ss.addServerAndUpdateSegment(new QueryableDruidServer(server,new MockQueryRunner()),segment);\n    return new VersionedIntervalTimeline.PartitionChunkEntry<>(segment.getInterval(),segment.getVersion(),segment.getShardSpec().createChunk(ss));\n  }\n));\n  TimelineServerView serverView=Mockito.mock(TimelineServerView.class);\n  QueryScheduler queryScheduler=Mockito.mock(QueryScheduler.class);\n  Mockito.when(queryScheduler.run(any(),any())).thenAnswer(i -> i.getArgument(1));\n  Mockito.when(queryScheduler.prioritizeAndLaneQuery(any(),any())).thenAnswer(i -> ((QueryPlus)i.getArgument(0)).getQuery());\n  Mockito.doReturn(Optional.of(timeline)).when(serverView).getTimeline(any());\n  Mockito.doReturn(new MockQueryRunner()).when(serverView).getQueryRunner(any());\n  CachingClusteredClient cachingClusteredClient=new CachingClusteredClient(new MockQueryToolChestWareHouse(),serverView,MapCache.create(1024),TestHelper.makeJsonMapper(),Mockito.mock(CachePopulator.class),new CacheConfig(),Mockito.mock(DruidHttpClientConfig.class),Mockito.mock(DruidProcessingConfig.class),ForkJoinPool.commonPool(),queryScheduler,NoopJoinableFactory.INSTANCE);\n  Query<SegmentDescriptor> fakeQuery=makeFakeQuery(interval);\n  QueryRunner<SegmentDescriptor> queryRunner=cachingClusteredClient.getQueryRunnerForSegments(fakeQuery,segmentDescriptors);\n  Sequence<SegmentDescriptor> sequence=queryRunner.run(QueryPlus.wrap(fakeQuery));\n  Assert.assertEquals(segmentDescriptors,sequence.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3060,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 151,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test(timeout=10_000) public void testGetQueryRunnerForSegments_singleIntervalLargeSegments(){\n  final int segmentCount=30_000;\n  final Interval interval=Intervals.of(\"2021-02-13/2021-02-14\");\n  final List<SegmentDescriptor> segmentDescriptors=new ArrayList<>(segmentCount);\n  final List<DataSegment> dataSegments=new ArrayList<>(segmentCount);\n  final VersionedIntervalTimeline<String,ServerSelector> timeline=new VersionedIntervalTimeline<>(Ordering.natural());\n  final DruidServer server=new DruidServer(\"server\",\"localhost:9000\",null,Long.MAX_VALUE,ServerType.HISTORICAL,DruidServer.DEFAULT_TIER,DruidServer.DEFAULT_PRIORITY);\n  for (int ii=0; ii < segmentCount; ii++) {\n    segmentDescriptors.add(new SegmentDescriptor(interval,\"1\",ii));\n    DataSegment segment=makeDataSegment(\"test\",interval,\"1\",ii);\n    dataSegments.add(segment);\n  }\n  timeline.addAll(Iterators.transform(dataSegments.iterator(),segment -> {\n    ServerSelector ss=new ServerSelector(segment,new HighestPriorityTierSelectorStrategy(new RandomServerSelectorStrategy()));\n    ss.addServerAndUpdateSegment(new QueryableDruidServer(server,new MockQueryRunner()),segment);\n    return new VersionedIntervalTimeline.PartitionChunkEntry<>(segment.getInterval(),segment.getVersion(),segment.getShardSpec().createChunk(ss));\n  }\n));\n  TimelineServerView serverView=Mockito.mock(TimelineServerView.class);\n  QueryScheduler queryScheduler=Mockito.mock(QueryScheduler.class);\n  Mockito.when(queryScheduler.run(any(),any())).thenAnswer(i -> i.getArgument(1));\n  Mockito.when(queryScheduler.prioritizeAndLaneQuery(any(),any())).thenAnswer(i -> ((QueryPlus)i.getArgument(0)).getQuery());\n  Mockito.doReturn(Optional.of(timeline)).when(serverView).getTimeline(any());\n  Mockito.doReturn(new MockQueryRunner()).when(serverView).getQueryRunner(any());\n  CachingClusteredClient cachingClusteredClient=new CachingClusteredClient(new MockQueryToolChestWareHouse(),serverView,MapCache.create(1024),TestHelper.makeJsonMapper(),Mockito.mock(CachePopulator.class),new CacheConfig(),Mockito.mock(DruidHttpClientConfig.class),Mockito.mock(DruidProcessingConfig.class),ForkJoinPool.commonPool(),queryScheduler,NoopJoinableFactory.INSTANCE);\n  Query<SegmentDescriptor> fakeQuery=makeFakeQuery(interval);\n  QueryRunner<SegmentDescriptor> queryRunner=cachingClusteredClient.getQueryRunnerForSegments(fakeQuery,segmentDescriptors);\n  Sequence<SegmentDescriptor> sequence=queryRunner.run(QueryPlus.wrap(fakeQuery));\n  Assert.assertEquals(segmentDescriptors,sequence.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 98,
        "startColumnNumber" : 9,
        "endLineNumber" : 98,
        "endColumnNumber" : 19
      },
      "nodeContext" : "int ii=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 98,
    "startColumnNumber" : 18,
    "endLineNumber" : 98,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}