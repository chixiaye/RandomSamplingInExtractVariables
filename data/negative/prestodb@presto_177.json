{
  "id" : 177,
  "expression" : "(List<?>)value",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-rcfile/src/test/java/com/facebook/presto/rcfile/RcFileTester.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(List<?>)value",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 725,
      "startColumnNumber" : 36,
      "endLineNumber" : 725,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 725,
        "startColumnNumber" : 28,
        "endLineNumber" : 725,
        "endColumnNumber" : 51
      },
      "nodeContext" : "array=(List<?>)value",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 725,
        "startColumnNumber" : 20,
        "endLineNumber" : 725,
        "endColumnNumber" : 52
      },
      "nodeContext" : "List<?> array=(List<?>)value;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 724,
        "startColumnNumber" : 44,
        "endLineNumber" : 732,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  List<?> array=(List<?>)value;\n  Type elementType=type.getTypeParameters().get(0);\n  BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object elementValue : array) {\n    writeValue(elementType,arrayBlockBuilder,elementValue);\n  }\n  blockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 724,
        "startColumnNumber" : 16,
        "endLineNumber" : 756,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ARRAY.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  Type elementType=type.getTypeParameters().get(0);\n  BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object elementValue : array) {\n    writeValue(elementType,arrayBlockBuilder,elementValue);\n  }\n  blockBuilder.closeEntry();\n}\n else if (MAP.equals(baseType)) {\n  Map<?,?> map=(Map<?,?>)value;\n  Type keyType=type.getTypeParameters().get(0);\n  Type valueType=type.getTypeParameters().get(1);\n  BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Entry<?,?> entry : map.entrySet()) {\n    writeValue(keyType,mapBlockBuilder,entry.getKey());\n    writeValue(valueType,mapBlockBuilder,entry.getValue());\n  }\n  blockBuilder.closeEntry();\n}\n else if (ROW.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  List<Type> fieldTypes=type.getTypeParameters();\n  BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n  for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n    Type fieldType=fieldTypes.get(fieldId);\n    writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n  }\n  blockBuilder.closeEntry();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1901,
        "startLineNumber" : 722,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2085,
        "startLineNumber" : 718,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 714,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2415,
        "startLineNumber" : 711,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2555,
        "startLineNumber" : 708,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2693,
        "startLineNumber" : 705,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 334,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2832,
        "startLineNumber" : 702,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 352,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3029,
        "startLineNumber" : 699,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 375,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3208,
        "startLineNumber" : 696,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 397,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 693,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 415,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3477,
        "startLineNumber" : 690,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 433,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3613,
        "startLineNumber" : 687,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 451,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3748,
        "startLineNumber" : 684,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 469,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3873,
        "startLineNumber" : 681,
        "startColumnNumber" : 12,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  type.writeBoolean(blockBuilder,(Boolean)value);\n}\n else if (TINYINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 484,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3897,
        "startLineNumber" : 680,
        "startColumnNumber" : 13,
        "endLineNumber" : 758,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (BOOLEAN.equals(type)) {\n    type.writeBoolean(blockBuilder,(Boolean)value);\n  }\n else   if (TINYINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (SMALLINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (INTEGER.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (BIGINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (Decimals.isShortDecimal(type)) {\n    type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n  }\n else   if (Decimals.isLongDecimal(type)) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n  }\n else   if (DOUBLE.equals(type)) {\n    type.writeDouble(blockBuilder,((Number)value).doubleValue());\n  }\n else   if (VARCHAR.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n  }\n else   if (VARBINARY.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n  }\n else   if (DATE.equals(type)) {\n    long days=((SqlDate)value).getDays();\n    type.writeLong(blockBuilder,days);\n  }\n else   if (TIMESTAMP.equals(type)) {\n    long millis=((SqlTimestamp)value).getMillisUtc();\n    type.writeLong(blockBuilder,millis);\n  }\n else {\n    String baseType=type.getTypeSignature().getBase();\n    if (ARRAY.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      Type elementType=type.getTypeParameters().get(0);\n      BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Object elementValue : array) {\n        writeValue(elementType,arrayBlockBuilder,elementValue);\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (MAP.equals(baseType)) {\n      Map<?,?> map=(Map<?,?>)value;\n      Type keyType=type.getTypeParameters().get(0);\n      Type valueType=type.getTypeParameters().get(1);\n      BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Entry<?,?> entry : map.entrySet()) {\n        writeValue(keyType,mapBlockBuilder,entry.getKey());\n        writeValue(valueType,mapBlockBuilder,entry.getValue());\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (ROW.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      List<Type> fieldTypes=type.getTypeParameters();\n      BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n      for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n        Type fieldType=fieldTypes.get(fieldId);\n        writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n      }\n      blockBuilder.closeEntry();\n    }\n else {\n      throw new IllegalArgumentException(\"Unsupported type \" + type);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3980,
        "startLineNumber" : 677,
        "startColumnNumber" : 8,
        "endLineNumber" : 758,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  blockBuilder.appendNull();\n}\n else {\n  if (BOOLEAN.equals(type)) {\n    type.writeBoolean(blockBuilder,(Boolean)value);\n  }\n else   if (TINYINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (SMALLINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (INTEGER.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (BIGINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (Decimals.isShortDecimal(type)) {\n    type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n  }\n else   if (Decimals.isLongDecimal(type)) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n  }\n else   if (DOUBLE.equals(type)) {\n    type.writeDouble(blockBuilder,((Number)value).doubleValue());\n  }\n else   if (VARCHAR.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n  }\n else   if (VARBINARY.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n  }\n else   if (DATE.equals(type)) {\n    long days=((SqlDate)value).getDays();\n    type.writeLong(blockBuilder,days);\n  }\n else   if (TIMESTAMP.equals(type)) {\n    long millis=((SqlTimestamp)value).getMillisUtc();\n    type.writeLong(blockBuilder,millis);\n  }\n else {\n    String baseType=type.getTypeSignature().getBase();\n    if (ARRAY.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      Type elementType=type.getTypeParameters().get(0);\n      BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Object elementValue : array) {\n        writeValue(elementType,arrayBlockBuilder,elementValue);\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (MAP.equals(baseType)) {\n      Map<?,?> map=(Map<?,?>)value;\n      Type keyType=type.getTypeParameters().get(0);\n      Type valueType=type.getTypeParameters().get(1);\n      BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Entry<?,?> entry : map.entrySet()) {\n        writeValue(keyType,mapBlockBuilder,entry.getKey());\n        writeValue(valueType,mapBlockBuilder,entry.getValue());\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (ROW.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      List<Type> fieldTypes=type.getTypeParameters();\n      BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n      for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n        Type fieldType=fieldTypes.get(fieldId);\n        writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n      }\n      blockBuilder.closeEntry();\n    }\n else {\n      throw new IllegalArgumentException(\"Unsupported type \" + type);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 494,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3996,
        "startLineNumber" : 676,
        "startColumnNumber" : 4,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (value == null) {\n    blockBuilder.appendNull();\n  }\n else {\n    if (BOOLEAN.equals(type)) {\n      type.writeBoolean(blockBuilder,(Boolean)value);\n    }\n else     if (TINYINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (SMALLINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (INTEGER.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (BIGINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (Decimals.isShortDecimal(type)) {\n      type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n    }\n else     if (Decimals.isLongDecimal(type)) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n    }\n else     if (DOUBLE.equals(type)) {\n      type.writeDouble(blockBuilder,((Number)value).doubleValue());\n    }\n else     if (VARCHAR.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n    }\n else     if (VARBINARY.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n    }\n else     if (DATE.equals(type)) {\n      long days=((SqlDate)value).getDays();\n      type.writeLong(blockBuilder,days);\n    }\n else     if (TIMESTAMP.equals(type)) {\n      long millis=((SqlTimestamp)value).getMillisUtc();\n      type.writeLong(blockBuilder,millis);\n    }\n else {\n      String baseType=type.getTypeSignature().getBase();\n      if (ARRAY.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        Type elementType=type.getTypeParameters().get(0);\n        BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Object elementValue : array) {\n          writeValue(elementType,arrayBlockBuilder,elementValue);\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (MAP.equals(baseType)) {\n        Map<?,?> map=(Map<?,?>)value;\n        Type keyType=type.getTypeParameters().get(0);\n        Type valueType=type.getTypeParameters().get(1);\n        BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Entry<?,?> entry : map.entrySet()) {\n          writeValue(keyType,mapBlockBuilder,entry.getKey());\n          writeValue(valueType,mapBlockBuilder,entry.getValue());\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (ROW.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        List<Type> fieldTypes=type.getTypeParameters();\n        BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n        for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n          Type fieldType=fieldTypes.get(fieldId);\n          writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n        }\n        blockBuilder.closeEntry();\n      }\n else {\n        throw new IllegalArgumentException(\"Unsupported type \" + type);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4083,
        "startLineNumber" : 675,
        "startColumnNumber" : 4,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void writeValue(Type type,BlockBuilder blockBuilder,Object value){\n  if (value == null) {\n    blockBuilder.appendNull();\n  }\n else {\n    if (BOOLEAN.equals(type)) {\n      type.writeBoolean(blockBuilder,(Boolean)value);\n    }\n else     if (TINYINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (SMALLINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (INTEGER.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (BIGINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (Decimals.isShortDecimal(type)) {\n      type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n    }\n else     if (Decimals.isLongDecimal(type)) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n    }\n else     if (DOUBLE.equals(type)) {\n      type.writeDouble(blockBuilder,((Number)value).doubleValue());\n    }\n else     if (VARCHAR.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n    }\n else     if (VARBINARY.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n    }\n else     if (DATE.equals(type)) {\n      long days=((SqlDate)value).getDays();\n      type.writeLong(blockBuilder,days);\n    }\n else     if (TIMESTAMP.equals(type)) {\n      long millis=((SqlTimestamp)value).getMillisUtc();\n      type.writeLong(blockBuilder,millis);\n    }\n else {\n      String baseType=type.getTypeSignature().getBase();\n      if (ARRAY.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        Type elementType=type.getTypeParameters().get(0);\n        BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Object elementValue : array) {\n          writeValue(elementType,arrayBlockBuilder,elementValue);\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (MAP.equals(baseType)) {\n        Map<?,?> map=(Map<?,?>)value;\n        Type keyType=type.getTypeParameters().get(0);\n        Type valueType=type.getTypeParameters().get(1);\n        BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Entry<?,?> entry : map.entrySet()) {\n          writeValue(keyType,mapBlockBuilder,entry.getKey());\n          writeValue(valueType,mapBlockBuilder,entry.getValue());\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (ROW.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        List<Type> fieldTypes=type.getTypeParameters();\n        BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n        for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n          Type fieldType=fieldTypes.get(fieldId);\n          writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n        }\n        blockBuilder.closeEntry();\n      }\n else {\n        throw new IllegalArgumentException(\"Unsupported type \" + type);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 725,
        "startColumnNumber" : 20,
        "endLineNumber" : 725,
        "endColumnNumber" : 52
      },
      "nodeContext" : "List<?> array=(List<?>)value;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.util.List<>"
  }, {
    "nodeContext" : "(List<?>)value",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 745,
      "startColumnNumber" : 36,
      "endLineNumber" : 745,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 745,
        "startColumnNumber" : 28,
        "endLineNumber" : 745,
        "endColumnNumber" : 51
      },
      "nodeContext" : "array=(List<?>)value",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 745,
        "startColumnNumber" : 20,
        "endLineNumber" : 745,
        "endColumnNumber" : 52
      },
      "nodeContext" : "List<?> array=(List<?>)value;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 744,
        "startColumnNumber" : 47,
        "endLineNumber" : 753,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  List<?> array=(List<?>)value;\n  List<Type> fieldTypes=type.getTypeParameters();\n  BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n  for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n    Type fieldType=fieldTypes.get(fieldId);\n    writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n  }\n  blockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 744,
        "startColumnNumber" : 21,
        "endLineNumber" : 756,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ROW.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  List<Type> fieldTypes=type.getTypeParameters();\n  BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n  for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n    Type fieldType=fieldTypes.get(fieldId);\n    writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n  }\n  blockBuilder.closeEntry();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1314,
        "startLineNumber" : 733,
        "startColumnNumber" : 21,
        "endLineNumber" : 756,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (MAP.equals(baseType)) {\n  Map<?,?> map=(Map<?,?>)value;\n  Type keyType=type.getTypeParameters().get(0);\n  Type valueType=type.getTypeParameters().get(1);\n  BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Entry<?,?> entry : map.entrySet()) {\n    writeValue(keyType,mapBlockBuilder,entry.getKey());\n    writeValue(valueType,mapBlockBuilder,entry.getValue());\n  }\n  blockBuilder.closeEntry();\n}\n else if (ROW.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  List<Type> fieldTypes=type.getTypeParameters();\n  BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n  for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n    Type fieldType=fieldTypes.get(fieldId);\n    writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n  }\n  blockBuilder.closeEntry();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 724,
        "startColumnNumber" : 16,
        "endLineNumber" : 756,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ARRAY.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  Type elementType=type.getTypeParameters().get(0);\n  BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Object elementValue : array) {\n    writeValue(elementType,arrayBlockBuilder,elementValue);\n  }\n  blockBuilder.closeEntry();\n}\n else if (MAP.equals(baseType)) {\n  Map<?,?> map=(Map<?,?>)value;\n  Type keyType=type.getTypeParameters().get(0);\n  Type valueType=type.getTypeParameters().get(1);\n  BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Entry<?,?> entry : map.entrySet()) {\n    writeValue(keyType,mapBlockBuilder,entry.getKey());\n    writeValue(valueType,mapBlockBuilder,entry.getValue());\n  }\n  blockBuilder.closeEntry();\n}\n else if (ROW.equals(baseType)) {\n  List<?> array=(List<?>)value;\n  List<Type> fieldTypes=type.getTypeParameters();\n  BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n  for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n    Type fieldType=fieldTypes.get(fieldId);\n    writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n  }\n  blockBuilder.closeEntry();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1901,
        "startLineNumber" : 722,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2085,
        "startLineNumber" : 718,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 714,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2415,
        "startLineNumber" : 711,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2555,
        "startLineNumber" : 708,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 316,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2693,
        "startLineNumber" : 705,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 334,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2832,
        "startLineNumber" : 702,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 352,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3029,
        "startLineNumber" : 699,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 375,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3208,
        "startLineNumber" : 696,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 397,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 693,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 415,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3477,
        "startLineNumber" : 690,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 433,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3613,
        "startLineNumber" : 687,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 451,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3748,
        "startLineNumber" : 684,
        "startColumnNumber" : 17,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (TINYINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 469,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3873,
        "startLineNumber" : 681,
        "startColumnNumber" : 12,
        "endLineNumber" : 757,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BOOLEAN.equals(type)) {\n  type.writeBoolean(blockBuilder,(Boolean)value);\n}\n else if (TINYINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (SMALLINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (INTEGER.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (BIGINT.equals(type)) {\n  type.writeLong(blockBuilder,((Number)value).longValue());\n}\n else if (Decimals.isShortDecimal(type)) {\n  type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n}\n else if (Decimals.isLongDecimal(type)) {\n  type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n}\n else if (REAL.equals(type)) {\n  type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n}\n else if (DOUBLE.equals(type)) {\n  type.writeDouble(blockBuilder,((Number)value).doubleValue());\n}\n else if (VARCHAR.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n}\n else if (VARBINARY.equals(type)) {\n  type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n}\n else if (DATE.equals(type)) {\n  long days=((SqlDate)value).getDays();\n  type.writeLong(blockBuilder,days);\n}\n else if (TIMESTAMP.equals(type)) {\n  long millis=((SqlTimestamp)value).getMillisUtc();\n  type.writeLong(blockBuilder,millis);\n}\n else {\n  String baseType=type.getTypeSignature().getBase();\n  if (ARRAY.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    Type elementType=type.getTypeParameters().get(0);\n    BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Object elementValue : array) {\n      writeValue(elementType,arrayBlockBuilder,elementValue);\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (MAP.equals(baseType)) {\n    Map<?,?> map=(Map<?,?>)value;\n    Type keyType=type.getTypeParameters().get(0);\n    Type valueType=type.getTypeParameters().get(1);\n    BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n    for (    Entry<?,?> entry : map.entrySet()) {\n      writeValue(keyType,mapBlockBuilder,entry.getKey());\n      writeValue(valueType,mapBlockBuilder,entry.getValue());\n    }\n    blockBuilder.closeEntry();\n  }\n else   if (ROW.equals(baseType)) {\n    List<?> array=(List<?>)value;\n    List<Type> fieldTypes=type.getTypeParameters();\n    BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n    for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n      Type fieldType=fieldTypes.get(fieldId);\n      writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n    }\n    blockBuilder.closeEntry();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 484,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3897,
        "startLineNumber" : 680,
        "startColumnNumber" : 13,
        "endLineNumber" : 758,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (BOOLEAN.equals(type)) {\n    type.writeBoolean(blockBuilder,(Boolean)value);\n  }\n else   if (TINYINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (SMALLINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (INTEGER.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (BIGINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (Decimals.isShortDecimal(type)) {\n    type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n  }\n else   if (Decimals.isLongDecimal(type)) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n  }\n else   if (DOUBLE.equals(type)) {\n    type.writeDouble(blockBuilder,((Number)value).doubleValue());\n  }\n else   if (VARCHAR.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n  }\n else   if (VARBINARY.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n  }\n else   if (DATE.equals(type)) {\n    long days=((SqlDate)value).getDays();\n    type.writeLong(blockBuilder,days);\n  }\n else   if (TIMESTAMP.equals(type)) {\n    long millis=((SqlTimestamp)value).getMillisUtc();\n    type.writeLong(blockBuilder,millis);\n  }\n else {\n    String baseType=type.getTypeSignature().getBase();\n    if (ARRAY.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      Type elementType=type.getTypeParameters().get(0);\n      BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Object elementValue : array) {\n        writeValue(elementType,arrayBlockBuilder,elementValue);\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (MAP.equals(baseType)) {\n      Map<?,?> map=(Map<?,?>)value;\n      Type keyType=type.getTypeParameters().get(0);\n      Type valueType=type.getTypeParameters().get(1);\n      BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Entry<?,?> entry : map.entrySet()) {\n        writeValue(keyType,mapBlockBuilder,entry.getKey());\n        writeValue(valueType,mapBlockBuilder,entry.getValue());\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (ROW.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      List<Type> fieldTypes=type.getTypeParameters();\n      BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n      for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n        Type fieldType=fieldTypes.get(fieldId);\n        writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n      }\n      blockBuilder.closeEntry();\n    }\n else {\n      throw new IllegalArgumentException(\"Unsupported type \" + type);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3980,
        "startLineNumber" : 677,
        "startColumnNumber" : 8,
        "endLineNumber" : 758,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value == null) {\n  blockBuilder.appendNull();\n}\n else {\n  if (BOOLEAN.equals(type)) {\n    type.writeBoolean(blockBuilder,(Boolean)value);\n  }\n else   if (TINYINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (SMALLINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (INTEGER.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (BIGINT.equals(type)) {\n    type.writeLong(blockBuilder,((Number)value).longValue());\n  }\n else   if (Decimals.isShortDecimal(type)) {\n    type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n  }\n else   if (Decimals.isLongDecimal(type)) {\n    type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n  }\n else   if (REAL.equals(type)) {\n    type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n  }\n else   if (DOUBLE.equals(type)) {\n    type.writeDouble(blockBuilder,((Number)value).doubleValue());\n  }\n else   if (VARCHAR.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n  }\n else   if (VARBINARY.equals(type)) {\n    type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n  }\n else   if (DATE.equals(type)) {\n    long days=((SqlDate)value).getDays();\n    type.writeLong(blockBuilder,days);\n  }\n else   if (TIMESTAMP.equals(type)) {\n    long millis=((SqlTimestamp)value).getMillisUtc();\n    type.writeLong(blockBuilder,millis);\n  }\n else {\n    String baseType=type.getTypeSignature().getBase();\n    if (ARRAY.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      Type elementType=type.getTypeParameters().get(0);\n      BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Object elementValue : array) {\n        writeValue(elementType,arrayBlockBuilder,elementValue);\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (MAP.equals(baseType)) {\n      Map<?,?> map=(Map<?,?>)value;\n      Type keyType=type.getTypeParameters().get(0);\n      Type valueType=type.getTypeParameters().get(1);\n      BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n      for (      Entry<?,?> entry : map.entrySet()) {\n        writeValue(keyType,mapBlockBuilder,entry.getKey());\n        writeValue(valueType,mapBlockBuilder,entry.getValue());\n      }\n      blockBuilder.closeEntry();\n    }\n else     if (ROW.equals(baseType)) {\n      List<?> array=(List<?>)value;\n      List<Type> fieldTypes=type.getTypeParameters();\n      BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n      for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n        Type fieldType=fieldTypes.get(fieldId);\n        writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n      }\n      blockBuilder.closeEntry();\n    }\n else {\n      throw new IllegalArgumentException(\"Unsupported type \" + type);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 494,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3996,
        "startLineNumber" : 676,
        "startColumnNumber" : 4,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (value == null) {\n    blockBuilder.appendNull();\n  }\n else {\n    if (BOOLEAN.equals(type)) {\n      type.writeBoolean(blockBuilder,(Boolean)value);\n    }\n else     if (TINYINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (SMALLINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (INTEGER.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (BIGINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (Decimals.isShortDecimal(type)) {\n      type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n    }\n else     if (Decimals.isLongDecimal(type)) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n    }\n else     if (DOUBLE.equals(type)) {\n      type.writeDouble(blockBuilder,((Number)value).doubleValue());\n    }\n else     if (VARCHAR.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n    }\n else     if (VARBINARY.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n    }\n else     if (DATE.equals(type)) {\n      long days=((SqlDate)value).getDays();\n      type.writeLong(blockBuilder,days);\n    }\n else     if (TIMESTAMP.equals(type)) {\n      long millis=((SqlTimestamp)value).getMillisUtc();\n      type.writeLong(blockBuilder,millis);\n    }\n else {\n      String baseType=type.getTypeSignature().getBase();\n      if (ARRAY.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        Type elementType=type.getTypeParameters().get(0);\n        BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Object elementValue : array) {\n          writeValue(elementType,arrayBlockBuilder,elementValue);\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (MAP.equals(baseType)) {\n        Map<?,?> map=(Map<?,?>)value;\n        Type keyType=type.getTypeParameters().get(0);\n        Type valueType=type.getTypeParameters().get(1);\n        BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Entry<?,?> entry : map.entrySet()) {\n          writeValue(keyType,mapBlockBuilder,entry.getKey());\n          writeValue(valueType,mapBlockBuilder,entry.getValue());\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (ROW.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        List<Type> fieldTypes=type.getTypeParameters();\n        BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n        for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n          Type fieldType=fieldTypes.get(fieldId);\n          writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n        }\n        blockBuilder.closeEntry();\n      }\n else {\n        throw new IllegalArgumentException(\"Unsupported type \" + type);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4083,
        "startLineNumber" : 675,
        "startColumnNumber" : 4,
        "endLineNumber" : 759,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void writeValue(Type type,BlockBuilder blockBuilder,Object value){\n  if (value == null) {\n    blockBuilder.appendNull();\n  }\n else {\n    if (BOOLEAN.equals(type)) {\n      type.writeBoolean(blockBuilder,(Boolean)value);\n    }\n else     if (TINYINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (SMALLINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (INTEGER.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (BIGINT.equals(type)) {\n      type.writeLong(blockBuilder,((Number)value).longValue());\n    }\n else     if (Decimals.isShortDecimal(type)) {\n      type.writeLong(blockBuilder,((SqlDecimal)value).toBigDecimal().unscaledValue().longValue());\n    }\n else     if (Decimals.isLongDecimal(type)) {\n      type.writeSlice(blockBuilder,Decimals.encodeUnscaledValue(((SqlDecimal)value).toBigDecimal().unscaledValue()));\n    }\n else     if (REAL.equals(type)) {\n      type.writeLong(blockBuilder,Float.floatToIntBits((Float)value));\n    }\n else     if (DOUBLE.equals(type)) {\n      type.writeDouble(blockBuilder,((Number)value).doubleValue());\n    }\n else     if (VARCHAR.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.utf8Slice((String)value));\n    }\n else     if (VARBINARY.equals(type)) {\n      type.writeSlice(blockBuilder,Slices.wrappedBuffer(((SqlVarbinary)value).getBytes()));\n    }\n else     if (DATE.equals(type)) {\n      long days=((SqlDate)value).getDays();\n      type.writeLong(blockBuilder,days);\n    }\n else     if (TIMESTAMP.equals(type)) {\n      long millis=((SqlTimestamp)value).getMillisUtc();\n      type.writeLong(blockBuilder,millis);\n    }\n else {\n      String baseType=type.getTypeSignature().getBase();\n      if (ARRAY.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        Type elementType=type.getTypeParameters().get(0);\n        BlockBuilder arrayBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Object elementValue : array) {\n          writeValue(elementType,arrayBlockBuilder,elementValue);\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (MAP.equals(baseType)) {\n        Map<?,?> map=(Map<?,?>)value;\n        Type keyType=type.getTypeParameters().get(0);\n        Type valueType=type.getTypeParameters().get(1);\n        BlockBuilder mapBlockBuilder=blockBuilder.beginBlockEntry();\n        for (        Entry<?,?> entry : map.entrySet()) {\n          writeValue(keyType,mapBlockBuilder,entry.getKey());\n          writeValue(valueType,mapBlockBuilder,entry.getValue());\n        }\n        blockBuilder.closeEntry();\n      }\n else       if (ROW.equals(baseType)) {\n        List<?> array=(List<?>)value;\n        List<Type> fieldTypes=type.getTypeParameters();\n        BlockBuilder rowBlockBuilder=blockBuilder.beginBlockEntry();\n        for (int fieldId=0; fieldId < fieldTypes.size(); fieldId++) {\n          Type fieldType=fieldTypes.get(fieldId);\n          writeValue(fieldType,rowBlockBuilder,array.get(fieldId));\n        }\n        blockBuilder.closeEntry();\n      }\n else {\n        throw new IllegalArgumentException(\"Unsupported type \" + type);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 512,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 745,
        "startColumnNumber" : 20,
        "endLineNumber" : 745,
        "endColumnNumber" : 52
      },
      "nodeContext" : "List<?> array=(List<?>)value;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.util.List<>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 725,
    "startColumnNumber" : 36,
    "endLineNumber" : 725,
    "endColumnNumber" : 51
  }, {
    "charLength" : 15,
    "startLineNumber" : 745,
    "startColumnNumber" : 36,
    "endLineNumber" : 745,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}