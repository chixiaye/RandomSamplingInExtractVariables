{
  "id" : 382,
  "expression" : "\"h.statement\"",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "e28ea755442e8730859aeca1c5ce05ba22b67fd8",
  "filePath" : "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PerformanceInterceptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"h.statement\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 75,
      "startColumnNumber" : 82,
      "endLineNumber" : 75,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 75,
        "startColumnNumber" : 36,
        "endLineNumber" : 75,
        "endColumnNumber" : 96
      },
      "nodeContext" : "SystemMetaObject.forObject(firstArg).getValue(\"h.statement\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 96
      },
      "nodeContext" : "statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 97
      },
      "nodeContext" : "statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 74,
        "startColumnNumber" : 53,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Proxy.isProxyClass(firstArg.getClass())) {\n  statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n}\n else {\n  statement=(Statement)firstArg;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1827,
        "startLineNumber" : 71,
        "startColumnNumber" : 68,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  try {\n    statement.getClass().getDeclaredField(\"stmt\");\n    statement=(Statement)SystemMetaObject.forObject(statement).getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  String originalSql=statement.toString();\n  int index=originalSql.indexOf(':');\n  String sql=originalSql;\n  if (index > 0) {\n    sql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long end=SystemClock.now();\n  long timing=end - start;\n  String formatSql=SqlUtils.sqlFormat(sql,format);\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  String sqlTxt=\" Time：\" + timing + \" ms\"+ \" - ID：\"+ ms.getId()+ \"\\n Execute SQL：\"+ formatSql+ \"\\n\";\n  if (this.isWriteInLog()) {\n    if (maxTime >= 1 && timing > maxTime) {\n      logger.error(sqlTxt);\n    }\n else {\n      logger.debug(sqlTxt);\n    }\n  }\n else {\n    System.err.println(sqlTxt);\n    if (maxTime >= 1 && timing > maxTime) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1891,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Object intercept(Invocation invocation) throws Throwable {\n  Statement statement;\n  Object firstArg=invocation.getArgs()[0];\n  if (Proxy.isProxyClass(firstArg.getClass())) {\n    statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n  }\n else {\n    statement=(Statement)firstArg;\n  }\n  try {\n    statement.getClass().getDeclaredField(\"stmt\");\n    statement=(Statement)SystemMetaObject.forObject(statement).getValue(\"stmt.statement\");\n  }\n catch (  Exception e) {\n  }\n  String originalSql=statement.toString();\n  int index=originalSql.indexOf(':');\n  String sql=originalSql;\n  if (index > 0) {\n    sql=originalSql.substring(index + 1,originalSql.length());\n  }\n  long start=SystemClock.now();\n  Object result=invocation.proceed();\n  long end=SystemClock.now();\n  long timing=end - start;\n  String formatSql=SqlUtils.sqlFormat(sql,format);\n  Object target=PluginUtils.realTarget(invocation.getTarget());\n  MetaObject metaObject=SystemMetaObject.forObject(target);\n  MappedStatement ms=(MappedStatement)metaObject.getValue(\"delegate.mappedStatement\");\n  String sqlTxt=\" Time：\" + timing + \" ms\"+ \" - ID：\"+ ms.getId()+ \"\\n Execute SQL：\"+ formatSql+ \"\\n\";\n  if (this.isWriteInLog()) {\n    if (maxTime >= 1 && timing > maxTime) {\n      logger.error(sqlTxt);\n    }\n else {\n      logger.debug(sqlTxt);\n    }\n  }\n else {\n    System.err.println(sqlTxt);\n    if (maxTime >= 1 && timing > maxTime) {\n      throw new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 97
      },
      "nodeContext" : "statement=(Statement)SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 75,
    "startColumnNumber" : 82,
    "endLineNumber" : 75,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}