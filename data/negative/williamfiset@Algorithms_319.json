{
  "id" : 319,
  "expression" : "outFlows[i]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/networkflow/MaxFlowTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "outFlows[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 189,
      "startColumnNumber" : 41,
      "endLineNumber" : 189,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(inFlows[i]).isEqualTo(outFlows[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 187,
        "startColumnNumber" : 34,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i == s || i == t)   continue;\n  assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 187,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  if (i == s || i == t)   continue;\n  assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 175,
        "startColumnNumber" : 49,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Edge>[] g=solver.getGraph();\n  int[] inFlows=new int[n];\n  int[] outFlows=new int[n];\n  for (int i=0; i < n; i++) {\n    List<Edge> edges=g[i];\n    for (    Edge e : edges) {\n      inFlows[e.from]+=e.flow;\n      outFlows[e.to]+=e.flow;\n    }\n  }\n  for (int i=0; i < n; i++) {\n    if (i == s || i == t)     continue;\n    assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 191,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (NetworkFlowSolverBase solver : solvers) {\n  List<Edge>[] g=solver.getGraph();\n  int[] inFlows=new int[n];\n  int[] outFlows=new int[n];\n  for (int i=0; i < n; i++) {\n    List<Edge> edges=g[i];\n    for (    Edge e : edges) {\n      inFlows[e.from]+=e.flow;\n      outFlows[e.to]+=e.flow;\n    }\n  }\n  for (int i=0; i < n; i++) {\n    if (i == s || i == t)     continue;\n    assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 148,
        "startColumnNumber" : 40,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12, s=n - 1, t=n - 2;\n  createAllSolvers(n,s,t);\n  addEdge(s,0,5);\n  addEdge(s,1,20);\n  addEdge(s,2,10);\n  addEdge(0,1,3);\n  addEdge(0,5,4);\n  addEdge(1,4,14);\n  addEdge(1,5,14);\n  addEdge(2,1,5);\n  addEdge(2,3,4);\n  addEdge(3,4,3);\n  addEdge(3,9,11);\n  addEdge(4,6,4);\n  addEdge(4,8,22);\n  addEdge(5,6,8);\n  addEdge(5,7,3);\n  addEdge(6,7,12);\n  addEdge(7,8,9);\n  addEdge(7,t,7);\n  addEdge(8,9,11);\n  addEdge(8,t,15);\n  addEdge(9,t,60);\n  for (  NetworkFlowSolverBase solver : solvers) {\n    List<Edge>[] g=solver.getGraph();\n    int[] inFlows=new int[n];\n    int[] outFlows=new int[n];\n    for (int i=0; i < n; i++) {\n      List<Edge> edges=g[i];\n      for (      Edge e : edges) {\n        inFlows[e.from]+=e.flow;\n        outFlows[e.to]+=e.flow;\n      }\n    }\n    for (int i=0; i < n; i++) {\n      if (i == s || i == t)       continue;\n      assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1113,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFlowInEqualsFlowOut(){\n  int n=12, s=n - 1, t=n - 2;\n  createAllSolvers(n,s,t);\n  addEdge(s,0,5);\n  addEdge(s,1,20);\n  addEdge(s,2,10);\n  addEdge(0,1,3);\n  addEdge(0,5,4);\n  addEdge(1,4,14);\n  addEdge(1,5,14);\n  addEdge(2,1,5);\n  addEdge(2,3,4);\n  addEdge(3,4,3);\n  addEdge(3,9,11);\n  addEdge(4,6,4);\n  addEdge(4,8,22);\n  addEdge(5,6,8);\n  addEdge(5,7,3);\n  addEdge(6,7,12);\n  addEdge(7,8,9);\n  addEdge(7,t,7);\n  addEdge(8,9,11);\n  addEdge(8,t,15);\n  addEdge(9,t,60);\n  for (  NetworkFlowSolverBase solver : solvers) {\n    List<Edge>[] g=solver.getGraph();\n    int[] inFlows=new int[n];\n    int[] outFlows=new int[n];\n    for (int i=0; i < n; i++) {\n      List<Edge> edges=g[i];\n      for (      Edge e : edges) {\n        inFlows[e.from]+=e.flow;\n        outFlows[e.to]+=e.flow;\n      }\n    }\n    for (int i=0; i < n; i++) {\n      if (i == s || i == t)       continue;\n      assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(inFlows[i]).isEqualTo(outFlows[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 189,
    "startColumnNumber" : 41,
    "endLineNumber" : 189,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}