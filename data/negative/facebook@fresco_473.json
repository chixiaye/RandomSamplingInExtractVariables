{
  "id" : 473,
  "expression" : "dest",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline-native/src/main/java/com/facebook/imagepipeline/nativecode/Bitmaps.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 45,
      "startColumnNumber" : 51,
      "endLineNumber" : 45,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 45,
        "startColumnNumber" : 51,
        "endLineNumber" : 45,
        "endColumnNumber" : 67
      },
      "nodeContext" : "dest.getConfig()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 45,
        "startColumnNumber" : 32,
        "endLineNumber" : 45,
        "endColumnNumber" : 67
      },
      "nodeContext" : "src.getConfig() == dest.getConfig()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Preconditions.checkArgument(src.getConfig() == dest.getConfig())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 46,
      "startColumnNumber" : 32,
      "endLineNumber" : 46,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 46,
        "startColumnNumber" : 32,
        "endLineNumber" : 46,
        "endColumnNumber" : 48
      },
      "nodeContext" : "dest.isMutable()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Preconditions.checkArgument(dest.isMutable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Preconditions.checkArgument(dest.isMutable());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Preconditions.checkArgument(dest.isMutable());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 47,
      "startColumnNumber" : 32,
      "endLineNumber" : 47,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 47,
        "endColumnNumber" : 47
      },
      "nodeContext" : "dest.getWidth()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 47,
        "startColumnNumber" : 32,
        "endLineNumber" : 47,
        "endColumnNumber" : 65
      },
      "nodeContext" : "dest.getWidth() == src.getWidth()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getWidth() == src.getWidth())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 48,
      "startColumnNumber" : 32,
      "endLineNumber" : 48,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 48,
        "startColumnNumber" : 32,
        "endLineNumber" : 48,
        "endColumnNumber" : 48
      },
      "nodeContext" : "dest.getHeight()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 48,
        "startColumnNumber" : 32,
        "endLineNumber" : 48,
        "endColumnNumber" : 67
      },
      "nodeContext" : "dest.getHeight() == src.getHeight()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getHeight() == src.getHeight())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 49,
      "startColumnNumber" : 21,
      "endLineNumber" : 49,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 88
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 49,
      "startColumnNumber" : 27,
      "endLineNumber" : 49,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 49,
        "startColumnNumber" : 27,
        "endLineNumber" : 49,
        "endColumnNumber" : 45
      },
      "nodeContext" : "dest.getRowBytes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 88
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  }, {
    "nodeContext" : "dest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 49,
      "startColumnNumber" : 71,
      "endLineNumber" : 49,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 49,
        "startColumnNumber" : 71,
        "endLineNumber" : 49,
        "endColumnNumber" : 87
      },
      "nodeContext" : "dest.getHeight()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 88
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This blits the pixel data from src to dest. <p>The destination bitmap must have both a height and a width equal to the source. For maximum speed stride should be equal as well. <p>Both bitmaps must use the same  {@link android.graphics.Bitmap.Config} format.<p>If the src is purgeable, it will be decoded as part of this operation if it was purged. The dest should not be purgeable. If it is, the copy will still take place, but will be lost the next time the dest gets purged, without warning. <p>The dest must be mutable.\n * @param dest Bitmap to copy into\n * @param src Bitmap to copy out of\n */\n@DoNotStrip public static void copyBitmap(Bitmap dest,Bitmap src){\n  Preconditions.checkArgument(src.getConfig() == dest.getConfig());\n  Preconditions.checkArgument(dest.isMutable());\n  Preconditions.checkArgument(dest.getWidth() == src.getWidth());\n  Preconditions.checkArgument(dest.getHeight() == src.getHeight());\n  nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "nativeCopyBitmap(dest,dest.getRowBytes(),src,src.getRowBytes(),dest.getHeight());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.nativecode.Bitmap"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 45,
    "startColumnNumber" : 51,
    "endLineNumber" : 45,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 46,
    "startColumnNumber" : 32,
    "endLineNumber" : 46,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 47,
    "startColumnNumber" : 32,
    "endLineNumber" : 47,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 48,
    "startColumnNumber" : 32,
    "endLineNumber" : 48,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 49,
    "startColumnNumber" : 21,
    "endLineNumber" : 49,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 49,
    "startColumnNumber" : 27,
    "endLineNumber" : 49,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 49,
    "startColumnNumber" : 71,
    "endLineNumber" : 49,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  } ]
}