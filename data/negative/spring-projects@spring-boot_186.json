{
  "id" : 186,
  "expression" : "AdditionalClashingOperationsConfiguration.class",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxAnnotationEndpointDiscovererTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AdditionalClashingOperationsConfiguration.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 231,
      "startColumnNumber" : 7,
      "endLineNumber" : 231,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 4
      },
      "nodeContext" : "load(AdditionalClashingOperationsConfiguration.class,(discoverer) -> {\n  this.thrown.expect(IllegalStateException.class);\n  this.thrown.expectMessage(\"Found multiple JMX operations with the same name\");\n  this.thrown.expectMessage(\"getAll\");\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\").toString());\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\",String.class).toString());\n  discoverer.discoverEndpoints();\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "load(AdditionalClashingOperationsConfiguration.class,(discoverer) -> {\n  this.thrown.expect(IllegalStateException.class);\n  this.thrown.expectMessage(\"Found multiple JMX operations with the same name\");\n  this.thrown.expectMessage(\"getAll\");\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\").toString());\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\",String.class).toString());\n  discoverer.discoverEndpoints();\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 70,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 230,
        "startColumnNumber" : 74,
        "endLineNumber" : 244,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  load(AdditionalClashingOperationsConfiguration.class,(discoverer) -> {\n    this.thrown.expect(IllegalStateException.class);\n    this.thrown.expectMessage(\"Found multiple JMX operations with the same name\");\n    this.thrown.expectMessage(\"getAll\");\n    this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\").toString());\n    this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\",String.class).toString());\n    discoverer.discoverEndpoints();\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 668,
        "startLineNumber" : 229,
        "startColumnNumber" : 1,
        "endLineNumber" : 244,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void discoveryFailsWhenExtensionHasTwoOperationsWithTheSameName(){\n  load(AdditionalClashingOperationsConfiguration.class,(discoverer) -> {\n    this.thrown.expect(IllegalStateException.class);\n    this.thrown.expectMessage(\"Found multiple JMX operations with the same name\");\n    this.thrown.expectMessage(\"getAll\");\n    this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\").toString());\n    this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\",String.class).toString());\n    discoverer.discoverEndpoints();\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 77,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 4
      },
      "nodeContext" : "load(AdditionalClashingOperationsConfiguration.class,(discoverer) -> {\n  this.thrown.expect(IllegalStateException.class);\n  this.thrown.expectMessage(\"Found multiple JMX operations with the same name\");\n  this.thrown.expectMessage(\"getAll\");\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\").toString());\n  this.thrown.expectMessage(ReflectionUtils.findMethod(ClashingOperationsJmxEndpointExtension.class,\"getAll\",String.class).toString());\n  discoverer.discoverEndpoints();\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 69,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxAnnotationEndpointDiscovererTests.AdditionalClashingOperationsConfiguration>"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 231,
    "startColumnNumber" : 7,
    "endLineNumber" : 231,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}