{
  "id" : 183,
  "expression" : "tableName",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/server/src/main/java/io/seata/server/lock/DefaultLockManagerImpl.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tableName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 77,
      "startColumnNumber" : 87,
      "endLineNumber" : 77,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 77,
        "startColumnNumber" : 73,
        "endLineNumber" : 77,
        "endColumnNumber" : 97
      },
      "nodeContext" : "dbLockMap.get(tableName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 77,
        "startColumnNumber" : 58,
        "endLineNumber" : 77,
        "endColumnNumber" : 97
      },
      "nodeContext" : "tableLockMap=dbLockMap.get(tableName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2280,
        "startLineNumber" : 69,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 243,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 52,
        "startColumnNumber" : 88,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3198,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "tableName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 79,
      "startColumnNumber" : 38,
      "endLineNumber" : 79,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 75
      },
      "nodeContext" : "dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 78,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n  tableLockMap=dbLockMap.get(tableName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableLockMap == null) {\n  dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n  tableLockMap=dbLockMap.get(tableName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2280,
        "startLineNumber" : 69,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 243,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 52,
        "startColumnNumber" : 88,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3198,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "tableName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 80,
      "startColumnNumber" : 45,
      "endLineNumber" : 80,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 80,
        "endColumnNumber" : 55
      },
      "nodeContext" : "dbLockMap.get(tableName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 80,
        "endColumnNumber" : 55
      },
      "nodeContext" : "tableLockMap=dbLockMap.get(tableName)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 80,
        "endColumnNumber" : 56
      },
      "nodeContext" : "tableLockMap=dbLockMap.get(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 78,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n  tableLockMap=dbLockMap.get(tableName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableLockMap == null) {\n  dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n  tableLockMap=dbLockMap.get(tableName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2280,
        "startLineNumber" : 69,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 243,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 52,
        "startColumnNumber" : 88,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3198,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 80,
        "endColumnNumber" : 56
      },
      "nodeContext" : "tableLockMap=dbLockMap.get(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "tableName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 107,
      "startColumnNumber" : 49,
      "endLineNumber" : 107,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 107,
        "startColumnNumber" : 28,
        "endLineNumber" : 107,
        "endColumnNumber" : 113
      },
      "nodeContext" : "\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 106,
        "startColumnNumber" : 24,
        "endLineNumber" : 107,
        "endColumnNumber" : 114
      },
      "nodeContext" : "LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 106,
        "startColumnNumber" : 24,
        "endLineNumber" : 107,
        "endColumnNumber" : 115
      },
      "nodeContext" : "LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 105,
        "startColumnNumber" : 27,
        "endLineNumber" : 110,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 110,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lockingTransactionId == transactionId) {\n  continue;\n}\n else {\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 110,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (lockingTransactionId == null) {\n  bucketLockMap.put(pk,transactionId);\n  Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n  if (keysInHolder == null) {\n    bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n    keysInHolder=bucketHolder.get(bucketLockMap);\n  }\n  keysInHolder.add(pk);\n}\n else if (lockingTransactionId == transactionId) {\n  continue;\n}\n else {\n  LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n  branchSession.unlock();\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1102,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Long lockingTransactionId=bucketLockMap.get(pk);\n  if (lockingTransactionId == null) {\n    bucketLockMap.put(pk,transactionId);\n    Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n    if (keysInHolder == null) {\n      bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n      keysInHolder=bucketHolder.get(bucketLockMap);\n    }\n    keysInHolder.add(pk);\n  }\n else   if (lockingTransactionId == transactionId) {\n    continue;\n  }\n else {\n    LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n    branchSession.unlock();\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "synchronized (bucketLockMap) {\n  Long lockingTransactionId=bucketLockMap.get(pk);\n  if (lockingTransactionId == null) {\n    bucketLockMap.put(pk,transactionId);\n    Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n    if (keysInHolder == null) {\n      bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n      keysInHolder=bucketHolder.get(bucketLockMap);\n    }\n    keysInHolder.add(pk);\n  }\n else   if (lockingTransactionId == transactionId) {\n    continue;\n  }\n else {\n    LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n    branchSession.unlock();\n    return false;\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 83,
        "startColumnNumber" : 34,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n  Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n  if (bucketLockMap == null) {\n    tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n    bucketLockMap=tableLockMap.get(bucketId);\n  }\nsynchronized (bucketLockMap) {\n    Long lockingTransactionId=bucketLockMap.get(pk);\n    if (lockingTransactionId == null) {\n      bucketLockMap.put(pk,transactionId);\n      Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n      if (keysInHolder == null) {\n        bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n        keysInHolder=bucketHolder.get(bucketLockMap);\n      }\n      keysInHolder.add(pk);\n    }\n else     if (lockingTransactionId == transactionId) {\n      continue;\n    }\n else {\n      LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n      branchSession.unlock();\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1528,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String pk : pks) {\n  int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n  Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n  if (bucketLockMap == null) {\n    tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n    bucketLockMap=tableLockMap.get(bucketId);\n  }\nsynchronized (bucketLockMap) {\n    Long lockingTransactionId=bucketLockMap.get(pk);\n    if (lockingTransactionId == null) {\n      bucketLockMap.put(pk,transactionId);\n      Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n      if (keysInHolder == null) {\n        bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n        keysInHolder=bucketHolder.get(bucketLockMap);\n      }\n      keysInHolder.add(pk);\n    }\n else     if (lockingTransactionId == transactionId) {\n      continue;\n    }\n else {\n      LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n      branchSession.unlock();\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2280,
        "startLineNumber" : 69,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String tableGroupedLockKey : tableGroupedLockKeys) {\n  int idx=tableGroupedLockKey.indexOf(\":\");\n  if (idx < 0) {\n    branchSession.unlock();\n    throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n  }\n  String tableName=tableGroupedLockKey.substring(0,idx);\n  String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n  ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n  if (tableLockMap == null) {\n    dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n    tableLockMap=dbLockMap.get(tableName);\n  }\n  String[] pks=mergedPKs.split(\",\");\n  for (  String pk : pks) {\n    int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n    Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n    if (bucketLockMap == null) {\n      tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n      bucketLockMap=tableLockMap.get(bucketId);\n    }\nsynchronized (bucketLockMap) {\n      Long lockingTransactionId=bucketLockMap.get(pk);\n      if (lockingTransactionId == null) {\n        bucketLockMap.put(pk,transactionId);\n        Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n        if (keysInHolder == null) {\n          bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n          keysInHolder=bucketHolder.get(bucketLockMap);\n        }\n        keysInHolder.add(pk);\n      }\n else       if (lockingTransactionId == transactionId) {\n        continue;\n      }\n else {\n        LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n        branchSession.unlock();\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 243,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 52,
        "startColumnNumber" : 88,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3198,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean acquireLock(BranchSession branchSession) throws TransactionException {\n  String resourceId=branchSession.getResourceId();\n  long transactionId=branchSession.getTransactionId();\n  ConcurrentHashMap<String,ConcurrentHashMap<Integer,Map<String,Long>>> dbLockMap=LOCK_MAP.get(resourceId);\n  if (dbLockMap == null) {\n    LOCK_MAP.putIfAbsent(resourceId,new ConcurrentHashMap<>());\n    dbLockMap=LOCK_MAP.get(resourceId);\n  }\n  ConcurrentHashMap<Map<String,Long>,Set<String>> bucketHolder=branchSession.getLockHolder();\n  String lockKey=branchSession.getLockKey();\n  if (StringUtils.isNullOrEmpty(lockKey)) {\n    return true;\n  }\n  String[] tableGroupedLockKeys=lockKey.split(\";\");\n  for (  String tableGroupedLockKey : tableGroupedLockKeys) {\n    int idx=tableGroupedLockKey.indexOf(\":\");\n    if (idx < 0) {\n      branchSession.unlock();\n      throw new ShouldNeverHappenException(\"Wrong format of LOCK KEYS: \" + branchSession.getLockKey());\n    }\n    String tableName=tableGroupedLockKey.substring(0,idx);\n    String mergedPKs=tableGroupedLockKey.substring(idx + 1);\n    ConcurrentHashMap<Integer,Map<String,Long>> tableLockMap=dbLockMap.get(tableName);\n    if (tableLockMap == null) {\n      dbLockMap.putIfAbsent(tableName,new ConcurrentHashMap<>());\n      tableLockMap=dbLockMap.get(tableName);\n    }\n    String[] pks=mergedPKs.split(\",\");\n    for (    String pk : pks) {\n      int bucketId=pk.hashCode() % BUCKET_PER_TABLE;\n      Map<String,Long> bucketLockMap=tableLockMap.get(bucketId);\n      if (bucketLockMap == null) {\n        tableLockMap.putIfAbsent(bucketId,new HashMap<>());\n        bucketLockMap=tableLockMap.get(bucketId);\n      }\nsynchronized (bucketLockMap) {\n        Long lockingTransactionId=bucketLockMap.get(pk);\n        if (lockingTransactionId == null) {\n          bucketLockMap.put(pk,transactionId);\n          Set<String> keysInHolder=bucketHolder.get(bucketLockMap);\n          if (keysInHolder == null) {\n            bucketHolder.putIfAbsent(bucketLockMap,new ConcurrentSet<String>());\n            keysInHolder=bucketHolder.get(bucketLockMap);\n          }\n          keysInHolder.add(pk);\n        }\n else         if (lockingTransactionId == transactionId) {\n          continue;\n        }\n else {\n          LOGGER.info(\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId);\n          branchSession.unlock();\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 107,
        "startColumnNumber" : 28,
        "endLineNumber" : 107,
        "endColumnNumber" : 113
      },
      "nodeContext" : "\"Global lock on [\" + tableName + \":\"+ pk+ \"] is holding by \"+ lockingTransactionId",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 77,
    "startColumnNumber" : 87,
    "endLineNumber" : 77,
    "endColumnNumber" : 96
  }, {
    "charLength" : 9,
    "startLineNumber" : 79,
    "startColumnNumber" : 38,
    "endLineNumber" : 79,
    "endColumnNumber" : 47
  }, {
    "charLength" : 9,
    "startLineNumber" : 80,
    "startColumnNumber" : 45,
    "endLineNumber" : 80,
    "endColumnNumber" : 54
  }, {
    "charLength" : 9,
    "startLineNumber" : 107,
    "startColumnNumber" : 49,
    "endLineNumber" : 107,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 10
  } ]
}