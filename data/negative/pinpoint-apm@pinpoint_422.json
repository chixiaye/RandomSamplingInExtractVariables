{
  "id" : 422,
  "expression" : "asList(throwable.getStackTrace())",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/base/Throwables.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "asList(throwable.getStackTrace())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 252,
      "startColumnNumber" : 27,
      "endLineNumber" : 252,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 252,
        "startColumnNumber" : 10,
        "endLineNumber" : 252,
        "endColumnNumber" : 61
      },
      "nodeContext" : "unmodifiableList(asList(throwable.getStackTrace()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 250,
        "startColumnNumber" : 11,
        "endLineNumber" : 252,
        "endColumnNumber" : 61
      },
      "nodeContext" : "lazyStackTraceIsLazy() ? jlaStackTrace(throwable) : unmodifiableList(asList(throwable.getStackTrace()))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 250,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 62
      },
      "nodeContext" : "return lazyStackTraceIsLazy() ? jlaStackTrace(throwable) : unmodifiableList(asList(throwable.getStackTrace()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 249,
        "startColumnNumber" : 76,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return lazyStackTraceIsLazy() ? jlaStackTrace(throwable) : unmodifiableList(asList(throwable.getStackTrace()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1914,
        "startLineNumber" : 220,
        "startColumnNumber" : 2,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the stack trace of  {@code throwable}, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, \"slower\" and \"faster\" are defined in comparison to the normal way to access the stack trace,  {@link Throwable#getStackTrace() throwable.getStackTrace()}. Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to  {@code getStackTrace}. Callers that require the special implementation can check its availability with  {@link #lazyStackTraceIsLazy()}. <p>The expected (but not guaranteed) performance of the special implementation differs from {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quicklyby delaying the per-stack-frame work until each element is accessed. Roughly speaking: <ul> <li> {@code getStackTrace} takes {@code stackSize} time to return but then negligible time toretrieve each element of the returned list. <li> {@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time toretrieve each element of the returned list (probably slightly more than  {@code 1/stackSize}). </ul> <p>Note: The special implementation does not respect calls to  {@link Throwable#setStackTrace throwable.setStackTrace}. Instead, it always reflects the original stack trace from the exception's creation.\n * @since 19.0\n */\n@Beta @CheckReturnValue public static List<StackTraceElement> lazyStackTrace(Throwable throwable){\n  return lazyStackTraceIsLazy() ? jlaStackTrace(throwable) : unmodifiableList(asList(throwable.getStackTrace()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 33,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 252,
        "startColumnNumber" : 10,
        "endLineNumber" : 252,
        "endColumnNumber" : 61
      },
      "nodeContext" : "unmodifiableList(asList(throwable.getStackTrace()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.List<java.lang.StackTraceElement>"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 252,
    "startColumnNumber" : 27,
    "endLineNumber" : 252,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}