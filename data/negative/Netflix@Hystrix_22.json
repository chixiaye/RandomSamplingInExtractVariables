{
  "id" : 22,
  "expression" : "Object.class",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/MethodProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Object.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 215,
      "startColumnNumber" : 53,
      "endLineNumber" : 215,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 215,
        "endColumnNumber" : 66
      },
      "nodeContext" : "superClass.equals(Object.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 215,
        "startColumnNumber" : 34,
        "endLineNumber" : 215,
        "endColumnNumber" : 66
      },
      "nodeContext" : "!superClass.equals(Object.class)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 66
      },
      "nodeContext" : "superClass != null && !superClass.equals(Object.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (superClass != null && !superClass.equals(Object.class)) {\n  return getMethod(superClass,name,parameterTypes);\n}\n else {\n  return Optional.absent();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 207,
        "startColumnNumber" : 101,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Method[] methods=type.getDeclaredMethods();\n  for (  Method method : methods) {\n    if (method.getName().equals(name) && Arrays.equals(method.getParameterTypes(),parameterTypes)) {\n      return Optional.of(method);\n    }\n  }\n  Class<?> superClass=type.getSuperclass();\n  if (superClass != null && !superClass.equals(Object.class)) {\n    return getMethod(superClass,name,parameterTypes);\n  }\n else {\n    return Optional.absent();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Gets method by name and parameters types using reflection, if the given type doesn't contain required method then continue applying this method for all super classes up to Object class.\n * @param type           the type to search method\n * @param name           the method name\n * @param parameterTypes the parameters types\n * @return Some if method exists otherwise None\n */\npublic static Optional<Method> getMethod(Class<?> type,String name,Class<?>... parameterTypes){\n  Method[] methods=type.getDeclaredMethods();\n  for (  Method method : methods) {\n    if (method.getName().equals(name) && Arrays.equals(method.getParameterTypes(),parameterTypes)) {\n      return Optional.of(method);\n    }\n  }\n  Class<?> superClass=type.getSuperclass();\n  if (superClass != null && !superClass.equals(Object.class)) {\n    return getMethod(superClass,name,parameterTypes);\n  }\n else {\n    return Optional.absent();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 66
      },
      "nodeContext" : "superClass != null && !superClass.equals(Object.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 215,
    "startColumnNumber" : 53,
    "endLineNumber" : 215,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}