{
  "id" : 289,
  "expression" : "backlink",
  "projectName" : "realm@realm-java",
  "commitID" : "58e5ae6faf0df2f8cb62c279688dd0fdf666d6ef",
  "filePath" : "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "backlink",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 798,
      "startColumnNumber" : 82,
      "endLineNumber" : 798,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 798,
        "startColumnNumber" : 82,
        "endLineNumber" : 798,
        "endColumnNumber" : 107
      },
      "nodeContext" : "backlink.getSourceClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 798,
        "startColumnNumber" : 40,
        "endLineNumber" : 798,
        "endColumnNumber" : 108
      },
      "nodeContext" : "classCollection.getClassFromQualifiedName(backlink.getSourceClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 798,
        "startColumnNumber" : 26,
        "endLineNumber" : 798,
        "endColumnNumber" : 108
      },
      "nodeContext" : "sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 798,
        "startColumnNumber" : 12,
        "endLineNumber" : 798,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 797,
        "startColumnNumber" : 62,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 797,
        "startColumnNumber" : 8,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Backlink backlink : metadata.getBacklinkFields()) {\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 798,
        "startColumnNumber" : 12,
        "endLineNumber" : 798,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Backlink"
  }, {
    "nodeContext" : "backlink",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 799,
      "startColumnNumber" : 33,
      "endLineNumber" : 799,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 799,
        "startColumnNumber" : 33,
        "endLineNumber" : 799,
        "endColumnNumber" : 58
      },
      "nodeContext" : "backlink.getTargetField()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 799,
        "startColumnNumber" : 19,
        "endLineNumber" : 799,
        "endColumnNumber" : 58
      },
      "nodeContext" : "targetField=backlink.getTargetField()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 799,
        "startColumnNumber" : 12,
        "endLineNumber" : 799,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String targetField=backlink.getTargetField();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 797,
        "startColumnNumber" : 62,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 797,
        "startColumnNumber" : 8,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Backlink backlink : metadata.getBacklinkFields()) {\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 799,
        "startColumnNumber" : 12,
        "endLineNumber" : 799,
        "endColumnNumber" : 59
      },
      "nodeContext" : "String targetField=backlink.getTargetField();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Backlink"
  }, {
    "nodeContext" : "backlink",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 800,
      "startColumnNumber" : 74,
      "endLineNumber" : 800,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 800,
        "startColumnNumber" : 74,
        "endLineNumber" : 800,
        "endColumnNumber" : 99
      },
      "nodeContext" : "backlink.getSourceField()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 800,
        "startColumnNumber" : 41,
        "endLineNumber" : 800,
        "endColumnNumber" : 100
      },
      "nodeContext" : "sourceClass.getInternalFieldName(backlink.getSourceField())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 800,
        "startColumnNumber" : 19,
        "endLineNumber" : 800,
        "endColumnNumber" : 100
      },
      "nodeContext" : "internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 800,
        "startColumnNumber" : 12,
        "endLineNumber" : 800,
        "endColumnNumber" : 101
      },
      "nodeContext" : "String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 797,
        "startColumnNumber" : 62,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 797,
        "startColumnNumber" : 8,
        "endLineNumber" : 803,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Backlink backlink : metadata.getBacklinkFields()) {\n  ClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\n  String targetField=backlink.getTargetField();\n  String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n  writer.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 721,
        "startColumnNumber" : 90,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4597,
        "startLineNumber" : 721,
        "startColumnNumber" : 4,
        "endLineNumber" : 807,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOException {\n  writer.beginMethod(\"OsObjectSchemaInfo\",\"createExpectedObjectSchemaInfo\",EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));\n  int persistedFields=metadata.getFields().size();\n  int computedFields=metadata.getBacklinkFields().size();\n  writer.emitStatement(\"OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder(\\\"%s\\\", %s, %s)\",internalClassName,persistedFields,computedFields);\n  for (  RealmFieldElement field : metadata.getFields()) {\n    String fieldName=field.getInternalFieldName();\n    Constants.RealmFieldType fieldType=getRealmTypeChecked(field);\nswitch (fieldType) {\ncase NOTYPE:{\n        break;\n      }\ncase OBJECT:{\n      String fieldTypeQualifiedName=Utils.getFieldTypeQualifiedName(field);\n      String internalClassName=classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();\n      writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.OBJECT, \\\"%s\\\")\",fieldName,internalClassName);\n      break;\n    }\ncase LIST:{\n    String genericTypeQualifiedName=Utils.getGenericTypeQualifiedName(field);\n    String internalClassName=classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName();\n    writer.emitStatement(\"builder.addPersistedLinkProperty(\\\"%s\\\", RealmFieldType.LIST, \\\"%s\\\")\",fieldName,internalClassName);\n    break;\n  }\ncase INTEGER_LIST:case BOOLEAN_LIST:case STRING_LIST:case BINARY_LIST:case DATE_LIST:case FLOAT_LIST:case DOUBLE_LIST:writer.emitStatement(\"builder.addPersistedValueListProperty(\\\"%s\\\", %s, %s)\",fieldName,fieldType.getRealmType(),metadata.isElementNullable(field) ? \"!Property.REQUIRED\" : \"Property.REQUIRED\");\nbreak;\ncase BACKLINK:throw new IllegalArgumentException(\"LinkingObject field should not be added to metadata\");\ncase INTEGER:case FLOAT:case DOUBLE:case BOOLEAN:case STRING:case DATE:case BINARY:case REALM_INTEGER:String nullableFlag=(metadata.isNullable(field) ? \"!\" : \"\") + \"Property.REQUIRED\";\nString indexedFlag=(metadata.isIndexed(field) ? \"\" : \"!\") + \"Property.INDEXED\";\nString primaryKeyFlag=(metadata.isPrimaryKey(field) ? \"\" : \"!\") + \"Property.PRIMARY_KEY\";\nwriter.emitStatement(\"builder.addPersistedProperty(\\\"%s\\\", %s, %s, %s, %s)\",fieldName,fieldType.getRealmType(),primaryKeyFlag,indexedFlag,nullableFlag);\nbreak;\ndefault:throw new IllegalArgumentException(\"'fieldType' \" + fieldName + \" is not handled\");\n}\n}\nfor (Backlink backlink : metadata.getBacklinkFields()) {\nClassMetaData sourceClass=classCollection.getClassFromQualifiedName(backlink.getSourceClass());\nString targetField=backlink.getTargetField();\nString internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\nwriter.emitStatement(\"builder.addComputedLinkProperty(\\\"%s\\\", \\\"%s\\\", \\\"%s\\\")\",targetField,sourceClass.getInternalClassName(),internalSourceField);\n}\nwriter.emitStatement(\"return builder.build()\");\nwriter.endMethod().emitEmptyLine();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 800,
        "startColumnNumber" : 12,
        "endLineNumber" : 800,
        "endColumnNumber" : 101
      },
      "nodeContext" : "String internalSourceField=sourceClass.getInternalFieldName(backlink.getSourceField());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.realm.processor.Backlink"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 798,
    "startColumnNumber" : 82,
    "endLineNumber" : 798,
    "endColumnNumber" : 90
  }, {
    "charLength" : 8,
    "startLineNumber" : 799,
    "startColumnNumber" : 33,
    "endLineNumber" : 799,
    "endColumnNumber" : 41
  }, {
    "charLength" : 8,
    "startLineNumber" : 800,
    "startColumnNumber" : 74,
    "endLineNumber" : 800,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}