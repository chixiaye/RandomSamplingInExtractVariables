{
  "id" : 441,
  "expression" : "ev.eval(provider + \".is_valid_value('default')\")",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/rules/config/ConfigFeatureFlagTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ev.eval(provider + \".is_valid_value('default')\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 241,
      "startColumnNumber" : 39,
      "endLineNumber" : 241,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 241,
        "startColumnNumber" : 29,
        "endLineNumber" : 241,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(Boolean)ev.eval(provider + \".is_valid_value('default')\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 87
      },
      "nodeContext" : "isDefaultValid=(Boolean)ev.eval(provider + \".is_valid_value('default')\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Boolean isDefaultValid=(Boolean)ev.eval(provider + \".is_valid_value('default')\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 215,
        "startColumnNumber" : 97,
        "endLineNumber" : 256,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.file(\"test/wrapper.bzl\",\"def _flag_reading_wrapper_impl(ctx):\",\"  pass\",\"flag_reading_wrapper = rule(\",\"  implementation = _flag_reading_wrapper_impl,\",\"  attrs = {'flag': attr.label()},\",\")\");\n  scratch.file(\"test/BUILD\",\"load(':wrapper.bzl', 'flag_reading_wrapper')\",\"flag_reading_wrapper(\",\"    name = 'wrapper',\",\"    flag = ':flag',\",\"    transitive_configs = [':flag'],\",\")\",\"config_feature_flag(\",\"    name = 'flag',\",\"    allowed_values = ['default', 'configured', 'other'],\",\"    default_value = 'default',\",\")\");\n  StarlarkRuleContext ctx=createRuleContext(\"//test:wrapper\");\n  ev.update(\"ruleContext\",ctx);\n  ev.update(\"config_common\",new ConfigStarlarkCommon());\n  String provider=\"ruleContext.attr.flag[config_common.FeatureFlagInfo]\";\n  Boolean isDefaultValid=(Boolean)ev.eval(provider + \".is_valid_value('default')\");\n  Boolean isConfiguredValid=(Boolean)ev.eval(provider + \".is_valid_value('configured')\");\n  Boolean isOtherValid=(Boolean)ev.eval(provider + \".is_valid_value('other')\");\n  Boolean isAbsentValid=(Boolean)ev.eval(provider + \".is_valid_value('absent')\");\n  Boolean isIncorrectCapitalizationValid=(Boolean)ev.eval(provider + \".is_valid_value('conFigured')\");\n  Boolean isIncorrectSpacingValid=(Boolean)ev.eval(provider + \".is_valid_value('  other')\");\n  assertThat(isDefaultValid).isTrue();\n  assertThat(isConfiguredValid).isTrue();\n  assertThat(isOtherValid).isTrue();\n  assertThat(isAbsentValid).isFalse();\n  assertThat(isIncorrectCapitalizationValid).isFalse();\n  assertThat(isIncorrectSpacingValid).isFalse();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1902,
        "startLineNumber" : 214,
        "startColumnNumber" : 2,
        "endLineNumber" : 256,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void configFeatureFlagProvider_valueValidationIsPossibleFromStarlark() throws Exception {\n  scratch.file(\"test/wrapper.bzl\",\"def _flag_reading_wrapper_impl(ctx):\",\"  pass\",\"flag_reading_wrapper = rule(\",\"  implementation = _flag_reading_wrapper_impl,\",\"  attrs = {'flag': attr.label()},\",\")\");\n  scratch.file(\"test/BUILD\",\"load(':wrapper.bzl', 'flag_reading_wrapper')\",\"flag_reading_wrapper(\",\"    name = 'wrapper',\",\"    flag = ':flag',\",\"    transitive_configs = [':flag'],\",\")\",\"config_feature_flag(\",\"    name = 'flag',\",\"    allowed_values = ['default', 'configured', 'other'],\",\"    default_value = 'default',\",\")\");\n  StarlarkRuleContext ctx=createRuleContext(\"//test:wrapper\");\n  ev.update(\"ruleContext\",ctx);\n  ev.update(\"config_common\",new ConfigStarlarkCommon());\n  String provider=\"ruleContext.attr.flag[config_common.FeatureFlagInfo]\";\n  Boolean isDefaultValid=(Boolean)ev.eval(provider + \".is_valid_value('default')\");\n  Boolean isConfiguredValid=(Boolean)ev.eval(provider + \".is_valid_value('configured')\");\n  Boolean isOtherValid=(Boolean)ev.eval(provider + \".is_valid_value('other')\");\n  Boolean isAbsentValid=(Boolean)ev.eval(provider + \".is_valid_value('absent')\");\n  Boolean isIncorrectCapitalizationValid=(Boolean)ev.eval(provider + \".is_valid_value('conFigured')\");\n  Boolean isIncorrectSpacingValid=(Boolean)ev.eval(provider + \".is_valid_value('  other')\");\n  assertThat(isDefaultValid).isTrue();\n  assertThat(isConfiguredValid).isTrue();\n  assertThat(isOtherValid).isTrue();\n  assertThat(isAbsentValid).isFalse();\n  assertThat(isIncorrectCapitalizationValid).isFalse();\n  assertThat(isIncorrectSpacingValid).isFalse();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Boolean isDefaultValid=(Boolean)ev.eval(provider + \".is_valid_value('default')\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 241,
    "startColumnNumber" : 39,
    "endLineNumber" : 241,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}