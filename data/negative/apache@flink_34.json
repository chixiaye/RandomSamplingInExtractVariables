{
  "id" : 34,
  "expression" : "rules",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/functions/casting/CastRuleProvider.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 221,
      "startColumnNumber" : 20,
      "endLineNumber" : 221,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 221,
        "startColumnNumber" : 20,
        "endLineNumber" : 221,
        "endColumnNumber" : 75
      },
      "nodeContext" : "rules.computeIfAbsent(targetType,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 220,
        "startColumnNumber" : 46,
        "endLineNumber" : 221,
        "endColumnNumber" : 75
      },
      "nodeContext" : "map=rules.computeIfAbsent(targetType,k -> new HashMap<>())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 76
      },
      "nodeContext" : "final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 219,
        "startColumnNumber" : 66,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 219,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (LogicalType targetType : predicate.getTargetTypes()) {\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 216,
        "startColumnNumber" : 58,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 216,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private CastRuleProvider addRule(CastRule<?,?> rule){\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 221,
        "startColumnNumber" : 20,
        "endLineNumber" : 221,
        "endColumnNumber" : 75
      },
      "nodeContext" : "rules.computeIfAbsent(targetType,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Object,java.util.Map<java.lang.Object,org.apache.flink.table.planner.functions.casting.CastRule<?,?>>>"
  }, {
    "nodeContext" : "rules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 231,
      "startColumnNumber" : 20,
      "endLineNumber" : 231,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 231,
        "endColumnNumber" : 79
      },
      "nodeContext" : "rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 230,
        "startColumnNumber" : 46,
        "endLineNumber" : 231,
        "endColumnNumber" : 79
      },
      "nodeContext" : "map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 231,
        "endColumnNumber" : 80
      },
      "nodeContext" : "final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 437,
        "startLineNumber" : 229,
        "startColumnNumber" : 78,
        "endLineNumber" : 238,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 507,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 238,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 216,
        "startColumnNumber" : 58,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 216,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private CastRuleProvider addRule(CastRule<?,?> rule){\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 231,
        "endColumnNumber" : 79
      },
      "nodeContext" : "rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Object,java.util.Map<java.lang.Object,org.apache.flink.table.planner.functions.casting.CastRule<?,?>>>"
  }, {
    "nodeContext" : "rules",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 241,
      "startColumnNumber" : 20,
      "endLineNumber" : 241,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 241,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 81
      },
      "nodeContext" : "rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 240,
        "startColumnNumber" : 46,
        "endLineNumber" : 241,
        "endColumnNumber" : 81
      },
      "nodeContext" : "map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 82
      },
      "nodeContext" : "final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 239,
        "startColumnNumber" : 85,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 516,
        "startLineNumber" : 239,
        "startColumnNumber" : 8,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n  final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n  for (  LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n    map.put(inputTypeRoot,rule);\n  }\n  for (  LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n    map.put(inputTypeFamily,rule);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 216,
        "startColumnNumber" : 58,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 216,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private CastRuleProvider addRule(CastRule<?,?> rule){\n  CastRulePredicate predicate=rule.getPredicateDefinition();\n  for (  LogicalType targetType : predicate.getTargetTypes()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetType,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeRoot targetTypeRoot : predicate.getTargetTypeRoots()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeRoot,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  for (  LogicalTypeFamily targetTypeFamily : predicate.getTargetTypeFamilies()) {\n    final Map<Object,CastRule<?,?>> map=rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>());\n    for (    LogicalTypeRoot inputTypeRoot : predicate.getInputTypeRoots()) {\n      map.put(inputTypeRoot,rule);\n    }\n    for (    LogicalTypeFamily inputTypeFamily : predicate.getInputTypeFamilies()) {\n      map.put(inputTypeFamily,rule);\n    }\n  }\n  if (predicate.getCustomPredicate().isPresent()) {\n    rulesWithCustomPredicate.add(rule);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 241,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 81
      },
      "nodeContext" : "rules.computeIfAbsent(targetTypeFamily,k -> new HashMap<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Object,java.util.Map<java.lang.Object,org.apache.flink.table.planner.functions.casting.CastRule<?,?>>>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 221,
    "startColumnNumber" : 20,
    "endLineNumber" : 221,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 231,
    "startColumnNumber" : 20,
    "endLineNumber" : 231,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 241,
    "startColumnNumber" : 20,
    "endLineNumber" : 241,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}