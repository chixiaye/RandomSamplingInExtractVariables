{
  "id" : 103,
  "expression" : "Collectors",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collectors",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 58,
      "startColumnNumber" : 36,
      "endLineNumber" : 58,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 58,
        "startColumnNumber" : 36,
        "endLineNumber" : 58,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Collectors.toList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 56,
        "startColumnNumber" : 11,
        "endLineNumber" : 58,
        "endColumnNumber" : 56
      },
      "nodeContext" : "cars.stream().filter(car -> car.getYear() > 2000).sorted(Comparator.comparing(Car::getYear)).map(Car::getModel).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 57
      },
      "nodeContext" : "return cars.stream().filter(car -> car.getYear() > 2000).sorted(Comparator.comparing(Car::getYear)).map(Car::getModel).collect(Collectors.toList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 55,
        "startColumnNumber" : 64,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return cars.stream().filter(car -> car.getYear() > 2000).sorted(Comparator.comparing(Car::getYear)).map(Car::getModel).collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Method to get models using for collection pipeline.\n * @param cars {@link List} of {@link Car} to be used for filtering\n * @return {@link List} of {@link String} representing models built after year 2000\n */\npublic static List<String> getModelsAfter2000(List<Car> cars){\n  return cars.stream().filter(car -> car.getYear() > 2000).sorted(Comparator.comparing(Car::getYear)).map(Car::getModel).collect(Collectors.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 50,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 58,
        "startColumnNumber" : 36,
        "endLineNumber" : 58,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Collectors.toList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.stream.Collectors"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 58,
    "startColumnNumber" : 36,
    "endLineNumber" : 58,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}