{
  "id" : 915,
  "expression" : "method.getAnnotation(JSONField.class)",
  "projectName" : "alibaba@fastjson",
  "commitID" : "5c815ee3185f26ce42354193910afebc502cb2af",
  "filePath" : "src/main/java/com/alibaba/fastjson/util/DeserializeBeanInfo.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.getAnnotation(JSONField.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 201,
      "startColumnNumber" : 35,
      "endLineNumber" : 201,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 201,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 72
      },
      "nodeContext" : "annotation=method.getAnnotation(JSONField.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 73
      },
      "nodeContext" : "JSONField annotation=method.getAnnotation(JSONField.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3761,
        "startLineNumber" : 175,
        "startColumnNumber" : 38,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3791,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : methods) {\n  int ordinal=0, serialzeFeatures=0;\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (!(returnType == Void.TYPE || returnType == clazz)) {\n    continue;\n  }\n  if (method.getParameterTypes().length != 1) {\n    continue;\n  }\n  if (method.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  if (annotation == null) {\n    annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n  }\n  if (annotation != null) {\n    if (!annotation.deserialize()) {\n      continue;\n    }\n    ordinal=annotation.ordinal();\n    serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n    if (annotation.name().length() != 0) {\n      String propertyName=annotation.name();\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n      TypeUtils.setAccessible(method,modifiers);\n      continue;\n    }\n  }\n  if (!methodName.startsWith(\"set\")) {\n    continue;\n  }\n  char c3=methodName.charAt(3);\n  String propertyName;\n  if (Character.isUpperCase(c3)) {\n    if (TypeUtils.compatibleWithJavaBean) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n  }\n else   if (c3 == '_') {\n    propertyName=methodName.substring(4);\n  }\n else   if (c3 == 'f') {\n    propertyName=methodName.substring(3);\n  }\n else   if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n    propertyName=TypeUtils.decapitalize(methodName.substring(3));\n  }\n else {\n    continue;\n  }\n  Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n  if (field == null && method.getParameterTypes()[0] == boolean.class) {\n    String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n    field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n  }\n  if (field != null) {\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n        continue;\n      }\n    }\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 201,
        "startColumnNumber" : 12,
        "endLineNumber" : 201,
        "endColumnNumber" : 73
      },
      "nodeContext" : "JSONField annotation=method.getAnnotation(JSONField.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "com.alibaba.fastjson.annotation.JSONField"
  }, {
    "nodeContext" : "method.getAnnotation(JSONField.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 327,
      "startColumnNumber" : 43,
      "endLineNumber" : 327,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 327,
        "startColumnNumber" : 30,
        "endLineNumber" : 327,
        "endColumnNumber" : 80
      },
      "nodeContext" : "annotation=method.getAnnotation(JSONField.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 327,
        "startColumnNumber" : 20,
        "endLineNumber" : 327,
        "endColumnNumber" : 81
      },
      "nodeContext" : "JSONField annotation=method.getAnnotation(JSONField.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 324,
        "startColumnNumber" : 18,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n  String propertyName;\n  JSONField annotation=method.getAnnotation(JSONField.class);\n  String annotationName;\n  if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n    propertyName=annotationName;\n  }\n else {\n    propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n  }\n  beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n  TypeUtils.setAccessible(method,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 316,
        "startColumnNumber" : 93,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1128,
        "startLineNumber" : 316,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n  if (method.getParameterTypes().length != 0) {\n    continue;\n  }\n  Class<?> methodReturnType=method.getReturnType();\n  if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n    String propertyName;\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    String annotationName;\n    if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n      propertyName=annotationName;\n    }\n else {\n      propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 306,
        "startColumnNumber" : 49,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 306,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  String methodName=method.getName();\n  if (methodName.length() < 4) {\n    continue;\n  }\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n    if (method.getParameterTypes().length != 0) {\n      continue;\n    }\n    Class<?> methodReturnType=method.getReturnType();\n    if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n      String propertyName;\n      JSONField annotation=method.getAnnotation(JSONField.class);\n      String annotationName;\n      if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n        propertyName=annotationName;\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n      beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n      TypeUtils.setAccessible(method,modifiers);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11480,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1225,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11556,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DeserializeBeanInfo computeSetters(Class<?> clazz,Type type){\n  DeserializeBeanInfo beanInfo=null;\n  Constructor<?> defaultConstructor=getDefaultConstructor(clazz);\n  Method[] methods=clazz.getMethods();\n  Field[] declaredFields=clazz.getDeclaredFields();\n  final int modifiers=clazz.getModifiers();\n  if (defaultConstructor != null) {\n    TypeUtils.setAccessible(defaultConstructor,modifiers);\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n else   if (defaultConstructor == null && !(clazz.isInterface() || (modifiers & Modifier.ABSTRACT) != 0)) {\n    Constructor<?> creatorConstructor=getCreatorConstructor(clazz);\n    if (creatorConstructor != null) {\n      TypeUtils.setAccessible(creatorConstructor,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,creatorConstructor,null);\n      Class<?>[] parameterTypes=creatorConstructor.getParameterTypes();\n      Type[] getGenericParameterTypes=creatorConstructor.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=creatorConstructor.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=getGenericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        if (field != null) {\n          TypeUtils.setAccessible(field,modifiers);\n        }\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    Method factoryMethod=getFactoryMethod(clazz,methods);\n    if (factoryMethod != null) {\n      TypeUtils.setAccessible(factoryMethod,modifiers);\n      beanInfo=new DeserializeBeanInfo(clazz,null,null,factoryMethod);\n      Class<?>[] parameterTypes=factoryMethod.getParameterTypes();\n      Type[] genericParameterTypes=factoryMethod.getGenericParameterTypes();\n      for (int i=0; i < parameterTypes.length; ++i) {\n        Annotation[] paramAnnotations=factoryMethod.getParameterAnnotations()[i];\n        JSONField fieldAnnotation=null;\n        for (        Annotation paramAnnotation : paramAnnotations) {\n          if (paramAnnotation instanceof JSONField) {\n            fieldAnnotation=(JSONField)paramAnnotation;\n            break;\n          }\n        }\n        if (fieldAnnotation == null) {\n          throw new JSONException(\"illegal json creator\");\n        }\n        Class<?> fieldClass=parameterTypes[i];\n        Type fieldType=genericParameterTypes[i];\n        Field field=TypeUtils.getField(clazz,fieldAnnotation.name(),declaredFields);\n        final int ordinal=fieldAnnotation.ordinal();\n        final int serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        FieldInfo fieldInfo=new FieldInfo(fieldAnnotation.name(),clazz,fieldClass,fieldType,field,ordinal,serialzeFeatures);\n        beanInfo.add(fieldInfo);\n      }\n      return beanInfo;\n    }\n    throw new JSONException(\"default constructor not found. \" + clazz);\n  }\n  if (beanInfo == null) {\n    beanInfo=new DeserializeBeanInfo(clazz,defaultConstructor,null,null);\n  }\n  for (  Method method : methods) {\n    int ordinal=0, serialzeFeatures=0;\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (!(returnType == Void.TYPE || returnType == clazz)) {\n      continue;\n    }\n    if (method.getParameterTypes().length != 1) {\n      continue;\n    }\n    if (method.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    JSONField annotation=method.getAnnotation(JSONField.class);\n    if (annotation == null) {\n      annotation=TypeUtils.getSupperMethodAnnotation(clazz,method);\n    }\n    if (annotation != null) {\n      if (!annotation.deserialize()) {\n        continue;\n      }\n      ordinal=annotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(annotation.serialzeFeatures());\n      if (annotation.name().length() != 0) {\n        String propertyName=annotation.name();\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n        TypeUtils.setAccessible(method,modifiers);\n        continue;\n      }\n    }\n    if (!methodName.startsWith(\"set\")) {\n      continue;\n    }\n    char c3=methodName.charAt(3);\n    String propertyName;\n    if (Character.isUpperCase(c3)) {\n      if (TypeUtils.compatibleWithJavaBean) {\n        propertyName=TypeUtils.decapitalize(methodName.substring(3));\n      }\n else {\n        propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n      }\n    }\n else     if (c3 == '_') {\n      propertyName=methodName.substring(4);\n    }\n else     if (c3 == 'f') {\n      propertyName=methodName.substring(3);\n    }\n else     if (methodName.length() >= 5 && Character.isUpperCase(methodName.charAt(4))) {\n      propertyName=TypeUtils.decapitalize(methodName.substring(3));\n    }\n else {\n      continue;\n    }\n    Field field=TypeUtils.getField(clazz,propertyName,declaredFields);\n    if (field == null && method.getParameterTypes()[0] == boolean.class) {\n      String isFieldName=\"is\" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);\n      field=TypeUtils.getField(clazz,isFieldName,declaredFields);\n    }\n    if (field != null) {\n      JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n      if (fieldAnnotation != null) {\n        ordinal=fieldAnnotation.ordinal();\n        serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n        if (fieldAnnotation.name().length() != 0) {\n          propertyName=fieldAnnotation.name();\n          beanInfo.add(new FieldInfo(propertyName,method,field,clazz,type,ordinal,serialzeFeatures,annotation,fieldAnnotation));\n          continue;\n        }\n      }\n    }\n    beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,ordinal,serialzeFeatures,annotation,null));\n    TypeUtils.setAccessible(method,modifiers);\n  }\n  for (  Field field : clazz.getFields()) {\n    if (Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    final String fieldName=field.getName();\n    boolean contains=false;\n    for (    FieldInfo item : beanInfo.fields) {\n      if (item.name.equals(fieldName)) {\n        contains=true;\n        continue;\n      }\n    }\n    if (contains) {\n      continue;\n    }\n    int ordinal=0, serialzeFeatures=0;\n    String propertyName=fieldName;\n    JSONField fieldAnnotation=field.getAnnotation(JSONField.class);\n    if (fieldAnnotation != null) {\n      ordinal=fieldAnnotation.ordinal();\n      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n      if (fieldAnnotation.name().length() != 0) {\n        propertyName=fieldAnnotation.name();\n      }\n    }\n    TypeUtils.setAccessible(field,modifiers);\n    beanInfo.add(new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,null,fieldAnnotation));\n  }\n  for (  Method method : clazz.getMethods()) {\n    String methodName=method.getName();\n    if (methodName.length() < 4) {\n      continue;\n    }\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (methodName.startsWith(\"get\") && Character.isUpperCase(methodName.charAt(3))) {\n      if (method.getParameterTypes().length != 0) {\n        continue;\n      }\n      Class<?> methodReturnType=method.getReturnType();\n      if (Collection.class.isAssignableFrom(methodReturnType) || Map.class.isAssignableFrom(methodReturnType)) {\n        String propertyName;\n        JSONField annotation=method.getAnnotation(JSONField.class);\n        String annotationName;\n        if (annotation != null && (annotationName=annotation.name()).length() > 0) {\n          propertyName=annotationName;\n        }\n else {\n          propertyName=Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);\n        }\n        beanInfo.add(new FieldInfo(propertyName,method,null,clazz,type,annotation));\n        TypeUtils.setAccessible(method,modifiers);\n      }\n    }\n  }\n  return beanInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1241,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 327,
        "startColumnNumber" : 20,
        "endLineNumber" : 327,
        "endColumnNumber" : 81
      },
      "nodeContext" : "JSONField annotation=method.getAnnotation(JSONField.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "com.alibaba.fastjson.annotation.JSONField"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 201,
    "startColumnNumber" : 35,
    "endLineNumber" : 201,
    "endColumnNumber" : 72
  }, {
    "charLength" : 37,
    "startLineNumber" : 327,
    "startColumnNumber" : 43,
    "endLineNumber" : 327,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}