{
  "id" : 209,
  "expression" : "Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\"))",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-hadoop/src/test/java/org/apache/druid/indexer/IndexGeneratorCombinerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 121,
      "startLineNumber" : 151,
      "startColumnNumber" : 8,
      "endLineNumber" : 154,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 150,
        "startColumnNumber" : 36,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 150,
        "startColumnNumber" : 19,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "dimensionsSpec=new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 6
      },
      "nodeContext" : "DimensionsSpec dimensionsSpec=new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long timestamp=System.currentTimeMillis();\n  Bucket bucket=new Bucket(0,DateTimes.utc(timestamp),0);\n  SortableBytes keySortableBytes=new SortableBytes(bucket.toGroupKey(),new byte[0]);\n  BytesWritable key=keySortableBytes.toBytesWritable();\n  DimensionsSpec dimensionsSpec=new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null);\n  Map<String,InputRowSerde.IndexSerdeTypeHelper> typeHelperMap=InputRowSerde.getTypeHelperMap(dimensionsSpec);\n  InputRow row1=new MapBasedInputRow(timestamp,ImmutableList.of(\"keywords\"),ImmutableMap.of(\"host\",\"host1\",\"keywords\",Arrays.asList(\"foo\",\"bar\"),\"visited\",10));\n  InputRow row2=new MapBasedInputRow(timestamp,ImmutableList.of(\"keywords\"),ImmutableMap.of(\"host\",\"host2\",\"keywords\",Arrays.asList(\"foo\",\"bar\"),\"visited\",5));\n  List<BytesWritable> rows=Lists.newArrayList(new BytesWritable(InputRowSerde.toBytes(typeHelperMap,row1,aggregators).getSerializedRow()),new BytesWritable(InputRowSerde.toBytes(typeHelperMap,row2,aggregators).getSerializedRow()));\n  Reducer.Context context=EasyMock.createNiceMock(Reducer.Context.class);\n  Capture<BytesWritable> captureKey=Capture.newInstance();\n  Capture<BytesWritable> captureVal=Capture.newInstance();\n  context.write(EasyMock.capture(captureKey),EasyMock.capture(captureVal));\n  EasyMock.replay(context);\n  combiner.reduce(key,rows,context);\n  EasyMock.verify(context);\n  Assert.assertTrue(captureKey.getValue() == key);\n  InputRow capturedRow=InputRowSerde.fromBytes(typeHelperMap,captureVal.getValue().getBytes(),aggregators);\n  Assert.assertEquals(Arrays.asList(\"host\",\"keywords\"),capturedRow.getDimensions());\n  Assert.assertEquals(ImmutableList.of(),capturedRow.getDimension(\"host\"));\n  Assert.assertEquals(Arrays.asList(\"bar\",\"foo\"),capturedRow.getDimension(\"keywords\"));\n  Assert.assertEquals(15,capturedRow.getMetric(\"visited_sum\").longValue());\n  Assert.assertEquals(2.0,(Double)HyperUniquesAggregatorFactory.estimateCardinality(capturedRow.getRaw(\"unique_hosts\"),false),0.001);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2584,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMultipleRowsMerged() throws Exception {\n  long timestamp=System.currentTimeMillis();\n  Bucket bucket=new Bucket(0,DateTimes.utc(timestamp),0);\n  SortableBytes keySortableBytes=new SortableBytes(bucket.toGroupKey(),new byte[0]);\n  BytesWritable key=keySortableBytes.toBytesWritable();\n  DimensionsSpec dimensionsSpec=new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null);\n  Map<String,InputRowSerde.IndexSerdeTypeHelper> typeHelperMap=InputRowSerde.getTypeHelperMap(dimensionsSpec);\n  InputRow row1=new MapBasedInputRow(timestamp,ImmutableList.of(\"keywords\"),ImmutableMap.of(\"host\",\"host1\",\"keywords\",Arrays.asList(\"foo\",\"bar\"),\"visited\",10));\n  InputRow row2=new MapBasedInputRow(timestamp,ImmutableList.of(\"keywords\"),ImmutableMap.of(\"host\",\"host2\",\"keywords\",Arrays.asList(\"foo\",\"bar\"),\"visited\",5));\n  List<BytesWritable> rows=Lists.newArrayList(new BytesWritable(InputRowSerde.toBytes(typeHelperMap,row1,aggregators).getSerializedRow()),new BytesWritable(InputRowSerde.toBytes(typeHelperMap,row2,aggregators).getSerializedRow()));\n  Reducer.Context context=EasyMock.createNiceMock(Reducer.Context.class);\n  Capture<BytesWritable> captureKey=Capture.newInstance();\n  Capture<BytesWritable> captureVal=Capture.newInstance();\n  context.write(EasyMock.capture(captureKey),EasyMock.capture(captureVal));\n  EasyMock.replay(context);\n  combiner.reduce(key,rows,context);\n  EasyMock.verify(context);\n  Assert.assertTrue(captureKey.getValue() == key);\n  InputRow capturedRow=InputRowSerde.fromBytes(typeHelperMap,captureVal.getValue().getBytes(),aggregators);\n  Assert.assertEquals(Arrays.asList(\"host\",\"keywords\"),capturedRow.getDimensions());\n  Assert.assertEquals(ImmutableList.of(),capturedRow.getDimension(\"host\"));\n  Assert.assertEquals(Arrays.asList(\"bar\",\"foo\"),capturedRow.getDimension(\"keywords\"));\n  Assert.assertEquals(15,capturedRow.getMetric(\"visited_sum\").longValue());\n  Assert.assertEquals(2.0,(Double)HyperUniquesAggregatorFactory.estimateCardinality(capturedRow.getRaw(\"unique_hosts\"),false),0.001);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 330,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 150,
        "startColumnNumber" : 36,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new DimensionsSpec(Arrays.asList(new StringDimensionSchema(\"host\"),new StringDimensionSchema(\"keywords\")),null,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.util.List<org.apache.druid.data.input.impl.DimensionSchema>"
  } ],
  "positionList" : [ {
    "charLength" : 121,
    "startLineNumber" : 151,
    "startColumnNumber" : 8,
    "endLineNumber" : 154,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}