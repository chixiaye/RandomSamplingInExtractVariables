{
  "id" : 103,
  "expression" : "reverseVideoHere ^ cursor",
  "projectName" : "termux@termux-app",
  "commitID" : "36cc010a87c1cbc96f504540f1418c3c5fde96e5",
  "filePath" : "app/src/main/java/com/termux/view/TerminalRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reverseVideoHere ^ cursor",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 188,
      "startColumnNumber" : 6,
      "endLineNumber" : 188,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 188,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (reverseVideoHere ^ cursor) {\n  int tmp=foreColor;\n  foreColor=backColor;\n  backColor=tmp;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2743,
        "startLineNumber" : 168,
        "startColumnNumber" : 67,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3971,
        "startLineNumber" : 143,
        "startColumnNumber" : 1,
        "endLineNumber" : 235,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param canvas the canvas to render on\n * @param palette the color palette to look up colors from textStyle\n * @param y height offset into the canvas where to render the line: line *  {@link #mFontLineSpacing}\n * @param startColumn the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text the java char array to render text from\n * @param startCharIndex index into the text array where to start\n * @param runWidthChars number of java characters from the text array to render\n * @param cursor true if rendering a cursor or selection\n * @param textStyle the background, foreground and effect encoded using  {@link TextStyle}\n * @param reverseVideo if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,int textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != TextStyle.COLOR_INDEX_BACKGROUND) {\n    mTextPaint.setColor(palette[backColor]);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    final int actualForeColor=foreColor + (bold && foreColor < 8 ? 8 : 0);\n    int foreColorARGB=palette[actualForeColor];\n    if (dim) {\n      int red=(0xFF & (foreColorARGB >> 16));\n      int green=(0xFF & (foreColorARGB >> 8));\n      int blue=(0xFF & foreColorARGB);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColorARGB=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColorARGB);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 188,
        "startColumnNumber" : 2,
        "endLineNumber" : 192,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (reverseVideoHere ^ cursor) {\n  int tmp=foreColor;\n  foreColor=backColor;\n  backColor=tmp;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 188,
    "startColumnNumber" : 6,
    "endLineNumber" : 188,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}