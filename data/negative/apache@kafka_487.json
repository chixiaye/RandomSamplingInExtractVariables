{
  "id" : 487,
  "expression" : "topicIds",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/requests/UpdateMetadataRequestTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "topicIds",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 156,
      "startColumnNumber" : 12,
      "endLineNumber" : 156,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 51
      },
      "nodeContext" : "topicIds.put(topic0,Uuid.randomUuid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 52
      },
      "nodeContext" : "topicIds.put(topic0,Uuid.randomUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5815,
        "startLineNumber" : 84,
        "startColumnNumber" : 60,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 539,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5867,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (short version : UPDATE_METADATA.allVersions()) {\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 546,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5951,
        "startLineNumber" : 81,
        "startColumnNumber" : 35,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 559,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6384,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies the logic we have in UpdateMetadataRequest to present a unified interface across the various versions works correctly. For example, `UpdateMetadataPartitionState.topicName` is not serialiazed/deserialized in recent versions, but we set it manually so that we can always present the ungrouped partition states independently of the version.\n */\n@Test public void testVersionLogic(){\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 566,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 52
      },
      "nodeContext" : "topicIds.put(topic0,Uuid.randomUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,org.apache.kafka.common.Uuid>"
  }, {
    "nodeContext" : "topicIds",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 157,
      "startColumnNumber" : 12,
      "endLineNumber" : 157,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 51
      },
      "nodeContext" : "topicIds.put(topic1,Uuid.randomUuid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 52
      },
      "nodeContext" : "topicIds.put(topic1,Uuid.randomUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5815,
        "startLineNumber" : 84,
        "startColumnNumber" : 60,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 539,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5867,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (short version : UPDATE_METADATA.allVersions()) {\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 546,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5951,
        "startLineNumber" : 81,
        "startColumnNumber" : 35,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 559,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6384,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies the logic we have in UpdateMetadataRequest to present a unified interface across the various versions works correctly. For example, `UpdateMetadataPartitionState.topicName` is not serialiazed/deserialized in recent versions, but we set it manually so that we can always present the ungrouped partition states independently of the version.\n */\n@Test public void testVersionLogic(){\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 566,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 52
      },
      "nodeContext" : "topicIds.put(topic1,Uuid.randomUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,org.apache.kafka.common.Uuid>"
  }, {
    "nodeContext" : "topicIds",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 160,
      "startColumnNumber" : 46,
      "endLineNumber" : 160,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 160,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 160,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 159,
        "startColumnNumber" : 34,
        "endLineNumber" : 160,
        "endColumnNumber" : 63
      },
      "nodeContext" : "request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 160,
        "endColumnNumber" : 64
      },
      "nodeContext" : "UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5815,
        "startLineNumber" : 84,
        "startColumnNumber" : 60,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 539,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5867,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (short version : UPDATE_METADATA.allVersions()) {\n  List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n  List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n  broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n  if (version >= 1) {\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n  }\n  if (version >= 3) {\n    broker0Endpoints.get(0).setListener(\"listener0\");\n    broker0Endpoints.get(1).setListener(\"listener1\");\n  }\n  List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n  Map<String,Uuid> topicIds=new HashMap<>();\n  topicIds.put(topic0,Uuid.randomUuid());\n  topicIds.put(topic1,Uuid.randomUuid());\n  UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n  assertEquals(liveBrokers,request.liveBrokers());\n  assertEquals(1,request.controllerId());\n  assertEquals(2,request.controllerEpoch());\n  assertEquals(3,request.brokerEpoch());\n  ByteBuffer byteBuffer=request.serialize();\n  UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n  if (version < 2) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers)     liveBroker.setRack(\"\");\n  }\n  if (version < 3) {\n    for (    UpdateMetadataBroker liveBroker : liveBrokers) {\n      for (      UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n        SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n        endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n      }\n    }\n  }\n  if (version < 4)   partitionStates.get(0).setOfflineReplicas(emptyList());\n  assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n  assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n  assertEquals(1,deserializedRequest.controllerId());\n  assertEquals(2,deserializedRequest.controllerEpoch());\n  if (version >= 5)   assertEquals(3,deserializedRequest.brokerEpoch());\n else   assertEquals(-1,deserializedRequest.brokerEpoch());\n  long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n  if (version >= 7)   assertEquals(2,topicIdCount);\n else   assertEquals(0,topicIdCount);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 546,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5951,
        "startLineNumber" : 81,
        "startColumnNumber" : 35,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 559,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6384,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies the logic we have in UpdateMetadataRequest to present a unified interface across the various versions works correctly. For example, `UpdateMetadataPartitionState.topicName` is not serialiazed/deserialized in recent versions, but we set it manually so that we can always present the ungrouped partition states independently of the version.\n */\n@Test public void testVersionLogic(){\n  String topic0=\"topic0\";\n  String topic1=\"topic1\";\n  for (  short version : UPDATE_METADATA.allVersions()) {\n    List<UpdateMetadataPartitionState> partitionStates=asList(new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(0).setControllerEpoch(2).setLeader(0).setLeaderEpoch(10).setIsr(asList(0,1)).setZkVersion(10).setReplicas(asList(0,1,2)).setOfflineReplicas(asList(2)),new UpdateMetadataPartitionState().setTopicName(topic0).setPartitionIndex(1).setControllerEpoch(2).setLeader(1).setLeaderEpoch(11).setIsr(asList(1,2,3)).setZkVersion(11).setReplicas(asList(1,2,3)).setOfflineReplicas(emptyList()),new UpdateMetadataPartitionState().setTopicName(topic1).setPartitionIndex(0).setControllerEpoch(2).setLeader(2).setLeaderEpoch(11).setIsr(asList(2,3)).setZkVersion(11).setReplicas(asList(2,3,4)).setOfflineReplicas(emptyList()));\n    List<UpdateMetadataEndpoint> broker0Endpoints=new ArrayList<>();\n    broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id));\n    if (version >= 1) {\n      broker0Endpoints.add(new UpdateMetadataEndpoint().setHost(\"host0\").setPort(9091).setSecurityProtocol(SecurityProtocol.SSL.id));\n    }\n    if (version >= 3) {\n      broker0Endpoints.get(0).setListener(\"listener0\");\n      broker0Endpoints.get(1).setListener(\"listener1\");\n    }\n    List<UpdateMetadataBroker> liveBrokers=asList(new UpdateMetadataBroker().setId(0).setRack(\"rack0\").setEndpoints(broker0Endpoints),new UpdateMetadataBroker().setId(1).setEndpoints(asList(new UpdateMetadataEndpoint().setHost(\"host1\").setPort(9090).setSecurityProtocol(SecurityProtocol.PLAINTEXT.id).setListener(\"PLAINTEXT\"))));\n    Map<String,Uuid> topicIds=new HashMap<>();\n    topicIds.put(topic0,Uuid.randomUuid());\n    topicIds.put(topic1,Uuid.randomUuid());\n    UpdateMetadataRequest request=new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds).build();\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(request.partitionStates()));\n    assertEquals(liveBrokers,request.liveBrokers());\n    assertEquals(1,request.controllerId());\n    assertEquals(2,request.controllerEpoch());\n    assertEquals(3,request.brokerEpoch());\n    ByteBuffer byteBuffer=request.serialize();\n    UpdateMetadataRequest deserializedRequest=new UpdateMetadataRequest(new UpdateMetadataRequestData(new ByteBufferAccessor(byteBuffer),version),version);\n    if (version < 2) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers)       liveBroker.setRack(\"\");\n    }\n    if (version < 3) {\n      for (      UpdateMetadataBroker liveBroker : liveBrokers) {\n        for (        UpdateMetadataEndpoint endpoint : liveBroker.endpoints()) {\n          SecurityProtocol securityProtocol=SecurityProtocol.forId(endpoint.securityProtocol());\n          endpoint.setListener(ListenerName.forSecurityProtocol(securityProtocol).value());\n        }\n      }\n    }\n    if (version < 4)     partitionStates.get(0).setOfflineReplicas(emptyList());\n    assertEquals(new HashSet<>(partitionStates),iterableToSet(deserializedRequest.partitionStates()));\n    assertEquals(liveBrokers,deserializedRequest.liveBrokers());\n    assertEquals(1,deserializedRequest.controllerId());\n    assertEquals(2,deserializedRequest.controllerEpoch());\n    if (version >= 5)     assertEquals(3,deserializedRequest.brokerEpoch());\n else     assertEquals(-1,deserializedRequest.brokerEpoch());\n    long topicIdCount=deserializedRequest.data().topicStates().stream().map(UpdateMetadataRequestData.UpdateMetadataTopicState::topicId).filter(topicId -> topicId != Uuid.ZERO_UUID).count();\n    if (version >= 7)     assertEquals(2,topicIdCount);\n else     assertEquals(0,topicIdCount);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 566,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 159,
        "startColumnNumber" : 44,
        "endLineNumber" : 160,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new UpdateMetadataRequest.Builder(version,1,2,3,partitionStates,liveBrokers,topicIds)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,org.apache.kafka.common.Uuid>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 156,
    "startColumnNumber" : 12,
    "endLineNumber" : 156,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 157,
    "startColumnNumber" : 12,
    "endLineNumber" : 157,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 160,
    "startColumnNumber" : 46,
    "endLineNumber" : 160,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}