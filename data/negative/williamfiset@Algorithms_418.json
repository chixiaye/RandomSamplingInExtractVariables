{
  "id" : 418,
  "expression" : "9",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyMatrix.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "9",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 94,
      "startColumnNumber" : 12,
      "endLineNumber" : 94,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "n=9",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 14
      },
      "nodeContext" : "int n=9;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2302,
        "startLineNumber" : 92,
        "startColumnNumber" : 41,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=9;\n  double[][] graph=new double[n][n];\n  for (int i=0; i < n; i++) {\n    java.util.Arrays.fill(graph[i],Double.POSITIVE_INFINITY);\n    graph[i][i]=0;\n  }\n  graph[0][1]=1;\n  graph[1][2]=1;\n  graph[2][4]=1;\n  graph[4][3]=-3;\n  graph[3][2]=1;\n  graph[1][5]=4;\n  graph[1][6]=4;\n  graph[5][6]=5;\n  graph[6][7]=4;\n  graph[5][7]=3;\n  int start=0;\n  BellmanFordAdjacencyMatrix solver;\n  solver=new BellmanFordAdjacencyMatrix(start,graph);\n  double[] d=solver.getShortestPaths();\n  for (int i=0; i < n; i++)   System.out.printf(\"The cost to get from node %d to %d is %.2f\\n\",start,i,d[i]);\n  System.out.println();\n  for (int i=0; i < n; i++) {\n    String strPath;\n    List<Integer> path=solver.reconstructShortestPath(i);\n    if (path == null) {\n      strPath=\"Infinite number of shortest paths.\";\n    }\n else {\n      List<String> nodes=path.stream().map(Object::toString).collect(Collectors.toList());\n      strPath=String.join(\" -> \",nodes);\n    }\n    System.out.printf(\"The shortest path from %d to %d is: [%s]\\n\",start,i,strPath);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2341,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=9;\n  double[][] graph=new double[n][n];\n  for (int i=0; i < n; i++) {\n    java.util.Arrays.fill(graph[i],Double.POSITIVE_INFINITY);\n    graph[i][i]=0;\n  }\n  graph[0][1]=1;\n  graph[1][2]=1;\n  graph[2][4]=1;\n  graph[4][3]=-3;\n  graph[3][2]=1;\n  graph[1][5]=4;\n  graph[1][6]=4;\n  graph[5][6]=5;\n  graph[6][7]=4;\n  graph[5][7]=3;\n  int start=0;\n  BellmanFordAdjacencyMatrix solver;\n  solver=new BellmanFordAdjacencyMatrix(start,graph);\n  double[] d=solver.getShortestPaths();\n  for (int i=0; i < n; i++)   System.out.printf(\"The cost to get from node %d to %d is %.2f\\n\",start,i,d[i]);\n  System.out.println();\n  for (int i=0; i < n; i++) {\n    String strPath;\n    List<Integer> path=solver.reconstructShortestPath(i);\n    if (path == null) {\n      strPath=\"Infinite number of shortest paths.\";\n    }\n else {\n      List<String> nodes=path.stream().map(Object::toString).collect(Collectors.toList());\n      strPath=String.join(\" -> \",nodes);\n    }\n    System.out.printf(\"The shortest path from %d to %d is: [%s]\\n\",start,i,strPath);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 14
      },
      "nodeContext" : "int n=9;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 94,
    "startColumnNumber" : 12,
    "endLineNumber" : 94,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}