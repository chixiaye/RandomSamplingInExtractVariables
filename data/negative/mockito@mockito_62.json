{
  "id" : 62,
  "expression" : "parentCall",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/AbstractMockitoAnyForPrimitiveType.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parentCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 59,
      "startColumnNumber" : 53,
      "endLineNumber" : 59,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 59,
        "startColumnNumber" : 32,
        "endLineNumber" : 59,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ASTHelpers.getSymbol(parentCall)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 64
      },
      "nodeContext" : "parentMethod=ASTHelpers.getSymbol(parentCall)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 65
      },
      "nodeContext" : "MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2796,
        "startLineNumber" : 38,
        "startColumnNumber" : 90,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!matcher().matches(tree,state)) {\n    return NO_MATCH;\n  }\n  MethodSymbol method=ASTHelpers.getSymbol(tree);\n  Type matcherType=method.getReturnType();\n  TreePath path=state.getPath();\n  Tree parentTree=path.getParentPath().getLeaf();\n  if (!(parentTree instanceof MethodInvocationTree)) {\n    return NO_MATCH;\n  }\n  MethodInvocationTree parentCall=(MethodInvocationTree)parentTree;\n  MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n  int argumentIndex=-1;\n  List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n  for (int i=0; i < parentArguments.size(); i++) {\n    ExpressionTree argumentTree=parentArguments.get(i);\n    if (argumentTree == tree) {\n      argumentIndex=i;\n      break;\n    }\n  }\n  if (argumentIndex == -1) {\n    throw new IllegalStateException(\"Cannot find argument \" + state.getSourceForNode(tree) + \" in argument list from \"+ state.getSourceForNode(parentTree));\n  }\n  Type parameterType=getParameterType(parentMethod,argumentIndex);\n  TypeKind parameterTypeKind=parameterType.getKind();\n  if (parameterTypeKind.isPrimitive() && parameterTypeKind != matcherType.getKind()) {\n    String expectedTypeAsString=parameterType.toString();\n    String replacementName=\"any\" + Character.toUpperCase(expectedTypeAsString.charAt(0)) + expectedTypeAsString.substring(1);\n    String message=formatMessage(expectedTypeAsString,matcherType,replacementName);\n    SuggestedFix.Builder fixBuilder=SuggestedFix.builder();\n    ExpressionTree methodSelect=tree.getMethodSelect();\n    String replacement;\n    if (methodSelect instanceof MemberSelectTree) {\n      MemberSelectTree qualifier=(MemberSelectTree)methodSelect;\n      replacement=state.getSourceForNode(qualifier.getExpression()) + \".\" + replacementName;\n    }\n else {\n      replacement=replacementName;\n      String staticImport=method.owner + \".\" + replacementName;\n      fixBuilder.addStaticImport(staticImport);\n    }\n    SuggestedFix fix=fixBuilder.replace(tree,replacement + \"()\").build();\n    return buildDescription(tree).setMessage(message).addFix(fix).build();\n  }\n  return NO_MATCH;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Description matchMethodInvocation(MethodInvocationTree tree,VisitorState state){\n  if (!matcher().matches(tree,state)) {\n    return NO_MATCH;\n  }\n  MethodSymbol method=ASTHelpers.getSymbol(tree);\n  Type matcherType=method.getReturnType();\n  TreePath path=state.getPath();\n  Tree parentTree=path.getParentPath().getLeaf();\n  if (!(parentTree instanceof MethodInvocationTree)) {\n    return NO_MATCH;\n  }\n  MethodInvocationTree parentCall=(MethodInvocationTree)parentTree;\n  MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n  int argumentIndex=-1;\n  List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n  for (int i=0; i < parentArguments.size(); i++) {\n    ExpressionTree argumentTree=parentArguments.get(i);\n    if (argumentTree == tree) {\n      argumentIndex=i;\n      break;\n    }\n  }\n  if (argumentIndex == -1) {\n    throw new IllegalStateException(\"Cannot find argument \" + state.getSourceForNode(tree) + \" in argument list from \"+ state.getSourceForNode(parentTree));\n  }\n  Type parameterType=getParameterType(parentMethod,argumentIndex);\n  TypeKind parameterTypeKind=parameterType.getKind();\n  if (parameterTypeKind.isPrimitive() && parameterTypeKind != matcherType.getKind()) {\n    String expectedTypeAsString=parameterType.toString();\n    String replacementName=\"any\" + Character.toUpperCase(expectedTypeAsString.charAt(0)) + expectedTypeAsString.substring(1);\n    String message=formatMessage(expectedTypeAsString,matcherType,replacementName);\n    SuggestedFix.Builder fixBuilder=SuggestedFix.builder();\n    ExpressionTree methodSelect=tree.getMethodSelect();\n    String replacement;\n    if (methodSelect instanceof MemberSelectTree) {\n      MemberSelectTree qualifier=(MemberSelectTree)methodSelect;\n      replacement=state.getSourceForNode(qualifier.getExpression()) + \".\" + replacementName;\n    }\n else {\n      replacement=replacementName;\n      String staticImport=method.owner + \".\" + replacementName;\n      fixBuilder.addStaticImport(staticImport);\n    }\n    SuggestedFix fix=fixBuilder.replace(tree,replacement + \"()\").build();\n    return buildDescription(tree).setMessage(message).addFix(fix).build();\n  }\n  return NO_MATCH;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 325,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 65
      },
      "nodeContext" : "MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.sun.source.tree.MethodInvocationTree"
  }, {
    "nodeContext" : "parentCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 63,
      "startColumnNumber" : 53,
      "endLineNumber" : 63,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 53,
        "endLineNumber" : 63,
        "endColumnNumber" : 78
      },
      "nodeContext" : "parentCall.getArguments()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 35,
        "endLineNumber" : 63,
        "endColumnNumber" : 78
      },
      "nodeContext" : "parentArguments=parentCall.getArguments()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 79
      },
      "nodeContext" : "List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2796,
        "startLineNumber" : 38,
        "startColumnNumber" : 90,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!matcher().matches(tree,state)) {\n    return NO_MATCH;\n  }\n  MethodSymbol method=ASTHelpers.getSymbol(tree);\n  Type matcherType=method.getReturnType();\n  TreePath path=state.getPath();\n  Tree parentTree=path.getParentPath().getLeaf();\n  if (!(parentTree instanceof MethodInvocationTree)) {\n    return NO_MATCH;\n  }\n  MethodInvocationTree parentCall=(MethodInvocationTree)parentTree;\n  MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n  int argumentIndex=-1;\n  List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n  for (int i=0; i < parentArguments.size(); i++) {\n    ExpressionTree argumentTree=parentArguments.get(i);\n    if (argumentTree == tree) {\n      argumentIndex=i;\n      break;\n    }\n  }\n  if (argumentIndex == -1) {\n    throw new IllegalStateException(\"Cannot find argument \" + state.getSourceForNode(tree) + \" in argument list from \"+ state.getSourceForNode(parentTree));\n  }\n  Type parameterType=getParameterType(parentMethod,argumentIndex);\n  TypeKind parameterTypeKind=parameterType.getKind();\n  if (parameterTypeKind.isPrimitive() && parameterTypeKind != matcherType.getKind()) {\n    String expectedTypeAsString=parameterType.toString();\n    String replacementName=\"any\" + Character.toUpperCase(expectedTypeAsString.charAt(0)) + expectedTypeAsString.substring(1);\n    String message=formatMessage(expectedTypeAsString,matcherType,replacementName);\n    SuggestedFix.Builder fixBuilder=SuggestedFix.builder();\n    ExpressionTree methodSelect=tree.getMethodSelect();\n    String replacement;\n    if (methodSelect instanceof MemberSelectTree) {\n      MemberSelectTree qualifier=(MemberSelectTree)methodSelect;\n      replacement=state.getSourceForNode(qualifier.getExpression()) + \".\" + replacementName;\n    }\n else {\n      replacement=replacementName;\n      String staticImport=method.owner + \".\" + replacementName;\n      fixBuilder.addStaticImport(staticImport);\n    }\n    SuggestedFix fix=fixBuilder.replace(tree,replacement + \"()\").build();\n    return buildDescription(tree).setMessage(message).addFix(fix).build();\n  }\n  return NO_MATCH;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Description matchMethodInvocation(MethodInvocationTree tree,VisitorState state){\n  if (!matcher().matches(tree,state)) {\n    return NO_MATCH;\n  }\n  MethodSymbol method=ASTHelpers.getSymbol(tree);\n  Type matcherType=method.getReturnType();\n  TreePath path=state.getPath();\n  Tree parentTree=path.getParentPath().getLeaf();\n  if (!(parentTree instanceof MethodInvocationTree)) {\n    return NO_MATCH;\n  }\n  MethodInvocationTree parentCall=(MethodInvocationTree)parentTree;\n  MethodSymbol parentMethod=ASTHelpers.getSymbol(parentCall);\n  int argumentIndex=-1;\n  List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n  for (int i=0; i < parentArguments.size(); i++) {\n    ExpressionTree argumentTree=parentArguments.get(i);\n    if (argumentTree == tree) {\n      argumentIndex=i;\n      break;\n    }\n  }\n  if (argumentIndex == -1) {\n    throw new IllegalStateException(\"Cannot find argument \" + state.getSourceForNode(tree) + \" in argument list from \"+ state.getSourceForNode(parentTree));\n  }\n  Type parameterType=getParameterType(parentMethod,argumentIndex);\n  TypeKind parameterTypeKind=parameterType.getKind();\n  if (parameterTypeKind.isPrimitive() && parameterTypeKind != matcherType.getKind()) {\n    String expectedTypeAsString=parameterType.toString();\n    String replacementName=\"any\" + Character.toUpperCase(expectedTypeAsString.charAt(0)) + expectedTypeAsString.substring(1);\n    String message=formatMessage(expectedTypeAsString,matcherType,replacementName);\n    SuggestedFix.Builder fixBuilder=SuggestedFix.builder();\n    ExpressionTree methodSelect=tree.getMethodSelect();\n    String replacement;\n    if (methodSelect instanceof MemberSelectTree) {\n      MemberSelectTree qualifier=(MemberSelectTree)methodSelect;\n      replacement=state.getSourceForNode(qualifier.getExpression()) + \".\" + replacementName;\n    }\n else {\n      replacement=replacementName;\n      String staticImport=method.owner + \".\" + replacementName;\n      fixBuilder.addStaticImport(staticImport);\n    }\n    SuggestedFix fix=fixBuilder.replace(tree,replacement + \"()\").build();\n    return buildDescription(tree).setMessage(message).addFix(fix).build();\n  }\n  return NO_MATCH;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 325,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 79
      },
      "nodeContext" : "List<? extends ExpressionTree> parentArguments=parentCall.getArguments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.sun.source.tree.MethodInvocationTree"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 59,
    "startColumnNumber" : 53,
    "endLineNumber" : 59,
    "endColumnNumber" : 63
  }, {
    "charLength" : 10,
    "startLineNumber" : 63,
    "startColumnNumber" : 53,
    "endLineNumber" : 63,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}