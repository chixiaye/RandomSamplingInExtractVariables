{
  "id" : 303,
  "expression" : "SendMessageRequestHeaderV2.class",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/processor/SendMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SendMessageRequestHeaderV2.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 72,
      "startColumnNumber" : 104,
      "endLineNumber" : 72,
      "endColumnNumber" : 136
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 72,
        "startColumnNumber" : 70,
        "endLineNumber" : 72,
        "endColumnNumber" : 137
      },
      "nodeContext" : "request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 72,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 137
      },
      "nodeContext" : "(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 137
      },
      "nodeContext" : "sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 138
      },
      "nodeContext" : "sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 71,
        "startColumnNumber" : 62,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n  enodeName=sendMessageRequestHeaderV2.getN();\n  stringBuffer.append(sendMessageRequestHeaderV2.getB());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 742,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (request.getCode() == RequestCode.SEND_MESSAGE_V2) {\n  sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n  enodeName=sendMessageRequestHeaderV2.getN();\n  stringBuffer.append(sendMessageRequestHeaderV2.getB());\n}\n else {\n  isSendBack=true;\n  ConsumerSendMsgBackRequestHeader consumerSendMsgBackRequestHeader=(ConsumerSendMsgBackRequestHeader)request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);\n  enodeName=consumerSendMsgBackRequestHeader.getEnodeName();\n  stringBuffer.append(MixAll.getRetryTopic(consumerSendMsgBackRequestHeader.getGroup()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2985,
        "startLineNumber" : 61,
        "startColumnNumber" : 65,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MetricsService.Timer timer=this.snodeController.getMetricsService().startTimer(request.getCode());\n  if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n    RequestContext requestContext=new RequestContext(request,remotingChannel);\n    this.snodeController.getSendMessageInterceptorGroup().beforeRequest(requestContext);\n  }\n  String enodeName;\n  SendMessageRequestHeaderV2 sendMessageRequestHeaderV2=null;\n  final StringBuffer stringBuffer=new StringBuffer();\n  boolean isSendBack=false;\n  if (request.getCode() == RequestCode.SEND_MESSAGE_V2) {\n    sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n    enodeName=sendMessageRequestHeaderV2.getN();\n    stringBuffer.append(sendMessageRequestHeaderV2.getB());\n  }\n else {\n    isSendBack=true;\n    ConsumerSendMsgBackRequestHeader consumerSendMsgBackRequestHeader=(ConsumerSendMsgBackRequestHeader)request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);\n    enodeName=consumerSendMsgBackRequestHeader.getEnodeName();\n    stringBuffer.append(MixAll.getRetryTopic(consumerSendMsgBackRequestHeader.getGroup()));\n  }\n  CompletableFuture<RemotingCommand> responseFuture=snodeController.getEnodeService().sendMessage(enodeName,request);\n  final Integer queueId=sendMessageRequestHeaderV2.getE();\n  final byte[] message=request.getBody();\n  final boolean isNeedPush=!isSendBack;\n  responseFuture.whenComplete((data,ex) -> {\n    if (ex == null) {\n      if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n        ResponseContext responseContext=new ResponseContext(request,remotingChannel,data);\n        this.snodeController.getSendMessageInterceptorGroup().afterRequest(responseContext);\n      }\n      remotingChannel.reply(data);\n      this.snodeController.getMetricsService().recordRequestSize(stringBuffer.toString(),request.getBody().length);\n      if (data.getCode() == ResponseCode.SUCCESS && isNeedPush) {\n        this.snodeController.getPushService().pushMessage(enodeName,stringBuffer.toString(),queueId,message,data);\n      }\n    }\n else {\n      this.snodeController.getMetricsService().incRequestCount(request.getCode(),false);\n      if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n        ExceptionContext exceptionContext=new ExceptionContext(request,remotingChannel,ex,null);\n        this.snodeController.getSendMessageInterceptorGroup().onException(exceptionContext);\n      }\n      log.error(\"Send Message error: {}\",ex);\n    }\n    timer.observeDuration();\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3122,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void processSendMessageRequest(RemotingChannel remotingChannel,RemotingCommand request) throws RemotingCommandException {\n  MetricsService.Timer timer=this.snodeController.getMetricsService().startTimer(request.getCode());\n  if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n    RequestContext requestContext=new RequestContext(request,remotingChannel);\n    this.snodeController.getSendMessageInterceptorGroup().beforeRequest(requestContext);\n  }\n  String enodeName;\n  SendMessageRequestHeaderV2 sendMessageRequestHeaderV2=null;\n  final StringBuffer stringBuffer=new StringBuffer();\n  boolean isSendBack=false;\n  if (request.getCode() == RequestCode.SEND_MESSAGE_V2) {\n    sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n    enodeName=sendMessageRequestHeaderV2.getN();\n    stringBuffer.append(sendMessageRequestHeaderV2.getB());\n  }\n else {\n    isSendBack=true;\n    ConsumerSendMsgBackRequestHeader consumerSendMsgBackRequestHeader=(ConsumerSendMsgBackRequestHeader)request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);\n    enodeName=consumerSendMsgBackRequestHeader.getEnodeName();\n    stringBuffer.append(MixAll.getRetryTopic(consumerSendMsgBackRequestHeader.getGroup()));\n  }\n  CompletableFuture<RemotingCommand> responseFuture=snodeController.getEnodeService().sendMessage(enodeName,request);\n  final Integer queueId=sendMessageRequestHeaderV2.getE();\n  final byte[] message=request.getBody();\n  final boolean isNeedPush=!isSendBack;\n  responseFuture.whenComplete((data,ex) -> {\n    if (ex == null) {\n      if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n        ResponseContext responseContext=new ResponseContext(request,remotingChannel,data);\n        this.snodeController.getSendMessageInterceptorGroup().afterRequest(responseContext);\n      }\n      remotingChannel.reply(data);\n      this.snodeController.getMetricsService().recordRequestSize(stringBuffer.toString(),request.getBody().length);\n      if (data.getCode() == ResponseCode.SUCCESS && isNeedPush) {\n        this.snodeController.getPushService().pushMessage(enodeName,stringBuffer.toString(),queueId,message,data);\n      }\n    }\n else {\n      this.snodeController.getMetricsService().incRequestCount(request.getCode(),false);\n      if (this.snodeController.getSendMessageInterceptorGroup() != null) {\n        ExceptionContext exceptionContext=new ExceptionContext(request,remotingChannel,ex,null);\n        this.snodeController.getSendMessageInterceptorGroup().onException(exceptionContext);\n      }\n      log.error(\"Send Message error: {}\",ex);\n    }\n    timer.observeDuration();\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 339,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 138
      },
      "nodeContext" : "sendMessageRequestHeaderV2=(SendMessageRequestHeaderV2)request.decodeCommandCustomHeader(SendMessageRequestHeaderV2.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.rocketmq.common.protocol.header.SendMessageRequestHeaderV2>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 72,
    "startColumnNumber" : 104,
    "endLineNumber" : 72,
    "endColumnNumber" : 136
  } ],
  "layoutRelationDataList" : [ ]
}