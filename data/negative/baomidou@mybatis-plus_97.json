{
  "id" : 97,
  "expression" : "tableInfo",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "047d6eab831f917bb5338ffc2f62611eac1be7d7",
  "filePath" : "mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 170,
      "startColumnNumber" : 16,
      "endLineNumber" : 170,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 170,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 75
      },
      "nodeContext" : "tableInfo.setImportPackages(Model.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 170,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 76
      },
      "nodeContext" : "tableInfo.setImportPackages(Model.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 168,
        "startColumnNumber" : 59,
        "endLineNumber" : 171,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(Model.class.getCanonicalName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (config.getGlobalConfig().isActiveRecord()) {\n  tableInfo.setImportPackages(Model.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 170,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 76
      },
      "nodeContext" : "tableInfo.setImportPackages(Model.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 172,
      "startColumnNumber" : 16,
      "endLineNumber" : 172,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 172,
        "startColumnNumber" : 16,
        "endLineNumber" : 172,
        "endColumnNumber" : 37
      },
      "nodeContext" : "tableInfo.isConvert()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 175,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableInfo.isConvert()) {\n  tableInfo.setImportPackages(TableName.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 172,
        "startColumnNumber" : 16,
        "endLineNumber" : 172,
        "endColumnNumber" : 37
      },
      "nodeContext" : "tableInfo.isConvert()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 174,
      "startColumnNumber" : 16,
      "endLineNumber" : 174,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 174,
        "startColumnNumber" : 16,
        "endLineNumber" : 174,
        "endColumnNumber" : 79
      },
      "nodeContext" : "tableInfo.setImportPackages(TableName.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 174,
        "startColumnNumber" : 16,
        "endLineNumber" : 174,
        "endColumnNumber" : 80
      },
      "nodeContext" : "tableInfo.setImportPackages(TableName.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 172,
        "startColumnNumber" : 39,
        "endLineNumber" : 175,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(TableName.class.getCanonicalName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 175,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableInfo.isConvert()) {\n  tableInfo.setImportPackages(TableName.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 174,
        "startColumnNumber" : 16,
        "endLineNumber" : 174,
        "endColumnNumber" : 80
      },
      "nodeContext" : "tableInfo.setImportPackages(TableName.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 176,
      "startColumnNumber" : 16,
      "endLineNumber" : 176,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 179,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n  tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 93
      },
      "nodeContext" : "tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 178,
      "startColumnNumber" : 16,
      "endLineNumber" : 178,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 80
      },
      "nodeContext" : "tableInfo.setImportPackages(TableLogic.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 81
      },
      "nodeContext" : "tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 176,
        "startColumnNumber" : 95,
        "endLineNumber" : 179,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 179,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n  tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 81
      },
      "nodeContext" : "tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 182,
      "startColumnNumber" : 16,
      "endLineNumber" : 182,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 182,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 77
      },
      "nodeContext" : "tableInfo.setImportPackages(Version.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 182,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tableInfo.setImportPackages(Version.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 180,
        "startColumnNumber" : 90,
        "endLineNumber" : 183,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(Version.class.getCanonicalName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 180,
        "startColumnNumber" : 12,
        "endLineNumber" : 183,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n  tableInfo.setImportPackages(Version.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 182,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 78
      },
      "nodeContext" : "tableInfo.setImportPackages(Version.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 186,
      "startColumnNumber" : 16,
      "endLineNumber" : 186,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 73
      },
      "nodeContext" : "tableInfo.setImportPackages(config.getSuperEntityClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tableInfo.setImportPackages(config.getSuperEntityClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 184,
        "startColumnNumber" : 70,
        "endLineNumber" : 187,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(config.getSuperEntityClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n  tableInfo.setImportPackages(config.getSuperEntityClass());\n}\n else {\n  tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tableInfo.setImportPackages(config.getSuperEntityClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 188,
      "startColumnNumber" : 16,
      "endLineNumber" : 188,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 82
      },
      "nodeContext" : "tableInfo.setImportPackages(Serializable.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 83
      },
      "nodeContext" : "tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 187,
        "startColumnNumber" : 19,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n  tableInfo.setImportPackages(config.getSuperEntityClass());\n}\n else {\n  tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 83
      },
      "nodeContext" : "tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 192,
      "startColumnNumber" : 40,
      "endLineNumber" : 192,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 192,
        "startColumnNumber" : 40,
        "endLineNumber" : 192,
        "endColumnNumber" : 61
      },
      "nodeContext" : "tableInfo.getFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 192,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (TableField field : tableInfo.getFields()) {\n  if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n    if (field.getPropertyName().startsWith(\"is\")) {\n      field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 484,
        "startLineNumber" : 191,
        "startColumnNumber" : 82,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  TableField field : tableInfo.getFields()) {\n    if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n      if (field.getPropertyName().startsWith(\"is\")) {\n        field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n  for (  TableField field : tableInfo.getFields()) {\n    if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n      if (field.getPropertyName().startsWith(\"is\")) {\n        field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 192,
        "startColumnNumber" : 40,
        "endLineNumber" : 192,
        "endColumnNumber" : 61
      },
      "nodeContext" : "tableInfo.getFields()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 204,
      "startColumnNumber" : 77,
      "endLineNumber" : 204,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 204,
        "startColumnNumber" : 77,
        "endLineNumber" : 204,
        "endColumnNumber" : 102
      },
      "nodeContext" : "tableInfo.getEntityPath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 204,
        "startColumnNumber" : 51,
        "endLineNumber" : 204,
        "endColumnNumber" : 103
      },
      "nodeContext" : "StringUtils.camelToHyphen(tableInfo.getEntityPath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 104
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 202,
        "startColumnNumber" : 77,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n  ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n  ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 217,
      "startColumnNumber" : 29,
      "endLineNumber" : 217,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 217,
        "startColumnNumber" : 12,
        "endLineNumber" : 217,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ctx.put(\"table\",tableInfo);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 221,
      "startColumnNumber" : 30,
      "endLineNumber" : 221,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 221,
        "startColumnNumber" : 30,
        "endLineNumber" : 221,
        "endColumnNumber" : 55
      },
      "nodeContext" : "tableInfo.getEntityName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 221,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ctx.put(\"entity\",tableInfo.getEntityName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  }, {
    "nodeContext" : "tableInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 235,
      "startColumnNumber" : 24,
      "endLineNumber" : 235,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 235,
        "startColumnNumber" : 24,
        "endLineNumber" : 235,
        "endColumnNumber" : 49
      },
      "nodeContext" : "tableInfo.getEntityName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 158,
        "startColumnNumber" : 46,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (TableInfo tableInfo : tableList) {\n  ctx=new VelocityContext();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    ctx.put(\"cfg\",injectionConfig.getMap());\n  }\n  if (config.getGlobalConfig().isActiveRecord()) {\n    tableInfo.setImportPackages(Model.class.getCanonicalName());\n  }\n  if (tableInfo.isConvert()) {\n    tableInfo.setImportPackages(TableName.class.getCanonicalName());\n  }\n  if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n    tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n    tableInfo.setImportPackages(Version.class.getCanonicalName());\n  }\n  if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n    tableInfo.setImportPackages(config.getSuperEntityClass());\n  }\n else {\n    tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n  }\n  if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n    for (    TableField field : tableInfo.getFields()) {\n      if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n        if (field.getPropertyName().startsWith(\"is\")) {\n          field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n        }\n      }\n    }\n  }\n  if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n    ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n    ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n  }\n  ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n  ctx.put(\"package\",packageInfo);\n  GlobalConfig globalConfig=config.getGlobalConfig();\n  ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n  ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n  ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n  ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n  ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n  ctx.put(\"kotlin\",globalConfig.isKotlin());\n  ctx.put(\"date\",date);\n  ctx.put(\"table\",tableInfo);\n  ctx.put(\"enableCache\",globalConfig.isEnableCache());\n  ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n  ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n  ctx.put(\"entity\",tableInfo.getEntityName());\n  ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n  ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n  ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n  ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n  ctx.put(\"superEntityClass\",superEntityClass);\n  ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n  ctx.put(\"superMapperClass\",superMapperClass);\n  ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n  ctx.put(\"superServiceClass\",superServiceClass);\n  ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n  ctx.put(\"superServiceImplClass\",superServiceImplClass);\n  ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n  ctx.put(\"superControllerClass\",superControllerClass);\n  ctxData.put(tableInfo.getEntityName(),ctx);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 438,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5322,
        "startLineNumber" : 147,
        "startColumnNumber" : 75,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5501,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 分析数据 </p>\n * @param config 总配置信息\n * @return 解析数据结果集\n */\nprivate Map<String,VelocityContext> analyzeData(ConfigBuilder config){\n  List<TableInfo> tableList=this.getAllTableInfoList(config);\n  Map<String,String> packageInfo=config.getPackageInfo();\n  Map<String,VelocityContext> ctxData=new HashMap<>();\n  String superEntityClass=getSuperClassName(config.getSuperEntityClass());\n  String superMapperClass=getSuperClassName(config.getSuperMapperClass());\n  String superServiceClass=getSuperClassName(config.getSuperServiceClass());\n  String superServiceImplClass=getSuperClassName(config.getSuperServiceImplClass());\n  String superControllerClass=getSuperClassName(config.getSuperControllerClass());\n  String date=new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n  VelocityContext ctx;\n  for (  TableInfo tableInfo : tableList) {\n    ctx=new VelocityContext();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      ctx.put(\"cfg\",injectionConfig.getMap());\n    }\n    if (config.getGlobalConfig().isActiveRecord()) {\n      tableInfo.setImportPackages(Model.class.getCanonicalName());\n    }\n    if (tableInfo.isConvert()) {\n      tableInfo.setImportPackages(TableName.class.getCanonicalName());\n    }\n    if (tableInfo.isLogicDelete(config.getStrategyConfig().getLogicDeleteFieldName())) {\n      tableInfo.setImportPackages(TableLogic.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getStrategyConfig().getVersionFieldName())) {\n      tableInfo.setImportPackages(Version.class.getCanonicalName());\n    }\n    if (StringUtils.isNotEmpty(config.getSuperEntityClass())) {\n      tableInfo.setImportPackages(config.getSuperEntityClass());\n    }\n else {\n      tableInfo.setImportPackages(Serializable.class.getCanonicalName());\n    }\n    if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {\n      for (      TableField field : tableInfo.getFields()) {\n        if (field.getPropertyType().equalsIgnoreCase(\"boolean\")) {\n          if (field.getPropertyName().startsWith(\"is\")) {\n            field.setPropertyName(config.getStrategyConfig(),StringUtils.removePrefixAfterPrefixToLower(field.getPropertyName(),2));\n          }\n        }\n      }\n    }\n    if (config.getStrategyConfig().isControllerMappingHyphenStyle()) {\n      ctx.put(\"controllerMappingHyphenStyle\",config.getStrategyConfig().isControllerMappingHyphenStyle());\n      ctx.put(\"controllerMappingHyphen\",StringUtils.camelToHyphen(tableInfo.getEntityPath()));\n    }\n    ctx.put(\"restControllerStyle\",config.getStrategyConfig().isRestControllerStyle());\n    ctx.put(\"package\",packageInfo);\n    GlobalConfig globalConfig=config.getGlobalConfig();\n    ctx.put(\"author\",globalConfig.getAuthor() + \"123\");\n    ctx.put(\"idType\",globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());\n    ctx.put(\"logicDeleteFieldName\",config.getStrategyConfig().getLogicDeleteFieldName());\n    ctx.put(\"versionFieldName\",config.getStrategyConfig().getVersionFieldName());\n    ctx.put(\"activeRecord\",globalConfig.isActiveRecord());\n    ctx.put(\"kotlin\",globalConfig.isKotlin());\n    ctx.put(\"date\",date);\n    ctx.put(\"table\",tableInfo);\n    ctx.put(\"enableCache\",globalConfig.isEnableCache());\n    ctx.put(\"baseResultMap\",globalConfig.isBaseResultMap());\n    ctx.put(\"baseColumnList\",globalConfig.isBaseColumnList());\n    ctx.put(\"entity\",tableInfo.getEntityName());\n    ctx.put(\"entityColumnConstant\",config.getStrategyConfig().isEntityColumnConstant());\n    ctx.put(\"entityBuilderModel\",config.getStrategyConfig().isEntityBuilderModel());\n    ctx.put(\"entityLombokModel\",config.getStrategyConfig().isEntityLombokModel());\n    ctx.put(\"entityBooleanColumnRemoveIsPrefix\",config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());\n    ctx.put(\"superEntityClass\",superEntityClass);\n    ctx.put(\"superMapperClassPackage\",config.getSuperMapperClass());\n    ctx.put(\"superMapperClass\",superMapperClass);\n    ctx.put(\"superServiceClassPackage\",config.getSuperServiceClass());\n    ctx.put(\"superServiceClass\",superServiceClass);\n    ctx.put(\"superServiceImplClassPackage\",config.getSuperServiceImplClass());\n    ctx.put(\"superServiceImplClass\",superServiceImplClass);\n    ctx.put(\"superControllerClassPackage\",config.getSuperControllerClass());\n    ctx.put(\"superControllerClass\",superControllerClass);\n    ctxData.put(tableInfo.getEntityName(),ctx);\n  }\n  return ctxData;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 564,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ctxData.put(tableInfo.getEntityName(),ctx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.generator.config.po.TableInfo"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 170,
    "startColumnNumber" : 16,
    "endLineNumber" : 170,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 172,
    "startColumnNumber" : 16,
    "endLineNumber" : 172,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 174,
    "startColumnNumber" : 16,
    "endLineNumber" : 174,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 176,
    "startColumnNumber" : 16,
    "endLineNumber" : 176,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 178,
    "startColumnNumber" : 16,
    "endLineNumber" : 178,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 182,
    "startColumnNumber" : 16,
    "endLineNumber" : 182,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 186,
    "startColumnNumber" : 16,
    "endLineNumber" : 186,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 188,
    "startColumnNumber" : 16,
    "endLineNumber" : 188,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 192,
    "startColumnNumber" : 40,
    "endLineNumber" : 192,
    "endColumnNumber" : 49
  }, {
    "charLength" : 9,
    "startLineNumber" : 204,
    "startColumnNumber" : 77,
    "endLineNumber" : 204,
    "endColumnNumber" : 86
  }, {
    "charLength" : 9,
    "startLineNumber" : 217,
    "startColumnNumber" : 29,
    "endLineNumber" : 217,
    "endColumnNumber" : 38
  }, {
    "charLength" : 9,
    "startLineNumber" : 221,
    "startColumnNumber" : 30,
    "endLineNumber" : 221,
    "endColumnNumber" : 39
  }, {
    "charLength" : 9,
    "startLineNumber" : 235,
    "startColumnNumber" : 24,
    "endLineNumber" : 235,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  } ]
}