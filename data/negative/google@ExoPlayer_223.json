{
  "id" : 223,
  "expression" : "Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/ui/src/main/java/com/google/android/exoplayer2/ui/WebViewSubtitleOutput.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1026,
      "startLineNumber" : 277,
      "startColumnNumber" : 14,
      "endLineNumber" : 304,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 33,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 304,
        "endColumnNumber" : 55
      },
      "nodeContext" : "html.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 305,
        "endColumnNumber" : 90
      },
      "nodeContext" : "html.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 305,
        "endColumnNumber" : 91
      },
      "nodeContext" : "html.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 5039,
        "startLineNumber" : 190,
        "startColumnNumber" : 46,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Cue cue=textCues.get(i);\n  float positionPercent=(cue.position != Cue.DIMEN_UNSET) ? (cue.position * 100) : 50;\n  int positionAnchorTranslatePercent=anchorTypeToTranslatePercent(cue.positionAnchor);\n  String lineValue;\n  boolean lineMeasuredFromEnd=false;\n  int lineAnchorTranslatePercent=0;\n  if (cue.line != Cue.DIMEN_UNSET) {\nswitch (cue.lineType) {\ncase Cue.LINE_TYPE_NUMBER:      if (cue.line >= 0) {\n        lineValue=Util.formatInvariant(\"%.2fem\",cue.line * CSS_LINE_HEIGHT);\n      }\n else {\n        lineValue=Util.formatInvariant(\"%.2fem\",(-cue.line - 1) * CSS_LINE_HEIGHT);\n        lineMeasuredFromEnd=true;\n      }\n    break;\ncase Cue.LINE_TYPE_FRACTION:case Cue.TYPE_UNSET:default:  lineValue=Util.formatInvariant(\"%.2f%%\",cue.line * 100);\nlineAnchorTranslatePercent=cue.verticalType == Cue.VERTICAL_TYPE_RL ? -anchorTypeToTranslatePercent(cue.lineAnchor) : anchorTypeToTranslatePercent(cue.lineAnchor);\n}\n}\n else {\nlineValue=Util.formatInvariant(\"%.2f%%\",(1.0f - bottomPaddingFraction) * 100);\nlineAnchorTranslatePercent=-100;\n}\nString size=cue.size != Cue.DIMEN_UNSET ? Util.formatInvariant(\"%.2f%%\",cue.size * 100) : \"fit-content\";\nString textAlign=convertAlignmentToCss(cue.textAlignment);\nString writingMode=convertVerticalTypeToCss(cue.verticalType);\nString cueTextSizeCssPx=convertTextSizeToCss(cue.textSizeType,cue.textSize);\nString windowCssColor=HtmlUtils.toCssRgba(cue.windowColorSet ? cue.windowColor : style.windowColor);\nString positionProperty;\nString lineProperty;\nswitch (cue.verticalType) {\ncase Cue.VERTICAL_TYPE_LR:lineProperty=lineMeasuredFromEnd ? \"right\" : \"left\";\npositionProperty=\"top\";\nbreak;\ncase Cue.VERTICAL_TYPE_RL:lineProperty=lineMeasuredFromEnd ? \"left\" : \"right\";\npositionProperty=\"top\";\nbreak;\ncase Cue.TYPE_UNSET:default:lineProperty=lineMeasuredFromEnd ? \"bottom\" : \"top\";\npositionProperty=\"left\";\n}\nString sizeProperty;\nint horizontalTranslatePercent;\nint verticalTranslatePercent;\nif (cue.verticalType == Cue.VERTICAL_TYPE_LR || cue.verticalType == Cue.VERTICAL_TYPE_RL) {\nsizeProperty=\"height\";\nhorizontalTranslatePercent=lineAnchorTranslatePercent;\nverticalTranslatePercent=positionAnchorTranslatePercent;\n}\n else {\nsizeProperty=\"width\";\nhorizontalTranslatePercent=positionAnchorTranslatePercent;\nverticalTranslatePercent=lineAnchorTranslatePercent;\n}\nSpannedToHtmlConverter.HtmlAndCss htmlAndCss=SpannedToHtmlConverter.convert(cue.text,getContext().getResources().getDisplayMetrics().density);\nfor (String cssSelector : cssRuleSets.keySet()) {\n@Nullable String previousCssDeclarationBlock=cssRuleSets.put(cssSelector,cssRuleSets.get(cssSelector));\nAssertions.checkState(previousCssDeclarationBlock == null || previousCssDeclarationBlock.equals(cssRuleSets.get(cssSelector)));\n}\nhtml.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS));\nif (cue.multiRowAlignment != null) {\nhtml.append(Util.formatInvariant(\"<span style='display:inline-block; text-align:%s;'>\",convertAlignmentToCss(cue.multiRowAlignment))).append(htmlAndCss.html).append(\"</span>\");\n}\n else {\nhtml.append(htmlAndCss.html);\n}\nhtml.append(\"</span>\").append(\"</div>\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5081,
        "startLineNumber" : 190,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < textCues.size(); i++) {\n  Cue cue=textCues.get(i);\n  float positionPercent=(cue.position != Cue.DIMEN_UNSET) ? (cue.position * 100) : 50;\n  int positionAnchorTranslatePercent=anchorTypeToTranslatePercent(cue.positionAnchor);\n  String lineValue;\n  boolean lineMeasuredFromEnd=false;\n  int lineAnchorTranslatePercent=0;\n  if (cue.line != Cue.DIMEN_UNSET) {\nswitch (cue.lineType) {\ncase Cue.LINE_TYPE_NUMBER:      if (cue.line >= 0) {\n        lineValue=Util.formatInvariant(\"%.2fem\",cue.line * CSS_LINE_HEIGHT);\n      }\n else {\n        lineValue=Util.formatInvariant(\"%.2fem\",(-cue.line - 1) * CSS_LINE_HEIGHT);\n        lineMeasuredFromEnd=true;\n      }\n    break;\ncase Cue.LINE_TYPE_FRACTION:case Cue.TYPE_UNSET:default:  lineValue=Util.formatInvariant(\"%.2f%%\",cue.line * 100);\nlineAnchorTranslatePercent=cue.verticalType == Cue.VERTICAL_TYPE_RL ? -anchorTypeToTranslatePercent(cue.lineAnchor) : anchorTypeToTranslatePercent(cue.lineAnchor);\n}\n}\n else {\nlineValue=Util.formatInvariant(\"%.2f%%\",(1.0f - bottomPaddingFraction) * 100);\nlineAnchorTranslatePercent=-100;\n}\nString size=cue.size != Cue.DIMEN_UNSET ? Util.formatInvariant(\"%.2f%%\",cue.size * 100) : \"fit-content\";\nString textAlign=convertAlignmentToCss(cue.textAlignment);\nString writingMode=convertVerticalTypeToCss(cue.verticalType);\nString cueTextSizeCssPx=convertTextSizeToCss(cue.textSizeType,cue.textSize);\nString windowCssColor=HtmlUtils.toCssRgba(cue.windowColorSet ? cue.windowColor : style.windowColor);\nString positionProperty;\nString lineProperty;\nswitch (cue.verticalType) {\ncase Cue.VERTICAL_TYPE_LR:lineProperty=lineMeasuredFromEnd ? \"right\" : \"left\";\npositionProperty=\"top\";\nbreak;\ncase Cue.VERTICAL_TYPE_RL:lineProperty=lineMeasuredFromEnd ? \"left\" : \"right\";\npositionProperty=\"top\";\nbreak;\ncase Cue.TYPE_UNSET:default:lineProperty=lineMeasuredFromEnd ? \"bottom\" : \"top\";\npositionProperty=\"left\";\n}\nString sizeProperty;\nint horizontalTranslatePercent;\nint verticalTranslatePercent;\nif (cue.verticalType == Cue.VERTICAL_TYPE_LR || cue.verticalType == Cue.VERTICAL_TYPE_RL) {\nsizeProperty=\"height\";\nhorizontalTranslatePercent=lineAnchorTranslatePercent;\nverticalTranslatePercent=positionAnchorTranslatePercent;\n}\n else {\nsizeProperty=\"width\";\nhorizontalTranslatePercent=positionAnchorTranslatePercent;\nverticalTranslatePercent=lineAnchorTranslatePercent;\n}\nSpannedToHtmlConverter.HtmlAndCss htmlAndCss=SpannedToHtmlConverter.convert(cue.text,getContext().getResources().getDisplayMetrics().density);\nfor (String cssSelector : cssRuleSets.keySet()) {\n@Nullable String previousCssDeclarationBlock=cssRuleSets.put(cssSelector,cssRuleSets.get(cssSelector));\nAssertions.checkState(previousCssDeclarationBlock == null || previousCssDeclarationBlock.equals(cssRuleSets.get(cssSelector)));\n}\nhtml.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS));\nif (cue.multiRowAlignment != null) {\nhtml.append(Util.formatInvariant(\"<span style='display:inline-block; text-align:%s;'>\",convertAlignmentToCss(cue.multiRowAlignment))).append(htmlAndCss.html).append(\"</span>\");\n}\n else {\nhtml.append(htmlAndCss.html);\n}\nhtml.append(\"</span>\").append(\"</div>\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 526,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6575,
        "startLineNumber" : 165,
        "startColumnNumber" : 31,
        "endLineNumber" : 335,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder html=new StringBuilder();\n  html.append(Util.formatInvariant(\"<body><div style='\" + \"-webkit-user-select:none;\" + \"position:fixed;\"+ \"top:0;\"+ \"bottom:0;\"+ \"left:0;\"+ \"right:0;\"+ \"color:%s;\"+ \"font-size:%s;\"+ \"line-height:%.2f;\"+ \"text-shadow:%s;\"+ \"'>\",HtmlUtils.toCssRgba(style.foregroundColor),convertTextSizeToCss(defaultTextSizeType,defaultTextSize),CSS_LINE_HEIGHT,convertCaptionStyleToCssTextShadow(style)));\n  Map<String,String> cssRuleSets=new HashMap<>();\n  cssRuleSets.put(HtmlUtils.cssAllClassDescendantsSelector(DEFAULT_BACKGROUND_CSS_CLASS),Util.formatInvariant(\"background-color:%s;\",HtmlUtils.toCssRgba(style.backgroundColor)));\n  for (int i=0; i < textCues.size(); i++) {\n    Cue cue=textCues.get(i);\n    float positionPercent=(cue.position != Cue.DIMEN_UNSET) ? (cue.position * 100) : 50;\n    int positionAnchorTranslatePercent=anchorTypeToTranslatePercent(cue.positionAnchor);\n    String lineValue;\n    boolean lineMeasuredFromEnd=false;\n    int lineAnchorTranslatePercent=0;\n    if (cue.line != Cue.DIMEN_UNSET) {\nswitch (cue.lineType) {\ncase Cue.LINE_TYPE_NUMBER:        if (cue.line >= 0) {\n          lineValue=Util.formatInvariant(\"%.2fem\",cue.line * CSS_LINE_HEIGHT);\n        }\n else {\n          lineValue=Util.formatInvariant(\"%.2fem\",(-cue.line - 1) * CSS_LINE_HEIGHT);\n          lineMeasuredFromEnd=true;\n        }\n      break;\ncase Cue.LINE_TYPE_FRACTION:case Cue.TYPE_UNSET:default:    lineValue=Util.formatInvariant(\"%.2f%%\",cue.line * 100);\n  lineAnchorTranslatePercent=cue.verticalType == Cue.VERTICAL_TYPE_RL ? -anchorTypeToTranslatePercent(cue.lineAnchor) : anchorTypeToTranslatePercent(cue.lineAnchor);\n}\n}\n else {\nlineValue=Util.formatInvariant(\"%.2f%%\",(1.0f - bottomPaddingFraction) * 100);\nlineAnchorTranslatePercent=-100;\n}\nString size=cue.size != Cue.DIMEN_UNSET ? Util.formatInvariant(\"%.2f%%\",cue.size * 100) : \"fit-content\";\nString textAlign=convertAlignmentToCss(cue.textAlignment);\nString writingMode=convertVerticalTypeToCss(cue.verticalType);\nString cueTextSizeCssPx=convertTextSizeToCss(cue.textSizeType,cue.textSize);\nString windowCssColor=HtmlUtils.toCssRgba(cue.windowColorSet ? cue.windowColor : style.windowColor);\nString positionProperty;\nString lineProperty;\nswitch (cue.verticalType) {\ncase Cue.VERTICAL_TYPE_LR:lineProperty=lineMeasuredFromEnd ? \"right\" : \"left\";\npositionProperty=\"top\";\nbreak;\ncase Cue.VERTICAL_TYPE_RL:lineProperty=lineMeasuredFromEnd ? \"left\" : \"right\";\npositionProperty=\"top\";\nbreak;\ncase Cue.TYPE_UNSET:default:lineProperty=lineMeasuredFromEnd ? \"bottom\" : \"top\";\npositionProperty=\"left\";\n}\nString sizeProperty;\nint horizontalTranslatePercent;\nint verticalTranslatePercent;\nif (cue.verticalType == Cue.VERTICAL_TYPE_LR || cue.verticalType == Cue.VERTICAL_TYPE_RL) {\nsizeProperty=\"height\";\nhorizontalTranslatePercent=lineAnchorTranslatePercent;\nverticalTranslatePercent=positionAnchorTranslatePercent;\n}\n else {\nsizeProperty=\"width\";\nhorizontalTranslatePercent=positionAnchorTranslatePercent;\nverticalTranslatePercent=lineAnchorTranslatePercent;\n}\nSpannedToHtmlConverter.HtmlAndCss htmlAndCss=SpannedToHtmlConverter.convert(cue.text,getContext().getResources().getDisplayMetrics().density);\nfor (String cssSelector : cssRuleSets.keySet()) {\n@Nullable String previousCssDeclarationBlock=cssRuleSets.put(cssSelector,cssRuleSets.get(cssSelector));\nAssertions.checkState(previousCssDeclarationBlock == null || previousCssDeclarationBlock.equals(cssRuleSets.get(cssSelector)));\n}\nhtml.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS));\nif (cue.multiRowAlignment != null) {\nhtml.append(Util.formatInvariant(\"<span style='display:inline-block; text-align:%s;'>\",convertAlignmentToCss(cue.multiRowAlignment))).append(htmlAndCss.html).append(\"</span>\");\n}\n else {\nhtml.append(htmlAndCss.html);\n}\nhtml.append(\"</span>\").append(\"</div>\");\n}\nhtml.append(\"</div></body></html>\");\nStringBuilder htmlHead=new StringBuilder();\nhtmlHead.append(\"<html><head><style>\");\nfor (String cssSelector : cssRuleSets.keySet()) {\nhtmlHead.append(cssSelector).append(\"{\").append(cssRuleSets.get(cssSelector)).append(\"}\");\n}\nhtmlHead.append(\"</style></head>\");\nhtml.insert(0,htmlHead.toString());\nwebView.loadData(Base64.encodeToString(html.toString().getBytes(Charsets.UTF_8),Base64.NO_PADDING),\"text/html\",\"base64\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 678,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6604,
        "startLineNumber" : 165,
        "startColumnNumber" : 2,
        "endLineNumber" : 335,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void updateWebView(){\n  StringBuilder html=new StringBuilder();\n  html.append(Util.formatInvariant(\"<body><div style='\" + \"-webkit-user-select:none;\" + \"position:fixed;\"+ \"top:0;\"+ \"bottom:0;\"+ \"left:0;\"+ \"right:0;\"+ \"color:%s;\"+ \"font-size:%s;\"+ \"line-height:%.2f;\"+ \"text-shadow:%s;\"+ \"'>\",HtmlUtils.toCssRgba(style.foregroundColor),convertTextSizeToCss(defaultTextSizeType,defaultTextSize),CSS_LINE_HEIGHT,convertCaptionStyleToCssTextShadow(style)));\n  Map<String,String> cssRuleSets=new HashMap<>();\n  cssRuleSets.put(HtmlUtils.cssAllClassDescendantsSelector(DEFAULT_BACKGROUND_CSS_CLASS),Util.formatInvariant(\"background-color:%s;\",HtmlUtils.toCssRgba(style.backgroundColor)));\n  for (int i=0; i < textCues.size(); i++) {\n    Cue cue=textCues.get(i);\n    float positionPercent=(cue.position != Cue.DIMEN_UNSET) ? (cue.position * 100) : 50;\n    int positionAnchorTranslatePercent=anchorTypeToTranslatePercent(cue.positionAnchor);\n    String lineValue;\n    boolean lineMeasuredFromEnd=false;\n    int lineAnchorTranslatePercent=0;\n    if (cue.line != Cue.DIMEN_UNSET) {\nswitch (cue.lineType) {\ncase Cue.LINE_TYPE_NUMBER:        if (cue.line >= 0) {\n          lineValue=Util.formatInvariant(\"%.2fem\",cue.line * CSS_LINE_HEIGHT);\n        }\n else {\n          lineValue=Util.formatInvariant(\"%.2fem\",(-cue.line - 1) * CSS_LINE_HEIGHT);\n          lineMeasuredFromEnd=true;\n        }\n      break;\ncase Cue.LINE_TYPE_FRACTION:case Cue.TYPE_UNSET:default:    lineValue=Util.formatInvariant(\"%.2f%%\",cue.line * 100);\n  lineAnchorTranslatePercent=cue.verticalType == Cue.VERTICAL_TYPE_RL ? -anchorTypeToTranslatePercent(cue.lineAnchor) : anchorTypeToTranslatePercent(cue.lineAnchor);\n}\n}\n else {\nlineValue=Util.formatInvariant(\"%.2f%%\",(1.0f - bottomPaddingFraction) * 100);\nlineAnchorTranslatePercent=-100;\n}\nString size=cue.size != Cue.DIMEN_UNSET ? Util.formatInvariant(\"%.2f%%\",cue.size * 100) : \"fit-content\";\nString textAlign=convertAlignmentToCss(cue.textAlignment);\nString writingMode=convertVerticalTypeToCss(cue.verticalType);\nString cueTextSizeCssPx=convertTextSizeToCss(cue.textSizeType,cue.textSize);\nString windowCssColor=HtmlUtils.toCssRgba(cue.windowColorSet ? cue.windowColor : style.windowColor);\nString positionProperty;\nString lineProperty;\nswitch (cue.verticalType) {\ncase Cue.VERTICAL_TYPE_LR:lineProperty=lineMeasuredFromEnd ? \"right\" : \"left\";\npositionProperty=\"top\";\nbreak;\ncase Cue.VERTICAL_TYPE_RL:lineProperty=lineMeasuredFromEnd ? \"left\" : \"right\";\npositionProperty=\"top\";\nbreak;\ncase Cue.TYPE_UNSET:default:lineProperty=lineMeasuredFromEnd ? \"bottom\" : \"top\";\npositionProperty=\"left\";\n}\nString sizeProperty;\nint horizontalTranslatePercent;\nint verticalTranslatePercent;\nif (cue.verticalType == Cue.VERTICAL_TYPE_LR || cue.verticalType == Cue.VERTICAL_TYPE_RL) {\nsizeProperty=\"height\";\nhorizontalTranslatePercent=lineAnchorTranslatePercent;\nverticalTranslatePercent=positionAnchorTranslatePercent;\n}\n else {\nsizeProperty=\"width\";\nhorizontalTranslatePercent=positionAnchorTranslatePercent;\nverticalTranslatePercent=lineAnchorTranslatePercent;\n}\nSpannedToHtmlConverter.HtmlAndCss htmlAndCss=SpannedToHtmlConverter.convert(cue.text,getContext().getResources().getDisplayMetrics().density);\nfor (String cssSelector : cssRuleSets.keySet()) {\n@Nullable String previousCssDeclarationBlock=cssRuleSets.put(cssSelector,cssRuleSets.get(cssSelector));\nAssertions.checkState(previousCssDeclarationBlock == null || previousCssDeclarationBlock.equals(cssRuleSets.get(cssSelector)));\n}\nhtml.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue))).append(Util.formatInvariant(\"<span class='%s'>\",DEFAULT_BACKGROUND_CSS_CLASS));\nif (cue.multiRowAlignment != null) {\nhtml.append(Util.formatInvariant(\"<span style='display:inline-block; text-align:%s;'>\",convertAlignmentToCss(cue.multiRowAlignment))).append(htmlAndCss.html).append(\"</span>\");\n}\n else {\nhtml.append(htmlAndCss.html);\n}\nhtml.append(\"</span>\").append(\"</div>\");\n}\nhtml.append(\"</div></body></html>\");\nStringBuilder htmlHead=new StringBuilder();\nhtmlHead.append(\"<html><head><style>\");\nfor (String cssSelector : cssRuleSets.keySet()) {\nhtmlHead.append(cssSelector).append(\"{\").append(cssRuleSets.get(cssSelector)).append(\"}\");\n}\nhtmlHead.append(\"</style></head>\");\nhtml.insert(0,htmlHead.toString());\nwebView.loadData(Base64.encodeToString(html.toString().getBytes(Charsets.UTF_8),Base64.NO_PADDING),\"text/html\",\"base64\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 682,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1054,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 304,
        "endColumnNumber" : 55
      },
      "nodeContext" : "html.append(Util.formatInvariant(\"<div style='\" + \"position:absolute;\" + \"z-index:%s;\"+ \"%s:%.2f%%;\"+ \"%s:%s;\"+ \"%s:%s;\"+ \"text-align:%s;\"+ \"writing-mode:%s;\"+ \"font-size:%s;\"+ \"background-color:%s;\"+ \"transform:translate(%s%%,%s%%)\"+ \"%s;\"+ \"'>\",i,positionProperty,positionPercent,lineProperty,lineValue,sizeProperty,size,textAlign,writingMode,cueTextSizeCssPx,windowCssColor,horizontalTranslatePercent,verticalTranslatePercent,getBlockShearTransformFunction(cue)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 4
    },
    "tokenLength" : 56,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 1026,
    "startLineNumber" : 277,
    "startColumnNumber" : 14,
    "endLineNumber" : 304,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}