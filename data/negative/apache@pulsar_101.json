{
  "id" : 101,
  "expression" : "\"test-sub-typed\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/sources/GenericRecordSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"test-sub-typed\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 204,
      "startColumnNumber" : 30,
      "endLineNumber" : 204,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 201,
        "startColumnNumber" : 41,
        "endLineNumber" : 204,
        "endColumnNumber" : 47
      },
      "nodeContext" : "client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 201,
        "startColumnNumber" : 41,
        "endLineNumber" : 205,
        "endColumnNumber" : 78
      },
      "nodeContext" : "client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 201,
        "startColumnNumber" : 41,
        "endLineNumber" : 206,
        "endColumnNumber" : 38
      },
      "nodeContext" : "client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 201,
        "startColumnNumber" : 41,
        "endLineNumber" : 207,
        "endColumnNumber" : 24
      },
      "nodeContext" : "client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 201,
        "startColumnNumber" : 25,
        "endLineNumber" : 207,
        "endColumnNumber" : 24
      },
      "nodeContext" : "typedConsumer=client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 31,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 25
      },
      "nodeContext" : "@Cleanup Consumer<MyBean> typedConsumer=client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 39,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2112,
        "startLineNumber" : 168,
        "startColumnNumber" : 74,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(container.getPlainTextServiceUrl()).build();\n  @Cleanup Consumer<GenericRecord> consumer=client.newConsumer(Schema.AUTO_CONSUME()).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe();\n  for (int i=0; i < numMessages; i++) {\n    Message<GenericRecord> msg=consumer.receive(10,TimeUnit.SECONDS);\n    if (msg == null) {\n      fail(\"message \" + i + \" not received in time\");\n      return;\n    }\n    log.info(\"received {}\",msg.getValue());\n    msg.getValue().getFields().forEach(f -> {\n      log.info(\"field {} {}\",f,msg.getValue().getField(f));\n    }\n);\n    String text=(String)msg.getValue().getField(\"text\");\n    int number=(Integer)msg.getValue().getField(\"number\");\n    assertEquals(text,\"value-\" + number);\n  }\n  @Cleanup Consumer<MyBean> typedConsumer=client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe();\n  for (int i=0; i < numMessages; i++) {\n    Message<MyBean> msg=typedConsumer.receive(10,TimeUnit.SECONDS);\n    if (msg == null) {\n      fail(\"message \" + i + \" not received in time\");\n      return;\n    }\n    log.info(\"received {}\",msg.getValue());\n    String text=msg.getValue().getText();\n    int number=msg.getValue().getNumber();\n    assertEquals(text,\"value-\" + number);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2273,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void consumeMessages(StandaloneContainer container,String outputTopic,int numMessages) throws Exception {\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(container.getPlainTextServiceUrl()).build();\n  @Cleanup Consumer<GenericRecord> consumer=client.newConsumer(Schema.AUTO_CONSUME()).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe();\n  for (int i=0; i < numMessages; i++) {\n    Message<GenericRecord> msg=consumer.receive(10,TimeUnit.SECONDS);\n    if (msg == null) {\n      fail(\"message \" + i + \" not received in time\");\n      return;\n    }\n    log.info(\"received {}\",msg.getValue());\n    msg.getValue().getFields().forEach(f -> {\n      log.info(\"field {} {}\",f,msg.getValue().getField(f));\n    }\n);\n    String text=(String)msg.getValue().getField(\"text\");\n    int number=(Integer)msg.getValue().getField(\"number\");\n    assertEquals(text,\"value-\" + number);\n  }\n  @Cleanup Consumer<MyBean> typedConsumer=client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).startMessageIdInclusive().subscribe();\n  for (int i=0; i < numMessages; i++) {\n    Message<MyBean> msg=typedConsumer.receive(10,TimeUnit.SECONDS);\n    if (msg == null) {\n      fail(\"message \" + i + \" not received in time\");\n      return;\n    }\n    log.info(\"received {}\",msg.getValue());\n    String text=msg.getValue().getText();\n    int number=msg.getValue().getNumber();\n    assertEquals(text,\"value-\" + number);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 291,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 201,
        "startColumnNumber" : 41,
        "endLineNumber" : 204,
        "endColumnNumber" : 47
      },
      "nodeContext" : "client.newConsumer(Schema.AVRO(MyBean.class)).topic(outputTopic).subscriptionType(SubscriptionType.Exclusive).subscriptionName(\"test-sub-typed\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 204,
    "startColumnNumber" : 30,
    "endLineNumber" : 204,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}