{
  "id" : 179,
  "expression" : "false",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/GridColumnRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 93,
      "startColumnNumber" : 31,
      "endLineNumber" : 93,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "drawSelected=false",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "boolean drawSelected=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5858,
        "startLineNumber" : 82,
        "startColumnNumber" : 99,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean hasFilters=grid.getContentProvider().isElementSupportsFilter(element);\n  int sortOrder=grid.getContentProvider().getSortOrder(element);\n  final Rectangle sortBounds=getSortControlBounds();\n  final Rectangle filterBounds=getFilterControlBounds();\n  boolean flat=true;\n  boolean drawSelected=false;\n  if (selected || hovering) {\n    gc.setBackground(grid.getContentProvider().getCellHeaderSelectionBackground(element));\n  }\n else {\n    gc.setBackground(grid.getContentProvider().getCellHeaderBackground(element));\n  }\n  gc.setForeground(grid.getContentProvider().getCellHeaderForeground(element));\n  gc.fillRectangle(bounds.x,bounds.y,bounds.width,bounds.height);\n  int pushedDrawingOffset=0;\n  if (hovering) {\n    pushedDrawingOffset=1;\n  }\n  int x=LEFT_MARGIN;\n  Image columnImage=getColumnImage(element);\n  if (columnImage != null) {\n    int y=bounds.y + pushedDrawingOffset + TOP_MARGIN;\n    gc.drawImage(columnImage,bounds.x + x + pushedDrawingOffset,y);\n    x+=columnImage.getBounds().width + IMAGE_SPACING;\n  }\n  int width=bounds.width - x;\n  if (sortOrder == SWT.NONE) {\n    width-=RIGHT_MARGIN;\n  }\n else {\n    width-=ARROW_MARGIN + sortBounds.width;\n  }\n  if (hasFilters) {\n    width-=filterBounds.width;\n  }\n  int y=bounds.y + TOP_MARGIN;\n{\n    String text=getColumnText(element);\n    text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n    gc.setFont(getColumnFont(element));\n    gc.drawString(text,bounds.x + x + pushedDrawingOffset,y + pushedDrawingOffset,isTransparent);\n  }\n  if (sortOrder != SWT.NONE) {\n    if (drawSelected) {\n      sortBounds.x=bounds.x + bounds.width - ARROW_MARGIN - sortBounds.width + 1;\n      sortBounds.y=y;\n    }\n else {\n      sortBounds.x=bounds.x + bounds.width - ARROW_MARGIN - sortBounds.width;\n      sortBounds.y=y;\n    }\n    sortBounds.x+=IMAGE_SPACING;\n    paintSort(gc,sortBounds,sortOrder);\n  }\n  if (hasFilters) {\n    gc.drawImage(IMAGE_FILTER,bounds.x + bounds.width - filterBounds.width - (sortOrder != SWT.NONE ? IMAGE_SPACING + sortBounds.width + 1 : ARROW_MARGIN),y);\n  }\n{\n    String text=getColumnDescription(element);\n    if (!CommonUtils.isEmpty(text)) {\n      y+=TOP_MARGIN + grid.fontMetrics.getHeight();\n      text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n      gc.setFont(grid.normalFont);\n      gc.drawString(text,bounds.x + x + pushedDrawingOffset,y + pushedDrawingOffset,isTransparent);\n    }\n  }\n  if (element == grid.getFocusColumnElement()) {\n    drawSelected=selected;\n    if (drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n    }\n else {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));\n    }\n    gc.drawLine(bounds.x,bounds.y,bounds.x + bounds.width - 1,bounds.y);\n    gc.drawLine(bounds.x,bounds.y,bounds.x,bounds.y + bounds.height - 1);\n    if (!drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));\n      gc.drawLine(bounds.x + 1,bounds.y + 1,bounds.x + bounds.width - 2,bounds.y + 1);\n      gc.drawLine(bounds.x + 1,bounds.y + 1,bounds.x + 1,bounds.y + bounds.height - 2);\n    }\n    if (drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n    }\n else {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW));\n    }\n    gc.drawLine(bounds.x + bounds.width - 1,bounds.y,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    gc.drawLine(bounds.x,bounds.y + bounds.height - 1,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    if (!drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n      gc.drawLine(bounds.x + bounds.width - 2,bounds.y + 1,bounds.x + bounds.width - 2,bounds.y + bounds.height - 2);\n      gc.drawLine(bounds.x + 1,bounds.y + bounds.height - 2,bounds.x + bounds.width - 2,bounds.y + bounds.height - 2);\n    }\n  }\n else {\n    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW));\n    gc.drawLine(bounds.x + bounds.width - 1,bounds.y,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    gc.drawLine(bounds.x,bounds.y + bounds.height - 1,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n  }\n  gc.setFont(grid.normalFont);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 837,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5953,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void paint(GC gc,Rectangle bounds,boolean selected,boolean hovering,Object element){\n  boolean hasFilters=grid.getContentProvider().isElementSupportsFilter(element);\n  int sortOrder=grid.getContentProvider().getSortOrder(element);\n  final Rectangle sortBounds=getSortControlBounds();\n  final Rectangle filterBounds=getFilterControlBounds();\n  boolean flat=true;\n  boolean drawSelected=false;\n  if (selected || hovering) {\n    gc.setBackground(grid.getContentProvider().getCellHeaderSelectionBackground(element));\n  }\n else {\n    gc.setBackground(grid.getContentProvider().getCellHeaderBackground(element));\n  }\n  gc.setForeground(grid.getContentProvider().getCellHeaderForeground(element));\n  gc.fillRectangle(bounds.x,bounds.y,bounds.width,bounds.height);\n  int pushedDrawingOffset=0;\n  if (hovering) {\n    pushedDrawingOffset=1;\n  }\n  int x=LEFT_MARGIN;\n  Image columnImage=getColumnImage(element);\n  if (columnImage != null) {\n    int y=bounds.y + pushedDrawingOffset + TOP_MARGIN;\n    gc.drawImage(columnImage,bounds.x + x + pushedDrawingOffset,y);\n    x+=columnImage.getBounds().width + IMAGE_SPACING;\n  }\n  int width=bounds.width - x;\n  if (sortOrder == SWT.NONE) {\n    width-=RIGHT_MARGIN;\n  }\n else {\n    width-=ARROW_MARGIN + sortBounds.width;\n  }\n  if (hasFilters) {\n    width-=filterBounds.width;\n  }\n  int y=bounds.y + TOP_MARGIN;\n{\n    String text=getColumnText(element);\n    text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n    gc.setFont(getColumnFont(element));\n    gc.drawString(text,bounds.x + x + pushedDrawingOffset,y + pushedDrawingOffset,isTransparent);\n  }\n  if (sortOrder != SWT.NONE) {\n    if (drawSelected) {\n      sortBounds.x=bounds.x + bounds.width - ARROW_MARGIN - sortBounds.width + 1;\n      sortBounds.y=y;\n    }\n else {\n      sortBounds.x=bounds.x + bounds.width - ARROW_MARGIN - sortBounds.width;\n      sortBounds.y=y;\n    }\n    sortBounds.x+=IMAGE_SPACING;\n    paintSort(gc,sortBounds,sortOrder);\n  }\n  if (hasFilters) {\n    gc.drawImage(IMAGE_FILTER,bounds.x + bounds.width - filterBounds.width - (sortOrder != SWT.NONE ? IMAGE_SPACING + sortBounds.width + 1 : ARROW_MARGIN),y);\n  }\n{\n    String text=getColumnDescription(element);\n    if (!CommonUtils.isEmpty(text)) {\n      y+=TOP_MARGIN + grid.fontMetrics.getHeight();\n      text=UITextUtils.getShortString(grid.fontMetrics,text,width);\n      gc.setFont(grid.normalFont);\n      gc.drawString(text,bounds.x + x + pushedDrawingOffset,y + pushedDrawingOffset,isTransparent);\n    }\n  }\n  if (element == grid.getFocusColumnElement()) {\n    drawSelected=selected;\n    if (drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n    }\n else {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));\n    }\n    gc.drawLine(bounds.x,bounds.y,bounds.x + bounds.width - 1,bounds.y);\n    gc.drawLine(bounds.x,bounds.y,bounds.x,bounds.y + bounds.height - 1);\n    if (!drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));\n      gc.drawLine(bounds.x + 1,bounds.y + 1,bounds.x + bounds.width - 2,bounds.y + 1);\n      gc.drawLine(bounds.x + 1,bounds.y + 1,bounds.x + 1,bounds.y + bounds.height - 2);\n    }\n    if (drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n    }\n else {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW));\n    }\n    gc.drawLine(bounds.x + bounds.width - 1,bounds.y,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    gc.drawLine(bounds.x,bounds.y + bounds.height - 1,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    if (!drawSelected) {\n      gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));\n      gc.drawLine(bounds.x + bounds.width - 2,bounds.y + 1,bounds.x + bounds.width - 2,bounds.y + bounds.height - 2);\n      gc.drawLine(bounds.x + 1,bounds.y + bounds.height - 2,bounds.x + bounds.width - 2,bounds.y + bounds.height - 2);\n    }\n  }\n else {\n    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW));\n    gc.drawLine(bounds.x + bounds.width - 1,bounds.y,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n    gc.drawLine(bounds.x,bounds.y + bounds.height - 1,bounds.x + bounds.width - 1,bounds.y + bounds.height - 1);\n  }\n  gc.setFont(grid.normalFont);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 859,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "boolean drawSelected=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 93,
    "startColumnNumber" : 31,
    "endLineNumber" : 93,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}