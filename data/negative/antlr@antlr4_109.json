{
  "id" : 109,
  "expression" : "new GrammarASTAdaptor()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/codegen/model/RuleFunction.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new GrammarASTAdaptor()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 258,
      "startColumnNumber" : 94,
      "endLineNumber" : 258,
      "endColumnNumber" : 117
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 258,
        "startColumnNumber" : 69,
        "endLineNumber" : 258,
        "endColumnNumber" : 123
      },
      "nodeContext" : "new CommonTreeNodeStream(new GrammarASTAdaptor(),ast)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 258,
        "startColumnNumber" : 39,
        "endLineNumber" : 258,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 258,
        "startColumnNumber" : 29,
        "endLineNumber" : 258,
        "endColumnNumber" : 124
      },
      "nodeContext" : "visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 258,
        "startColumnNumber" : 3,
        "endLineNumber" : 258,
        "endColumnNumber" : 125
      },
      "nodeContext" : "ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 257,
        "startColumnNumber" : 6,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n  visitor.outerAlternative();\n  if (visitor.frequencies.size() != 1) {\n    factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR);\n    return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n  }\n  return new Pair<>(visitor.getMinFrequencies(),visitor.frequencies.peek());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 654,
        "startLineNumber" : 257,
        "startColumnNumber" : 2,
        "endLineNumber" : 270,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n  visitor.outerAlternative();\n  if (visitor.frequencies.size() != 1) {\n    factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR);\n    return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n  }\n  return new Pair<>(visitor.getMinFrequencies(),visitor.frequencies.peek());\n}\n catch (RecognitionException ex) {\n  factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR,ex);\n  return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 256,
        "startColumnNumber" : 100,
        "endLineNumber" : 271,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n    visitor.outerAlternative();\n    if (visitor.frequencies.size() != 1) {\n      factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR);\n      return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n    }\n    return new Pair<>(visitor.getMinFrequencies(),visitor.frequencies.peek());\n  }\n catch (  RecognitionException ex) {\n    factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR,ex);\n    return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 841,
        "startLineNumber" : 255,
        "startColumnNumber" : 1,
        "endLineNumber" : 271,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given list of X and r refs in alt, compute how many of each there are \n */\nprotected Pair<FrequencySet<String>,FrequencySet<String>> getElementFrequenciesForAlt(AltAST ast){\n  try {\n    ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n    visitor.outerAlternative();\n    if (visitor.frequencies.size() != 1) {\n      factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR);\n      return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n    }\n    return new Pair<>(visitor.getMinFrequencies(),visitor.frequencies.peek());\n  }\n catch (  RecognitionException ex) {\n    factory.getGrammar().tool.errMgr.toolError(ErrorType.INTERNAL_ERROR,ex);\n    return new Pair<>(new FrequencySet<String>(),new FrequencySet<String>());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 258,
        "startColumnNumber" : 3,
        "endLineNumber" : 258,
        "endColumnNumber" : 125
      },
      "nodeContext" : "ElementFrequenciesVisitor visitor=new ElementFrequenciesVisitor(new CommonTreeNodeStream(new GrammarASTAdaptor(),ast));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.parse.GrammarASTAdaptor"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 258,
    "startColumnNumber" : 94,
    "endLineNumber" : 258,
    "endColumnNumber" : 117
  } ],
  "layoutRelationDataList" : [ ]
}