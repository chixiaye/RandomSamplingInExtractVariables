{
  "id" : 99,
  "expression" : "isPasswordless()",
  "projectName" : "keycloak@keycloak",
  "commitID" : "e2514ea2e60fca7569515da686dc8add7d109a10",
  "filePath" : "testsuite/integration-arquillian/tests/other/webauthn/src/test/java/org/keycloak/testsuite/webauthn/registration/PubKeySignRegisterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isPasswordless()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 85,
      "startColumnNumber" : 100,
      "endLineNumber" : 85,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 85,
        "startColumnNumber" : 46,
        "endLineNumber" : 85,
        "endColumnNumber" : 117
      },
      "nodeContext" : "new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 85,
        "startColumnNumber" : 34,
        "endLineNumber" : 85,
        "endColumnNumber" : 117
      },
      "nodeContext" : "realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 118
      },
      "nodeContext" : "WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 84,
        "startColumnNumber" : 39,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n  assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!algorithms.isEmpty()) {\n  WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n  assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1578,
        "startLineNumber" : 82,
        "startColumnNumber" : 27,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!algorithms.isEmpty()) {\n    WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n    assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n  }\n  registerDefaultUser(shouldSuccess);\n  assertThat(webAuthnErrorPage.isCurrent(),is(!shouldSuccess));\n  if (!shouldSuccess) {\n    final String expectedMessage=getExpectedMessageByDriver(\"NotSupportedError: Operation is not supported\",\"The operation either timed out or was not allowed\");\n    assertThat(webAuthnErrorPage.getError(),containsString(expectedMessage));\n    return;\n  }\n  final String credentialType=getCredentialType();\n  getTestingClient().server(TEST_REALM_NAME).run(session -> {\n    final WebAuthnDataWrapper dataWrapper=new WebAuthnDataWrapper(session,USERNAME,credentialType);\n    assertThat(dataWrapper,notNullValue());\n    final WebAuthnCredentialData data=dataWrapper.getWebAuthnData();\n    assertThat(data,notNullValue());\n    final COSEKey pubKey=dataWrapper.getKey();\n    assertThat(pubKey,notNullValue());\n    assertThat(pubKey.getAlgorithm(),notNullValue());\n    assertThat(pubKey.getAlgorithm().getValue(),is(selectedAlgorithm.getValue()));\n    assertThat(pubKey.hasPublicKey(),is(true));\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1804,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Closeable u=getWebAuthnRealmUpdater().setWebAuthnPolicySignatureAlgorithms(algorithms).update()){\n  if (!algorithms.isEmpty()) {\n    WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n    assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n  }\n  registerDefaultUser(shouldSuccess);\n  assertThat(webAuthnErrorPage.isCurrent(),is(!shouldSuccess));\n  if (!shouldSuccess) {\n    final String expectedMessage=getExpectedMessageByDriver(\"NotSupportedError: Operation is not supported\",\"The operation either timed out or was not allowed\");\n    assertThat(webAuthnErrorPage.getError(),containsString(expectedMessage));\n    return;\n  }\n  final String credentialType=getCredentialType();\n  getTestingClient().server(TEST_REALM_NAME).run(session -> {\n    final WebAuthnDataWrapper dataWrapper=new WebAuthnDataWrapper(session,USERNAME,credentialType);\n    assertThat(dataWrapper,notNullValue());\n    final WebAuthnCredentialData data=dataWrapper.getWebAuthnData();\n    assertThat(data,notNullValue());\n    final COSEKey pubKey=dataWrapper.getKey();\n    assertThat(pubKey,notNullValue());\n    assertThat(pubKey.getAlgorithm(),notNullValue());\n    assertThat(pubKey.getAlgorithm().getValue(),is(selectedAlgorithm.getValue()));\n    assertThat(pubKey.hasPublicKey(),is(true));\n  }\n);\n}\n catch (IOException e) {\n  throw new RuntimeException(e.getCause());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1869,
        "startLineNumber" : 77,
        "startColumnNumber" : 134,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(algorithms,notNullValue());\n  try (Closeable u=getWebAuthnRealmUpdater().setWebAuthnPolicySignatureAlgorithms(algorithms).update()){\n    if (!algorithms.isEmpty()) {\n      WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n      assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n    }\n    registerDefaultUser(shouldSuccess);\n    assertThat(webAuthnErrorPage.isCurrent(),is(!shouldSuccess));\n    if (!shouldSuccess) {\n      final String expectedMessage=getExpectedMessageByDriver(\"NotSupportedError: Operation is not supported\",\"The operation either timed out or was not allowed\");\n      assertThat(webAuthnErrorPage.getError(),containsString(expectedMessage));\n      return;\n    }\n    final String credentialType=getCredentialType();\n    getTestingClient().server(TEST_REALM_NAME).run(session -> {\n      final WebAuthnDataWrapper dataWrapper=new WebAuthnDataWrapper(session,USERNAME,credentialType);\n      assertThat(dataWrapper,notNullValue());\n      final WebAuthnCredentialData data=dataWrapper.getWebAuthnData();\n      assertThat(data,notNullValue());\n      final COSEKey pubKey=dataWrapper.getKey();\n      assertThat(pubKey,notNullValue());\n      assertThat(pubKey.getAlgorithm(),notNullValue());\n      assertThat(pubKey.getAlgorithm().getValue(),is(selectedAlgorithm.getValue()));\n      assertThat(pubKey.hasPublicKey(),is(true));\n    }\n);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e.getCause());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1999,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void assertPublicKeyAlgorithms(boolean shouldSuccess,COSEAlgorithmIdentifier selectedAlgorithm,List<String> algorithms){\n  assertThat(algorithms,notNullValue());\n  try (Closeable u=getWebAuthnRealmUpdater().setWebAuthnPolicySignatureAlgorithms(algorithms).update()){\n    if (!algorithms.isEmpty()) {\n      WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n      assertThat(realmData.getSignatureAlgorithms(),is(algorithms));\n    }\n    registerDefaultUser(shouldSuccess);\n    assertThat(webAuthnErrorPage.isCurrent(),is(!shouldSuccess));\n    if (!shouldSuccess) {\n      final String expectedMessage=getExpectedMessageByDriver(\"NotSupportedError: Operation is not supported\",\"The operation either timed out or was not allowed\");\n      assertThat(webAuthnErrorPage.getError(),containsString(expectedMessage));\n      return;\n    }\n    final String credentialType=getCredentialType();\n    getTestingClient().server(TEST_REALM_NAME).run(session -> {\n      final WebAuthnDataWrapper dataWrapper=new WebAuthnDataWrapper(session,USERNAME,credentialType);\n      assertThat(dataWrapper,notNullValue());\n      final WebAuthnCredentialData data=dataWrapper.getWebAuthnData();\n      assertThat(data,notNullValue());\n      final COSEKey pubKey=dataWrapper.getKey();\n      assertThat(pubKey,notNullValue());\n      assertThat(pubKey.getAlgorithm(),notNullValue());\n      assertThat(pubKey.getAlgorithm().getValue(),is(selectedAlgorithm.getValue()));\n      assertThat(pubKey.hasPublicKey(),is(true));\n    }\n);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e.getCause());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 118
      },
      "nodeContext" : "WebAuthnRealmData realmData=new WebAuthnRealmData(testRealm().toRepresentation(),isPasswordless());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 85,
    "startColumnNumber" : 100,
    "endLineNumber" : 85,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ ]
}