{
  "id" : 43,
  "expression" : "typeEnumeration",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/third_party/java/proguard/proguard6.2.2/src/proguard/backport/StringConcatenationConverter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typeEnumeration",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 106,
      "startColumnNumber" : 23,
      "endLineNumber" : 106,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 23,
        "endLineNumber" : 106,
        "endColumnNumber" : 53
      },
      "nodeContext" : "typeEnumeration.hasMoreTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (typeEnumeration.hasMoreTypes()) {\n  types.add(typeEnumeration.nextType());\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5856,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String descriptor=invokeDynamicConstant.getType(programClass);\n  InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n  appendChainComposer=new InstructionSequenceBuilder(programClass);\n  estimatedStringLength=0;\n  InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n  List<String> types=new ArrayList<String>();\n  while (typeEnumeration.hasMoreTypes()) {\n    types.add(typeEnumeration.nextType());\n  }\n  int variableIndex=codeAttribute.u2maxLocals;\n  ListIterator<String> typeIterator=types.listIterator(types.size());\n  while (typeIterator.hasPrevious()) {\n    String type=typeIterator.previous();\n    mainReplacementComposer.store(variableIndex,type);\n    variableIndex+=ClassUtil.internalTypeSize(type);\n  }\n  typeIterator=types.listIterator();\n  for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:      String type=typeIterator.next();\n    estimatedStringLength+=typicalStringLengthFromType(type);\n  int variableSize=ClassUtil.internalTypeSize(type);\nvariableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5901,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (concatenationRecipe != null) {\n  String descriptor=invokeDynamicConstant.getType(programClass);\n  InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n  appendChainComposer=new InstructionSequenceBuilder(programClass);\n  estimatedStringLength=0;\n  InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n  List<String> types=new ArrayList<String>();\n  while (typeEnumeration.hasMoreTypes()) {\n    types.add(typeEnumeration.nextType());\n  }\n  int variableIndex=codeAttribute.u2maxLocals;\n  ListIterator<String> typeIterator=types.listIterator(types.size());\n  while (typeIterator.hasPrevious()) {\n    String type=typeIterator.previous();\n    mainReplacementComposer.store(variableIndex,type);\n    variableIndex+=ClassUtil.internalTypeSize(type);\n  }\n  typeIterator=types.listIterator();\n  for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:      String type=typeIterator.next();\n    estimatedStringLength+=typicalStringLengthFromType(type);\n  int variableSize=ClassUtil.internalTypeSize(type);\nvariableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6498,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ProgramClass programClass=(ProgramClass)clazz;\n  InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n  referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n  concatenationRecipe=null;\n  concatenationConstants=null;\n  programClass.attributesAccept(this);\n  if (concatenationRecipe != null) {\n    String descriptor=invokeDynamicConstant.getType(programClass);\n    InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n    appendChainComposer=new InstructionSequenceBuilder(programClass);\n    estimatedStringLength=0;\n    InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n    List<String> types=new ArrayList<String>();\n    while (typeEnumeration.hasMoreTypes()) {\n      types.add(typeEnumeration.nextType());\n    }\n    int variableIndex=codeAttribute.u2maxLocals;\n    ListIterator<String> typeIterator=types.listIterator(types.size());\n    while (typeIterator.hasPrevious()) {\n      String type=typeIterator.previous();\n      mainReplacementComposer.store(variableIndex,type);\n      variableIndex+=ClassUtil.internalTypeSize(type);\n    }\n    typeIterator=types.listIterator();\n    for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:        String type=typeIterator.next();\n      estimatedStringLength+=typicalStringLengthFromType(type);\n    int variableSize=ClassUtil.internalTypeSize(type);\n  variableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6579,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n  ProgramClass programClass=(ProgramClass)clazz;\n  InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n  referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n  concatenationRecipe=null;\n  concatenationConstants=null;\n  programClass.attributesAccept(this);\n  if (concatenationRecipe != null) {\n    String descriptor=invokeDynamicConstant.getType(programClass);\n    InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n    appendChainComposer=new InstructionSequenceBuilder(programClass);\n    estimatedStringLength=0;\n    InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n    List<String> types=new ArrayList<String>();\n    while (typeEnumeration.hasMoreTypes()) {\n      types.add(typeEnumeration.nextType());\n    }\n    int variableIndex=codeAttribute.u2maxLocals;\n    ListIterator<String> typeIterator=types.listIterator(types.size());\n    while (typeIterator.hasPrevious()) {\n      String type=typeIterator.previous();\n      mainReplacementComposer.store(variableIndex,type);\n      variableIndex+=ClassUtil.internalTypeSize(type);\n    }\n    typeIterator=types.listIterator();\n    for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:        String type=typeIterator.next();\n      estimatedStringLength+=typicalStringLengthFromType(type);\n    int variableSize=ClassUtil.internalTypeSize(type);\n  variableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6595,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n    ProgramClass programClass=(ProgramClass)clazz;\n    InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n    referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n    concatenationRecipe=null;\n    concatenationConstants=null;\n    programClass.attributesAccept(this);\n    if (concatenationRecipe != null) {\n      String descriptor=invokeDynamicConstant.getType(programClass);\n      InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n      appendChainComposer=new InstructionSequenceBuilder(programClass);\n      estimatedStringLength=0;\n      InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n      List<String> types=new ArrayList<String>();\n      while (typeEnumeration.hasMoreTypes()) {\n        types.add(typeEnumeration.nextType());\n      }\n      int variableIndex=codeAttribute.u2maxLocals;\n      ListIterator<String> typeIterator=types.listIterator(types.size());\n      while (typeIterator.hasPrevious()) {\n        String type=typeIterator.previous();\n        mainReplacementComposer.store(variableIndex,type);\n        variableIndex+=ClassUtil.internalTypeSize(type);\n      }\n      typeIterator=types.listIterator();\n      for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:          String type=typeIterator.next();\n        estimatedStringLength+=typicalStringLengthFromType(type);\n      int variableSize=ClassUtil.internalTypeSize(type);\n    variableIndex-=variableSize;\n  appendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 371,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6760,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void visitConstantInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,ConstantInstruction constantInstruction){\n  if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n    ProgramClass programClass=(ProgramClass)clazz;\n    InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n    referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n    concatenationRecipe=null;\n    concatenationConstants=null;\n    programClass.attributesAccept(this);\n    if (concatenationRecipe != null) {\n      String descriptor=invokeDynamicConstant.getType(programClass);\n      InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n      appendChainComposer=new InstructionSequenceBuilder(programClass);\n      estimatedStringLength=0;\n      InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n      List<String> types=new ArrayList<String>();\n      while (typeEnumeration.hasMoreTypes()) {\n        types.add(typeEnumeration.nextType());\n      }\n      int variableIndex=codeAttribute.u2maxLocals;\n      ListIterator<String> typeIterator=types.listIterator(types.size());\n      while (typeIterator.hasPrevious()) {\n        String type=typeIterator.previous();\n        mainReplacementComposer.store(variableIndex,type);\n        variableIndex+=ClassUtil.internalTypeSize(type);\n      }\n      typeIterator=types.listIterator();\n      for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:          String type=typeIterator.next();\n        estimatedStringLength+=typicalStringLengthFromType(type);\n      int variableSize=ClassUtil.internalTypeSize(type);\n    variableIndex-=variableSize;\n  appendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 23,
        "endLineNumber" : 106,
        "endColumnNumber" : 53
      },
      "nodeContext" : "typeEnumeration.hasMoreTypes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "proguard.classfile.util.InternalTypeEnumeration"
  }, {
    "nodeContext" : "typeEnumeration",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 108,
      "startColumnNumber" : 30,
      "endLineNumber" : 108,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 108,
        "startColumnNumber" : 30,
        "endLineNumber" : 108,
        "endColumnNumber" : 56
      },
      "nodeContext" : "typeEnumeration.nextType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 57
      },
      "nodeContext" : "types.add(typeEnumeration.nextType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 58
      },
      "nodeContext" : "types.add(typeEnumeration.nextType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  types.add(typeEnumeration.nextType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (typeEnumeration.hasMoreTypes()) {\n  types.add(typeEnumeration.nextType());\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5856,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String descriptor=invokeDynamicConstant.getType(programClass);\n  InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n  appendChainComposer=new InstructionSequenceBuilder(programClass);\n  estimatedStringLength=0;\n  InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n  List<String> types=new ArrayList<String>();\n  while (typeEnumeration.hasMoreTypes()) {\n    types.add(typeEnumeration.nextType());\n  }\n  int variableIndex=codeAttribute.u2maxLocals;\n  ListIterator<String> typeIterator=types.listIterator(types.size());\n  while (typeIterator.hasPrevious()) {\n    String type=typeIterator.previous();\n    mainReplacementComposer.store(variableIndex,type);\n    variableIndex+=ClassUtil.internalTypeSize(type);\n  }\n  typeIterator=types.listIterator();\n  for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:      String type=typeIterator.next();\n    estimatedStringLength+=typicalStringLengthFromType(type);\n  int variableSize=ClassUtil.internalTypeSize(type);\nvariableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5901,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (concatenationRecipe != null) {\n  String descriptor=invokeDynamicConstant.getType(programClass);\n  InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n  appendChainComposer=new InstructionSequenceBuilder(programClass);\n  estimatedStringLength=0;\n  InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n  List<String> types=new ArrayList<String>();\n  while (typeEnumeration.hasMoreTypes()) {\n    types.add(typeEnumeration.nextType());\n  }\n  int variableIndex=codeAttribute.u2maxLocals;\n  ListIterator<String> typeIterator=types.listIterator(types.size());\n  while (typeIterator.hasPrevious()) {\n    String type=typeIterator.previous();\n    mainReplacementComposer.store(variableIndex,type);\n    variableIndex+=ClassUtil.internalTypeSize(type);\n  }\n  typeIterator=types.listIterator();\n  for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:      String type=typeIterator.next();\n    estimatedStringLength+=typicalStringLengthFromType(type);\n  int variableSize=ClassUtil.internalTypeSize(type);\nvariableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 319,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6498,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ProgramClass programClass=(ProgramClass)clazz;\n  InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n  referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n  concatenationRecipe=null;\n  concatenationConstants=null;\n  programClass.attributesAccept(this);\n  if (concatenationRecipe != null) {\n    String descriptor=invokeDynamicConstant.getType(programClass);\n    InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n    appendChainComposer=new InstructionSequenceBuilder(programClass);\n    estimatedStringLength=0;\n    InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n    List<String> types=new ArrayList<String>();\n    while (typeEnumeration.hasMoreTypes()) {\n      types.add(typeEnumeration.nextType());\n    }\n    int variableIndex=codeAttribute.u2maxLocals;\n    ListIterator<String> typeIterator=types.listIterator(types.size());\n    while (typeIterator.hasPrevious()) {\n      String type=typeIterator.previous();\n      mainReplacementComposer.store(variableIndex,type);\n      variableIndex+=ClassUtil.internalTypeSize(type);\n    }\n    typeIterator=types.listIterator();\n    for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:        String type=typeIterator.next();\n      estimatedStringLength+=typicalStringLengthFromType(type);\n    int variableSize=ClassUtil.internalTypeSize(type);\n  variableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6579,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n  ProgramClass programClass=(ProgramClass)clazz;\n  InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n  referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n  concatenationRecipe=null;\n  concatenationConstants=null;\n  programClass.attributesAccept(this);\n  if (concatenationRecipe != null) {\n    String descriptor=invokeDynamicConstant.getType(programClass);\n    InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n    appendChainComposer=new InstructionSequenceBuilder(programClass);\n    estimatedStringLength=0;\n    InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n    List<String> types=new ArrayList<String>();\n    while (typeEnumeration.hasMoreTypes()) {\n      types.add(typeEnumeration.nextType());\n    }\n    int variableIndex=codeAttribute.u2maxLocals;\n    ListIterator<String> typeIterator=types.listIterator(types.size());\n    while (typeIterator.hasPrevious()) {\n      String type=typeIterator.previous();\n      mainReplacementComposer.store(variableIndex,type);\n      variableIndex+=ClassUtil.internalTypeSize(type);\n    }\n    typeIterator=types.listIterator();\n    for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:        String type=typeIterator.next();\n      estimatedStringLength+=typicalStringLengthFromType(type);\n    int variableSize=ClassUtil.internalTypeSize(type);\n  variableIndex-=variableSize;\nappendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 370,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6595,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n    ProgramClass programClass=(ProgramClass)clazz;\n    InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n    referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n    concatenationRecipe=null;\n    concatenationConstants=null;\n    programClass.attributesAccept(this);\n    if (concatenationRecipe != null) {\n      String descriptor=invokeDynamicConstant.getType(programClass);\n      InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n      appendChainComposer=new InstructionSequenceBuilder(programClass);\n      estimatedStringLength=0;\n      InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n      List<String> types=new ArrayList<String>();\n      while (typeEnumeration.hasMoreTypes()) {\n        types.add(typeEnumeration.nextType());\n      }\n      int variableIndex=codeAttribute.u2maxLocals;\n      ListIterator<String> typeIterator=types.listIterator(types.size());\n      while (typeIterator.hasPrevious()) {\n        String type=typeIterator.previous();\n        mainReplacementComposer.store(variableIndex,type);\n        variableIndex+=ClassUtil.internalTypeSize(type);\n      }\n      typeIterator=types.listIterator();\n      for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:          String type=typeIterator.next();\n        estimatedStringLength+=typicalStringLengthFromType(type);\n      int variableSize=ClassUtil.internalTypeSize(type);\n    variableIndex-=variableSize;\n  appendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 371,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6760,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void visitConstantInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,ConstantInstruction constantInstruction){\n  if (constantInstruction.opcode == InstructionConstants.OP_INVOKEDYNAMIC) {\n    ProgramClass programClass=(ProgramClass)clazz;\n    InvokeDynamicConstant invokeDynamicConstant=(InvokeDynamicConstant)programClass.getConstant(constantInstruction.constantIndex);\n    referencedBootstrapMethodIndex=invokeDynamicConstant.getBootstrapMethodAttributeIndex();\n    concatenationRecipe=null;\n    concatenationConstants=null;\n    programClass.attributesAccept(this);\n    if (concatenationRecipe != null) {\n      String descriptor=invokeDynamicConstant.getType(programClass);\n      InstructionSequenceBuilder mainReplacementComposer=new InstructionSequenceBuilder(programClass);\n      appendChainComposer=new InstructionSequenceBuilder(programClass);\n      estimatedStringLength=0;\n      InternalTypeEnumeration typeEnumeration=new InternalTypeEnumeration(descriptor);\n      List<String> types=new ArrayList<String>();\n      while (typeEnumeration.hasMoreTypes()) {\n        types.add(typeEnumeration.nextType());\n      }\n      int variableIndex=codeAttribute.u2maxLocals;\n      ListIterator<String> typeIterator=types.listIterator(types.size());\n      while (typeIterator.hasPrevious()) {\n        String type=typeIterator.previous();\n        mainReplacementComposer.store(variableIndex,type);\n        variableIndex+=ClassUtil.internalTypeSize(type);\n      }\n      typeIterator=types.listIterator();\n      for (int argIndex=0, constantCounter=0; argIndex < concatenationRecipe.length(); argIndex++) {\nswitch (concatenationRecipe.charAt(argIndex)) {\ncase C_VARIABLE_ARGUMENT:          String type=typeIterator.next();\n        estimatedStringLength+=typicalStringLengthFromType(type);\n      int variableSize=ClassUtil.internalTypeSize(type);\n    variableIndex-=variableSize;\n  appendChainComposer.load(variableIndex,type).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,appendDescriptorFromInternalType(type));\nbreak;\ncase C_CONSTANT_ARGUMENT:int constantIndex=concatenationConstants[constantCounter++];\nappendChainComposer.ldc_(constantIndex);\nprogramClass.constantPoolEntryAccept(constantIndex,this);\nbreak;\ndefault:int nextArgIndex=nextArgIndex(concatenationRecipe,argIndex);\nestimatedStringLength+=nextArgIndex - argIndex;\nappendChainComposer.ldc(concatenationRecipe.substring(argIndex,nextArgIndex)).invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_APPEND,ClassConstants.METHOD_TYPE_STRING_STRING_BUILDER);\nargIndex=nextArgIndex - 1;\nbreak;\n}\n}\nmainReplacementComposer.new_(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER).dup().pushInt(estimatedStringLength).invokespecial(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_INIT,ClassConstants.METHOD_TYPE_INT_VOID);\nmainReplacementComposer.appendInstructions(appendChainComposer.instructions());\nmainReplacementComposer.invokevirtual(ClassConstants.NAME_JAVA_LANG_STRING_BUILDER,ClassConstants.METHOD_NAME_TOSTRING,ClassConstants.METHOD_TYPE_TOSTRING);\ncodeAttributeEditor.replaceInstruction(offset,mainReplacementComposer.instructions());\nif (extraInstructionVisitor != null) {\nextraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 58
      },
      "nodeContext" : "types.add(typeEnumeration.nextType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "proguard.classfile.util.InternalTypeEnumeration"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 106,
    "startColumnNumber" : 23,
    "endLineNumber" : 106,
    "endColumnNumber" : 38
  }, {
    "charLength" : 15,
    "startLineNumber" : 108,
    "startColumnNumber" : 30,
    "endLineNumber" : 108,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}