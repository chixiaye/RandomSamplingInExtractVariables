{
  "id" : 299,
  "expression" : "\"%s\"",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/javase/src/com/google/zxing/StringsResourceTranslator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"%s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 142,
      "startColumnNumber" : 27,
      "endLineNumber" : 142,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 32
      },
      "nodeContext" : "value.contains(\"%s\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 56
      },
      "nodeContext" : "value.contains(\"%s\") || value.contains(\"%f\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value.contains(\"%s\") || value.contains(\"%f\")) {\n  out.write(\" formatted=\\\"false\\\"\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 136,
        "startColumnNumber" : 71,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String key=englishEntry.getKey();\n  String value=englishEntry.getValue();\n  out.write(\"  <string name=\\\"\");\n  out.write(key);\n  out.write('\"');\n  if (value.contains(\"%s\") || value.contains(\"%f\")) {\n    out.write(\" formatted=\\\"false\\\"\");\n  }\n  out.write('>');\n  String translatedString=translated.get(key);\n  if (translatedString == null || forceRetranslation.contains(key)) {\n    anyChange=true;\n    translatedString=translateString(value,language);\n  }\n  out.write(translatedString);\n  out.write(\"</string>\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 136,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<String,String> englishEntry : english.entrySet()) {\n  String key=englishEntry.getKey();\n  String value=englishEntry.getValue();\n  out.write(\"  <string name=\\\"\");\n  out.write(key);\n  out.write('\"');\n  if (value.contains(\"%s\") || value.contains(\"%f\")) {\n    out.write(\" formatted=\\\"false\\\"\");\n  }\n  out.write('>');\n  String translatedString=translated.get(key);\n  if (translatedString == null || forceRetranslation.contains(key)) {\n    anyChange=true;\n    translatedString=translateString(value,language);\n  }\n  out.write(translatedString);\n  out.write(\"</string>\\n\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 108,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1076,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  out=new OutputStreamWriter(new FileOutputStream(resultTempFile),UTF8);\n  out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n  out.write(APACHE_2_LICENSE);\n  out.write(\"<resources>\\n\");\n  for (  Map.Entry<String,String> englishEntry : english.entrySet()) {\n    String key=englishEntry.getKey();\n    String value=englishEntry.getValue();\n    out.write(\"  <string name=\\\"\");\n    out.write(key);\n    out.write('\"');\n    if (value.contains(\"%s\") || value.contains(\"%f\")) {\n      out.write(\" formatted=\\\"false\\\"\");\n    }\n    out.write('>');\n    String translatedString=translated.get(key);\n    if (translatedString == null || forceRetranslation.contains(key)) {\n      anyChange=true;\n      translatedString=translateString(value,language);\n    }\n    out.write(translatedString);\n    out.write(\"</string>\\n\");\n  }\n  out.write(\"</resources>\\n\");\n  out.flush();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1121,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  out=new OutputStreamWriter(new FileOutputStream(resultTempFile),UTF8);\n  out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n  out.write(APACHE_2_LICENSE);\n  out.write(\"<resources>\\n\");\n  for (  Map.Entry<String,String> englishEntry : english.entrySet()) {\n    String key=englishEntry.getKey();\n    String value=englishEntry.getValue();\n    out.write(\"  <string name=\\\"\");\n    out.write(key);\n    out.write('\"');\n    if (value.contains(\"%s\") || value.contains(\"%f\")) {\n      out.write(\" formatted=\\\"false\\\"\");\n    }\n    out.write('>');\n    String translatedString=translated.get(key);\n    if (translatedString == null || forceRetranslation.contains(key)) {\n      anyChange=true;\n      translatedString=translateString(value,language);\n    }\n    out.write(translatedString);\n    out.write(\"</string>\\n\");\n  }\n  out.write(\"</resources>\\n\");\n  out.flush();\n}\n  finally {\n  quietClose(out);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2012,
        "startLineNumber" : 110,
        "startColumnNumber" : 90,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  SortedMap<String,String> english=readLines(englishFile);\n  SortedMap<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParentFile().getName();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  stringsFileNameMatcher.find();\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  File resultTempFile=File.createTempFile(parentName,\".xml\");\n  boolean anyChange=false;\n  Writer out=null;\n  try {\n    out=new OutputStreamWriter(new FileOutputStream(resultTempFile),UTF8);\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n  finally {\n    quietClose(out);\n  }\n  if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    translatedFile.delete();\n    resultTempFile.renameTo(translatedFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 276,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2205,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void translate(File englishFile,File translatedFile,Collection<String> forceRetranslation) throws IOException {\n  SortedMap<String,String> english=readLines(englishFile);\n  SortedMap<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParentFile().getName();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  stringsFileNameMatcher.find();\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  File resultTempFile=File.createTempFile(parentName,\".xml\");\n  boolean anyChange=false;\n  Writer out=null;\n  try {\n    out=new OutputStreamWriter(new FileOutputStream(resultTempFile),UTF8);\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n  finally {\n    quietClose(out);\n  }\n  if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    translatedFile.delete();\n    resultTempFile.renameTo(translatedFile);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 56
      },
      "nodeContext" : "value.contains(\"%s\") || value.contains(\"%f\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 142,
    "startColumnNumber" : 27,
    "endLineNumber" : 142,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}