{
  "id" : 133,
  "expression" : "proto3",
  "projectName" : "apache@flink",
  "commitID" : "b6be14da65fedf01e82dc83a58e791709ce8ce57",
  "filePath" : "flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/common/schema/PulsarSchemaUtilsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "proto3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 82,
      "startColumnNumber" : 24,
      "endLineNumber" : 82,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 82,
        "startColumnNumber" : 24,
        "endLineNumber" : 82,
        "endColumnNumber" : 46
      },
      "nodeContext" : "proto3.getSchemaInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 60,
        "startColumnNumber" : 40,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Schema<Foo> avro1=Schema.AVRO(Foo.class);\n  PulsarSchema<Foo> avro2=new PulsarSchema<>(avro1,Foo.class);\n  SchemaInfo info1=avro1.getSchemaInfo();\n  assertThrows(NullPointerException.class,() -> PulsarSchemaUtils.createSchema(info1));\n  Schema<Foo> schema=PulsarSchemaUtils.createSchema(avro2.getSchemaInfo());\n  assertNotEquals(schema.getSchemaInfo(),avro1.getSchemaInfo());\n  assertEquals(schema.getSchemaInfo(),avro2.getSchemaInfo());\n  Schema<FL> json1=Schema.JSON(FL.class);\n  PulsarSchema<FL> json2=new PulsarSchema<>(json1,FL.class);\n  Schema<FL> json3=PulsarSchemaUtils.createSchema(json2.getSchemaInfo());\n  assertNotEquals(json3.getSchemaInfo(),json1.getSchemaInfo());\n  assertEquals(json3.getSchemaInfo(),json2.getSchemaInfo());\n  Schema<TestMessage> proto1=Schema.PROTOBUF_NATIVE(TestMessage.class);\n  PulsarSchema<TestMessage> proto2=new PulsarSchema<>(proto1,TestMessage.class);\n  Schema<TestMessage> proto3=PulsarSchemaUtils.createSchema(proto2.getSchemaInfo());\n  assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n  assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n  Schema<KeyValue<byte[],byte[]>> kvBytes1=Schema.KV_BYTES();\n  PulsarSchema<KeyValue<byte[],byte[]>> kvBytes2=new PulsarSchema<>(kvBytes1,byte[].class,byte[].class);\n  Schema<KeyValue<byte[],byte[]>> kvBytes3=PulsarSchemaUtils.createSchema(kvBytes2.getSchemaInfo());\n  assertNotEquals(kvBytes3.getSchemaInfo(),kvBytes1.getSchemaInfo());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1783,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test void createSchemaForComplexSchema(){\n  Schema<Foo> avro1=Schema.AVRO(Foo.class);\n  PulsarSchema<Foo> avro2=new PulsarSchema<>(avro1,Foo.class);\n  SchemaInfo info1=avro1.getSchemaInfo();\n  assertThrows(NullPointerException.class,() -> PulsarSchemaUtils.createSchema(info1));\n  Schema<Foo> schema=PulsarSchemaUtils.createSchema(avro2.getSchemaInfo());\n  assertNotEquals(schema.getSchemaInfo(),avro1.getSchemaInfo());\n  assertEquals(schema.getSchemaInfo(),avro2.getSchemaInfo());\n  Schema<FL> json1=Schema.JSON(FL.class);\n  PulsarSchema<FL> json2=new PulsarSchema<>(json1,FL.class);\n  Schema<FL> json3=PulsarSchemaUtils.createSchema(json2.getSchemaInfo());\n  assertNotEquals(json3.getSchemaInfo(),json1.getSchemaInfo());\n  assertEquals(json3.getSchemaInfo(),json2.getSchemaInfo());\n  Schema<TestMessage> proto1=Schema.PROTOBUF_NATIVE(TestMessage.class);\n  PulsarSchema<TestMessage> proto2=new PulsarSchema<>(proto1,TestMessage.class);\n  Schema<TestMessage> proto3=PulsarSchemaUtils.createSchema(proto2.getSchemaInfo());\n  assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n  assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n  Schema<KeyValue<byte[],byte[]>> kvBytes1=Schema.KV_BYTES();\n  PulsarSchema<KeyValue<byte[],byte[]>> kvBytes2=new PulsarSchema<>(kvBytes1,byte[].class,byte[].class);\n  Schema<KeyValue<byte[],byte[]>> kvBytes3=PulsarSchemaUtils.createSchema(kvBytes2.getSchemaInfo());\n  assertNotEquals(kvBytes3.getSchemaInfo(),kvBytes1.getSchemaInfo());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.connector.pulsar.common.schema.Schema<org.apache.flink.connector.pulsar.common.schema.TestMessage>"
  }, {
    "nodeContext" : "proto3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 83,
      "startColumnNumber" : 21,
      "endLineNumber" : 83,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 83,
        "startColumnNumber" : 21,
        "endLineNumber" : 83,
        "endColumnNumber" : 43
      },
      "nodeContext" : "proto3.getSchemaInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 60,
        "startColumnNumber" : 40,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Schema<Foo> avro1=Schema.AVRO(Foo.class);\n  PulsarSchema<Foo> avro2=new PulsarSchema<>(avro1,Foo.class);\n  SchemaInfo info1=avro1.getSchemaInfo();\n  assertThrows(NullPointerException.class,() -> PulsarSchemaUtils.createSchema(info1));\n  Schema<Foo> schema=PulsarSchemaUtils.createSchema(avro2.getSchemaInfo());\n  assertNotEquals(schema.getSchemaInfo(),avro1.getSchemaInfo());\n  assertEquals(schema.getSchemaInfo(),avro2.getSchemaInfo());\n  Schema<FL> json1=Schema.JSON(FL.class);\n  PulsarSchema<FL> json2=new PulsarSchema<>(json1,FL.class);\n  Schema<FL> json3=PulsarSchemaUtils.createSchema(json2.getSchemaInfo());\n  assertNotEquals(json3.getSchemaInfo(),json1.getSchemaInfo());\n  assertEquals(json3.getSchemaInfo(),json2.getSchemaInfo());\n  Schema<TestMessage> proto1=Schema.PROTOBUF_NATIVE(TestMessage.class);\n  PulsarSchema<TestMessage> proto2=new PulsarSchema<>(proto1,TestMessage.class);\n  Schema<TestMessage> proto3=PulsarSchemaUtils.createSchema(proto2.getSchemaInfo());\n  assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n  assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n  Schema<KeyValue<byte[],byte[]>> kvBytes1=Schema.KV_BYTES();\n  PulsarSchema<KeyValue<byte[],byte[]>> kvBytes2=new PulsarSchema<>(kvBytes1,byte[].class,byte[].class);\n  Schema<KeyValue<byte[],byte[]>> kvBytes3=PulsarSchemaUtils.createSchema(kvBytes2.getSchemaInfo());\n  assertNotEquals(kvBytes3.getSchemaInfo(),kvBytes1.getSchemaInfo());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1783,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test void createSchemaForComplexSchema(){\n  Schema<Foo> avro1=Schema.AVRO(Foo.class);\n  PulsarSchema<Foo> avro2=new PulsarSchema<>(avro1,Foo.class);\n  SchemaInfo info1=avro1.getSchemaInfo();\n  assertThrows(NullPointerException.class,() -> PulsarSchemaUtils.createSchema(info1));\n  Schema<Foo> schema=PulsarSchemaUtils.createSchema(avro2.getSchemaInfo());\n  assertNotEquals(schema.getSchemaInfo(),avro1.getSchemaInfo());\n  assertEquals(schema.getSchemaInfo(),avro2.getSchemaInfo());\n  Schema<FL> json1=Schema.JSON(FL.class);\n  PulsarSchema<FL> json2=new PulsarSchema<>(json1,FL.class);\n  Schema<FL> json3=PulsarSchemaUtils.createSchema(json2.getSchemaInfo());\n  assertNotEquals(json3.getSchemaInfo(),json1.getSchemaInfo());\n  assertEquals(json3.getSchemaInfo(),json2.getSchemaInfo());\n  Schema<TestMessage> proto1=Schema.PROTOBUF_NATIVE(TestMessage.class);\n  PulsarSchema<TestMessage> proto2=new PulsarSchema<>(proto1,TestMessage.class);\n  Schema<TestMessage> proto3=PulsarSchemaUtils.createSchema(proto2.getSchemaInfo());\n  assertNotEquals(proto3.getSchemaInfo(),proto1.getSchemaInfo());\n  assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n  Schema<KeyValue<byte[],byte[]>> kvBytes1=Schema.KV_BYTES();\n  PulsarSchema<KeyValue<byte[],byte[]>> kvBytes2=new PulsarSchema<>(kvBytes1,byte[].class,byte[].class);\n  Schema<KeyValue<byte[],byte[]>> kvBytes3=PulsarSchemaUtils.createSchema(kvBytes2.getSchemaInfo());\n  assertNotEquals(kvBytes3.getSchemaInfo(),kvBytes1.getSchemaInfo());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals(proto3.getSchemaInfo(),proto2.getSchemaInfo());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.connector.pulsar.common.schema.Schema<org.apache.flink.connector.pulsar.common.schema.TestMessage>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 82,
    "startColumnNumber" : 24,
    "endLineNumber" : 82,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 83,
    "startColumnNumber" : 21,
    "endLineNumber" : 83,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}