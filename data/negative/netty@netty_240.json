{
  "id" : 240,
  "expression" : "in",
  "projectName" : "netty@netty",
  "commitID" : "d9afd999ffee8daee0a832098b138ac1da185642",
  "filePath" : "codec-socks/src/main/java/io/netty/handler/codec/socksx/v4/Socks4ServerDecoder.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 60,
      "startColumnNumber" : 20,
      "endLineNumber" : 60,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 38
      },
      "nodeContext" : "in.readableBytes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 42
      },
      "nodeContext" : "in.readableBytes() < 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (in.readableBytes() < 8) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (in.readableBytes() < 8) {\n    return;\n  }\n  final int version=in.readUnsignedByte();\n  if (version != SocksVersion.SOCKS4a.byteValue()) {\n    throw new DecoderException(\"unsupported protocol version: \" + version);\n  }\n  type=Socks4CommandType.valueOf(in.readByte());\n  dstPort=in.readUnsignedShort();\n  dstAddr=NetUtil.intToIpAddress(in.readInt());\n  state=State.READ_USERID;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 42
      },
      "nodeContext" : "in.readableBytes() < 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 63,
      "startColumnNumber" : 36,
      "endLineNumber" : 63,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 63,
        "endColumnNumber" : 57
      },
      "nodeContext" : "in.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 26,
        "endLineNumber" : 63,
        "endColumnNumber" : 57
      },
      "nodeContext" : "version=in.readUnsignedByte()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final int version=in.readUnsignedByte();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (in.readableBytes() < 8) {\n    return;\n  }\n  final int version=in.readUnsignedByte();\n  if (version != SocksVersion.SOCKS4a.byteValue()) {\n    throw new DecoderException(\"unsupported protocol version: \" + version);\n  }\n  type=Socks4CommandType.valueOf(in.readByte());\n  dstPort=in.readUnsignedShort();\n  dstAddr=NetUtil.intToIpAddress(in.readInt());\n  state=State.READ_USERID;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 58
      },
      "nodeContext" : "final int version=in.readUnsignedByte();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 68,
      "startColumnNumber" : 49,
      "endLineNumber" : 68,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 68,
        "startColumnNumber" : 49,
        "endLineNumber" : 68,
        "endColumnNumber" : 62
      },
      "nodeContext" : "in.readByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 68,
        "startColumnNumber" : 23,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Socks4CommandType.valueOf(in.readByte())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "type=Socks4CommandType.valueOf(in.readByte())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 64
      },
      "nodeContext" : "type=Socks4CommandType.valueOf(in.readByte());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (in.readableBytes() < 8) {\n    return;\n  }\n  final int version=in.readUnsignedByte();\n  if (version != SocksVersion.SOCKS4a.byteValue()) {\n    throw new DecoderException(\"unsupported protocol version: \" + version);\n  }\n  type=Socks4CommandType.valueOf(in.readByte());\n  dstPort=in.readUnsignedShort();\n  dstAddr=NetUtil.intToIpAddress(in.readInt());\n  state=State.READ_USERID;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 64
      },
      "nodeContext" : "type=Socks4CommandType.valueOf(in.readByte());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 69,
      "startColumnNumber" : 26,
      "endLineNumber" : 69,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 69,
        "endColumnNumber" : 48
      },
      "nodeContext" : "in.readUnsignedShort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 48
      },
      "nodeContext" : "dstPort=in.readUnsignedShort()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 49
      },
      "nodeContext" : "dstPort=in.readUnsignedShort();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (in.readableBytes() < 8) {\n    return;\n  }\n  final int version=in.readUnsignedByte();\n  if (version != SocksVersion.SOCKS4a.byteValue()) {\n    throw new DecoderException(\"unsupported protocol version: \" + version);\n  }\n  type=Socks4CommandType.valueOf(in.readByte());\n  dstPort=in.readUnsignedShort();\n  dstAddr=NetUtil.intToIpAddress(in.readInt());\n  state=State.READ_USERID;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 49
      },
      "nodeContext" : "dstPort=in.readUnsignedShort();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 70,
      "startColumnNumber" : 49,
      "endLineNumber" : 70,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 70,
        "startColumnNumber" : 49,
        "endLineNumber" : 70,
        "endColumnNumber" : 61
      },
      "nodeContext" : "in.readInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 70,
        "startColumnNumber" : 26,
        "endLineNumber" : 70,
        "endColumnNumber" : 62
      },
      "nodeContext" : "NetUtil.intToIpAddress(in.readInt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 62
      },
      "nodeContext" : "dstAddr=NetUtil.intToIpAddress(in.readInt())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 63
      },
      "nodeContext" : "dstAddr=NetUtil.intToIpAddress(in.readInt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (in.readableBytes() < 8) {\n    return;\n  }\n  final int version=in.readUnsignedByte();\n  if (version != SocksVersion.SOCKS4a.byteValue()) {\n    throw new DecoderException(\"unsupported protocol version: \" + version);\n  }\n  type=Socks4CommandType.valueOf(in.readByte());\n  dstPort=in.readUnsignedShort();\n  dstAddr=NetUtil.intToIpAddress(in.readInt());\n  state=State.READ_USERID;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 63
      },
      "nodeContext" : "dstAddr=NetUtil.intToIpAddress(in.readInt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 74,
      "startColumnNumber" : 49,
      "endLineNumber" : 74,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 74,
        "startColumnNumber" : 28,
        "endLineNumber" : 74,
        "endColumnNumber" : 52
      },
      "nodeContext" : "readString(\"userid\",in)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 74,
        "startColumnNumber" : 23,
        "endLineNumber" : 74,
        "endColumnNumber" : 52
      },
      "nodeContext" : "id=readString(\"userid\",in)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String id=readString(\"userid\",in);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 73,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 53
      },
      "nodeContext" : "String id=readString(\"userid\",in);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 84,
      "startColumnNumber" : 56,
      "endLineNumber" : 84,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 84,
        "startColumnNumber" : 34,
        "endLineNumber" : 84,
        "endColumnNumber" : 59
      },
      "nodeContext" : "readString(\"dstAddr\",in)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 84,
        "startColumnNumber" : 27,
        "endLineNumber" : 84,
        "endColumnNumber" : 59
      },
      "nodeContext" : "addr=readString(\"dstAddr\",in)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 60
      },
      "nodeContext" : "String addr=readString(\"dstAddr\",in);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 81,
        "startColumnNumber" : 30,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 60
      },
      "nodeContext" : "String addr=readString(\"dstAddr\",in);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 96,
      "startColumnNumber" : 40,
      "endLineNumber" : 96,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 96,
        "startColumnNumber" : 40,
        "endLineNumber" : 96,
        "endColumnNumber" : 75
      },
      "nodeContext" : "in.readRetainedSlice(readableBytes)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ctx.fireChannelRead(in.readRetainedSlice(readableBytes))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 95,
        "startColumnNumber" : 39,
        "endLineNumber" : 97,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 93,
        "startColumnNumber" : 26,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  }, {
    "nodeContext" : "in",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 101,
      "startColumnNumber" : 16,
      "endLineNumber" : 101,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 51
      },
      "nodeContext" : "in.skipBytes(actualReadableBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 52
      },
      "nodeContext" : "in.skipBytes(actualReadableBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 100,
        "startColumnNumber" : 26,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  in.skipBytes(actualReadableBytes());\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase START:{\n    if (in.readableBytes() < 8) {\n      return;\n    }\n    final int version=in.readUnsignedByte();\n    if (version != SocksVersion.SOCKS4a.byteValue()) {\n      throw new DecoderException(\"unsupported protocol version: \" + version);\n    }\n    type=Socks4CommandType.valueOf(in.readByte());\n    dstPort=in.readUnsignedShort();\n    dstAddr=NetUtil.intToIpAddress(in.readInt());\n    state=State.READ_USERID;\n  }\ncase READ_USERID:{\n  String id=readString(\"userid\",in);\n  if (id == null) {\n    return;\n  }\n  userId=id;\n  state=State.READ_DOMAIN;\n}\ncase READ_DOMAIN:{\nif (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n  String addr=readString(\"dstAddr\",in);\n  if (addr == null) {\n    return;\n  }\n  dstAddr=addr;\n}\nctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\nstate=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\nctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 179,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1927,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (state) {\ncase START:{\n      if (in.readableBytes() < 8) {\n        return;\n      }\n      final int version=in.readUnsignedByte();\n      if (version != SocksVersion.SOCKS4a.byteValue()) {\n        throw new DecoderException(\"unsupported protocol version: \" + version);\n      }\n      type=Socks4CommandType.valueOf(in.readByte());\n      dstPort=in.readUnsignedShort();\n      dstAddr=NetUtil.intToIpAddress(in.readInt());\n      state=State.READ_USERID;\n    }\ncase READ_USERID:{\n    String id=readString(\"userid\",in);\n    if (id == null) {\n      return;\n    }\n    userId=id;\n    state=State.READ_DOMAIN;\n  }\ncase READ_DOMAIN:{\n  if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n    String addr=readString(\"dstAddr\",in);\n    if (addr == null) {\n      return;\n    }\n    dstAddr=addr;\n  }\n  ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n  state=State.SUCCESS;\n}\ncase SUCCESS:{\nint readableBytes=actualReadableBytes();\nif (readableBytes > 0) {\n  ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n}\nbreak;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 192,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1945,
        "startLineNumber" : 56,
        "startColumnNumber" : 82,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2038,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in) throws Exception {\n  try {\nswitch (state) {\ncase START:{\n        if (in.readableBytes() < 8) {\n          return;\n        }\n        final int version=in.readUnsignedByte();\n        if (version != SocksVersion.SOCKS4a.byteValue()) {\n          throw new DecoderException(\"unsupported protocol version: \" + version);\n        }\n        type=Socks4CommandType.valueOf(in.readByte());\n        dstPort=in.readUnsignedShort();\n        dstAddr=NetUtil.intToIpAddress(in.readInt());\n        state=State.READ_USERID;\n      }\ncase READ_USERID:{\n      String id=readString(\"userid\",in);\n      if (id == null) {\n        return;\n      }\n      userId=id;\n      state=State.READ_DOMAIN;\n    }\ncase READ_DOMAIN:{\n    if (!\"0.0.0.0\".equals(dstAddr) && dstAddr.startsWith(\"0.0.0.\")) {\n      String addr=readString(\"dstAddr\",in);\n      if (addr == null) {\n        return;\n      }\n      dstAddr=addr;\n    }\n    ctx.fireChannelRead(new DefaultSocks4CommandRequest(type,dstAddr,dstPort,userId));\n    state=State.SUCCESS;\n  }\ncase SUCCESS:{\n  int readableBytes=actualReadableBytes();\n  if (readableBytes > 0) {\n    ctx.fireChannelRead(in.readRetainedSlice(readableBytes));\n  }\n  break;\n}\ncase FAILURE:{\nin.skipBytes(actualReadableBytes());\nbreak;\n}\n}\n}\n catch (Exception e) {\nfail(ctx,e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 52
      },
      "nodeContext" : "in.skipBytes(actualReadableBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.buffer.ByteBuf"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 60,
    "startColumnNumber" : 20,
    "endLineNumber" : 60,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 63,
    "startColumnNumber" : 36,
    "endLineNumber" : 63,
    "endColumnNumber" : 38
  }, {
    "charLength" : 2,
    "startLineNumber" : 68,
    "startColumnNumber" : 49,
    "endLineNumber" : 68,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 69,
    "startColumnNumber" : 26,
    "endLineNumber" : 69,
    "endColumnNumber" : 28
  }, {
    "charLength" : 2,
    "startLineNumber" : 70,
    "startColumnNumber" : 49,
    "endLineNumber" : 70,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 74,
    "startColumnNumber" : 49,
    "endLineNumber" : 74,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 84,
    "startColumnNumber" : 56,
    "endLineNumber" : 84,
    "endColumnNumber" : 58
  }, {
    "charLength" : 2,
    "startLineNumber" : 96,
    "startColumnNumber" : 40,
    "endLineNumber" : 96,
    "endColumnNumber" : 42
  }, {
    "charLength" : 2,
    "startLineNumber" : 101,
    "startColumnNumber" : 16,
    "endLineNumber" : 101,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  } ]
}