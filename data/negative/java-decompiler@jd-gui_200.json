{
  "id" : 200,
  "expression" : "\"typeDeclarations\"",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/app/src/main/java/org/jd/gui/controller/OpenTypeController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"typeDeclarations\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 106,
      "startColumnNumber" : 81,
      "endLineNumber" : 106,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 106,
        "startColumnNumber" : 64,
        "endLineNumber" : 106,
        "endColumnNumber" : 100
      },
      "nodeContext" : "indexes.getIndex(\"typeDeclarations\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 106,
        "startColumnNumber" : 56,
        "endLineNumber" : 106,
        "endColumnNumber" : 100
      },
      "nodeContext" : "index=indexes.getIndex(\"typeDeclarations\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 106,
        "startColumnNumber" : 32,
        "endLineNumber" : 106,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 104,
        "startColumnNumber" : 35,
        "endLineNumber" : 137,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n  if ((index != null) && !index.isEmpty()) {\n    matchingEntries=new HashMap<>();\n    if (patternLength == 1) {\n      match(pattern.charAt(0),index,matchingEntries);\n    }\n else {\n      String lastKey=key.substring(0,patternLength - 1);\n      Map<String,Collection> lastResult=cache.get(lastKey);\n      if (lastResult != null) {\n        match(regExpPattern,lastResult,matchingEntries);\n      }\n else {\n        match(regExpPattern,index,matchingEntries);\n      }\n    }\n    cache.put(key,matchingEntries);\n    for (    Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n      Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n      if (collection == null) {\n        result.put(mapEntry.getKey(),collection=new HashSet<>());\n      }\n      collection.addAll(mapEntry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2670,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 137,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (matchingEntries != null) {\n  for (  Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n    Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n    if (collection == null) {\n      result.put(mapEntry.getKey(),collection=new HashSet<>());\n    }\n    collection.addAll(mapEntry.getValue());\n  }\n}\n else {\n  Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n  if ((index != null) && !index.isEmpty()) {\n    matchingEntries=new HashMap<>();\n    if (patternLength == 1) {\n      match(pattern.charAt(0),index,matchingEntries);\n    }\n else {\n      String lastKey=key.substring(0,patternLength - 1);\n      Map<String,Collection> lastResult=cache.get(lastKey);\n      if (lastResult != null) {\n        match(regExpPattern,lastResult,matchingEntries);\n      }\n else {\n        match(regExpPattern,index,matchingEntries);\n      }\n    }\n    cache.put(key,matchingEntries);\n    for (    Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n      Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n      if (collection == null) {\n        result.put(mapEntry.getKey(),collection=new HashSet<>());\n      }\n      collection.addAll(mapEntry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 217,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2981,
        "startLineNumber" : 90,
        "startColumnNumber" : 52,
        "endLineNumber" : 138,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Indexes indexes=futureIndexes.get();\n  String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n  Map<String,Collection> matchingEntries=cache.get(key);\n  if (matchingEntries != null) {\n    for (    Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n      Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n      if (collection == null) {\n        result.put(mapEntry.getKey(),collection=new HashSet<>());\n      }\n      collection.addAll(mapEntry.getValue());\n    }\n  }\n else {\n    Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n    if ((index != null) && !index.isEmpty()) {\n      matchingEntries=new HashMap<>();\n      if (patternLength == 1) {\n        match(pattern.charAt(0),index,matchingEntries);\n      }\n else {\n        String lastKey=key.substring(0,patternLength - 1);\n        Map<String,Collection> lastResult=cache.get(lastKey);\n        if (lastResult != null) {\n          match(regExpPattern,lastResult,matchingEntries);\n        }\n else {\n          match(regExpPattern,index,matchingEntries);\n        }\n      }\n      cache.put(key,matchingEntries);\n      for (      Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n        Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n        if (collection == null) {\n          result.put(mapEntry.getKey(),collection=new HashSet<>());\n        }\n        collection.addAll(mapEntry.getValue());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3009,
        "startLineNumber" : 90,
        "startColumnNumber" : 24,
        "endLineNumber" : 138,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (futureIndexes.isDone()) {\n  Indexes indexes=futureIndexes.get();\n  String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n  Map<String,Collection> matchingEntries=cache.get(key);\n  if (matchingEntries != null) {\n    for (    Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n      Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n      if (collection == null) {\n        result.put(mapEntry.getKey(),collection=new HashSet<>());\n      }\n      collection.addAll(mapEntry.getValue());\n    }\n  }\n else {\n    Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n    if ((index != null) && !index.isEmpty()) {\n      matchingEntries=new HashMap<>();\n      if (patternLength == 1) {\n        match(pattern.charAt(0),index,matchingEntries);\n      }\n else {\n        String lastKey=key.substring(0,patternLength - 1);\n        Map<String,Collection> lastResult=cache.get(lastKey);\n        if (lastResult != null) {\n          match(regExpPattern,lastResult,matchingEntries);\n        }\n else {\n          match(regExpPattern,index,matchingEntries);\n        }\n      }\n      cache.put(key,matchingEntries);\n      for (      Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n        Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n        if (collection == null) {\n          result.put(mapEntry.getKey(),collection=new HashSet<>());\n        }\n        collection.addAll(mapEntry.getValue());\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 258,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3059,
        "startLineNumber" : 89,
        "startColumnNumber" : 84,
        "endLineNumber" : 139,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (futureIndexes.isDone()) {\n    Indexes indexes=futureIndexes.get();\n    String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n    Map<String,Collection> matchingEntries=cache.get(key);\n    if (matchingEntries != null) {\n      for (      Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n        Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n        if (collection == null) {\n          result.put(mapEntry.getKey(),collection=new HashSet<>());\n        }\n        collection.addAll(mapEntry.getValue());\n      }\n    }\n else {\n      Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n      if ((index != null) && !index.isEmpty()) {\n        matchingEntries=new HashMap<>();\n        if (patternLength == 1) {\n          match(pattern.charAt(0),index,matchingEntries);\n        }\n else {\n          String lastKey=key.substring(0,patternLength - 1);\n          Map<String,Collection> lastResult=cache.get(lastKey);\n          if (lastResult != null) {\n            match(regExpPattern,lastResult,matchingEntries);\n          }\n else {\n            match(regExpPattern,index,matchingEntries);\n          }\n        }\n        cache.put(key,matchingEntries);\n        for (        Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n          Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n          if (collection == null) {\n            result.put(mapEntry.getKey(),collection=new HashSet<>());\n          }\n          collection.addAll(mapEntry.getValue());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3123,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 139,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (Future<Indexes> futureIndexes : collectionOfFutureIndexes) {\n  if (futureIndexes.isDone()) {\n    Indexes indexes=futureIndexes.get();\n    String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n    Map<String,Collection> matchingEntries=cache.get(key);\n    if (matchingEntries != null) {\n      for (      Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n        Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n        if (collection == null) {\n          result.put(mapEntry.getKey(),collection=new HashSet<>());\n        }\n        collection.addAll(mapEntry.getValue());\n      }\n    }\n else {\n      Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n      if ((index != null) && !index.isEmpty()) {\n        matchingEntries=new HashMap<>();\n        if (patternLength == 1) {\n          match(pattern.charAt(0),index,matchingEntries);\n        }\n else {\n          String lastKey=key.substring(0,patternLength - 1);\n          Map<String,Collection> lastResult=cache.get(lastKey);\n          if (lastResult != null) {\n            match(regExpPattern,lastResult,matchingEntries);\n          }\n else {\n            match(regExpPattern,index,matchingEntries);\n          }\n        }\n        cache.put(key,matchingEntries);\n        for (        Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n          Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n          if (collection == null) {\n            result.put(mapEntry.getKey(),collection=new HashSet<>());\n          }\n          collection.addAll(mapEntry.getValue());\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3165,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 140,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  Future<Indexes> futureIndexes : collectionOfFutureIndexes) {\n    if (futureIndexes.isDone()) {\n      Indexes indexes=futureIndexes.get();\n      String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n      Map<String,Collection> matchingEntries=cache.get(key);\n      if (matchingEntries != null) {\n        for (        Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n          Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n          if (collection == null) {\n            result.put(mapEntry.getKey(),collection=new HashSet<>());\n          }\n          collection.addAll(mapEntry.getValue());\n        }\n      }\n else {\n        Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n        if ((index != null) && !index.isEmpty()) {\n          matchingEntries=new HashMap<>();\n          if (patternLength == 1) {\n            match(pattern.charAt(0),index,matchingEntries);\n          }\n else {\n            String lastKey=key.substring(0,patternLength - 1);\n            Map<String,Collection> lastResult=cache.get(lastKey);\n            if (lastResult != null) {\n              match(regExpPattern,lastResult,matchingEntries);\n            }\n else {\n              match(regExpPattern,index,matchingEntries);\n            }\n          }\n          cache.put(key,matchingEntries);\n          for (          Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n            Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n            if (collection == null) {\n              result.put(mapEntry.getKey(),collection=new HashSet<>());\n            }\n            collection.addAll(mapEntry.getValue());\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3272,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 142,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  for (  Future<Indexes> futureIndexes : collectionOfFutureIndexes) {\n    if (futureIndexes.isDone()) {\n      Indexes indexes=futureIndexes.get();\n      String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n      Map<String,Collection> matchingEntries=cache.get(key);\n      if (matchingEntries != null) {\n        for (        Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n          Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n          if (collection == null) {\n            result.put(mapEntry.getKey(),collection=new HashSet<>());\n          }\n          collection.addAll(mapEntry.getValue());\n        }\n      }\n else {\n        Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n        if ((index != null) && !index.isEmpty()) {\n          matchingEntries=new HashMap<>();\n          if (patternLength == 1) {\n            match(pattern.charAt(0),index,matchingEntries);\n          }\n else {\n            String lastKey=key.substring(0,patternLength - 1);\n            Map<String,Collection> lastResult=cache.get(lastKey);\n            if (lastResult != null) {\n              match(regExpPattern,lastResult,matchingEntries);\n            }\n else {\n              match(regExpPattern,index,matchingEntries);\n            }\n          }\n          cache.put(key,matchingEntries);\n          for (          Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n            Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n            if (collection == null) {\n              result.put(mapEntry.getKey(),collection=new HashSet<>());\n            }\n            collection.addAll(mapEntry.getValue());\n          }\n        }\n      }\n    }\n  }\n}\n catch (Exception e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 281,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3779,
        "startLineNumber" : 81,
        "startColumnNumber" : 35,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  openTypeView.showWaitCursor();\n  Pattern regExpPattern=createRegExpPattern(pattern);\n  Map<String,Collection<Container.Entry>> result=new HashMap<>();\n  try {\n    for (    Future<Indexes> futureIndexes : collectionOfFutureIndexes) {\n      if (futureIndexes.isDone()) {\n        Indexes indexes=futureIndexes.get();\n        String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n        Map<String,Collection> matchingEntries=cache.get(key);\n        if (matchingEntries != null) {\n          for (          Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n            Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n            if (collection == null) {\n              result.put(mapEntry.getKey(),collection=new HashSet<>());\n            }\n            collection.addAll(mapEntry.getValue());\n          }\n        }\n else {\n          Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n          if ((index != null) && !index.isEmpty()) {\n            matchingEntries=new HashMap<>();\n            if (patternLength == 1) {\n              match(pattern.charAt(0),index,matchingEntries);\n            }\n else {\n              String lastKey=key.substring(0,patternLength - 1);\n              Map<String,Collection> lastResult=cache.get(lastKey);\n              if (lastResult != null) {\n                match(regExpPattern,lastResult,matchingEntries);\n              }\n else {\n                match(regExpPattern,index,matchingEntries);\n              }\n            }\n            cache.put(key,matchingEntries);\n            for (            Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n              Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n              if (collection == null) {\n                result.put(mapEntry.getKey(),collection=new HashSet<>());\n              }\n              collection.addAll(mapEntry.getValue());\n            }\n          }\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  SwingUtilities.invokeLater(() -> {\n    openTypeView.hideWaitCursor();\n    openTypeView.updateList(result);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3785,
        "startLineNumber" : 81,
        "startColumnNumber" : 29,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "() -> {\n  openTypeView.showWaitCursor();\n  Pattern regExpPattern=createRegExpPattern(pattern);\n  Map<String,Collection<Container.Entry>> result=new HashMap<>();\n  try {\n    for (    Future<Indexes> futureIndexes : collectionOfFutureIndexes) {\n      if (futureIndexes.isDone()) {\n        Indexes indexes=futureIndexes.get();\n        String key=String.valueOf(indexes.hashCode()) + \"***\" + pattern;\n        Map<String,Collection> matchingEntries=cache.get(key);\n        if (matchingEntries != null) {\n          for (          Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n            Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n            if (collection == null) {\n              result.put(mapEntry.getKey(),collection=new HashSet<>());\n            }\n            collection.addAll(mapEntry.getValue());\n          }\n        }\n else {\n          Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n          if ((index != null) && !index.isEmpty()) {\n            matchingEntries=new HashMap<>();\n            if (patternLength == 1) {\n              match(pattern.charAt(0),index,matchingEntries);\n            }\n else {\n              String lastKey=key.substring(0,patternLength - 1);\n              Map<String,Collection> lastResult=cache.get(lastKey);\n              if (lastResult != null) {\n                match(regExpPattern,lastResult,matchingEntries);\n              }\n else {\n                match(regExpPattern,index,matchingEntries);\n              }\n            }\n            cache.put(key,matchingEntries);\n            for (            Map.Entry<String,Collection> mapEntry : matchingEntries.entrySet()) {\n              Collection<Container.Entry> collection=result.get(mapEntry.getKey());\n              if (collection == null) {\n                result.put(mapEntry.getKey(),collection=new HashSet<>());\n              }\n              collection.addAll(mapEntry.getValue());\n            }\n          }\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  SwingUtilities.invokeLater(() -> {\n    openTypeView.hideWaitCursor();\n    openTypeView.updateList(result);\n  }\n);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 329,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 106,
        "startColumnNumber" : 32,
        "endLineNumber" : 106,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Map<String,Collection> index=indexes.getIndex(\"typeDeclarations\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 106,
    "startColumnNumber" : 81,
    "endLineNumber" : 106,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}