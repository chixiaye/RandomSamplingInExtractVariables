{
  "id" : 9,
  "expression" : "true",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListenerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 78,
      "startColumnNumber" : 28,
      "endLineNumber" : 78,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "verify(task).cancel(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "verify(task).cancel(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 794,
        "startLineNumber" : 64,
        "startColumnNumber" : 64,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ApplicationRegistrator registrator=mock(ApplicationRegistrator.class);\n  TaskScheduler scheduler=mock(TaskScheduler.class);\n  RegistrationApplicationListener listener=new RegistrationApplicationListener(registrator,scheduler);\n  ScheduledFuture task=mock(ScheduledFuture.class);\n  when(scheduler.scheduleAtFixedRate(isA(Runnable.class),eq(10_000L))).thenReturn(task);\n  listener.onApplicationReady(new ApplicationReadyEvent(mock(SpringApplication.class),null,mock(ConfigurableWebApplicationContext.class)));\n  verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n  listener.onClosedContext(new ContextClosedEvent(mock(WebApplicationContext.class)));\n  verify(task).cancel(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Test public void test_no_register_after_close() throws Exception {\n  ApplicationRegistrator registrator=mock(ApplicationRegistrator.class);\n  TaskScheduler scheduler=mock(TaskScheduler.class);\n  RegistrationApplicationListener listener=new RegistrationApplicationListener(registrator,scheduler);\n  ScheduledFuture task=mock(ScheduledFuture.class);\n  when(scheduler.scheduleAtFixedRate(isA(Runnable.class),eq(10_000L))).thenReturn(task);\n  listener.onApplicationReady(new ApplicationReadyEvent(mock(SpringApplication.class),null,mock(ConfigurableWebApplicationContext.class)));\n  verify(scheduler).scheduleAtFixedRate(isA(Runnable.class),eq(10_000L));\n  listener.onClosedContext(new ContextClosedEvent(mock(WebApplicationContext.class)));\n  verify(task).cancel(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 122,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "verify(task).cancel(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 78,
    "startColumnNumber" : 28,
    "endLineNumber" : 78,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}