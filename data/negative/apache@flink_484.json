{
  "id" : 484,
  "expression" : "false",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/util/config/memory/ManagedMemoryUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 112,
      "startColumnNumber" : 33,
      "endLineNumber" : 112,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 112,
        "startColumnNumber" : 20,
        "endLineNumber" : 112,
        "endColumnNumber" : 38
      },
      "nodeContext" : "findWeight=false",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 39
      },
      "nodeContext" : "boolean findWeight=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 108,
        "startColumnNumber" : 52,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ManagedMemoryUseCase useCase=entry.getKey();\n  final Iterator<String> nameIter=entry.getValue().iterator();\n  boolean findWeight=false;\n  while (!findWeight && nameIter.hasNext()) {\n    final String name=nameIter.next();\n    final String weightStr=configuredWeights.get(name);\n    if (weightStr != null) {\n      final int weight=Integer.parseInt(weightStr);\n      findWeight=true;\n      if (weight < 0) {\n        throw new IllegalConfigurationException(String.format(\"Managed memory weight should not be negative. Configured \" + \"weight for %s is %d.\",useCase,weight));\n      }\n      if (weight == 0) {\n        LOG.debug(\"Managed memory consumer weight for {} is configured to 0. Jobs \" + \"containing this type of managed memory consumers may \" + \"fail due to not being able to allocate managed memory.\",useCase);\n      }\n      effectiveWeights.put(useCase,weight);\n    }\n  }\n  if (!findWeight) {\n    LOG.debug(\"Managed memory consumer weight for {} is not configured. Jobs containing \" + \"this type of managed memory consumers may fail due to not being \" + \"able to allocate managed memory.\",useCase);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1941,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<ManagedMemoryUseCase,List<String>> entry : USE_CASE_CONSUMER_NAMES.entrySet()) {\n  final ManagedMemoryUseCase useCase=entry.getKey();\n  final Iterator<String> nameIter=entry.getValue().iterator();\n  boolean findWeight=false;\n  while (!findWeight && nameIter.hasNext()) {\n    final String name=nameIter.next();\n    final String weightStr=configuredWeights.get(name);\n    if (weightStr != null) {\n      final int weight=Integer.parseInt(weightStr);\n      findWeight=true;\n      if (weight < 0) {\n        throw new IllegalConfigurationException(String.format(\"Managed memory weight should not be negative. Configured \" + \"weight for %s is %d.\",useCase,weight));\n      }\n      if (weight == 0) {\n        LOG.debug(\"Managed memory consumer weight for {} is configured to 0. Jobs \" + \"containing this type of managed memory consumers may \" + \"fail due to not being able to allocate managed memory.\",useCase);\n      }\n      effectiveWeights.put(useCase,weight);\n    }\n  }\n  if (!findWeight) {\n    LOG.debug(\"Managed memory consumer weight for {} is not configured. Jobs containing \" + \"this type of managed memory consumers may fail due to not being \" + \"able to allocate managed memory.\",useCase);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 142,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2211,
        "startLineNumber" : 102,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,String> configuredWeights=config.get(TaskManagerOptions.MANAGED_MEMORY_CONSUMER_WEIGHTS);\n  final Map<ManagedMemoryUseCase,Integer> effectiveWeights=new HashMap<>();\n  for (  Map.Entry<ManagedMemoryUseCase,List<String>> entry : USE_CASE_CONSUMER_NAMES.entrySet()) {\n    final ManagedMemoryUseCase useCase=entry.getKey();\n    final Iterator<String> nameIter=entry.getValue().iterator();\n    boolean findWeight=false;\n    while (!findWeight && nameIter.hasNext()) {\n      final String name=nameIter.next();\n      final String weightStr=configuredWeights.get(name);\n      if (weightStr != null) {\n        final int weight=Integer.parseInt(weightStr);\n        findWeight=true;\n        if (weight < 0) {\n          throw new IllegalConfigurationException(String.format(\"Managed memory weight should not be negative. Configured \" + \"weight for %s is %d.\",useCase,weight));\n        }\n        if (weight == 0) {\n          LOG.debug(\"Managed memory consumer weight for {} is configured to 0. Jobs \" + \"containing this type of managed memory consumers may \" + \"fail due to not being able to allocate managed memory.\",useCase);\n        }\n        effectiveWeights.put(useCase,weight);\n      }\n    }\n    if (!findWeight) {\n      LOG.debug(\"Managed memory consumer weight for {} is not configured. Jobs containing \" + \"this type of managed memory consumers may fail due to not being \" + \"able to allocate managed memory.\",useCase);\n    }\n  }\n  return effectiveWeights;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@VisibleForTesting static Map<ManagedMemoryUseCase,Integer> getManagedMemoryUseCaseWeightsFromConfig(Configuration config){\n  final Map<String,String> configuredWeights=config.get(TaskManagerOptions.MANAGED_MEMORY_CONSUMER_WEIGHTS);\n  final Map<ManagedMemoryUseCase,Integer> effectiveWeights=new HashMap<>();\n  for (  Map.Entry<ManagedMemoryUseCase,List<String>> entry : USE_CASE_CONSUMER_NAMES.entrySet()) {\n    final ManagedMemoryUseCase useCase=entry.getKey();\n    final Iterator<String> nameIter=entry.getValue().iterator();\n    boolean findWeight=false;\n    while (!findWeight && nameIter.hasNext()) {\n      final String name=nameIter.next();\n      final String weightStr=configuredWeights.get(name);\n      if (weightStr != null) {\n        final int weight=Integer.parseInt(weightStr);\n        findWeight=true;\n        if (weight < 0) {\n          throw new IllegalConfigurationException(String.format(\"Managed memory weight should not be negative. Configured \" + \"weight for %s is %d.\",useCase,weight));\n        }\n        if (weight == 0) {\n          LOG.debug(\"Managed memory consumer weight for {} is configured to 0. Jobs \" + \"containing this type of managed memory consumers may \" + \"fail due to not being able to allocate managed memory.\",useCase);\n        }\n        effectiveWeights.put(useCase,weight);\n      }\n    }\n    if (!findWeight) {\n      LOG.debug(\"Managed memory consumer weight for {} is not configured. Jobs containing \" + \"this type of managed memory consumers may fail due to not being \" + \"able to allocate managed memory.\",useCase);\n    }\n  }\n  return effectiveWeights;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 39
      },
      "nodeContext" : "boolean findWeight=false;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 112,
    "startColumnNumber" : 33,
    "endLineNumber" : 112,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}