{
  "id" : 74,
  "expression" : "entry.getValue()",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 245,
      "startColumnNumber" : 64,
      "endLineNumber" : 245,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 245,
        "startColumnNumber" : 64,
        "endLineNumber" : 245,
        "endColumnNumber" : 92
      },
      "nodeContext" : "entry.getValue().targetLevel",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 125
      },
      "nodeContext" : "filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 126
      },
      "nodeContext" : "filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 243,
        "startColumnNumber" : 76,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n  filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.CleanupFilterConfig"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 245,
      "startColumnNumber" : 94,
      "endLineNumber" : 245,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 245,
        "startColumnNumber" : 94,
        "endLineNumber" : 245,
        "endColumnNumber" : 123
      },
      "nodeContext" : "entry.getValue().ifStartsWith",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 125
      },
      "nodeContext" : "filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 126
      },
      "nodeContext" : "filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 243,
        "startColumnNumber" : 76,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n  filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 245,
        "startColumnNumber" : 20,
        "endLineNumber" : 245,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.CleanupFilterConfig"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 272,
      "startColumnNumber" : 16,
      "endLineNumber" : 272,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 272,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 38
      },
      "nodeContext" : "entry.getValue().level",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 272,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 84
      },
      "nodeContext" : "entry.getValue().level=InheritableLevel.of(minLogLevel.toString())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 272,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 85
      },
      "nodeContext" : "entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 268,
        "startColumnNumber" : 62,
        "endLineNumber" : 273,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n  entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 268,
        "startColumnNumber" : 12,
        "endLineNumber" : 273,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (logLevel.intValue() < minLogLevel.intValue()) {\n  log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n  entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 262,
        "startColumnNumber" : 78,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String categoryName=entry.getKey();\n  final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n  final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n  if (logLevel.intValue() < minLogLevel.intValue()) {\n    log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n    entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n  final String categoryName=entry.getKey();\n  final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n  final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n  if (logLevel.intValue() < minLogLevel.intValue()) {\n    log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n    entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 272,
        "startColumnNumber" : 16,
        "endLineNumber" : 272,
        "endColumnNumber" : 85
      },
      "nodeContext" : "entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.CategoryConfig"
  }, {
    "nodeContext" : "entry.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 279,
      "startColumnNumber" : 50,
      "endLineNumber" : 279,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 279,
        "startColumnNumber" : 33,
        "endLineNumber" : 279,
        "endColumnNumber" : 66
      },
      "nodeContext" : "categoryConfig=entry.getValue()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 279,
        "startColumnNumber" : 12,
        "endLineNumber" : 279,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final CategoryConfig categoryConfig=entry.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 276,
        "startColumnNumber" : 78,
        "endLineNumber" : 287,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String name=entry.getKey();\n  final Logger categoryLogger=logContext.getLogger(name);\n  final CategoryConfig categoryConfig=entry.getValue();\n  if (!categoryConfig.level.isInherited()) {\n    categoryLogger.setLevel(categoryConfig.level.getLevel());\n  }\n  categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n  if (categoryConfig.handlers.isPresent()) {\n    addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 667,
        "startLineNumber" : 276,
        "startColumnNumber" : 8,
        "endLineNumber" : 287,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n  final String name=entry.getKey();\n  final Logger categoryLogger=logContext.getLogger(name);\n  final CategoryConfig categoryConfig=entry.getValue();\n  if (!categoryConfig.level.isInherited()) {\n    categoryLogger.setLevel(categoryConfig.level.getLevel());\n  }\n  categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n  if (categoryConfig.handlers.isPresent()) {\n    addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 232,
        "startColumnNumber" : 71,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 231,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void initializeBuildTimeLogging(LogConfig config,LogBuildTimeConfig buildConfig,ConsoleRuntimeConfig consoleConfig,LaunchMode launchMode){\n  final Map<String,CategoryConfig> categories=config.categories;\n  final LogContext logContext=LogContext.getLogContext();\n  final Logger rootLogger=logContext.getLogger(\"\");\n  rootLogger.setLevel(config.level);\n  ErrorManager errorManager=new OnlyOnceErrorManager();\n  final Map<String,CleanupFilterConfig> filters=config.filters;\n  List<LogCleanupFilterElement> filterElements=new ArrayList<>(filters.size());\n  for (  Entry<String,CleanupFilterConfig> entry : filters.entrySet()) {\n    filterElements.add(new LogCleanupFilterElement(entry.getKey(),entry.getValue().targetLevel,entry.getValue().ifStartsWith));\n  }\n  LogCleanupFilter logCleanupFilter=new LogCleanupFilter(filterElements);\n  final ArrayList<Handler> handlers=new ArrayList<>(3);\n  if (config.console.enable) {\n    final Handler consoleHandler=configureConsoleHandler(config.console,consoleConfig,errorManager,logCleanupFilter,Collections.emptyList(),new RuntimeValue<>(Optional.empty()),launchMode);\n    errorManager=consoleHandler.getErrorManager();\n    handlers.add(consoleHandler);\n  }\n  Map<String,Handler> namedHandlers=createNamedHandlers(config,consoleConfig,Collections.emptyList(),errorManager,logCleanupFilter,launchMode);\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String categoryName=entry.getKey();\n    final Level logLevel=getLogLevel(categoryName,categories,CategoryConfig::getLevel,buildConfig.minLevel);\n    final Level minLogLevel=getLogLevel(categoryName,buildConfig.categories,CategoryBuildTimeConfig::getMinLevel,buildConfig.minLevel);\n    if (logLevel.intValue() < minLogLevel.intValue()) {\n      log.warnf(\"Log level %s for category '%s' set below minimum logging level %s, promoting it to %s\",logLevel,entry.getKey(),minLogLevel,minLogLevel);\n      entry.getValue().level=InheritableLevel.of(minLogLevel.toString());\n    }\n  }\n  for (  Map.Entry<String,CategoryConfig> entry : categories.entrySet()) {\n    final String name=entry.getKey();\n    final Logger categoryLogger=logContext.getLogger(name);\n    final CategoryConfig categoryConfig=entry.getValue();\n    if (!categoryConfig.level.isInherited()) {\n      categoryLogger.setLevel(categoryConfig.level.getLevel());\n    }\n    categoryLogger.setUseParentHandlers(categoryConfig.useParentHandlers);\n    if (categoryConfig.handlers.isPresent()) {\n      addNamedHandlersToCategory(categoryConfig,namedHandlers,categoryLogger,errorManager);\n    }\n  }\n  InitialConfigurator.DELAYED_HANDLER.setAutoFlush(false);\n  InitialConfigurator.DELAYED_HANDLER.setBuildTimeHandlers(handlers.toArray(EmbeddedConfigurator.NO_HANDLERS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 279,
        "startColumnNumber" : 12,
        "endLineNumber" : 279,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final CategoryConfig categoryConfig=entry.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.quarkus.runtime.logging.CategoryConfig"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 245,
    "startColumnNumber" : 64,
    "endLineNumber" : 245,
    "endColumnNumber" : 80
  }, {
    "charLength" : 16,
    "startLineNumber" : 245,
    "startColumnNumber" : 94,
    "endLineNumber" : 245,
    "endColumnNumber" : 110
  }, {
    "charLength" : 16,
    "startLineNumber" : 272,
    "startColumnNumber" : 16,
    "endLineNumber" : 272,
    "endColumnNumber" : 32
  }, {
    "charLength" : 16,
    "startLineNumber" : 279,
    "startColumnNumber" : 50,
    "endLineNumber" : 279,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}